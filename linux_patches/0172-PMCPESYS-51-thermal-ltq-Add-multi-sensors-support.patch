From bf7d8792da6ef0a21237ac701452e8b5be15ae75 Mon Sep 17 00:00:00 2001
From: Waldemar Rymarkiewicz <waldemarx.rymarkiewicz@intel.com>
Date: Mon, 16 Jul 2018 13:52:01 +0200
Subject: [PATCH] PMCPESYS-51: thermal: ltq: Add multi-sensors support

Register each sensor cell which is part of a single sensors node (IC) to
the thermal framework. Each sensor has its own private structure that is
used by sensor callbacks.

Signed-off-by: Waldemar Rymarkiewicz <waldemarx.rymarkiewicz@intel.com>
---
 drivers/thermal/ltq_thermal.c | 68 +++++++++++++++++++++++++------------------
 1 file changed, 40 insertions(+), 28 deletions(-)

diff --git a/drivers/thermal/ltq_thermal.c b/drivers/thermal/ltq_thermal.c
index 5f1849130b87..8b71f4193057 100644
--- a/drivers/thermal/ltq_thermal.c
+++ b/drivers/thermal/ltq_thermal.c
@@ -165,18 +165,18 @@ static struct ltq_thermal_tsens_data ltq_grx500_data = {
 
 static int ltq_thermal_get_temp(void *data, int *temp)
 {
-	struct ltq_thermal *priv = data;
+	struct ltq_thermal_sensor *sensor = data;
 
-	if (!priv)
+	if (!sensor)
 		return -EINVAL;
 
-	if (!priv->emul_temp)
-		*temp = priv->tdata->get_temp(priv);
+	if (!sensor->emul_temp)
+		*temp = sensor->pdata->get_temp(sensor->drvdata);
 	else
-		*temp = priv->emul_temp;
+		*temp = sensor->emul_temp;
 
-	priv->last_temp = priv->temp;
-	priv->temp = *temp;
+	sensor->last_temp = sensor->temp;
+	sensor->temp = *temp;
 
 	return 0;
 }
@@ -184,22 +184,22 @@ static int ltq_thermal_get_temp(void *data, int *temp)
 static int ltq_thermal_get_trend(void *data, int trip,
 				 enum thermal_trend *trend)
 {
-	struct ltq_thermal *priv = data;
+	struct ltq_thermal_sensor *sensor = data;
 	int trip_temp, trip_hyst, temp, last_temp;
 	const struct thermal_trip *trips;
 
-	if (!priv || !priv->tzd)
+	if (!sensor || !sensor->tzd)
 		return -EINVAL;
 
-	trips = of_thermal_get_trip_points(priv->tzd);
+	trips = of_thermal_get_trip_points(sensor->tzd);
 	if (!trips)
 		return -EINVAL;
 
-	if (!of_thermal_is_trip_valid(priv->tzd, trip))
+	if (!of_thermal_is_trip_valid(sensor->tzd, trip))
 		return -EINVAL;
 
-	temp = priv->temp;
-	last_temp = priv->last_temp;
+	temp = sensor->temp;
+	last_temp = sensor->last_temp;
 
 	trip_temp = trips[trip].temperature;
 	trip_hyst = trips[trip].hysteresis;
@@ -215,12 +215,12 @@ static int ltq_thermal_get_trend(void *data, int trip,
 }
 static int ltq_thermal_set_emul_temp(void *data, int temp)
 {
-	struct ltq_thermal *priv = data;
+	struct ltq_thermal_sensor *sensor = data;
 
-	if (!priv || !priv->tzd)
+	if (!sensor || !sensor->tzd)
 		return -EINVAL;
 
-	priv->emul_temp = temp;
+	sensor->emul_temp = temp;
 
 	return 0;
 }
@@ -244,6 +244,9 @@ static int ltq_thermal_probe(struct platform_device *pdev)
 
 	struct ltq_thermal *priv;
 	struct device_node *node = pdev->dev.of_node;
+	struct ltq_thermal_tsens_data *pdata =
+		of_device_get_match_data(&pdev->dev);
+	int i;
 
 	dev_dbg(&pdev->dev, "%s\n", __func__);
 
@@ -251,9 +254,6 @@ static int ltq_thermal_probe(struct platform_device *pdev)
 	if (!priv)
 		return -ENOMEM;
 
-	priv->tdata = (struct ltq_thermal_tsens_data *)
-			of_device_get_match_data(&pdev->dev);
-
 	priv->dev = &pdev->dev;
 	platform_set_drvdata(pdev, priv);
 
@@ -263,21 +263,33 @@ static int ltq_thermal_probe(struct platform_device *pdev)
 		return PTR_ERR(priv->chiptop);
 	}
 
-	priv->count = priv->tdata->sensors_count;
+	priv->count = pdata->sensors_count;
 	priv->sensors = devm_kzalloc(&pdev->dev, priv->count *
 				     sizeof(struct ltq_thermal_sensor),
 				     GFP_KERNEL);
 	if (!priv->sensors)
 		return -ENOMEM;
 
-	/* Init sensor */
-	priv->tdata->init(pdev, priv);
-
-	priv->tzd = devm_thermal_zone_of_sensor_register(&pdev->dev, 0, priv,
-							 &ops);
-	if (IS_ERR(priv->tzd)) {
-		dev_err(&pdev->dev, "Failed to register thermal zone device\n");
-		return PTR_ERR(priv->tzd);
+	for (i = 0; i < priv->count; i++) {
+		struct ltq_thermal_sensor *sensor = priv->sensors + i;
+
+		sensor->id = i;
+		sensor->drvdata = priv;
+		sensor->pdata = pdata;
+
+		/* Init sensor */
+		sensor->pdata->init(pdev, priv);
+
+		/* Register sensor */
+		sensor->tzd = devm_thermal_zone_of_sensor_register(&pdev->dev,
+								   i,
+								   sensor,
+								   &ops);
+		if (IS_ERR(sensor->tzd)) {
+			dev_err(&pdev->dev,
+				"Failed to register tzd for sensor id %d\n", i);
+			return PTR_ERR(sensor->tzd);
+		}
 	}
 
 	dev_dbg(&pdev->dev, "%s: tzd registered\n", __func__);
