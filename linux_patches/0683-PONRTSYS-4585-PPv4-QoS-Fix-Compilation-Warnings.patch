From 73e4bbf4b71039067a74299170703a498f762846 Mon Sep 17 00:00:00 2001
From: ofirbitt <ofir1.bitton@intel.com>
Date: Mon, 15 Jul 2019 16:25:53 +0300
Subject: [PATCH] PONRTSYS-4585: PPv4 QoS Fix Compilation Warnings

---
 .../net/ethernet/lantiq/ppv4/qos/pp_qos_debugfs.c  | 35 ++++++++++++++++------
 .../net/ethernet/lantiq/ppv4/qos/pp_qos_utils.c    | 21 +++++++++++--
 2 files changed, 45 insertions(+), 11 deletions(-)

diff --git a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_debugfs.c b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_debugfs.c
index ee5c8527ff91..60728bec2e62 100644
--- a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_debugfs.c
+++ b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_debugfs.c
@@ -324,10 +324,10 @@ static ssize_t qos_dbg_props(struct file *fp,
 			     u16 num_props,
 			     void *user_data)
 {
-	int rc;
+	int rc = 0;
 	unsigned int first_prop = 1;
-	uint8_t cmd[PP_QOS_DBG_MAX_INPUT];
-	uint8_t field[PP_QOS_DBG_MAX_INPUT];
+	uint8_t *cmd;
+	uint8_t *field;
 	struct platform_device *pdev;
 	struct pp_qos_drv_data *pdata;
 	struct pp_qos_dev *qdev;
@@ -348,11 +348,24 @@ static ssize_t qos_dbg_props(struct file *fp,
 		return -EINVAL;
 	}
 
+	cmd = kzalloc(PP_QOS_DBG_MAX_INPUT, GFP_KERNEL);
+	if (!cmd) {
+		QOS_LOG_ERR("Cannot allocate temp string\n");
+		return -ENOMEM;
+	}
+
+	field = kzalloc(PP_QOS_DBG_MAX_INPUT, GFP_KERNEL);
+	if (!field) {
+		QOS_LOG_ERR("Cannot allocate temp string\n");
+		kfree(cmd);
+		return -ENOMEM;
+	}
+
 	rc =  simple_write_to_buffer(cmd, PP_QOS_DBG_MAX_INPUT, pos,
 				     user_buffer, cnt);
 	if (rc < 0) {
 		dev_err(&pdev->dev, "Write failed with %d\n", rc);
-		return rc;
+		goto out;
 	}
 
 	cmd[rc] = '\0';
@@ -367,7 +380,7 @@ static ssize_t qos_dbg_props(struct file *fp,
 		pval = strchr(field, '=');
 		if (!pval) {
 			dev_err(&pdev->dev, "Wrong format for prop %s\n", tok);
-			return rc;
+			goto out;
 		}
 
 		*pval = '\0';
@@ -382,7 +395,7 @@ static ssize_t qos_dbg_props(struct file *fp,
 			    cbs->first_prop_cb(qdev, field, res, user_data,
 					       pdata->dbg.raw_config)) {
 				dev_err(&pdev->dev, "first_prop_cb failed\n");
-				return rc;
+				goto out;
 			}
 		}
 
@@ -413,23 +426,27 @@ static ssize_t qos_dbg_props(struct file *fp,
 						     props[i].field,
 						     *props[i].dest);
 				} else {
-					QOS_LOG_INFO("%-30s%#x\n",
+					QOS_LOG_INFO("%-30s%#lx\n",
 						     props[i].field,
 						     (ulong)(*props[i].pdest));
 				}
 			}
 
-			return rc;
+			goto out;
 		}
 
 		if (cbs && cbs->done_props_cb) {
 			if (cbs->done_props_cb(qdev, id, user_data)) {
 				dev_err(&pdev->dev, "done_props_cb failed\n");
-				return rc;
+				goto out;
 			}
 		}
 	}
 
+out:
+	kfree(cmd);
+	kfree(field);
+
 	return rc;
 }
 
diff --git a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_utils.c b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_utils.c
index cc988b2913c5..ff42405aded6 100644
--- a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_utils.c
+++ b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_utils.c
@@ -26,6 +26,7 @@
  */
 
 #include <linux/gcd.h>
+#include <linux/slab.h>
 #include "pp_qos_common.h"
 #include "pp_qos_fw.h"
 #include "pp_qos_utils.h"
@@ -2979,8 +2980,8 @@ void __dbg_dump_subtree(struct pp_qos_dev *qdev,
 {
 	u32 idx, tab_idx, n = 0;
 	u32 child_phy, node_id;
-	char tabs_str[PP_QOS_DBG_MAX_INPUT];
-	char indent_str[PP_QOS_DBG_MAX_INPUT];
+	char *tabs_str;
+	char *indent_str;
 	bool last_child;
 	struct qos_node *child;
 
@@ -2989,6 +2990,19 @@ void __dbg_dump_subtree(struct pp_qos_dev *qdev,
 		return;
 	}
 
+	tabs_str = kzalloc(PP_QOS_DBG_MAX_INPUT, GFP_KERNEL);
+	if (!tabs_str) {
+		QOS_LOG_ERR("Cannot allocate temp string\n");
+		return;
+	}
+
+	indent_str = kzalloc(PP_QOS_DBG_MAX_INPUT, GFP_KERNEL);
+	if (!indent_str) {
+		QOS_LOG_ERR("Cannot allocate temp string\n");
+		kfree(tabs_str);
+		return;
+	}
+
 	tabs_str[0] = '\0';
 	for (tab_idx = 0 ; tab_idx < depth ; tab_idx++)
 		n += snprintf(tabs_str + n, PP_QOS_DBG_MAX_INPUT - n, "|\t");
@@ -3017,6 +3031,9 @@ void __dbg_dump_subtree(struct pp_qos_dev *qdev,
 				   child->data.queue.rlm);
 		}
 	}
+
+	kfree(indent_str);
+	kfree(tabs_str);
 }
 
 void qos_dbg_tree_show(struct pp_qos_dev *qdev, struct seq_file *s)
