From 663860cf75d2e672a9d0b4dfe307126e0a5d0eb6 Mon Sep 17 00:00:00 2001
From: moinakde <moinak.debnath@intel.com>
Date: Fri, 7 Dec 2018 13:12:03 +0530
Subject: [PATCH] UGW_SW-32494: double tab indentation fix

---
 drivers/net/ethernet/lantiq/ppa/ppa_hook.c | 56 +++++++++++++++---------------
 1 file changed, 28 insertions(+), 28 deletions(-)

diff --git a/drivers/net/ethernet/lantiq/ppa/ppa_hook.c b/drivers/net/ethernet/lantiq/ppa/ppa_hook.c
index fe6f09a05982..f26af816e1c3 100644
--- a/drivers/net/ethernet/lantiq/ppa/ppa_hook.c
+++ b/drivers/net/ethernet/lantiq/ppa/ppa_hook.c
@@ -695,46 +695,46 @@ static unsigned int ppa_postrt_hook_fn(void *priv,
 		struct sk_buff *skb,
 		const struct nf_hook_state *state)
 {
-		struct nf_conn *ct = NULL;
-		enum ip_conntrack_info ctinfo;
-		uint32_t flags;
-		/* Post routing hook gets invoked twice for IPSec Path in new PPA
-		hook mechanism (similar to netfilter). So in the first call
-		we skip the learning, since it will be a normal TCP/UDP session
-		packet which will eventually take the IPSec Path */
+	struct nf_conn *ct = NULL;
+	enum ip_conntrack_info ctinfo;
+	uint32_t flags;
+	/* Post routing hook gets invoked twice for IPSec Path in new PPA
+	hook mechanism (similar to netfilter). So in the first call
+	we skip the learning, since it will be a normal TCP/UDP session
+	packet which will eventually take the IPSec Path */
 #if IS_ENABLED(CONFIG_PPA_MPE_IP97)
-		struct iphdr *hdr = ip_hdr(skb);
-		if (hdr->protocol == IPPROTO_ESP || skb_dst(skb)->flags & DST_XFRM_TUNNEL || !ppa_hook_session_add_fn)
-			return NF_ACCEPT;
-		/* In the Second call (After Encryption) we skip again for
-		ESP type since we call this hook in xfrm_output_resume before
-		old conntrack reset, based on which the p_item was created */
+	struct iphdr *hdr = ip_hdr(skb);
+	if (hdr->protocol == IPPROTO_ESP || skb_dst(skb)->flags & DST_XFRM_TUNNEL || !ppa_hook_session_add_fn)
+		return NF_ACCEPT;
+	/* In the Second call (After Encryption) we skip again for
+	ESP type since we call this hook in xfrm_output_resume before
+	old conntrack reset, based on which the p_item was created */
 #else
-		if (skb_dst(skb)->flags & DST_XFRM_TUNNEL || !ppa_hook_session_add_fn)
-			return NF_ACCEPT;
+	if (skb_dst(skb)->flags & DST_XFRM_TUNNEL || !ppa_hook_session_add_fn)
+		return NF_ACCEPT;
 #endif
 
 #if IS_ENABLED(CONFIG_INTEL_IPQOS_ACCEL_DISABLE)
-		/* check for 13th bit in NFMARK set by IPQOS classifier */
-		/* If this bit is set, dont call PPA session add fn*/
-		bool accel_st = 0;
+	/* check for 13th bit in NFMARK set by IPQOS classifier */
+	/* If this bit is set, dont call PPA session add fn*/
+	bool accel_st = 0;
 #if IS_ENABLED(CONFIG_NETWORK_EXTMARK)
-		GET_DATA_FROM_MARK_OPT(skb->extmark, ACCELSEL_MASK,
-						 ACCELSEL_START_BIT_POS, accel_st);
+	GET_DATA_FROM_MARK_OPT(skb->extmark, ACCELSEL_MASK,
+					 ACCELSEL_START_BIT_POS, accel_st);
 #endif /* CONFIG_NETWORK_EXTMARK*/
-		if (accel_st != 0)
-			return NF_ACCEPT;
+	if (accel_st != 0)
+		return NF_ACCEPT;
 #endif /* CONFIG_INTEL_IPQOS_ACCEL_DISABLE*/
 
-		ct = nf_ct_get(skb, &ctinfo);
+	ct = nf_ct_get(skb, &ctinfo);
 
-		flags = 0; /* post routing */
-		flags |= CTINFO2DIR(ctinfo) == IP_CT_DIR_ORIGINAL ?
-			 PPA_F_SESSION_ORG_DIR : PPA_F_SESSION_REPLY_DIR;
+	flags = 0; /* post routing */
+	flags |= CTINFO2DIR(ctinfo) == IP_CT_DIR_ORIGINAL ?
+		 PPA_F_SESSION_ORG_DIR : PPA_F_SESSION_REPLY_DIR;
 
-		ppa_hook_session_add_fn(skb, ct, flags);
+	ppa_hook_session_add_fn(skb, ct, flags);
 
-		return NF_ACCEPT;
+	return NF_ACCEPT;
 }
 
 static unsigned int ppa_localin_hook_fn(void *priv,
