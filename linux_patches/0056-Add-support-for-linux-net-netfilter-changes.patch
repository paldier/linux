From f24b0ba46f41a2a7d9890ee5ab350a04e8c7c139 Mon Sep 17 00:00:00 2001
From: Hua Ma <hua.ma@linux.intel.com>
Date: Thu, 21 Jun 2018 17:38:11 +0800
Subject: [PATCH] Add support for linux net netfilter changes

---
 net/bridge/netfilter/Kconfig         |  20 ++++++
 net/bridge/netfilter/Makefile        |   2 +
 net/bridge/netfilter/ebt_extmark.c   | 116 +++++++++++++++++++++++++++++++++++
 net/bridge/netfilter/ebt_extmark_m.c | 104 +++++++++++++++++++++++++++++++
 net/netfilter/Kconfig                |  24 ++++++++
 net/netfilter/Makefile               |   1 +
 net/netfilter/nf_conntrack_core.c    |  56 ++++++++++++++++-
 net/netfilter/xt_extmark.c           |  84 +++++++++++++++++++++++++
 8 files changed, 404 insertions(+), 3 deletions(-)

diff --git a/net/bridge/netfilter/Kconfig b/net/bridge/netfilter/Kconfig
index 9cebf47ac840..d9ae8f0f5b1d 100644
--- a/net/bridge/netfilter/Kconfig
+++ b/net/bridge/netfilter/Kconfig
@@ -129,6 +129,16 @@ config BRIDGE_EBT_MARK
 
 	  To compile it as a module, choose M here.  If unsure, say N.
 
+config BRIDGE_EBT_EXTMARK
+	tristate "ebt: extmark filter support"
+	help
+	  This option adds the extmark match, which allows matching frames based on
+	  the 'extmark' value in the frame. This can be set by the extmark target.
+	  This value is the same as the one used in the iptables mark match and
+	  target.
+
+	  To compile it as a module, choose M here.  If unsure, say N.
+
 config BRIDGE_EBT_PKTTYPE
 	tristate "ebt: packet type filter support"
 	help
@@ -184,6 +194,16 @@ config BRIDGE_EBT_MARK_T
 
 	  To compile it as a module, choose M here.  If unsure, say N.
 
+config BRIDGE_EBT_EXTMARK_T
+	tristate "ebt: extmark target support"
+	help
+	  This option adds the extmark target, which allows marking frames by
+	  setting the 'extmark' value in the frame.
+	  This value is the same as the one used in the iptables mark match and
+	  target.
+
+	  To compile it as a module, choose M here.  If unsure, say N.
+
 config BRIDGE_EBT_REDIRECT
 	tristate "ebt: redirect target support"
 	help
diff --git a/net/bridge/netfilter/Makefile b/net/bridge/netfilter/Makefile
index be4d0cea78ce..ee8409253e73 100644
--- a/net/bridge/netfilter/Makefile
+++ b/net/bridge/netfilter/Makefile
@@ -24,6 +24,7 @@ obj-$(CONFIG_BRIDGE_EBT_IP) += ebt_ip.o
 obj-$(CONFIG_BRIDGE_EBT_IP6) += ebt_ip6.o
 obj-$(CONFIG_BRIDGE_EBT_LIMIT) += ebt_limit.o
 obj-$(CONFIG_BRIDGE_EBT_MARK) += ebt_mark_m.o
+obj-$(CONFIG_BRIDGE_EBT_EXTMARK) += ebt_extmark_m.o
 obj-$(CONFIG_BRIDGE_EBT_PKTTYPE) += ebt_pkttype.o
 obj-$(CONFIG_BRIDGE_EBT_STP) += ebt_stp.o
 obj-$(CONFIG_BRIDGE_EBT_VLAN) += ebt_vlan.o
@@ -31,6 +32,7 @@ obj-$(CONFIG_BRIDGE_EBT_VLAN) += ebt_vlan.o
 # targets
 obj-$(CONFIG_BRIDGE_EBT_ARPREPLY) += ebt_arpreply.o
 obj-$(CONFIG_BRIDGE_EBT_MARK_T) += ebt_mark.o
+obj-$(CONFIG_BRIDGE_EBT_EXTMARK_T) += ebt_extmark.o
 obj-$(CONFIG_BRIDGE_EBT_DNAT) += ebt_dnat.o
 obj-$(CONFIG_BRIDGE_EBT_REDIRECT) += ebt_redirect.o
 obj-$(CONFIG_BRIDGE_EBT_SNAT) += ebt_snat.o
diff --git a/net/bridge/netfilter/ebt_extmark.c b/net/bridge/netfilter/ebt_extmark.c
new file mode 100644
index 000000000000..bdbe0a1f1b6e
--- /dev/null
+++ b/net/bridge/netfilter/ebt_extmark.c
@@ -0,0 +1,116 @@
+/*
+ *  ebt_extmark
+ *
+ *	Authors:
+ *	Bart De Schuymer <bdschuym@pandora.be>
+ *
+ *  July, 2002
+ *
+ */
+
+/* This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+/* The extmark target can be used in any chain,
+ * I believe adding a mangle table just for extmarking is total overkill.
+ * Marking a frame doesn't really change anything in the frame anyway.
+ */
+
+#include <linux/module.h>
+#include <linux/netfilter/x_tables.h>
+#include <linux/netfilter_bridge/ebtables.h>
+#include <linux/netfilter_bridge/ebt_extmark_t.h>
+
+static unsigned int
+ebt_extmark_tg(struct sk_buff *skb, const struct xt_action_param *par)
+{
+	const struct ebt_extmark_t_info *info = par->targinfo;
+	int action = info->target & -16;
+
+	if (action == EXTMARK_SET_VALUE)
+		skb->extmark = info->extmark;
+	else if (action == EXTMARK_OR_VALUE)
+		skb->extmark |= info->extmark;
+	else if (action == EXTMARK_AND_VALUE)
+		skb->extmark &= info->extmark;
+	else
+		skb->extmark ^= info->extmark;
+
+	return info->target | ~EBT_VERDICT_BITS;
+}
+
+static int ebt_extmark_tg_check(const struct xt_tgchk_param *par)
+{
+	const struct ebt_extmark_t_info *info = par->targinfo;
+	int tmp;
+
+	tmp = info->target | ~EBT_VERDICT_BITS;
+	if (BASE_CHAIN && tmp == EBT_RETURN)
+		return -EINVAL;
+	if (tmp < -NUM_STANDARD_TARGETS || tmp >= 0)
+		return -EINVAL;
+	tmp = info->target & ~EBT_VERDICT_BITS;
+	if (tmp != EXTMARK_SET_VALUE && tmp != EXTMARK_OR_VALUE &&
+	    tmp != EXTMARK_AND_VALUE && tmp != EXTMARK_XOR_VALUE)
+		return -EINVAL;
+	return 0;
+}
+
+#ifdef CONFIG_COMPAT
+struct compat_ebt_extmark_t_info {
+	compat_ulong_t extmark;
+	compat_uint_t target;
+};
+
+static void extmark_tg_compat_from_user(void *dst, const void *src)
+{
+	const struct compat_ebt_extmark_t_info *user = src;
+	struct ebt_extmark_t_info *kern = dst;
+
+	kern->extmark = user->extmark;
+	kern->target = user->target;
+}
+
+static int extmark_tg_compat_to_user(void __user *dst, const void *src)
+{
+	struct compat_ebt_extmark_t_info __user *user = dst;
+	const struct ebt_extmark_t_info *kern = src;
+
+	if (put_user(kern->extmark, &user->extmark) ||
+	    put_user(kern->target, &user->target))
+		return -EFAULT;
+	return 0;
+}
+#endif
+
+static struct xt_target ebt_extmark_tg_reg __read_mostly = {
+	.name		= "extmark",
+	.revision	= 0,
+	.family		= NFPROTO_BRIDGE,
+	.target		= ebt_extmark_tg,
+	.checkentry	= ebt_extmark_tg_check,
+	.targetsize	= sizeof(struct ebt_extmark_t_info),
+#ifdef CONFIG_COMPAT
+	.compatsize	= sizeof(struct compat_ebt_extmark_t_info),
+	.compat_from_user = extmark_tg_compat_from_user,
+	.compat_to_user	= extmark_tg_compat_to_user,
+#endif
+	.me		= THIS_MODULE,
+};
+
+static int __init ebt_extmark_init(void)
+{
+	return xt_register_target(&ebt_extmark_tg_reg);
+}
+
+static void __exit ebt_extmark_fini(void)
+{
+	xt_unregister_target(&ebt_extmark_tg_reg);
+}
+
+module_init(ebt_extmark_init);
+module_exit(ebt_extmark_fini);
+MODULE_DESCRIPTION("Ebtables: Packet extmark modification");
+MODULE_LICENSE("GPL");
diff --git a/net/bridge/netfilter/ebt_extmark_m.c b/net/bridge/netfilter/ebt_extmark_m.c
new file mode 100644
index 000000000000..6e72891db8f6
--- /dev/null
+++ b/net/bridge/netfilter/ebt_extmark_m.c
@@ -0,0 +1,104 @@
+/*
+ *  ebt_extmark_m
+ *
+ *	Authors:
+ *	Bart De Schuymer <bdschuym@pandora.be>
+ *
+ *  July, 2002
+ *
+ */
+
+/* This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include <linux/module.h>
+#include <linux/netfilter/x_tables.h>
+#include <linux/netfilter_bridge/ebtables.h>
+#include <linux/netfilter_bridge/ebt_extmark_m.h>
+
+static bool
+ebt_extmark_mt(const struct sk_buff *skb, struct xt_action_param *par)
+{
+	const struct ebt_extmark_m_info *info = par->matchinfo;
+
+	if (info->bitmask & EBT_EXTMARK_OR)
+		return !!(skb->extmark & info->mask) ^ info->invert;
+	return ((skb->extmark & info->mask) == info->extmark) ^ info->invert;
+}
+
+static int ebt_extmark_mt_check(const struct xt_mtchk_param *par)
+{
+	const struct ebt_extmark_m_info *info = par->matchinfo;
+
+	if (info->bitmask & ~EBT_EXTMARK_MASK)
+		return -EINVAL;
+	if ((info->bitmask & EBT_EXTMARK_OR) &&
+	    (info->bitmask & EBT_EXTMARK_AND))
+		return -EINVAL;
+	if (!info->bitmask)
+		return -EINVAL;
+	return 0;
+}
+
+#ifdef CONFIG_COMPAT
+struct compat_ebt_extmark_m_info {
+	compat_ulong_t extmark, mask;
+	uint8_t invert, bitmask;
+};
+
+static void extmark_mt_compat_from_user(void *dst, const void *src)
+{
+	const struct compat_ebt_extmark_m_info *user = src;
+	struct ebt_extmark_m_info *kern = dst;
+
+	kern->extmark = user->extmark;
+	kern->mask = user->mask;
+	kern->invert = user->invert;
+	kern->bitmask = user->bitmask;
+}
+
+static int extmark_mt_compat_to_user(void __user *dst, const void *src)
+{
+	struct compat_ebt_extmark_m_info __user *user = dst;
+	const struct ebt_extmark_m_info *kern = src;
+
+	if (put_user(kern->extmark, &user->extmark) ||
+	    put_user(kern->mask, &user->mask) ||
+	    put_user(kern->invert, &user->invert) ||
+	    put_user(kern->bitmask, &user->bitmask))
+		return -EFAULT;
+	return 0;
+}
+#endif
+
+static struct xt_match ebt_extmark_mt_reg __read_mostly = {
+	.name		= "extmark_m",
+	.revision	= 0,
+	.family		= NFPROTO_BRIDGE,
+	.match		= ebt_extmark_mt,
+	.checkentry	= ebt_extmark_mt_check,
+	.matchsize	= sizeof(struct ebt_extmark_m_info),
+#ifdef CONFIG_COMPAT
+	.compatsize	= sizeof(struct compat_ebt_extmark_m_info),
+	.compat_from_user = extmark_mt_compat_from_user,
+	.compat_to_user	= extmark_mt_compat_to_user,
+#endif
+	.me		= THIS_MODULE,
+};
+
+static int __init ebt_extmark_m_init(void)
+{
+	return xt_register_match(&ebt_extmark_mt_reg);
+}
+
+static void __exit ebt_extmark_m_fini(void)
+{
+	xt_unregister_match(&ebt_extmark_mt_reg);
+}
+
+module_init(ebt_extmark_m_init);
+module_exit(ebt_extmark_m_fini);
+MODULE_DESCRIPTION("Ebtables: Packet extmark match");
+MODULE_LICENSE("GPL");
diff --git a/net/netfilter/Kconfig b/net/netfilter/Kconfig
index e8d56d9a4df2..330613bebedc 100644
--- a/net/netfilter/Kconfig
+++ b/net/netfilter/Kconfig
@@ -630,6 +630,12 @@ config NETFILTER_XT_MARK
 	Prior to routing, the nfmark can influence the routing method and can
 	also be used by other subsystems to change their behavior.
 
+config NETFILTER_XT_EXTMARK
+	tristate 'extended nfmark target and match support'
+	default m if NETFILTER_ADVANCED=n
+	---help---
+	This option adds the "EXTMARK" target and "extmark" match.
+
 config NETFILTER_XT_CONNMARK
 	tristate 'ctmark target and match support'
 	depends on NF_CONNTRACK
@@ -840,6 +846,15 @@ config NETFILTER_XT_NAT
 
 	To compile it as a module, choose M here. If unsure, say N.
 
+config NETFILTER_XT_TARGET_EXTMARK
+	tristate '"EXTMARK" target support'
+	depends on NETFILTER_ADVANCED
+	select NETFILTER_XT_EXTMARK
+	---help---
+	This is a backwards-compat option for the user's convenience
+	(e.g. when running oldconfig). It selects
+	CONFIG_NETFILTER_XT_EXTMARK (combined mark/MARK module).
+
 config NETFILTER_XT_TARGET_NETMAP
 	tristate '"NETMAP" target support'
 	depends on NF_NAT
@@ -1275,6 +1290,15 @@ config NETFILTER_XT_MATCH_MARK
 	(e.g. when running oldconfig). It selects
 	CONFIG_NETFILTER_XT_MARK (combined mark/MARK module).
 
+config NETFILTER_XT_MATCH_EXTMARK
+	tristate '"extmark" match support'
+	depends on NETFILTER_ADVANCED
+	select NETFILTER_XT_EXTMARK
+	---help---
+	This is a backwards-compat option for the user's convenience
+	(e.g. when running oldconfig). It selects
+	CONFIG_NETFILTER_XT_EXTMARK (combined mark/MARK module).
+
 config NETFILTER_XT_MATCH_MULTIPORT
 	tristate '"multiport" Multiple port match support'
 	depends on NETFILTER_ADVANCED
diff --git a/net/netfilter/Makefile b/net/netfilter/Makefile
index c23c3c84416f..738f77287210 100644
--- a/net/netfilter/Makefile
+++ b/net/netfilter/Makefile
@@ -106,6 +106,7 @@ obj-$(CONFIG_NETFILTER_XTABLES) += x_tables.o xt_tcpudp.o
 
 # combos
 obj-$(CONFIG_NETFILTER_XT_MARK) += xt_mark.o
+obj-$(CONFIG_NETFILTER_XT_EXTMARK) += xt_extmark.o
 obj-$(CONFIG_NETFILTER_XT_CONNMARK) += xt_connmark.o
 obj-$(CONFIG_NETFILTER_XT_SET) += xt_set.o
 obj-$(CONFIG_NETFILTER_XT_NAT) += xt_nat.o
diff --git a/net/netfilter/nf_conntrack_core.c b/net/netfilter/nf_conntrack_core.c
index 1bdae8f188e1..c4f4b7130a1b 100644
--- a/net/netfilter/nf_conntrack_core.c
+++ b/net/netfilter/nf_conntrack_core.c
@@ -59,6 +59,8 @@
 
 #define NF_CONNTRACK_VERSION	"0.5.0"
 
+#undef LTQ_IP_CONNTRACK_REPLACEMENT
+
 int (*nfnetlink_parse_nat_setup_hook)(struct nf_conn *ct,
 				      enum nf_nat_manip_type manip,
 				      const struct nlattr *attr) __read_mostly;
@@ -927,8 +929,13 @@ EXPORT_SYMBOL_GPL(nf_conntrack_tuple_taken);
 
 /* There's a small race here where we may free a just-assured
    connection.  Too bad: we're in trouble anyway. */
+#ifdef LTQ_IP_CONNTRACK_REPLACEMENT
+static unsigned int early_drop_list(struct net *net,
+				    struct hlist_nulls_head *head, int force)
+#else
 static unsigned int early_drop_list(struct net *net,
 				    struct hlist_nulls_head *head)
+#endif
 {
 	struct nf_conntrack_tuple_hash *h;
 	struct hlist_nulls_node *n;
@@ -943,10 +950,23 @@ static unsigned int early_drop_list(struct net *net,
 			continue;
 		}
 
+#ifdef LTQ_IP_CONNTRACK_REPLACEMENT
+		if (!force) {
+			if (test_bit(IPS_ASSURED_BIT, &tmp->status) ||
+				!net_eq(nf_ct_net(tmp), net) ||
+				nf_ct_is_dying(tmp))
+				continue;
+		} else {
+			if (!net_eq(nf_ct_net(tmp), net) ||
+				nf_ct_is_dying(tmp))
+				continue;
+		}
+#else
 		if (test_bit(IPS_ASSURED_BIT, &tmp->status) ||
 		    !net_eq(nf_ct_net(tmp), net) ||
 		    nf_ct_is_dying(tmp))
 			continue;
+#endif
 
 		if (!atomic_inc_not_zero(&tmp->ct_general.use))
 			continue;
@@ -958,10 +978,23 @@ static unsigned int early_drop_list(struct net *net,
 		 * already fired or someone else deleted it. Just drop ref
 		 * and move to next entry.
 		 */
+#ifdef LTQ_IP_CONNTRACK_REPLACEMENT
+		if (!force) {
+			if (net_eq(nf_ct_net(tmp), net) &&
+		   		nf_ct_is_confirmed(tmp) &&
+		   	 	nf_ct_delete(tmp, 0, 0))
+				drops++;
+		} else {
+			if (net_eq(nf_ct_net(tmp), net) &&
+		   	 	nf_ct_delete(tmp, 0, 0))
+				drops++;
+		}
+#else
 		if (net_eq(nf_ct_net(tmp), net) &&
 		    nf_ct_is_confirmed(tmp) &&
 		    nf_ct_delete(tmp, 0, 0))
 			drops++;
+#endif
 
 		nf_ct_put(tmp);
 	}
@@ -973,6 +1006,11 @@ static noinline int early_drop(struct net *net, unsigned int hash)
 {
 	unsigned int i, bucket;
 
+#ifdef LTQ_IP_CONNTRACK_REPLACEMENT
+	int recheck  = 1;
+redo:
+#endif
+
 	for (i = 0; i < NF_CT_EVICTION_RANGE; i++) {
 		struct hlist_nulls_head *ct_hash;
 		unsigned int hsize, drops;
@@ -984,7 +1022,14 @@ static noinline int early_drop(struct net *net, unsigned int hash)
 		else
 			bucket = (bucket + 1) % hsize;
 
-		drops = early_drop_list(net, &ct_hash[bucket]);
+#ifdef LTQ_IP_CONNTRACK_REPLACEMENT
+		if (!recheck)
+			drops = early_drop_list(net, &ct_hash[bucket], 1);
+		else
+			drops = early_drop_list(net, &ct_hash[bucket], 0);
+#else
+			drops = early_drop_list(net, &ct_hash[bucket]);
+#endif
 		rcu_read_unlock();
 
 		if (drops) {
@@ -992,7 +1037,12 @@ static noinline int early_drop(struct net *net, unsigned int hash)
 			return true;
 		}
 	}
-
+#ifdef LTQ_IP_CONNTRACK_REPLACEMENT
+	if (recheck) {
+		recheck = 0;
+		goto redo;
+	}
+#endif
 	return false;
 }
 
@@ -1103,7 +1153,7 @@ __nf_conntrack_alloc(struct net *net,
 	    unlikely(atomic_read(&net->ct.count) > nf_conntrack_max)) {
 		if (!early_drop(net, hash)) {
 			atomic_dec(&net->ct.count);
-			net_warn_ratelimited("nf_conntrack: table full, dropping packet\n");
+			/*net_warn_ratelimited("nf_conntrack: table full, dropping packet\n");*/
 			return ERR_PTR(-ENOMEM);
 		}
 	}
diff --git a/net/netfilter/xt_extmark.c b/net/netfilter/xt_extmark.c
new file mode 100644
index 000000000000..3f3b70eed344
--- /dev/null
+++ b/net/netfilter/xt_extmark.c
@@ -0,0 +1,84 @@
+/*
+ *	xt_extmark - Netfilter module to match NFEXTMARK value
+ *
+ *	(C) 1999-2001 Marc Boucher <marc@mbsi.ca>
+ *	Copyright © CC Computer Consultants GmbH, 2007 - 2008
+ *	Jan Engelhardt <jengelh@medozas.de>
+ *
+ *	This program is free software; you can redistribute it and/or modify
+ *	it under the terms of the GNU General Public License version 2 as
+ *	published by the Free Software Foundation.
+ */
+
+#include <linux/module.h>
+#include <linux/skbuff.h>
+
+#include <linux/netfilter/xt_extmark.h>
+#include <linux/netfilter/x_tables.h>
+
+MODULE_LICENSE("GPL");
+MODULE_AUTHOR("Marc Boucher <marc@mbsi.ca>");
+MODULE_DESCRIPTION("Xtables: packet extmark operations");
+MODULE_ALIAS("ipt_extmark");
+MODULE_ALIAS("ip6t_extmark");
+MODULE_ALIAS("ipt_EXTMARK");
+MODULE_ALIAS("ip6t_EXTMARK");
+
+static unsigned int
+extmark_tg(struct sk_buff *skb, const struct xt_action_param *par)
+{
+	const struct xt_extmark_tginfo2 *info = par->targinfo;
+
+	skb->extmark = (skb->extmark & ~info->mask) ^ info->extmark;
+	return XT_CONTINUE;
+}
+
+static bool
+extmark_mt(const struct sk_buff *skb, struct xt_action_param *par)
+{
+	const struct xt_extmark_mtinfo1 *info = par->matchinfo;
+
+	return ((skb->extmark & info->mask) == info->extmark) ^ info->invert;
+}
+
+static struct xt_target extmark_tg_reg __read_mostly = {
+	.name           = "EXTMARK",
+	.revision       = 2,
+	.family         = NFPROTO_UNSPEC,
+	.target         = extmark_tg,
+	.targetsize     = sizeof(struct xt_extmark_tginfo2),
+	.me             = THIS_MODULE,
+};
+
+static struct xt_match extmark_mt_reg __read_mostly = {
+	.name           = "extmark",
+	.revision       = 1,
+	.family         = NFPROTO_UNSPEC,
+	.match          = extmark_mt,
+	.matchsize      = sizeof(struct xt_extmark_mtinfo1),
+	.me             = THIS_MODULE,
+};
+
+static int __init extmark_mt_init(void)
+{
+	int ret;
+
+	ret = xt_register_target(&extmark_tg_reg);
+	if (ret < 0)
+		return ret;
+	ret = xt_register_match(&extmark_mt_reg);
+	if (ret < 0) {
+		xt_unregister_target(&extmark_tg_reg);
+		return ret;
+	}
+	return 0;
+}
+
+static void __exit extmark_mt_exit(void)
+{
+	xt_unregister_match(&extmark_mt_reg);
+	xt_unregister_target(&extmark_tg_reg);
+}
+
+module_init(extmark_mt_init);
+module_exit(extmark_mt_exit);
