From 3406d4d55314d9c40272af464203e0ce367b80ff Mon Sep 17 00:00:00 2001
From: Dinesh Sudham <dineshx.sudham@intel.com>
Date: Fri, 23 Aug 2019 11:06:29 +0800
Subject: [PATCH] DRVLIB_SW-2687: GSWIP: Hit Status update for MAC and
 Multicast Table

---
 .../net/ethernet/lantiq/switch-api/gsw_flow_core.c | 35 ++++++++++++++++++++++
 .../net/ethernet/lantiq/switch-api/gsw_flow_core.h |  2 ++
 drivers/net/ethernet/lantiq/switch-api/gsw_reg.h   | 12 ++++++++
 .../net/ethernet/lantiq/switch-api/gsw_swmcast.c   | 13 ++++++--
 include/net/switch_api/lantiq_gsw.h                |  7 +++++
 5 files changed, 67 insertions(+), 2 deletions(-)

diff --git a/drivers/net/ethernet/lantiq/switch-api/gsw_flow_core.c b/drivers/net/ethernet/lantiq/switch-api/gsw_flow_core.c
index 6a22d43ae352..92fd706dcada 100644
--- a/drivers/net/ethernet/lantiq/switch-api/gsw_flow_core.c
+++ b/drivers/net/ethernet/lantiq/switch-api/gsw_flow_core.c
@@ -2382,6 +2382,7 @@ static void get_gsw_hw_cap(void *cdev)
 {
 	ethsw_api_dev_t *gswdev = GSW_PDATA_GET(cdev);
 	u32 reg_val;
+	u16 hitstatus, u;
 
 	if (gswdev == NULL) {
 		pr_err("%s:%s:%d", __FILE__, __func__, __LINE__);
@@ -2599,6 +2600,13 @@ static void get_gsw_hw_cap(void *cdev)
 		gswdev->pce_tbl_info = gsw_pce_tbl_info_22;
 	}
 
+	if (IS_VRSN_31_OR_32(gswdev->gipver) && gswdev->num_of_bridge_port) {
+		hitstatus = gswdev->num_of_bridge_port - 1;
+		u = hitstatus / (sizeof(gswdev->hitstatus_mask) * 8);
+		gswdev->hitstatus_idx = u;
+		u = hitstatus % (sizeof(gswdev->hitstatus_mask) * 8);
+		gswdev->hitstatus_mask = BIT(u);
+	}
 	if (1) {
 		if (gswdev->gipver == LTQ_GSWIP_3_0)
 			pr_debug("\nGSWIP 3.0 HardWare Capability\n");
@@ -3097,6 +3105,13 @@ static GSW_return_t switch_core_init(void *cdev)
 				FDMA_PCTRL_EN_SIZE, 1);
 		}
 
+		/* Enable Mlticast Table Hit Status Update */
+		gsw_w32(cdev, PCE_GCTRL_0_MCSTHITEN_OFFSET, PCE_GCTRL_0_MCSTHITEN_SHIFT,
+			PCE_GCTRL_0_MCSTHITEN_SIZE, 1);
+		/* Enable MAC Table Hit Status Update */
+		gsw_w32(cdev, PCE_GCTRL_0_MACHITEN_OFFSET, PCE_GCTRL_0_MACHITEN_SHIFT,
+			PCE_GCTRL_0_MACHITEN_SIZE, 1);
+
 		/*PMAC default queue assignment and configuration*/
 		gsw_set_def_bypass_qmap(cdev, GSW_QOS_QMAP_SINGLE_MODE);
 		gsw_set_def_pce_qmap(cdev);
@@ -3637,6 +3652,16 @@ GSW_return_t GSW_MAC_TableEntryRead(void *cdev,
 					parm->nPortId = 0x80000000;
 				else
 					parm->nPortId = (u32)id;
+
+				if ((parm->nPortMap[gswdev->hitstatus_idx]
+				     & gswdev->hitstatus_mask)) {
+					parm->hitstatus = LTQ_TRUE;
+
+					tbl_prog.val[gswdev->hitstatus_idx + 2] &=
+						~gswdev->hitstatus_mask;
+					gsw_pce_table_key_write(cdev, &tbl_prog);
+				} else
+					parm->hitstatus = LTQ_FALSE;
 			} else {
 
 				int id = conv_id(tbl_prog.val[0]);
@@ -3800,6 +3825,16 @@ GSW_return_t GSW_MAC_TableEntryQuery(void *cdev,
 					parm->nPortId = 0x80000000;
 				else
 					parm->nPortId = (u32)id;
+
+				if ((parm->nPortMap[gswdev->hitstatus_idx]
+				     & gswdev->hitstatus_mask)) {
+					parm->hitstatus = LTQ_TRUE;
+
+					tbl_prog.val[gswdev->hitstatus_idx + 2] &=
+						~gswdev->hitstatus_mask;
+					gsw_pce_table_key_write(cdev, &tbl_prog);
+				} else
+					parm->hitstatus = LTQ_FALSE;
 			} else {
 				int id = conv_id(tbl_prog.val[0]);
 
diff --git a/drivers/net/ethernet/lantiq/switch-api/gsw_flow_core.h b/drivers/net/ethernet/lantiq/switch-api/gsw_flow_core.h
index 2667be02daf0..f26cf54cf97c 100644
--- a/drivers/net/ethernet/lantiq/switch-api/gsw_flow_core.h
+++ b/drivers/net/ethernet/lantiq/switch-api/gsw_flow_core.h
@@ -1003,6 +1003,8 @@ typedef struct {
 	u32 gsw_mode;				/* GSWIP Mode 0 "short_cut", 1 "full_qos" */
 	u32 dpu;			        /* DPU = 1, pmac G.INT config, DPU = 0, Non-G.INT config */
 	u32 num_of_global_rules;    /* Number of Global(Common) TFLOW Rules */
+	u16 hitstatus_idx;
+	u16 hitstatus_mask;
 
 #ifdef __KERNEL__
 	spinlock_t lock_pce;
diff --git a/drivers/net/ethernet/lantiq/switch-api/gsw_reg.h b/drivers/net/ethernet/lantiq/switch-api/gsw_reg.h
index 12a3733ba645..4d84a691f0c8 100644
--- a/drivers/net/ethernet/lantiq/switch-api/gsw_reg.h
+++ b/drivers/net/ethernet/lantiq/switch-api/gsw_reg.h
@@ -1689,6 +1689,18 @@
 #define PCE_GCTRL_0_MTFL_OFFSET	0x456
 #define PCE_GCTRL_0_MTFL_SHIFT	0
 #define PCE_GCTRL_0_MTFL_SIZE		1
+/* Note: This Bit Apllicable for GSWIP 3.1 and GSWIP 3.2*/
+/* Bit: 'MCSTHITEN' */
+/* Description: 'Multicast Table Hit Status' */
+#define PCE_GCTRL_0_MCSTHITEN_OFFSET	0x456
+#define PCE_GCTRL_0_MCSTHITEN_SHIFT		13
+#define PCE_GCTRL_0_MCSTHITEN_SIZE		1
+/* Note: This Bit Apllicable for GSWIP 3.1 and GSWIP 3.2*/
+/* Bit: 'MACHITEN' */
+/* Description: 'MAC Table Hit Status' */
+#define PCE_GCTRL_0_MACHITEN_OFFSET	0x456
+#define PCE_GCTRL_0_MACHITEN_SHIFT	14
+#define PCE_GCTRL_0_MACHITEN_SIZE	1
 /* --------------------------------------------------- */
 /* Register: 'PCE Global Control Register1' */
 /* Bit: 'PARSER_DBG' */
diff --git a/drivers/net/ethernet/lantiq/switch-api/gsw_swmcast.c b/drivers/net/ethernet/lantiq/switch-api/gsw_swmcast.c
index c626d322e770..4bf859e5d880 100644
--- a/drivers/net/ethernet/lantiq/switch-api/gsw_swmcast.c
+++ b/drivers/net/ethernet/lantiq/switch-api/gsw_swmcast.c
@@ -238,9 +238,18 @@ int gsw_get_swmcast_entry(void *cdev, GSW_multicastTableRead_t *parm, u32 loc)
 		/* Action */
 		parm->nSubIfId = ((pcetable.val[1] >> 3) & 0x1FFF);
 
-		for (i = 0; i < 16; i++) {
+		for (i = 0; i <= gswdev->hitstatus_idx; i++)
 			parm->nPortMap[i] = pcetable.val[2 + i];
-		}
+
+		if ((parm->nPortMap[gswdev->hitstatus_idx]
+		     & gswdev->hitstatus_mask)) {
+			parm->hitstatus = LTQ_TRUE;
+
+			pcetable.val[gswdev->hitstatus_idx + 2] &=
+				gswdev->hitstatus_mask;
+			gsw_pce_table_key_write(cdev, &pcetable);
+		} else
+			parm->hitstatus = LTQ_FALSE;
 
 		parm->eIPVersion = phtable[loc].ip_type;
 
diff --git a/include/net/switch_api/lantiq_gsw.h b/include/net/switch_api/lantiq_gsw.h
index d8cc23f23572..f24c0e118dad 100644
--- a/include/net/switch_api/lantiq_gsw.h
+++ b/include/net/switch_api/lantiq_gsw.h
@@ -143,6 +143,8 @@ typedef struct {
 
 	/** Associated Mac address -(GSWIP-3.2)*/
 	u8 nAssociatedMAC[GSW_MAC_ADDR_LEN];
+	/* MAC Table Hit Status Update (Supported in GSWip-3.1/3.2) */
+	ltq_bool_t hitstatus;
 } GSW_MAC_tableRead_t;
 
 /** \brief Search for a MAC address entry in the address table.
@@ -213,6 +215,9 @@ typedef struct {
 	ltq_bool_t bEntryChanged;
 	/** Associated Mac address -(GSWIP-3.2)*/
 	u8 nAssociatedMAC[GSW_MAC_ADDR_LEN];
+
+	/* MAC Table Hit Status Update (Supported in GSWip-3.1/3.2) */
+	ltq_bool_t hitstatus;
 } GSW_MAC_tableQuery_t;
 
 /** \brief MAC Table Entry to be added.
@@ -1698,6 +1703,8 @@ typedef struct {
 	    and 'GSW_IGMP_MEMBER_INCLUDE' are only supported
 	    if IGMPv3 is used. */
 	GSW_IGMP_MemberMode_t	eModeMember;
+	/* MULTICAST Table Hit Status Update (Supported in GSWip-3.1/3.2) */
+	ltq_bool_t hitstatus;
 } GSW_multicastTableRead_t;
 
 /*@}*/ /* GSW_IOCTL_MULTICAST */
