From 04d291d308808ff4a7e77ac437bb83bb33000bd7 Mon Sep 17 00:00:00 2001
From: thampan <joby.thampan@intel.com>
Date: Tue, 9 Oct 2018 23:36:45 +0800
Subject: [PATCH] GSWIP Shortcut Mode implemented, Xpcs Power Save mode for
 10mW implemented

---
 .../net/ethernet/lantiq/switch-api/gsw_defconf.c   | 27 ++++++++++++++++++----
 .../net/ethernet/lantiq/switch-api/gsw_flow_core.h |  1 +
 .../ethernet/lantiq/switch-api/gswip_dev/gsw_dev.c | 26 +++++++++++++++------
 drivers/net/ethernet/lantiq/xpcs/xpcs.c            | 16 ++++++++++++-
 drivers/net/ethernet/lantiq/xpcs/xpcs.h            |  3 +++
 include/net/switch_api/gsw_dev.h                   |  3 +++
 6 files changed, 63 insertions(+), 13 deletions(-)

diff --git a/drivers/net/ethernet/lantiq/switch-api/gsw_defconf.c b/drivers/net/ethernet/lantiq/switch-api/gsw_defconf.c
index e0edd87db18f..39394c486129 100644
--- a/drivers/net/ethernet/lantiq/switch-api/gsw_defconf.c
+++ b/drivers/net/ethernet/lantiq/switch-api/gsw_defconf.c
@@ -78,6 +78,7 @@ int gsw_set_def_pce_qmap(struct core_ops *ops)
 {
 	int i = 0, j = 0;
 	GSW_QoS_queuePort_t q_map;
+	ethsw_api_dev_t *gswdev = GSW_PDATA_GET(ops);
 	int num_of_elem =
 		(sizeof(gsw_pce_path) / sizeof(struct _gsw_pce_path));
 
@@ -87,12 +88,28 @@ int gsw_set_def_pce_qmap(struct core_ops *ops)
 			memset(&q_map, 0, sizeof(GSW_QoS_queuePort_t));
 			q_map.nPortId = gsw_pce_path[j].eg_lpid;
 
+			if (gswdev->gsw_mode == GSW_SHORTCUT_MODE) {
+				if (q_map.nPortId == LOG_3) {
+					q_map.nQueueId = 0;	/* Use Q0 */
+					q_map.nRedirectPortId = LOG_3;
+				} else if (q_map.nPortId == LOG_4) {
+					q_map.nQueueId = 8;	/* Use Q8 */
+					q_map.nRedirectPortId = LOG_4;
+				} else {
+					q_map.nQueueId = gsw_pce_path[j].qid;
+					q_map.nRedirectPortId =
+						gsw_pce_path[j].redir_lpid;
+				}
+			} else {
+				q_map.nQueueId = gsw_pce_path[j].qid;
+				q_map.nRedirectPortId =
+					gsw_pce_path[j].redir_lpid;
+			}
+
 			if (gsw_pce_path[j].ext != X)
 				q_map.bExtrationEnable = gsw_pce_path[j].ext;
 
 			q_map.nTrafficClassId = i;
-			q_map.nQueueId = gsw_pce_path[j].qid;
-			q_map.nRedirectPortId = gsw_pce_path[j].redir_lpid;
 
 			ops->gsw_qos_ops.QoS_QueuePortSet(ops, &q_map);
 		}
@@ -212,12 +229,12 @@ int gsw_misc_config(struct core_ops *ops)
 	GSW_register_t reg;
 	ethsw_api_dev_t *gswdev = GSW_PDATA_GET(ops);
 	int i = 0;
-	
-	/* Ignore Undersized frames and forward to CPU for the MAC ports 
+
+	/* Ignore Undersized frames and forward to CPU for the MAC ports
 	 * MAC logical ports start from 2
 	 */
 	for (i = 0; i < gswdev->pnum; i++) {
-		reg.nRegAddr = ((SDMA_PRIO_USIGN_OFFSET + (2*6)) + (i * 6));
+		reg.nRegAddr = ((SDMA_PRIO_USIGN_OFFSET + (2 * 6)) + (i * 6));
 		ops->gsw_common_ops.RegisterGet(ops, &reg);
 
 		reg.nData |= (1 << SDMA_PRIO_USIGN_SHIFT);
diff --git a/drivers/net/ethernet/lantiq/switch-api/gsw_flow_core.h b/drivers/net/ethernet/lantiq/switch-api/gsw_flow_core.h
index 460daeead0ef..acecda3b3155 100644
--- a/drivers/net/ethernet/lantiq/switch-api/gsw_flow_core.h
+++ b/drivers/net/ethernet/lantiq/switch-api/gsw_flow_core.h
@@ -965,6 +965,7 @@ typedef struct {
 	u32	gswex_sgmiibase; 		/*Base address GSWIP External switch-SGMII */
 
 	void *gsw_base;  			/*Base address GSWITCH */
+	u32 gsw_mode;			/* GSWIP Mode 0 "short_cut", 1 "full_qos" */
 
 #ifdef __KERNEL__
 	spinlock_t lock_pce;
diff --git a/drivers/net/ethernet/lantiq/switch-api/gswip_dev/gsw_dev.c b/drivers/net/ethernet/lantiq/switch-api/gswip_dev/gsw_dev.c
index a316d213d697..721f212adf52 100644
--- a/drivers/net/ethernet/lantiq/switch-api/gswip_dev/gsw_dev.c
+++ b/drivers/net/ethernet/lantiq/switch-api/gswip_dev/gsw_dev.c
@@ -285,14 +285,26 @@ static int gsw_add_switchdev(struct gsw_cell *gsw_dev_cell, u32 devid)
 
 	of_irq_to_resource_table(gsw_dev_cell->of_node, &irqres, 1);
 	switch_pdata->irq_num = irqres.start;
-	
-	if(devid == LTQ_FLOW_DEV_INT_R) {
-		of_property_read_u32(gsw_dev_cell->of_node,EXTERNAL_SWITCH_DEVID,&switch_pdata->ext_devid);
-		of_property_read_u32(gsw_dev_cell->of_node,EXTERNAL_SWITCH_PHYID,&switch_pdata->ext_phyid);
-		of_property_read_u32(gsw_dev_cell->of_node,EXTERNAL_SWITCH_BASEADDR,&switch_pdata->gswex_base);
-		of_property_read_u32(gsw_dev_cell->of_node,EXTERNAL_SWITCH_SGMIIBASEADDR,&switch_pdata->gswex_sgmiibase);
+
+
+	if (devid == LTQ_FLOW_DEV_INT_R) {
+		of_property_read_u32(gsw_dev_cell->of_node,
+				     EXTERNAL_SWITCH_DEVID,
+				     &switch_pdata->ext_devid);
+		of_property_read_u32(gsw_dev_cell->of_node,
+				     EXTERNAL_SWITCH_PHYID,
+				     &switch_pdata->ext_phyid);
+		of_property_read_u32(gsw_dev_cell->of_node,
+				     EXTERNAL_SWITCH_BASEADDR,
+				     &switch_pdata->gswex_base);
+		of_property_read_u32(gsw_dev_cell->of_node,
+				     EXTERNAL_SWITCH_SGMIIBASEADDR,
+				     &switch_pdata->gswex_sgmiibase);
 	}
 
+	of_property_read_u32(gsw_dev_cell->of_node, "gsw_mode",
+			     &switch_pdata->gsw_mode);
+
 #ifndef CONFIG_OF
 
 	if (gsw_dev[devid].prod_id == GRX500) {
@@ -335,7 +347,7 @@ static int update_gsw_dev_cell(struct device_node *np,
 	if (ret)
 		goto failed;
 
-	strncpy(gsw_dev_cells[idx].name, np->name, 
+	strncpy(gsw_dev_cells[idx].name, np->name,
 		(ARRAY_SIZE(gsw_dev_cells[idx].name) - 1));
 
 	gsw_dev_cells[idx].of_node = np;
diff --git a/drivers/net/ethernet/lantiq/xpcs/xpcs.c b/drivers/net/ethernet/lantiq/xpcs/xpcs.c
index b45ef8ce2add..ea0f81b246d1 100644
--- a/drivers/net/ethernet/lantiq/xpcs/xpcs.c
+++ b/drivers/net/ethernet/lantiq/xpcs/xpcs.c
@@ -30,6 +30,7 @@
 #define XPCS_CONN_TYPE "xpcs-conn"
 #define XPCS_MODE_NAME "xpcs-mode"
 #define XPCS_RESET_NAME "xpcs_reset"
+#define POWER_SAVE_MODE "power-save"
 
 static void xpcs_cl37_an(struct xpcs_prv_data *pdata);
 static void xpcs_cl73_an(struct xpcs_prv_data *pdata);
@@ -358,7 +359,7 @@ static void xpcs_cfg_table(struct xpcs_prv_data *pdata)
 {
 	u32 mplla_ctrl2 = 0;
 	u32 tx_eq0, tx_eq1;
-	u32 val = 0;
+	u32 val = 0, i = 0;
 
 	if (pdata->mpllb) {
 		XPCS_RGWR_VAL(pdata, PMA_MPLLB_C0, MPLLB_MULTIPLIER,
@@ -374,6 +375,12 @@ static void xpcs_cfg_table(struct xpcs_prv_data *pdata)
 			      pdata->mode_cfg->mplla_bw);
 	}
 
+	/* In Power save mode below setting will save 10mW of Power */
+	if (pdata->power_save) {
+		for (i = 0; i < LANE_MAX - 1; i++)
+			pdata->mode_cfg->tx_iboost[i] = 0x3;
+	}
+
 	switch (pdata->mode_cfg->lane) {
 	case LANE_4:
 		XPCS_RGWR_VAL(pdata, PMA_VCO_CAL_LD3, VCO_LD_VAL_3,
@@ -920,6 +927,13 @@ static int xpcs_parse_dts(struct platform_device *pdev,
 		return -EINVAL;
 	}
 
+	if (!device_property_read_u32(dev, POWER_SAVE_MODE, &prop)) {
+		(*pdata)->power_save = prop;
+	} else {
+		dev_err(dev, "Xpcs conn: cannot get property\n");
+		return -EINVAL;
+	}
+
 	platform_set_drvdata(pdev, (void *)(*pdata));
 
 	return XPCS_SUCCESS;
diff --git a/drivers/net/ethernet/lantiq/xpcs/xpcs.h b/drivers/net/ethernet/lantiq/xpcs/xpcs.h
index 22d097bea96a..e6b344ac8b70 100644
--- a/drivers/net/ethernet/lantiq/xpcs/xpcs.h
+++ b/drivers/net/ethernet/lantiq/xpcs/xpcs.h
@@ -675,6 +675,9 @@ struct xpcs_prv_data {
 	/* Connection Type SFP or PHY */
 	u32 conntype;
 
+	/* Power save mode 0 - Normal Mode, 1 - power save mode */
+	u8 power_save;
+
 	/* XPCS Mode Switching */
 	struct xpcs_mode_cfg *mode_cfg;
 };
diff --git a/include/net/switch_api/gsw_dev.h b/include/net/switch_api/gsw_dev.h
index 429282b3b935..bb431ecee14c 100644
--- a/include/net/switch_api/gsw_dev.h
+++ b/include/net/switch_api/gsw_dev.h
@@ -22,6 +22,9 @@
 #define MAC_DEV_NAME		"gsw_mac"
 #define CORE_DEV_NAME		"gsw_core"
 
+#define GSW_SHORTCUT_MODE	1
+#define GSW_FULLQOS_MODE	0
+
 /* This represents the GSWIP SubSystem block, one instance per SubSystem
  * For xrx500 GSWIP-L device ID is 0
  * For xrx500 GSWIP-R device ID is 1
