From 82ac0de68f4d3b3a976d9dfe53761346464ed1c2 Mon Sep 17 00:00:00 2001
From: ofirbitt <ofir1.bitton@intel.com>
Date: Thu, 29 Aug 2019 13:48:47 +0300
Subject: [PATCH] PONRTSYS-5044: PPv4 QoS - Remove command sleep and disable
 logger by default

---
 drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_fw.c      | 11 +++--------
 drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_main.c    | 18 +++++++++++++++++-
 drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_uc_defs.h |  5 +++++
 3 files changed, 25 insertions(+), 9 deletions(-)

diff --git a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_fw.c b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_fw.c
index 20b1c3ce1dc1..717d94ac9b24 100644
--- a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_fw.c
+++ b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_fw.c
@@ -2723,7 +2723,7 @@ static void post_process(struct pp_qos_dev *qdev, union driver_cmd *dcmd)
 }
 
 #define MAX_FW_CMD_SIZE sizeof(struct uc_qos_cmd_s)
-#define NUM_OF_POLLS	100000U
+#define NUM_OF_POLLS	1000000U
 
 /*
  * Go over all commands on pending queue until cmd id
@@ -2736,8 +2736,7 @@ static void post_process(struct pp_qos_dev *qdev, union driver_cmd *dcmd)
  * For each command wait until firmware signals
  * completion before continue to next command.
  * Completion status for each command is polled NUM_OF_POLLS
- * times. And the function sleeps between pools.
- * If command have not completed after all that polls -
+ * times. If command have not completed after all that polls
  * function asserts.
  *
  */
@@ -2771,11 +2770,7 @@ void check_completion(struct pp_qos_dev *qdev)
 		val = qos_u32_from_uc(*pos);
 		while ((val &
 			(UC_CMD_FLAG_UC_DONE | UC_CMD_FLAG_UC_ERROR)) == 0) {
-#ifdef __KERNEL__
-			usleep_range(100, 200);
-#else
-			usleep(200);
-#endif
+			cpu_relax();
 			val = qos_u32_from_uc(*pos);
 			++i;
 			if (i == NUM_OF_POLLS) {
diff --git a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_main.c b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_main.c
index d71074328bc5..17a77b5a2bb5 100644
--- a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_main.c
+++ b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_main.c
@@ -32,6 +32,8 @@
 #define PP_QOS_ENTER_FUNC()
 #define PP_QOS_EXIT_FUNC()
 
+static bool qos_fw_log;
+
 void update_cmd_id(struct driver_cmds *drvcmds)
 {
 	drvcmds->cmd_id++;
@@ -2351,6 +2353,16 @@ struct pp_qos_dev *pp_qos_dev_open(unsigned int id)
 	return NULL;
 }
 
+static int __init qos_fw_log_en(char *str)
+{
+	QOS_LOG_INFO("PPv4 QoS FW Logger is enabled\n");
+	qos_fw_log = true;
+
+	return 0;
+}
+
+early_param("qosFwLog", qos_fw_log_en);
+
 int pp_qos_dev_init(struct pp_qos_dev *qdev, struct pp_qos_init_param *conf)
 {
 	int rc;
@@ -2430,7 +2442,11 @@ int pp_qos_dev_init(struct pp_qos_dev *qdev, struct pp_qos_init_param *conf)
 		goto out;
 	}
 
-	create_init_logger_cmd(qdev, UC_LOGGER_LEVEL_INFO);
+	if (qos_fw_log)
+		create_init_logger_cmd(qdev, UC_LOGGER_LEVEL_INFO);
+	else
+		create_init_logger_cmd(qdev, UC_LOGGER_LEVEL_DEFAULT);
+
 	create_init_qos_cmd(qdev);
 	update_cmd_id(&qdev->drvcmds);
 	transmit_cmds(qdev);
diff --git a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_uc_defs.h b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_uc_defs.h
index 6106568a1eae..f4a85a52c5df 100644
--- a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_uc_defs.h
+++ b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_uc_defs.h
@@ -69,6 +69,11 @@ enum uc_logger_level {
 /* Below levels will be normally used from host. */
 /* Each level includes all higher priorities levels messages */
 
+//!< FATAL/ERROR level messages
+#define UC_LOGGER_LEVEL_DEFAULT         \
+	(UC_LOGGER_LEVEL_FATAL_ONLY |   \
+	 UC_LOGGER_LEVEL_ERROR_ONLY)
+
 //!< FATAL level messages
 #define UC_LOGGER_LEVEL_FATAL           \
 	(UC_LOGGER_LEVEL_FATAL_ONLY |   \
