From 9402f2b173ded2943712070e3d01382ade3e630e Mon Sep 17 00:00:00 2001
From: Peter Harliman Liem <peter.harliman.liem@intel.com>
Date: Tue, 18 Dec 2018 17:37:01 +0800
Subject: [PATCH] DRVLIB_SW-1073 - Add gphy rcal/rcm calculation

This is to add rcal/rcm calculation for SoC with fused
rcal value. List of changes:
- Add chipid & aspa_cfg chiptop (needed to read fused value
  and settings).
- Add cdb_fcsi register (needed for rcm calculation)
- Add rcal/rcm calculation routine
- Chip without fused rcal should not be affected as they will
  revert to default values
---
 drivers/net/ethernet/lantiq/xrx500_phy_fw.c | 223 ++++++++++++++++++++++++----
 1 file changed, 198 insertions(+), 25 deletions(-)

diff --git a/drivers/net/ethernet/lantiq/xrx500_phy_fw.c b/drivers/net/ethernet/lantiq/xrx500_phy_fw.c
index 755cc8d9700d..239f1dfeb2c7 100644
--- a/drivers/net/ethernet/lantiq/xrx500_phy_fw.c
+++ b/drivers/net/ethernet/lantiq/xrx500_phy_fw.c
@@ -28,8 +28,8 @@ struct prx300_reset_control {
 
 struct xway_gphy_data {
 	struct device *dev;
-	struct regmap *syscfg, *cgu_syscfg;
-	void __iomem *base;
+	struct regmap *syscfg, *cgu_syscfg, *chipid_syscfg, *aspa_syscfg;
+	void __iomem *base, *fcsi_base;
 
 	dma_addr_t dma_addr;
 
@@ -78,7 +78,15 @@ static u32 xrx500_gphy[] = {
 #define PRX300_GPHY_FCR 0x800
 #define PRX300_GPHY0_GPS0 0x804
 #define PRX300_GPHY0_GPS1 0x808
-/* GPHY CDB */
+/* ASPA CFG */
+#define PRX300_ASPA_CFG_CTRL 0x0
+#define PRX300_ASPA_BUS_BLOCK 0x8
+/* GPHY CDB FCSI */
+#define PRX300_GPHY_CDB_FCSI_PLL_CFG1 0x0
+#define PRX300_GPHY_CDB_FCSI_PLL_CFG2 0x4
+#define PRX300_GPHY_CDB_FCSI_PLL_RCMSTAT 0x28
+#define PRX300_GPHY_CDB_FCSI_PLL_RCMCFG 0x2c
+/* GPHY CDB PDI */
 #define PRX300_GPHY_CDB_PDI_PLL_CFG0 0x0
 #define PRX300_GPHY_CDB_PDI_PLL_CFG2 0x8
 #define PRX300_GPHY_CDB_PDI_PLL_MISC 0xc
@@ -91,12 +99,31 @@ static u32 xrx500_gphy[] = {
 #define PRX300_IFMUX_CFG 0x120
 #define PRX300_LAN_MUX_MASK 0x2
 #define PRX300_LAN_MUX_GPHY 0x0
+/* Chipid */
+#define PRX300_FUSE_REDUND_1 0x74
+/* RCM calculation */
+#define GPHYCDB_RCM_C 188
+#define GPHYCDB_RCM_D 1
+#define GPHYCDB_RCM_M 4110
+
+static u32 gsw_reg_r32(void __iomem *base, u32 reg_off)
+{
+	return __raw_readl(base + reg_off);
+}
 
 static void gsw_reg_w32(void __iomem *base, u32 val, u32 reg_off)
 {
 	__raw_writel(val, base + reg_off);
 }
 
+static void gsw_reg_w32_mask(void __iomem *base, u32 clear, u32 set,
+			     u32 reg_off)
+{
+	u32 val = gsw_reg_r32(base, reg_off);
+
+	gsw_reg_w32(base, (val & (~clear)) | set, reg_off);
+}
+
 /* xrx500 specific boot sequence */
 static int xrx500_gphy_boot(struct xway_gphy_data *priv)
 {
@@ -124,6 +151,20 @@ static int xrx500_dt_parse(struct xway_gphy_data *priv)
 	char phy_str[8];
 	int i;
 	struct xrx500_reset_control *rst = &priv->rst.xrx500;
+	struct resource *res;
+	struct platform_device *pdev = container_of(priv->dev,
+						    struct platform_device,
+						    dev);
+
+	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	if (!res) {
+		dev_err(priv->dev, "no resources\n");
+		return -ENODEV;
+	}
+
+	priv->base = devm_ioremap_resource(&pdev->dev, res);
+	if (!priv->base)
+		return -ENOMEM;
 
 	for (i = 0; i < XRX500_GPHY_NUM; i++) {
 		snprintf(phy_str, sizeof(phy_str), "phy%d", i);
@@ -139,6 +180,109 @@ static int xrx500_dt_parse(struct xway_gphy_data *priv)
 	return 0;
 }
 
+/* prx300 rcal/rc_count value calculation.
+ * Calculation routines are very much hardware specific,
+ * and derived from verification team recommendation.
+ */
+static u32 prx300_gphy_config_rcal_rcm(struct xway_gphy_data *priv)
+{
+	int rcal = 0x08, rc_count = 0x10;
+	int rc_count_pol_0 = 0, rc_count_pol_1 = 0, rc_count_avg;
+	u32 val;
+	int retry;
+
+	/* get rcal from fused register (upper 4-bits) */
+	regmap_read(priv->chipid_syscfg, PRX300_FUSE_REDUND_1,
+		    &val);
+	val = val >> 28;
+
+	/* no fused values, simply use default settings */
+	if (!val)
+		goto exit;
+
+	/* rcm calculation routine */
+
+	/* enable block access */
+	regmap_update_bits(priv->aspa_syscfg, PRX300_ASPA_CFG_CTRL,
+			   PRX300_ASPA_BUS_BLOCK, PRX300_ASPA_BUS_BLOCK);
+
+	/* configure rcm clock and FOUT0-3 enable bit */
+	gsw_reg_w32_mask(priv->fcsi_base, 0xF << 8, 0x6 << 8,
+			 PRX300_GPHY_CDB_FCSI_PLL_CFG2);
+	gsw_reg_w32_mask(priv->fcsi_base, 0xF << 2, 0x4 << 2,
+			 PRX300_GPHY_CDB_FCSI_PLL_CFG1);
+
+	/* get rc_count with polarity 0 */
+	gsw_reg_w32(priv->fcsi_base, 0x3, PRX300_GPHY_CDB_FCSI_PLL_RCMCFG);
+	usleep_range(1, 2);
+	gsw_reg_w32(priv->fcsi_base, 0x1, PRX300_GPHY_CDB_FCSI_PLL_RCMCFG);
+	usleep_range(1, 2);
+	gsw_reg_w32(priv->fcsi_base, 0x5, PRX300_GPHY_CDB_FCSI_PLL_RCMCFG);
+
+	retry = 10;
+	while (--retry) {
+		if (gsw_reg_r32(priv->fcsi_base,
+				PRX300_GPHY_CDB_FCSI_PLL_RCMSTAT) & 0x400)
+			break;
+		usleep_range(1, 2);
+	}
+	if (!retry) {
+		dev_err(priv->dev, "Timedout at rcal calculation\n");
+		goto exit;
+	}
+
+	rc_count_pol_0 = gsw_reg_r32(priv->fcsi_base,
+				     PRX300_GPHY_CDB_FCSI_PLL_RCMSTAT) & 0x3FF;
+
+	/* get rc_count with polarity 1 */
+	gsw_reg_w32(priv->fcsi_base, 0xb, PRX300_GPHY_CDB_FCSI_PLL_RCMCFG);
+	usleep_range(1, 2);
+	gsw_reg_w32(priv->fcsi_base, 0x1, PRX300_GPHY_CDB_FCSI_PLL_RCMCFG);
+	usleep_range(1, 2);
+	gsw_reg_w32(priv->fcsi_base, 0x5, PRX300_GPHY_CDB_FCSI_PLL_RCMCFG);
+
+	retry = 10;
+	while (--retry) {
+		if (gsw_reg_r32(priv->fcsi_base,
+				PRX300_GPHY_CDB_FCSI_PLL_RCMSTAT) & 0x400)
+			break;
+		usleep_range(1, 2);
+	}
+	if (!retry) {
+		dev_err(priv->dev, "Timedout at rcal calculation\n");
+		goto exit;
+	}
+
+	rc_count_pol_1 = gsw_reg_r32(priv->fcsi_base,
+				     PRX300_GPHY_CDB_FCSI_PLL_RCMSTAT) & 0x3FF;
+
+	/* Polarity swap tests: if one result is zero we skip averaging */
+	rc_count_avg = rc_count_pol_0 + rc_count_pol_1;
+	if (rc_count_pol_0 && rc_count_pol_1)
+		rc_count_avg = rc_count_avg / 2;
+
+	/* check extreme values */
+	if (rc_count_avg < GPHYCDB_RCM_C + GPHYCDB_RCM_D) {
+		rc_count = 0;
+	} else {
+		rc_count = GPHYCDB_RCM_M * (rc_count_avg - GPHYCDB_RCM_C -
+					    GPHYCDB_RCM_D);
+		rc_count = rc_count >> 15;
+		if (rc_count > 0x1f)
+			rc_count = 0x1f;
+	}
+
+	/* disable RCMCFG and disable PLLCFG1 */
+	gsw_reg_w32(priv->fcsi_base, 0x0, PRX300_GPHY_CDB_FCSI_PLL_RCMCFG);
+	gsw_reg_w32_mask(priv->fcsi_base, 0xF << 2, 0x0 << 2,
+			 PRX300_GPHY_CDB_FCSI_PLL_CFG1);
+
+exit:
+	dev_dbg(priv->dev, "rcal %x rc_count %x rccal 0x%x:0x%x\n",
+		rcal, rc_count, rc_count_pol_0, rc_count_pol_1);
+	return (rc_count << 4) | rcal;
+}
+
 /* prx300 specific boot sequence */
 static int prx300_gphy_boot(struct xway_gphy_data *priv)
 {
@@ -161,6 +305,15 @@ static int prx300_gphy_boot(struct xway_gphy_data *priv)
 	/* release CDB reset */
 	reset_control_deassert(rst->gphy_cdb);
 
+	/* Set divider and misc config, must be done before rcm calculation */
+	gsw_reg_w32(priv->base, (PRX300_PLL_FBDIV << 4) | PRX300_PLL_LOCK_RST,
+		    PRX300_GPHY_CDB_PDI_PLL_CFG0);
+	gsw_reg_w32(priv->base, (PRX300_PLL_REFDIV << 8),
+		    PRX300_GPHY_CDB_PDI_PLL_CFG2);
+	gsw_reg_w32(priv->base, (PRX300_GPHY_FORCE_LATCH << 13) |
+		    (PRX300_GPHY_CLEAR_STICKY << 14),
+		    PRX300_GPHY_CDB_PDI_PLL_MISC);
+
 	/* GPHY FW address */
 	regmap_update_bits(priv->cgu_syscfg, PRX300_GPHY_FCR, ~0,
 			   priv->dma_addr);
@@ -168,8 +321,8 @@ static int prx300_gphy_boot(struct xway_gphy_data *priv)
 	pin_strap_lo = 0x4000; /* base freq deviation */
 	pin_strap_lo |= 0x1f << 24; /* MDIO address */
 	pin_strap_lo |= 0x1 << 29; /* interrupt polarity */
-	pin_strap_hi = 0x8; /* RCAL */
-	pin_strap_hi |= 0x10 << 4; /* RC count */
+	pin_strap_hi = prx300_gphy_config_rcal_rcm(priv);
+
 	regmap_update_bits(priv->cgu_syscfg, PRX300_GPHY0_GPS0, ~0,
 			   pin_strap_lo);
 	regmap_update_bits(priv->cgu_syscfg, PRX300_GPHY0_GPS1, ~0,
@@ -182,15 +335,6 @@ static int prx300_gphy_boot(struct xway_gphy_data *priv)
 	/* GPHY Power on */
 	reset_control_deassert(rst->gphy_pwr_down);
 
-	/* Set divider and misc config */
-	gsw_reg_w32(priv->base, (PRX300_PLL_FBDIV << 4) | PRX300_PLL_LOCK_RST,
-		    PRX300_GPHY_CDB_PDI_PLL_CFG0);
-	gsw_reg_w32(priv->base, (PRX300_PLL_REFDIV << 8),
-		    PRX300_GPHY_CDB_PDI_PLL_CFG2);
-	gsw_reg_w32(priv->base, (PRX300_GPHY_FORCE_LATCH << 13) |
-		    (PRX300_GPHY_CLEAR_STICKY << 14),
-		    PRX300_GPHY_CDB_PDI_PLL_MISC);
-
 	/* delay to wait until firmware boots up */
 	msleep(100);
 
@@ -201,6 +345,30 @@ static int prx300_gphy_boot(struct xway_gphy_data *priv)
 static int prx300_dt_parse(struct xway_gphy_data *priv)
 {
 	struct prx300_reset_control *rst = &priv->rst.prx300;
+	struct resource *res;
+	struct platform_device *pdev = container_of(priv->dev,
+						    struct platform_device,
+						    dev);
+
+	res = platform_get_resource_byname(pdev, IORESOURCE_MEM,
+					   "gphy_cdb_pdi");
+	if (!res) {
+		dev_err(&pdev->dev, "no cdb_pdi resources\n");
+		return -ENODEV;
+	}
+	priv->base = devm_ioremap_resource(&pdev->dev, res);
+	if (!priv->base)
+		return -ENOMEM;
+
+	res = platform_get_resource_byname(pdev, IORESOURCE_MEM,
+					   "gphy_cdb_fcsi");
+	if (!res) {
+		dev_err(&pdev->dev, "no cdb_fcsi resources\n");
+		return -ENODEV;
+	}
+	priv->fcsi_base = devm_ioremap_resource(&pdev->dev, res);
+	if (!priv->fcsi_base)
+		return -ENOMEM;
 
 	/* get chiptop regmap */
 	priv->syscfg = syscon_regmap_lookup_by_phandle(priv->dev->of_node,
@@ -218,6 +386,22 @@ static int prx300_dt_parse(struct xway_gphy_data *priv)
 		return PTR_ERR(priv->cgu_syscfg);
 	}
 
+	/* get chipid regmap */
+	priv->chipid_syscfg = syscon_regmap_lookup_by_phandle(priv->dev->of_node,
+							      "intel,chipid-syscon");
+	if (IS_ERR(priv->chipid_syscfg)) {
+		dev_err(priv->dev, "No phandle for intel,chipid-syscon\n");
+		return PTR_ERR(priv->chipid_syscfg);
+	}
+
+	/* get aspa_cfg regmap */
+	priv->aspa_syscfg = syscon_regmap_lookup_by_phandle(priv->dev->of_node,
+							    "intel,aspa-syscon");
+	if (IS_ERR(priv->aspa_syscfg)) {
+		dev_err(priv->dev, "No phandle for intel,aspa-syscon\n");
+		return PTR_ERR(priv->aspa_syscfg);
+	}
+
 	rst->gphy = devm_reset_control_get(priv->dev, "gphy");
 	if (IS_ERR(rst->gphy)) {
 		dev_err(priv->dev, "fail to get gphy prop\n");
@@ -282,13 +466,6 @@ static int xway_phy_fw_probe(struct platform_device *pdev)
 {
 	int ret = 0;
 	struct xway_gphy_data *priv;
-	struct resource *res;
-
-	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
-	if (!res) {
-		dev_err(&pdev->dev, "no resources\n");
-		return -ENODEV;
-	}
 
 	priv = devm_kzalloc(&pdev->dev, sizeof(*priv), GFP_KERNEL);
 	if (!priv) {
@@ -296,10 +473,6 @@ static int xway_phy_fw_probe(struct platform_device *pdev)
 		return -ENOMEM;
 	}
 
-	priv->base = devm_ioremap_resource(&pdev->dev, res);
-	if (!priv->base)
-		return -ENOMEM;
-
 	priv->soc_data = of_device_get_match_data(&pdev->dev);
 	if (!priv->soc_data) {
 		dev_err(&pdev->dev, "Failed to find soc data!\n");
