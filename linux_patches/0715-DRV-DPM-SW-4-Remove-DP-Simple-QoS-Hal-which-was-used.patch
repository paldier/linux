From 738b771f04d4a4459fa7bf393a00f062e45fe70b Mon Sep 17 00:00:00 2001
From: thampan <joby.thampan@intel.com>
Date: Mon, 22 Jul 2019 13:59:49 +0800
Subject: [PATCH] DRV_DPM_SW-4: Remove DP Simple QoS Hal which was used for
 testing

---
 drivers/net/datapath/dpm/datapath_api.c          |   3 -
 drivers/net/datapath/dpm/gswip31/Kconfig         |  10 +-
 drivers/net/datapath/dpm/gswip31/datapath_misc.c |   3 -
 drivers/net/datapath/dpm/gswip31/datapath_ppv4.c | 496 +----------------------
 drivers/net/datapath/dpm/gswip31/datapath_ppv4.h |   9 -
 drivers/net/datapath/dpm/gswip32/datapath_misc.c |   3 -
 drivers/net/datapath/dpm/gswip32/datapath_ppv4.c | 264 +-----------
 drivers/net/datapath/dpm/gswip32/datapath_ppv4.h |   9 -
 8 files changed, 6 insertions(+), 791 deletions(-)

diff --git a/drivers/net/datapath/dpm/datapath_api.c b/drivers/net/datapath/dpm/datapath_api.c
index 30c04cd04bdb..e270a2389e15 100644
--- a/drivers/net/datapath/dpm/datapath_api.c
+++ b/drivers/net/datapath/dpm/datapath_api.c
@@ -2302,9 +2302,6 @@ int dp_basic_proc(void)
 	if (dp_init_ok) /*alredy init */
 		return 0;
 	register_notifier(0);
-#if IS_ENABLED(CONFIG_INTEL_DATAPATH_DUMMY_QOS_VIA_PRX300_TEST)
-	PR_INFO("\n\n--prx300_test to simulate SLIM QOS drv---\n\n\n");
-#endif /*CONFIG_INTEL_DATAPATH_DUMMY_QOS_VIA_PRX300_TEST*/
 	register_dp_cap(0);
 	if (request_dp(0)) /*register 1st dp instance */ {
 		PR_ERR("register_dp instance fail\n");
diff --git a/drivers/net/datapath/dpm/gswip31/Kconfig b/drivers/net/datapath/dpm/gswip31/Kconfig
index 207b5f63ac4c..8479919ed02e 100644
--- a/drivers/net/datapath/dpm/gswip31/Kconfig
+++ b/drivers/net/datapath/dpm/gswip31/Kconfig
@@ -16,16 +16,8 @@ config INTEL_DATAPATH_HAL_GSWIP31_MIB
 	---help---
 	  It is to aggregate GSWIP-L/R, TMU and driver's MIB counter
 
-config INTEL_DATAPATH_DUMMY_QOS
-	bool "datapath dummy QOS based on slim QOS driver or real QOS API with PRX300_test API"
-	depends on LTQ_PPV4_QOS_SLIM || (LTQ_PPV4_QOS || LTQ_PPV4)
-
-config INTEL_DATAPATH_DUMMY_QOS_VIA_PRX300_TEST
-	bool "datapath dummy QOS via ppv4 qos driver's PRX300_test api, like slim driver"
-	depends on (LTQ_PPV4_QOS || LTQ_PPV4) && !LTQ_PPV4_QOS_SLIM && INTEL_DATAPATH_DUMMY_QOS
-
 config INTEL_DATAPATH_QOS_HAL
 	bool "datapath QOS hal"
 	default y
-	depends on (LTQ_PPV4_QOS || LTQ_PPV4) && !INTEL_DATAPATH_DUMMY_QOS_VIA_PRX300_TEST
+	depends on (LTQ_PPV4_QOS || LTQ_PPV4)
 endif
diff --git a/drivers/net/datapath/dpm/gswip31/datapath_misc.c b/drivers/net/datapath/dpm/gswip31/datapath_misc.c
index b0f0c75ff3ce..926f9bacf6d7 100644
--- a/drivers/net/datapath/dpm/gswip31/datapath_misc.c
+++ b/drivers/net/datapath/dpm/gswip31/datapath_misc.c
@@ -501,9 +501,6 @@ int alloc_q_to_port(struct ppv4_q_sch_port *info, u32 flag)
 	q.qid = -1;
 	q.parent = port.node_id;
 	q.inst = inst;
-#if IS_ENABLED(CONFIG_INTEL_DATAPATH_DUMMY_QOS)
-	q.dq_port = info->cqe_deq; /*for qos slim driver only */
-#endif
 	if (dp_pp_alloc_queue(&q)) {
 		PR_ERR("%s fail\n",
 		       "dp_pp_alloc_queue");
diff --git a/drivers/net/datapath/dpm/gswip31/datapath_ppv4.c b/drivers/net/datapath/dpm/gswip31/datapath_ppv4.c
index 711f9f917b46..7a4ef2caf49c 100644
--- a/drivers/net/datapath/dpm/gswip31/datapath_ppv4.c
+++ b/drivers/net/datapath/dpm/gswip31/datapath_ppv4.c
@@ -49,315 +49,9 @@ struct pp_qos_dev *(*qos_dev_open)(unsigned int id);
 int (*qos_dev_init)(struct pp_qos_dev *qos_dev,
 		    struct pp_qos_init_param *conf);
 
-#if IS_ENABLED(CONFIG_INTEL_DATAPATH_DUMMY_QOS)
-struct fixed_q_port {
-	int deq_port; /*cqm dequeue port */
-	int queue_id; /*queue physical id*/
-	int port_node; /*qos dequeue port node id */
-	int queue_node; /*queue node id */
-	int q_used;    /*flag to indicate used or free*/
-};
-
-struct fixed_q_port q_port[] = {
-	{0, 14, 0, 2, 0},
-	{0, 74, 0, 4, 0},
-	{0, 30, 0, 6, 0},
-	{0, 87, 0, 8, 0},
-	{7, 235, 7, 10, 0},
-	{7, 42, 7, 12, 0},
-	{7, 242, 7, 14, 0},
-	{26, 190, 26, 16, 0},
-	{26, 119, 26, 18, 0},
-	{26, 103, 26, 20, 0}
-};
-
-static struct pp_qos_dev qdev;
-
-int test_qos_queue_remove(struct pp_qos_dev *qos_dev, unsigned int id)
-{
-	int i;
-
-	for (i = 0; i < ARRAY_SIZE(q_port); i++) {
-		if (q_port[i].queue_id == id) {
-			q_port[i].q_used = PP_NODE_FREE;
-			DP_DEBUG(DP_DBG_FLAG_DBG, "to free qid=%d\n", id);
-			return 0;
-		}
-	}
-	return -1;
-}
-
-int test_qos_queue_allocate(struct pp_qos_dev *qos_dev, unsigned int *id)
-{
-	int i;
-
-	for (i = 0; i < ARRAY_SIZE(q_port); i++) {
-		if ((q_port[i].deq_port == qos_dev->dq_port) &&
-		    (q_port[i].q_used == PP_NODE_FREE)) {
-			q_port[i].q_used = PP_NODE_ALLOC;
-			DP_DEBUG(DP_DBG_FLAG_DBG, "allocate qnode_id=%d\n",
-				 q_port[i].queue_node);
-			*id = q_port[i].queue_node;
-			return 0;
-		}
-	}
-	return -1;
-}
-
-int test_qos_queue_info_get(struct pp_qos_dev *qos_dev, unsigned int id,
-			    struct pp_qos_queue_info *info)
-{
-	int i;
-
-	for (i = 0; i < ARRAY_SIZE(q_port); i++) {
-		if (q_port[i].queue_node == id) {
-			DP_DEBUG(DP_DBG_FLAG_DBG, "q[%d]'s qid=%d\n",
-				 id, q_port[i].queue_id);
-			info->physical_id = q_port[i].queue_id;
-			return 0;
-		}
-	}
-	return -1;
-}
-
-int test_qos_port_remove(struct pp_qos_dev *qos_dev, unsigned int id)
-{
-	return 0;
-}
-
-int test_qos_sched_allocate(struct pp_qos_dev *qos_dev, unsigned int *id)
-{
-	return 0;
-}
-
-int test_qos_sched_remove(struct pp_qos_dev *qos_dev, unsigned int id)
-{
-	return 0;
-}
-
-int test_qos_port_allocate(struct pp_qos_dev *qos_dev, unsigned int physical_id,
-			   unsigned int *id)
-{
-	int i;
-
-	if (!id)
-		return -1;
-
-	for (i = 0; i < ARRAY_SIZE(q_port); i++) {
-		if (physical_id == q_port[i].deq_port) {
-			*id = q_port[i].port_node;
-			DP_DEBUG(DP_DBG_FLAG_DBG,
-				 "Ok: Deq_port/Node_id=%d/%d\n",
-				 physical_id, *id);
-			return 0;
-		}
-	}
-	return -1;
-}
-
-int test_qos_port_set(struct pp_qos_dev *qos_dev, unsigned int id,
-		      const struct pp_qos_port_conf *conf)
-{
-	return 0;
-}
-
-void test_qos_port_conf_set_default(struct pp_qos_port_conf *conf)
-{
-}
-
-void test_qos_queue_conf_set_default(struct pp_qos_queue_conf *conf)
-{
-}
-
-int test_qos_queue_set(struct pp_qos_dev *qos_dev, unsigned int id,
-		       const struct pp_qos_queue_conf *conf)
-{
-	return 0;
-}
-
-void test_qos_sched_conf_set_default(struct pp_qos_sched_conf *conf)
-{
-}
-
-int test_qos_sched_set(struct pp_qos_dev *qos_dev, unsigned int id,
-		       const struct pp_qos_sched_conf *conf)
-{
-	return 0;
-}
-
-int test_qos_queue_conf_get(struct pp_qos_dev *qos_dev, unsigned int id,
-			    struct pp_qos_queue_conf *conf)
-{
-	int i;
-
-	if (!conf)
-		return -1;
-	memset(conf, 0, sizeof(*conf));
-	for (i = 0; i < ARRAY_SIZE(q_port); i++) {
-		if (id == q_port[i].queue_node) {
-			conf->queue_child_prop.parent = q_port[i].port_node;
-			conf->common_prop.bandwidth_limit = 0;
-			conf->blocked = 0;
-			return 0;
-		}
-	}
-	return -1;
-}
-
-int test_qos_queue_flush(struct pp_qos_dev *qos_dev, unsigned int id)
-{
-	return 0;
-}
-
-int test_qos_sched_conf_get(struct pp_qos_dev *qos_dev, unsigned int id,
-			    struct pp_qos_sched_conf *conf)
-{
-	return -1;
-}
-
-int test_qos_sched_get_queues(struct pp_qos_dev *qos_dev, unsigned int id,
-			      u16 *queue_ids, unsigned int size,
-			    unsigned int *queues_num)
-{
-	return 0;
-}
-
-int test_qos_port_get_queues(struct pp_qos_dev *qos_dev, unsigned int id,
-			     u16 *queue_ids, unsigned int size,
-			   unsigned int *queues_num)
-{
-	int i, num = 0;
-
-	for (i = 0; i < ARRAY_SIZE(q_port); i++) {
-		if (q_port[i].port_node != id)
-			continue;
-		if (queue_ids && (num < size)) {
-			queue_ids[num] = q_port[i].queue_node;
-			DP_DEBUG(DP_DBG_FLAG_QOS,
-				 "saved[%d] qid[%d/%d] for cqm[%d/%d]\n",
-				 num,
-				 q_port[i].queue_id,
-				 q_port[i].queue_node,
-				 q_port[i].deq_port,
-				 q_port[i].port_node);
-		} else {
-			DP_DEBUG(DP_DBG_FLAG_QOS,
-				 "unsaved[%d]: qid[%d/%d] for cqm[%d/%d]\n",
-				 num,
-				 q_port[i].queue_id,
-				 q_port[i].queue_node,
-				 q_port[i].deq_port,
-				 q_port[i].port_node);
-		}
-		num++;
-	}
-	if (queues_num)
-		*queues_num = num;
-	return 0;
-}
-
-int test_qos_port_conf_get(struct pp_qos_dev *qdev, unsigned int id,
-			   struct pp_qos_port_conf *conf)
-{
-	return 0;
-}
-
-int test_qos_port_info_get(struct pp_qos_dev *qdev, unsigned int id,
-			   struct pp_qos_port_info *info)
-{
-	return 0;
-}
-
-/*this test code is only support one instance */
-struct pp_qos_dev *test_qos_dev_open(unsigned int id)
-{
-	return &qdev;
-}
-
-int test_qos_dev_init(struct pp_qos_dev *qos_dev,
-		      struct pp_qos_init_param *conf)
-{
-	return 0;
-}
-
-#ifdef DUMMY_PPV4_QOS_API_OLD
-s32 qos_node_config(struct qos_node_api_param *param)
-{
-	int i;
-
-	if (param->op_type != QOS_OP_ADD)  {/*only support ADD op */
-		PR_ERR("Wrong op_type=%d\n", param->op_type);
-		return -1;
-	}
-	if (param->node_conf.node_type == (enum qos_node_type_e)DP_NODE_PORT) {
-		for (i = 0; i < ARRAY_SIZE(q_port); i++) {
-			if (param->deq_port == q_port[i].deq_port) {
-				param->out_param.node_id = q_port[i].port_node;
-				DP_DEBUG(DP_DBG_FLAG_DBG,
-					 "Ok: Deq_port/Node_id=%d/%d\n",
-					 param->deq_port,
-					 param->out_param.node_id);
-				return 0;
-			}
-		}
-		PR_ERR("QoS Port Add failed for deq_port=%d\n",
-		       param->deq_port);
-		return -1;
-	}
-
-	if (param->node_conf.node_type == (enum qos_node_type_e)DP_NODE_QUEUE) {
-		for (i = 0; i < ARRAY_SIZE(q_port); i++) {
-			if (q_port[i].q_used)
-				continue;
-			if (param->node_conf.parent_node_id ==
-						q_port[i].port_node) {
-				param->out_param.node_id = q_port[i].queue_node;
-				param->out_param.queue_id = q_port[i].queue_id;
-				q_port[i].q_used = 1;
-				DP_DEBUG(DP_DBG_FLAG_DBG,
-					 "Ok:Deq_port/Node_id=%d/%d %s=%d/%d\n",
-					 q_port[i].deq_port,
-					 param->node_conf.parent_node_id,
-					 "Queue_id/Node",
-					 param->out_param.queue_id,
-					 param->out_param.node_id);
-				return 0;
-			}
-		}
-	}
-	PR_ERR("QoS Queue Add failed for parent node=%d\n",
-	       param->node_conf.parent_node_id);
-	return -1;
-}
-#endif /*DUMMY_PPV4_QOS_API_OLD*/
-
-#endif /*CONFIG_INTEL_DATAPATH_DUMMY_QOS*/
-
 void init_qos_fn(void)
 {
-#if IS_ENABLED(CONFIG_INTEL_DATAPATH_DUMMY_QOS)
-	qos_queue_remove = test_qos_queue_remove;
-	qos_queue_allocate = test_qos_queue_allocate;
-	qos_queue_info_get = test_qos_queue_info_get;
-	qos_port_remove = test_qos_port_remove;
-	qos_sched_allocate = test_qos_sched_allocate;
-	qos_sched_remove = test_qos_sched_remove;
-	qos_port_allocate = test_qos_port_allocate;
-	qos_port_set = test_qos_port_set;
-	qos_port_conf_set_default = test_qos_port_conf_set_default;
-	qos_queue_conf_set_default = test_qos_queue_conf_set_default;
-	qos_queue_set = test_qos_queue_set;
-	qos_sched_conf_set_default = test_qos_sched_conf_set_default;
-	qos_sched_set = test_qos_sched_set;
-	qos_queue_conf_get = test_qos_queue_conf_get;
-	qos_queue_flush = test_qos_queue_flush;
-	qos_sched_conf_get = test_qos_sched_conf_get;
-	qos_sched_get_queues = test_qos_sched_get_queues;
-	qos_port_get_queues = test_qos_port_get_queues;
-	qos_port_conf_get = test_qos_port_conf_get;
-	qos_dev_open = test_qos_dev_open;
-	qos_dev_init = test_qos_dev_init;
-#elif CONFIG_LTQ_PPV4_QOS
+#if IS_ENABLED(CONFIG_LTQ_PPV4_QOS)
 	qos_queue_remove = pp_qos_queue_remove;
 	qos_queue_allocate = pp_qos_queue_allocate;
 	qos_queue_info_get = pp_qos_queue_info_get;
@@ -382,185 +76,9 @@ void init_qos_fn(void)
 #else
 	/*all NULL function pointer */
 	DP_DEBUG(DP_DBG_FLAG_QOS, "call QOS function pointer set to NULL\n");
-#endif /*CONFIG_INTEL_DATAPATH_DUMMY_QOS*/
-}
-
-#ifdef DUMMY_PPV4_QOS_API_OLD
-/*Port Add
- * Input
- *    Operation Type: Add
- *    Operation Flags
- *       BW Limit param set
- *       Extra Port Configuration param set
- *    Node information
- *       Node Type: Port
- *       Scheduling Type:WSP(Weighted Strict Priority)+WRR(W Round Robin),WFQ
- *       BW Limit in Mbps (0 = No BW Limit applied)
- *    Extra Port Configuration:
- *       TX manager configuration:
- *          TX manager configuration flags
- *            Packet credit set
- *            Byte credit attributes set
- *            Ring address set
- *            Ring size set
- *          TX Port Packet credit
- *          Port Byte Credit EN/DIS
- *          If Port Byte Credit EN ' TX Port Byte credit
- *          TX Port Ring address
- *          TX Port Ring size
- * Output
- *    Logical Node ID
- */
-int dp_pp_alloc_port(struct ppv4_port *info)
-{
-	struct qos_node_api_param param = {0};
-	struct hal_priv *priv = HAL(info->inst);
-
-	param.op_type = QOS_OP_ADD;
-	param.node_conf_flags = NODE_PARAM_FLAG_BW_LIMIT_SET |
-		NODE_PARAM_FLAG_EXTRA_PORT_CONF_SET;
-
-	param.node_conf.node_type = DP_NODE_PORT;
-	param.node_conf.sch_type = QOS_SCH_WSP_WRR;
-	/*NODE_PARAM_FLAG_BW_LIMIT_SET */
-	param.node_conf.bw_limit_Mbps = 0; /*No limit*/
-	//param.node_conf.bw_allocation_weight = 0; /* ??? not valid for port */
-	//param.node_conf.priority = 0; /* ??? not valid for port */
-
-	/*NODE_PARAM_FLAG_EXTRA_PORT_CONF_SET*/
-	param.port_conf.port_conf_flags =
-			PORT_PARAM_FLAG_DISABLE_BYTES_CREDIT; /* ??*/
-	param.port_conf.port_tx_packets_credit = info->tx_pkt_credit;
-	param.port_conf.port_tx_ring_address = info->tx_ring_addr;
-	param.port_conf.port_tx_ring_size = info->tx_ring_size;
-	param.deq_port = info->cqm_port;
-
-	if (qos_node_config(&param)) {
-		PR_ERR("Failed to alloc QoS for deq_port=%d\n", param.deq_port);
-		return -1;
-	}
-	priv->deq_port_stat[info->cqm_port].flag = PP_NODE_ALLOC;
-	priv->deq_port_stat[info->cqm_port].node_id = param.out_param.node_id;
-	info->node_id = param.out_param.node_id;
-	return 0;
-}
-
-/*Scheduler Add
- * Input
- *    Operation Type: Add
- *    Operation Flags
- *      BW Allocation param set
- *      Priority param set
- *      Parent Node ID param set
- *    Node information
- *      Node Type: Scheduler
- *      Scheduling Type: WSP+WRR, WFQ
- *      BW Allocation weight (0 = Best Effort [1 in credit])
- *      Priority (0-15, 0xFF = WRR, not relevant for WFQ)
- *      Parent Node ID
- *    Output
- *      Logical Node ID
- */
-int dp_pp_alloc_sched(struct ppv4_scheduler *info)
-{
-	struct qos_node_api_param param = {0};
-
-	param.op_type = QOS_OP_ADD;
-	param.node_conf_flags = NODE_PARAM_FLAG_BW_ALLOCATION_SET |
-		NODE_PARAM_FLAG_PARENT_NODE_SET |
-		NODE_PARAM_FLAG_PRIORITY_SET;
-
-	param.node_conf.node_type = QOS_NODE_SCH;
-	param.node_conf.sch_type = QOS_SCH_WSP_WRR;
-	/*NODE_PARAM_FLAG_BW_ALLOCATION_SET */
-	param.node_conf.bw_allocation_weight = 0; /*best effort*/
-
-	/* NODE_PARAM_FLAG_PRIORITY_SET */
-	param.node_conf.priority = 0xFF; /* ??? */
-
-	/*NODE_PARAM_FLAG_PARENT_NODE_SET */
-	param.node_conf.parent_node_id = info->parent;
-
-	if (qos_node_config(&param)) {
-		PR_ERR("Failed to alloc ppv4 scheduler\n");
-		return -1;
-	}
-	info->node_id = param.out_param.node_id;
-	return 0;
+#endif /*CONFIG_LTQ_PPV4_QOS*/
 }
 
-/* Queue Add
- * Input
- *   Operation Type: Add
- *     Operation Flags
- *       BW Allocation param set/Priority param set/Parent Node ID param set
- *       Extra Queue Configuration param set
- *   Node information
- *      Node Type: Queue
- *      BW Allocation weight (0 = Best Effort [1 in credit])
- *      Priority (0-15, 0xFF = WRR, not relevant for WFQ)
- *      Parent Node ID
- *  Extra Queue Configuration:
- *    WRED(Weighted Random Early Drop) configuration
- *     WRED configuration flags
- *      WRED DIS
- *      Following flags are relevant only if this flag is not set
- *        Min average green set
- *        Max average green set
- *        Slope green set
- *        Min average yellow set
- *        Max average yellow set
- *        Slope yellow set
- *      Min guaranteed DIS
- *      Min guaranteed set (Relevant only if Min guaranteed DIS is clear)
- *      Max allowed DIS
- *      Max allowed set (Relevant only if Max allowed DIS is clear)
- *     Min average green
- *     Max average green
- *     Slope green
- *     Min average yellow
- *     Max average yellow
- *     Slope yellow
- *     Min guaranteed
- *     Max allowed
- */
-int dp_pp_alloc_queue(struct ppv4_queue *info)
-{
-	struct qos_node_api_param param = {0};
-
-	param.op_type = QOS_OP_ADD;
-	param.node_conf_flags = NODE_PARAM_FLAG_BW_ALLOCATION_SET |
-		NODE_PARAM_FLAG_PRIORITY_SET |
-		NODE_PARAM_FLAG_PARENT_NODE_SET |
-		NODE_PARAM_FLAG_EXTRA_QUEUE_CONF_SET;
-
-	param.node_conf.node_type = DP_NODE_QUEUE;
-
-	/*NODE_PARAM_FLAG_BW_ALLOCATION_SET */
-	param.node_conf.bw_allocation_weight = 0; /*best effort*/
-
-	/* NODE_PARAM_FLAG_PRIORITY_SET */
-	param.node_conf.priority = 0; /* ??? */
-
-	/*NODE_PARAM_FLAG_PARENT_NODE_SET */
-	param.node_conf.parent_node_id = info->parent;
-
-	/* NODE_PARAM_FLAG_EXTRA_QUEUE_CONF_SET */
-	param.queue_conf.queue_conf_flags = QUEUE_PARAM_FLAG_DISABLE_WRED |
-		QUEUE_PARAM_FLAG_DISABLE_MIN_GUARANTEED |
-		QUEUE_PARAM_FLAG_DISABLE_MAX_ALLOWED;
-
-	if (qos_node_config(&param)) {
-		PR_ERR("Failed to alloc ppv4 queue\n");
-		return -1;
-	}
-	info->qid = param.out_param.queue_id;
-	info->node_id = param.out_param.node_id;
-	return 0;
-}
-
-#else /*DUMMY_PPV4_QOS_API_OLD*/
-
 int dp_pp_alloc_port(struct ppv4_port *info)
 {
 	int qos_p_id = 0;
@@ -627,16 +145,8 @@ int dp_pp_alloc_queue(struct ppv4_queue *info)
 	struct hal_priv *priv = HAL(info->inst);
 	struct pp_qos_dev *qos_dev = priv->qdev;
 
-#if IS_ENABLED(CONFIG_INTEL_DATAPATH_DUMMY_QOS)
-	qos_dev->dq_port = info->dq_port;
-#endif
 	if (qos_queue_allocate(qos_dev, &q_node_id)) {
-#if IS_ENABLED(CONFIG_INTEL_DATAPATH_DUMMY_QOS)
-		PR_ERR("qos_queue_allocate fail for dq_port %d\n",
-		       info->dq_port);
-#else
 		PR_ERR("qos_queue_allocate fail\n");
-#endif
 		return -1;
 	}
 	DP_DEBUG(DP_DBG_FLAG_QOS, "qos_queue_allocate ok q_node=%d\n",
@@ -665,7 +175,6 @@ int dp_pp_alloc_queue(struct ppv4_queue *info)
 		 info->parent);
 	return 0;
 }
-#endif /*DUMMY_PPV4_QOS_API_OLD*/
 
 int init_ppv4_qos(int inst, int flag)
 {
@@ -683,6 +192,7 @@ int init_ppv4_qos(int inst, int flag)
 	struct cbm_tx_push *flush_port;
 	struct cbm_cpu_port_data cpu_data = {0};
 #endif
+
 	if (!priv) {
 		PR_ERR("priv is NULL\n");
 		return DP_FAILURE;
diff --git a/drivers/net/datapath/dpm/gswip31/datapath_ppv4.h b/drivers/net/datapath/dpm/gswip31/datapath_ppv4.h
index 618fa2d366c1..9d210d9697d3 100644
--- a/drivers/net/datapath/dpm/gswip31/datapath_ppv4.h
+++ b/drivers/net/datapath/dpm/gswip31/datapath_ppv4.h
@@ -10,12 +10,6 @@
 #ifndef DATAPATH_PPV4_H
 #define DATAPATH_PPV4_H
 
-#if IS_ENABLED(CONFIG_INTEL_DATAPATH_DUMMY_QOS)
-struct pp_qos_dev {
-	int dq_port;
-};
-#endif
-
 #define MAX_PPV4_PORT 128
 #define MAX_CQM_DEQ   90
 #define MAX_QUEUE   256 /* Need further check */
@@ -49,9 +43,6 @@ struct ppv4_queue {
 	u16 parent; /* -1 means no parent.
 		     * it is used for shared dropping queueu purpose
 		     */
-#if IS_ENABLED(CONFIG_INTEL_DATAPATH_DUMMY_QOS)
-	int dq_port; /* cqm dequeue port for qos slim driver queue alloc */
-#endif
 };
 
 struct ppv4_scheduler {
diff --git a/drivers/net/datapath/dpm/gswip32/datapath_misc.c b/drivers/net/datapath/dpm/gswip32/datapath_misc.c
index 9fc7a11c69b8..7e3ee6bde45b 100644
--- a/drivers/net/datapath/dpm/gswip32/datapath_misc.c
+++ b/drivers/net/datapath/dpm/gswip32/datapath_misc.c
@@ -458,9 +458,6 @@ int alloc_q_to_port_32(struct ppv4_q_sch_port *info, u32 flag)
 	q.qid = -1;
 	q.parent = port.node_id;
 	q.inst = inst;
-#if IS_ENABLED(CONFIG_INTEL_DATAPATH_DUMMY_QOS)
-	q.dq_port = info->cqe_deq; /*for qos slim driver only */
-#endif
 	if (dp_pp_alloc_queue_32(&q)) {
 		PR_ERR("%s fail\n",
 		       "dp_pp_alloc_queue_32");
diff --git a/drivers/net/datapath/dpm/gswip32/datapath_ppv4.c b/drivers/net/datapath/dpm/gswip32/datapath_ppv4.c
index 041bb6e83a26..7be63d54cc2a 100644
--- a/drivers/net/datapath/dpm/gswip32/datapath_ppv4.c
+++ b/drivers/net/datapath/dpm/gswip32/datapath_ppv4.c
@@ -46,262 +46,10 @@ int (*qos_port_info_get_32)(struct pp_qos_dev *qdev, unsigned int id,
 			    struct pp_qos_port_info *info);
 struct pp_qos_dev *(*qos_dev_open_32)(unsigned int id);
 
-#if IS_ENABLED(CONFIG_INTEL_DATAPATH_DUMMY_QOS)
-struct fixed_q_port {
-	int deq_port; /*cqm dequeue port */
-	int queue_id; /*queue physical id*/
-	int port_node; /*qos dequeue port node id */
-	int queue_node; /*queue node id */
-	int q_used;    /*flag to indicate used or free*/
-};
-
-struct fixed_q_port q_port[] = {
-	{0, 14, 0, 2, 0},
-	{0, 74, 0, 4, 0},
-	{0, 30, 0, 6, 0},
-	{0, 87, 0, 8, 0},
-	{7, 235, 7, 10, 0},
-	{7, 42, 7, 12, 0},
-	{7, 242, 7, 14, 0},
-	{26, 190, 26, 16, 0},
-	{26, 119, 26, 18, 0},
-	{26, 103, 26, 20, 0}
-};
-
-static struct pp_qos_dev qdev;
-
-int test_qos_queue_remove(struct pp_qos_dev *qos_dev, unsigned int id)
-{
-	int i;
-
-	for (i = 0; i < ARRAY_SIZE(q_port); i++) {
-		if (q_port[i].queue_id == id) {
-			q_port[i].q_used = PP_NODE_FREE;
-			DP_DEBUG(DP_DBG_FLAG_DBG, "to free qid=%d\n", id);
-			return 0;
-		}
-	}
-	return -1;
-}
-
-int test_qos_queue_allocate(struct pp_qos_dev *qos_dev, unsigned int *id)
-{
-	int i;
-
-	for (i = 0; i < ARRAY_SIZE(q_port); i++) {
-		if ((q_port[i].deq_port == qos_dev->dq_port) &&
-		    (q_port[i].q_used == PP_NODE_FREE)) {
-			q_port[i].q_used = PP_NODE_ALLOC;
-			DP_DEBUG(DP_DBG_FLAG_DBG, "allocate qnode_id=%d\n",
-				 q_port[i].queue_node);
-			*id = q_port[i].queue_node;
-			return 0;
-		}
-	}
-	return -1;
-}
-
-int test_qos_queue_info_get(struct pp_qos_dev *qos_dev, unsigned int id,
-			    struct pp_qos_queue_info *info)
-{
-	int i;
-
-	for (i = 0; i < ARRAY_SIZE(q_port); i++) {
-		if (q_port[i].queue_node == id) {
-			DP_DEBUG(DP_DBG_FLAG_DBG, "q[%d]'s qid=%d\n",
-				 id, q_port[i].queue_id);
-			info->physical_id = q_port[i].queue_id;
-			return 0;
-		}
-	}
-	return -1;
-}
-
-int test_qos_port_remove(struct pp_qos_dev *qos_dev, unsigned int id)
-{
-	return 0;
-}
-
-int test_qos_sched_allocate(struct pp_qos_dev *qos_dev, unsigned int *id)
-{
-	return 0;
-}
-
-int test_qos_sched_remove(struct pp_qos_dev *qos_dev, unsigned int id)
-{
-	return 0;
-}
-
-int test_qos_port_allocate(struct pp_qos_dev *qos_dev, unsigned int physical_id,
-			   unsigned int *id)
-{
-	int i;
-
-	if (!id)
-		return -1;
-
-	for (i = 0; i < ARRAY_SIZE(q_port); i++) {
-		if (physical_id == q_port[i].deq_port) {
-			*id = q_port[i].port_node;
-			DP_DEBUG(DP_DBG_FLAG_DBG,
-				 "Ok: Deq_port/Node_id=%d/%d\n",
-				 physical_id, *id);
-			return 0;
-		}
-	}
-	return -1;
-}
-
-int test_qos_port_set(struct pp_qos_dev *qos_dev, unsigned int id,
-		      const struct pp_qos_port_conf *conf)
-{
-	return 0;
-}
-
-void test_qos_port_conf_set_default(struct pp_qos_port_conf *conf)
-{
-}
-
-void test_qos_queue_conf_set_default(struct pp_qos_queue_conf *conf)
-{
-}
-
-int test_qos_queue_set(struct pp_qos_dev *qos_dev, unsigned int id,
-		       const struct pp_qos_queue_conf *conf)
-{
-	return 0;
-}
-
-void test_qos_sched_conf_set_default(struct pp_qos_sched_conf *conf)
-{
-}
-
-int test_qos_sched_set(struct pp_qos_dev *qos_dev, unsigned int id,
-		       const struct pp_qos_sched_conf *conf)
-{
-	return 0;
-}
-
-int test_qos_queue_conf_get(struct pp_qos_dev *qos_dev, unsigned int id,
-			    struct pp_qos_queue_conf *conf)
-{
-	int i;
-
-	if (!conf)
-		return -1;
-	memset(conf, 0, sizeof(*conf));
-	for (i = 0; i < ARRAY_SIZE(q_port); i++) {
-		if (id == q_port[i].queue_node) {
-			conf->queue_child_prop.parent = q_port[i].port_node;
-			conf->common_prop.bandwidth_limit = 0;
-			conf->blocked = 0;
-			return 0;
-		}
-	}
-	return -1;
-}
-
-int test_qos_queue_flush(struct pp_qos_dev *qos_dev, unsigned int id)
-{
-	return 0;
-}
-
-int test_qos_sched_conf_get(struct pp_qos_dev *qos_dev, unsigned int id,
-			    struct pp_qos_sched_conf *conf)
-{
-	return -1;
-}
-
-int test_qos_sched_get_queues(struct pp_qos_dev *qos_dev, unsigned int id,
-			      u16 *queue_ids, unsigned int size,
-			    unsigned int *queues_num)
-{
-	return 0;
-}
-
-int test_qos_port_get_queues(struct pp_qos_dev *qos_dev, unsigned int id,
-			     u16 *queue_ids, unsigned int size,
-			   unsigned int *queues_num)
-{
-	int i, num = 0;
-
-	for (i = 0; i < ARRAY_SIZE(q_port); i++) {
-		if (q_port[i].port_node != id)
-			continue;
-		if (queue_ids && (num < size)) {
-			queue_ids[num] = q_port[i].queue_node;
-			DP_DEBUG(DP_DBG_FLAG_QOS,
-				 "saved[%d] qid[%d/%d] for cqm[%d/%d]\n",
-				 num,
-				 q_port[i].queue_id,
-				 q_port[i].queue_node,
-				 q_port[i].deq_port,
-				 q_port[i].port_node);
-		} else {
-			DP_DEBUG(DP_DBG_FLAG_QOS,
-				 "unsaved[%d]: qid[%d/%d] for cqm[%d/%d]\n",
-				 num,
-				 q_port[i].queue_id,
-				 q_port[i].queue_node,
-				 q_port[i].deq_port,
-				 q_port[i].port_node);
-		}
-		num++;
-	}
-	if (queues_num)
-		*queues_num = num;
-	return 0;
-}
-
-int test_qos_port_conf_get(struct pp_qos_dev *qdev, unsigned int id,
-			   struct pp_qos_port_conf *conf)
-{
-	return 0;
-}
-
-int test_qos_port_info_get(struct pp_qos_dev *qdev, unsigned int id,
-			   struct pp_qos_port_info *info)
-{
-	return 0;
-}
-
-/*this test code is only support one instance */
-struct pp_qos_dev *test_qos_dev_open(unsigned int id)
-{
-	return &qdev;
-}
-
-int test_qos_dev_init(struct pp_qos_dev *qos_dev,
-		      struct pp_qos_init_param *conf)
-{
-	return 0;
-}
-#endif /*CONFIG_INTEL_DATAPATH_DUMMY_QOS*/
 
 void init_qos_fn_32(void)
 {
-#if IS_ENABLED(CONFIG_INTEL_DATAPATH_DUMMY_QOS)
-	qos_queue_remove_32 = test_qos_queue_remove;
-	qos_queue_allocate_32 = test_qos_queue_allocate;
-	qos_queue_info_get_32 = test_qos_queue_info_get;
-	qos_port_remove_32 = test_qos_port_remove;
-	qos_sched_allocate_32 = test_qos_sched_allocate;
-	qos_sched_remove_32 = test_qos_sched_remove;
-	qos_port_allocate_32 = test_qos_port_allocate;
-	qos_port_set_32 = test_qos_port_set;
-	qos_port_conf_set_default_32 = test_qos_port_conf_set_default;
-	qos_queue_conf_set_default_32 = test_qos_queue_conf_set_default;
-	qos_queue_set_32 = test_qos_queue_set;
-	qos_sched_conf_set_default_32 = test_qos_sched_conf_set_default;
-	qos_sched_set_32 = test_qos_sched_set;
-	qos_queue_conf_get_32 = test_qos_queue_conf_get;
-	qos_queue_flush_32 = test_qos_queue_flush;
-	qos_sched_conf_get_32 = test_qos_sched_conf_get;
-	qos_sched_get_queues_32 = test_qos_sched_get_queues;
-	qos_port_get_queues_32 = test_qos_port_get_queues;
-	qos_port_conf_get_32 = test_qos_port_conf_get;
-	qos_dev_open_32 = test_qos_dev_open;
-#elif (IS_ENABLED(CONFIG_LTQ_PPV4_QOS) || IS_ENABLED(CONFIG_PPV4))
+#if (IS_ENABLED(CONFIG_LTQ_PPV4_QOS) || IS_ENABLED(CONFIG_PPV4))
 	qos_queue_remove_32 = pp_qos_queue_remove;
 	qos_queue_allocate_32 = pp_qos_queue_allocate;
 	qos_queue_info_get_32 = pp_qos_queue_info_get;
@@ -325,7 +73,7 @@ void init_qos_fn_32(void)
 #else
 	/*all NULL function pointer */
 	DP_DEBUG(DP_DBG_FLAG_QOS, "call QOS function pointer set to NULL\n");
-#endif /*CONFIG_INTEL_DATAPATH_DUMMY_QOS*/
+#endif /*CONFIG_LTQ_PPV4_QOS*/
 }
 
 int dp_pp_alloc_port_32(struct ppv4_port *info)
@@ -394,16 +142,8 @@ int dp_pp_alloc_queue_32(struct ppv4_queue *info)
 	struct hal_priv *priv = HAL(info->inst);
 	struct pp_qos_dev *qos_dev = priv->qdev;
 
-#if IS_ENABLED(CONFIG_INTEL_DATAPATH_DUMMY_QOS)
-	qos_dev->dq_port = info->dq_port;
-#endif
 	if (qos_queue_allocate_32(qos_dev, &q_node_id)) {
-#if IS_ENABLED(CONFIG_INTEL_DATAPATH_DUMMY_QOS)
-		PR_ERR("qos_queue_allocate_32 fail for dq_port %d\n",
-		       info->dq_port);
-#else
 		PR_ERR("qos_queue_allocate_32 fail\n");
-#endif
 		return -1;
 	}
 	DP_DEBUG(DP_DBG_FLAG_QOS, "qos_queue_allocate_32 ok q_node=%d\n",
diff --git a/drivers/net/datapath/dpm/gswip32/datapath_ppv4.h b/drivers/net/datapath/dpm/gswip32/datapath_ppv4.h
index d13085f2b270..5e2371c1b82c 100644
--- a/drivers/net/datapath/dpm/gswip32/datapath_ppv4.h
+++ b/drivers/net/datapath/dpm/gswip32/datapath_ppv4.h
@@ -10,12 +10,6 @@
 #ifndef DATAPATH_PPV4_H
 #define DATAPATH_PPV4_H
 
-#if IS_ENABLED(CONFIG_INTEL_DATAPATH_DUMMY_QOS)
-struct pp_qos_dev {
-	int dq_port;
-};
-#endif
-
 #define MAX_PPV4_PORT 256
 #define MAX_CQM_DEQ   138
 #define MAX_QUEUE   512
@@ -53,9 +47,6 @@ struct ppv4_queue {
 	u16 parent; /* -1 means no parent.
 		     * it is used for shared dropping queueu purpose
 		     */
-#if IS_ENABLED(CONFIG_INTEL_DATAPATH_DUMMY_QOS)
-	int dq_port; /* cqm dequeue port for qos slim driver queue alloc */
-#endif
 };
 
 struct ppv4_scheduler {
