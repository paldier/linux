From ca9ac1b40f28844414e8dcabfea2c981f4192400 Mon Sep 17 00:00:00 2001
From: Dinesh Sudham <dineshx.sudham@intel.com>
Date: Mon, 4 Mar 2019 15:03:13 +0800
Subject: [PATCH] DRVLIB_SW-1511: Removed u32 typecasting from switch cli

---
 drivers/net/ethernet/lantiq/switch-api/gsw_flow_core.c    |  2 --
 .../net/ethernet/lantiq/switch-api/gsw_ioctl_wrapper.c    | 15 ++++++---------
 .../net/ethernet/lantiq/switch-api/gsw_ioctl_wrapper.h    |  4 ++--
 include/net/switch_api/lantiq_gsw_api.h                   |  4 ++--
 4 files changed, 10 insertions(+), 15 deletions(-)

diff --git a/drivers/net/ethernet/lantiq/switch-api/gsw_flow_core.c b/drivers/net/ethernet/lantiq/switch-api/gsw_flow_core.c
index 2990d0c93b14..6de1479ed8a9 100644
--- a/drivers/net/ethernet/lantiq/switch-api/gsw_flow_core.c
+++ b/drivers/net/ethernet/lantiq/switch-api/gsw_flow_core.c
@@ -25862,8 +25862,6 @@ GSW_return_t GSW_RMON_FlowGet(void *cdev, GSW_RMON_flowGet_t *parm)
 
 	ret = GSW_statusOk;
 
-UNLOCK_AND_RETURN:
-
 #ifdef __KERNEL__
 	spin_unlock_bh(&gswdev->lock_bm);
 #endif
diff --git a/drivers/net/ethernet/lantiq/switch-api/gsw_ioctl_wrapper.c b/drivers/net/ethernet/lantiq/switch-api/gsw_ioctl_wrapper.c
index b04f5140a3b2..9d472f8f4932 100644
--- a/drivers/net/ethernet/lantiq/switch-api/gsw_ioctl_wrapper.c
+++ b/drivers/net/ethernet/lantiq/switch-api/gsw_ioctl_wrapper.c
@@ -57,7 +57,7 @@ ioctl_cmd_handle_t *gsw_api_alloc_cmd_handle(void)
 
 /** searching for Switch API IOCTL  command */
 int gsw_command_search(void *phandle, u32 command,
-		       u32 arg, ethsw_api_type_t apitype)
+		       void *arg, ethsw_api_type_t apitype)
 {
 	int retvalue;
 	ioctl_cmd_handle_t *pdrv = (ioctl_cmd_handle_t *) phandle;
@@ -109,8 +109,7 @@ int gsw_command_search(void *phandle, u32 command,
 
 
 				/*Calling function pointer*/
-				retvalue = fkt(pdrv->pLlHandle,
-					       (u32)pdrv->paramBuffer);
+				retvalue = fkt(pdrv->pLlHandle, pdrv->paramBuffer);
 
 				/* Copy parameter to userspace. */
 				/* Only copy back to userspace if really required */
@@ -127,8 +126,7 @@ int gsw_command_search(void *phandle, u32 command,
 
 
 				/*Calling function pointer*/
-				retvalue = fkt(pdrv->pLlHandle,
-					       (u32)pdrv->paramBuffer);
+				retvalue = fkt(pdrv->pLlHandle, pdrv->paramBuffer);
 
 				memcpy((void *)arg,
 				       (const void *)(pdrv->paramBuffer),
@@ -214,8 +212,7 @@ static long gsw_api_ioctl(struct file *filp, u32 cmd, unsigned long arg)
 		}
 	}
 
-	ret = gsw_command_search(cmd_handle, cmd,
-				 arg, ETHSW_API_USERAPP);
+	ret = gsw_command_search(cmd_handle, cmd, arg, ETHSW_API_USERAPP);
 	kfree(cmd_handle);
 	return ret;
 }
@@ -418,7 +415,7 @@ GSW_API_HANDLE gsw_api_kopen(char *name)
 EXPORT_SYMBOL(gsw_api_kopen);
 #endif
 
-int gsw_api_kioctl(GSW_API_HANDLE handle, u32 command, u32 arg)
+int gsw_api_kioctl(GSW_API_HANDLE handle, u32 command, void *arg)
 {
 	ioctl_wrapper_ctx_t *pdev = NULL;
 	ioctl_cmd_handle_t *cmd_handle;
@@ -442,7 +439,7 @@ int gsw_api_kioctl(GSW_API_HANDLE handle, u32 command, u32 arg)
 	} else if (handle == (GSW_API_HANDLE)pdev->pEthSWDev[1]) {
 		cmd_handle->pLlHandle = pdev->pEthSWDev[1];
 	}	else {
-		pr_err("ERROR:Provided wrong address ( Address:0x%08x) %s:%s:%d\n",
+		pr_err("ERROR:Provided wrong address ( Address:0x%p) %s:%s:%d\n",
 		       handle, __FILE__, __func__, __LINE__);
 #ifdef __KERNEL__
 		kfree(cmd_handle);
diff --git a/drivers/net/ethernet/lantiq/switch-api/gsw_ioctl_wrapper.h b/drivers/net/ethernet/lantiq/switch-api/gsw_ioctl_wrapper.h
index c2021ca556e7..ba96b9314ff6 100644
--- a/drivers/net/ethernet/lantiq/switch-api/gsw_ioctl_wrapper.h
+++ b/drivers/net/ethernet/lantiq/switch-api/gsw_ioctl_wrapper.h
@@ -22,7 +22,7 @@ typedef enum {
 
 
 /* general declaration fits for all low-level functions. */
-typedef int (*LTQ_ll_fkt)(void *, u32);
+typedef int (*LTQ_ll_fkt)(void *, void *);
 typedef struct ltq_lowlevel_fkts_t ltq_lowlevel_fkts_t;
 /* Switch API low-level function tables to map all supported IOCTL commands */
 struct ltq_lowlevel_fkts_t {
@@ -47,7 +47,7 @@ struct ltq_lowlevel_fkts_t {
 /* function type declaration for the default IOCTL low-level function in
    case the command cannot be found in the low-level function table,
 	or in case no low-level function table is provided.. */
-typedef int (*ioctl_default_fkt)(void *, int, int);
+typedef int (*ioctl_default_fkt)(void *, int, void *);
 /*typedef*/
 typedef struct {
 	ltq_lowlevel_fkts_t *pLlTable;
diff --git a/include/net/switch_api/lantiq_gsw_api.h b/include/net/switch_api/lantiq_gsw_api.h
index bf57399f5400..1c4c727f0935 100644
--- a/include/net/switch_api/lantiq_gsw_api.h
+++ b/include/net/switch_api/lantiq_gsw_api.h
@@ -31,7 +31,7 @@
 /** Definition of the device handle that is retrieved during
     the \ref gsw_api_kopen call. This handle is used to access the switch
     device while calling \ref gsw_api_kioctl. */
-typedef unsigned int GSW_API_HANDLE;
+typedef void *GSW_API_HANDLE;
 
 /**
    Request a device handle for a dedicated Ethernet switch device. The switch
@@ -70,7 +70,7 @@ GSW_API_HANDLE gsw_api_kopen(char *name);
    - GSW_statusOk: if successful
    - An error code in case an error occurred.
 */
-int gsw_api_kioctl(GSW_API_HANDLE handle, unsigned int command, unsigned int arg);
+int gsw_api_kioctl(GSW_API_HANDLE handle, unsigned int command, void *arg);
 
 /**
    Releases an Ethernet switch device handle which was previously
