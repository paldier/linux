From da473c5fa5bacc000c8205ef6177382347fc685a Mon Sep 17 00:00:00 2001
From: yixin zhu <yixin.zhu@intel.com>
Date: Fri, 6 Sep 2019 14:04:53 +0800
Subject: [PATCH] DRVLIB_SW-2904: Separate QSPI read/write quad mode

---
 drivers/spi/spi-cadence-qspi-apb.c | 17 +++++++++--------
 drivers/spi/spi-cadence-qspi.c     | 23 +++++++++++++++++++----
 drivers/spi/spi-cadence-qspi.h     |  9 ++++++---
 3 files changed, 34 insertions(+), 15 deletions(-)

diff --git a/drivers/spi/spi-cadence-qspi-apb.c b/drivers/spi/spi-cadence-qspi-apb.c
index 574f05b8ab6b..68cd215336bd 100644
--- a/drivers/spi/spi-cadence-qspi-apb.c
+++ b/drivers/spi/spi-cadence-qspi-apb.c
@@ -904,7 +904,9 @@ int cadence_qspi_apb_process_queue(struct struct_cqspi *cadence_qspi,
 
 	f_pdata = &(pdata->f_pdata[cadence_qspi->current_cs]);
 	debug_print("[%s] flash_type=%d cadence_qspi->current_cs=%d\n", __func__, f_pdata->flash_type, cadence_qspi->current_cs);
-	debug_print("[%s] page_size=%d block_size=%d quad=%d\n", __func__, f_pdata->page_size, f_pdata->block_size, f_pdata->quad);
+	debug_print("[%s] page_size=%d block_size=%d rd quad=%d, wr quad=%d\n",
+		    __func__, f_pdata->page_size, f_pdata->block_size,
+		    f_pdata->rd_quad, f_pdata->wr_quad);
 	debug_print("[%s] n_trans=%d\n", __func__, n_trans);
 	debug_print("[%s] cmd_xfer->len=%d\n", __func__, cmd_xfer->len);
 	debug_print("[%s] cmd_xfer->tx_buf=0x%p\n", __func__, cmd_xfer->tx_buf);
@@ -936,9 +938,8 @@ int cadence_qspi_apb_process_queue(struct struct_cqspi *cadence_qspi,
 	}
 	if (f_pdata->flash_type == QSPI_FLASH_TYPE_NOR) {
 		if (n_trans == 2) {
-			if ((data_xfer->len > 6) && (data_xfer->rx_buf)) {
+			if ((data_xfer->len > 6) && (data_xfer->rx_buf))
 				mode = IDC_READ_MODE;
-			}
 			else if ((data_xfer->len > 6) && (data_xfer->tx_buf))
 				mode = IDC_WRITE_MODE;
 			else if (data_xfer->tx_buf)
@@ -1009,14 +1010,14 @@ int cadence_qspi_apb_process_queue(struct struct_cqspi *cadence_qspi,
 				pdata->qspi_ahb_phy & pdata->qspi_ahb_mask,
 				cmd_xfer->len, cmd_xfer->tx_buf,
 				cmd_xfer->len - 1, cmd_xfer->tx_buf + 1, 3, f_pdata->flash_type,
-				f_pdata->quad);
+				f_pdata->rd_quad);
 		else
 			/* read data from cache len should be 2 */
 			ret = cadence_qspi_apb_indirect_read_setup(iobase,
 				pdata->qspi_ahb_phy & pdata->qspi_ahb_mask,
 				cmd_xfer->len, cmd_xfer->tx_buf,
 				data_xfer->len, data_xfer->tx_buf, 2, f_pdata->flash_type,
-				f_pdata->quad);
+				f_pdata->rd_quad);
 
 		if (n_trans == 3) {
 			ret = cadence_qspi_apb_indirect_read_execute(
@@ -1032,9 +1033,9 @@ int cadence_qspi_apb_process_queue(struct struct_cqspi *cadence_qspi,
 			ret = cadence_qspi_apb_indirect_write_setup(
 				iobase,
 				pdata->qspi_ahb_phy & pdata->qspi_ahb_mask,
-				data_xfer->len, cmd_xfer->tx_buf, 
+				data_xfer->len, cmd_xfer->tx_buf,
 				cmd_xfer->len - 1, cmd_xfer->tx_buf + 1, f_pdata->flash_type,
-				f_pdata->quad);
+				f_pdata->wr_quad);
 
 			ret = cadence_qspi_apb_indirect_write_execute(
 				cadence_qspi, spi_xfer[1]->len,
@@ -1045,7 +1046,7 @@ int cadence_qspi_apb_process_queue(struct struct_cqspi *cadence_qspi,
 				pdata->qspi_ahb_phy & pdata->qspi_ahb_mask,
 				cmd_xfer->len, cmd_xfer->tx_buf,
 				data_xfer->len, data_xfer->tx_buf,
-				f_pdata->flash_type, f_pdata->quad);
+				f_pdata->flash_type, f_pdata->wr_quad);
 			ret = cadence_qspi_apb_indirect_write_execute(
 				cadence_qspi, spi_xfer[2]->len,
 				spi_xfer[2]->tx_buf, f_pdata->flash_type);
diff --git a/drivers/spi/spi-cadence-qspi.c b/drivers/spi/spi-cadence-qspi.c
index 6869df59fa34..da446cff7a4e 100644
--- a/drivers/spi/spi-cadence-qspi.c
+++ b/drivers/spi/spi-cadence-qspi.c
@@ -284,14 +284,29 @@ static int cadence_qspi_of_get_pdata(struct platform_device *pdev)
 			 f_pdata->flash_type);
 
 		if (of_property_read_u32(nc, "spi-rx-bus-width", &prop)) {
-			dev_err(&pdev->dev, "couldn't determine quad\n");
+			dev_err(&pdev->dev, "couldn't determine read quad\n");
 			return -ENXIO;
 		}
-		pr_debug("[%s]cs=%d quad=%d\n", __func__, cs, prop);
+		pr_debug("[%s]cs=%d read quad=%d\n", __func__, cs, prop);
 		if (prop == 4)
-			f_pdata->quad = QUAD_QIO;
+			f_pdata->rd_quad = QUAD_QIO;
+		else if (prop == 2)
+			f_pdata->rd_quad = QUAD_DIO;
 		else
-			f_pdata->quad = QUAD_SIO;
+			f_pdata->rd_quad = QUAD_SIO;
+
+		if (of_property_read_u32(nc, "spi-tx-bus-width", &prop)) {
+			dev_err(&pdev->dev, "couldn't determine write quad\n");
+			return -ENXIO;
+		}
+		pr_debug("[%s]cs=%d write quad=%d\n", __func__, cs, prop);
+		if (prop == 4)
+			f_pdata->wr_quad = QUAD_QIO;
+		else if (prop == 2)
+			f_pdata->wr_quad = QUAD_DIO;
+		else
+			f_pdata->wr_quad = QUAD_SIO;
+
 		if (of_property_read_u32(nc, "page-size", &prop)) {
 			dev_err(&pdev->dev, "couldn't determine page-size\n");
 			return -ENXIO;
diff --git a/drivers/spi/spi-cadence-qspi.h b/drivers/spi/spi-cadence-qspi.h
index d52cb4426c0a..896db6023116 100644
--- a/drivers/spi/spi-cadence-qspi.h
+++ b/drivers/spi/spi-cadence-qspi.h
@@ -43,13 +43,15 @@ struct cqspi_flash_pdata {
 	unsigned int page_size;
 	unsigned int block_size;
 	unsigned int flash_type;
-	unsigned int quad;
+	unsigned int rd_quad;
+	unsigned int wr_quad;
 	unsigned int read_delay;
 	unsigned int tshsl_ns;
 	unsigned int tsd2d_ns;
 	unsigned int tchsh_ns;
 	unsigned int tslch_ns;
 };
+
 struct cqspi_platform_data {
 	unsigned int bus_num;
 	unsigned int num_chipselect;
@@ -64,8 +66,8 @@ struct cqspi_platform_data {
 	unsigned int rx_dma_peri_id;
 	struct cqspi_flash_pdata f_pdata[CQSPI_MAX_CHIP_SELECT];
 };
-struct struct_cqspi
-{
+
+struct struct_cqspi {
 	struct work_struct work;
 	struct workqueue_struct *workqueue;
 	wait_queue_head_t waitqueue;
@@ -98,6 +100,7 @@ struct struct_cqspi
 	dma_addr_t dma_addr;
 	int dma_done;
 };
+
 /* Kernel function hook */
 #define CQSPI_WRITEL		__raw_writel
 #define CQSPI_READL		__raw_readl
