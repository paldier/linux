From 55f7a316d6cad9975e23fe9eb1361b18e4aeb636 Mon Sep 17 00:00:00 2001
From: "vinothx.arumugam" <varumu1x@inlubt0043.iind.intel.com>
Date: Thu, 2 May 2019 15:52:48 +0530
Subject: [PATCH] UGW_SW-38169-port-trunking-merging-the-changes-to-8.x

---
 drivers/net/bonding/bond_main.c            | 45 +++++++++++++++++++++++++++++-
 drivers/net/ethernet/lantiq/ppa/ppa_hook.c |  4 +--
 include/net/ppa/ppa_hook.h                 |  5 ++++
 3 files changed, 51 insertions(+), 3 deletions(-)

diff --git a/drivers/net/bonding/bond_main.c b/drivers/net/bonding/bond_main.c
index d52fd842ef1f..9ac19d0f5a89 100644
--- a/drivers/net/bonding/bond_main.c
+++ b/drivers/net/bonding/bond_main.c
@@ -216,9 +216,15 @@ static struct rtnl_link_stats64 *bond_get_stats(struct net_device *bond_dev,
 static void bond_slave_arr_handler(struct work_struct *work);
 static bool bond_time_in_interval(struct bonding *bond, unsigned long last_act,
 				  int mod);
+static struct net_device * ppa_get_bond_xmit_xor_intrf(struct sk_buff *skb, struct net_device *bond_dev);
+extern struct net_device* (*ppa_get_bond_xmit_xor_intrf_hook)(struct sk_buff *skb, struct net_device *bond_dev);
 static void bond_netdev_notify_work(struct work_struct *work);
 
 /*---------------------------- General routines -----------------------------*/
+#define IS_UP(dev)                                         \
+              ((((dev)->flags & IFF_UP) == IFF_UP)      && \
+               netif_running(dev)                       && \
+               netif_carrier_ok(dev))
 
 const char *bond_mode_name(int mode)
 {
@@ -4815,7 +4821,7 @@ static int __init bonding_init(void)
 		if (res)
 			goto err;
 	}
-
+	ppa_get_bond_xmit_xor_intrf_hook = ppa_get_bond_xmit_xor_intrf;
 	register_netdevice_notifier(&bond_netdev_notifier);
 out:
 	return res;
@@ -4823,6 +4829,7 @@ static int __init bonding_init(void)
 	bond_destroy_debugfs();
 	bond_netlink_fini();
 err_link:
+	ppa_get_bond_xmit_xor_intrf_hook = NULL;
 	unregister_pernet_subsys(&bond_net_ops);
 	goto out;
 
@@ -4836,6 +4843,7 @@ static void __exit bonding_exit(void)
 
 	bond_netlink_fini();
 	unregister_pernet_subsys(&bond_net_ops);
+	ppa_get_bond_xmit_xor_intrf_hook = NULL;
 
 #ifdef CONFIG_NET_POLL_CONTROLLER
 	/* Make sure we don't have an imbalance on our netpoll blocking */
@@ -4843,6 +4851,41 @@ static void __exit bonding_exit(void)
 #endif
 }
 
+/*
+ * In ppa_get_bond_xmit_xor_intrf() , we determine the output device by using a pre-
+ * determined xmit_hash_policy(), If the selected device is not enabled,
+ * find the next active slave.
+ */
+static struct net_device * ppa_get_bond_xmit_xor_intrf(struct sk_buff *skb, struct net_device *bond_dev)
+{
+	struct bonding *bond = netdev_priv(bond_dev);
+	struct slave *slave;
+	struct bond_up_slave *slaves;
+	unsigned int count;
+	slaves = rcu_dereference(bond->slave_arr);
+	count = slaves ? ACCESS_ONCE(slaves->count) : 0;
+	if (likely(count)) {
+		slave = slaves->arr[bond_xmit_hash(bond, skb) % count];
+	} else {
+		pr_err("slaves count is zero\n");
+		goto ret;
+	}
+
+	if (!slave) {
+		pr_err("slave is null\n");
+		goto ret;
+	}
+	if (slave->dev) {
+	        if (IS_UP(slave->dev) &&
+			(slave->link == BOND_LINK_UP) &&
+			bond_is_active_slave(slave)) {
+			return slave->dev;
+		}
+	}
+ret:
+	return NULL;
+}
+EXPORT_SYMBOL(ppa_get_bond_xmit_xor_intrf);
 module_init(bonding_init);
 module_exit(bonding_exit);
 MODULE_LICENSE("GPL");
diff --git a/drivers/net/ethernet/lantiq/ppa/ppa_hook.c b/drivers/net/ethernet/lantiq/ppa/ppa_hook.c
index df7e2fb11fef..03a7e6d18a53 100644
--- a/drivers/net/ethernet/lantiq/ppa/ppa_hook.c
+++ b/drivers/net/ethernet/lantiq/ppa/ppa_hook.c
@@ -380,7 +380,7 @@ int32_t (*ppa_if_is_ipoa_fn)(struct net_device *netdev, char *ifname) = NULL;
 int32_t (*ppa_if_is_br2684_fn)(struct net_device *netdev, char *ifname) = NULL;
 int32_t (*ppa_br2684_get_vcc_fn)(struct net_device *netdev, struct atm_vcc **pvcc) = NULL;
 int32_t (*ppa_if_ops_veth_xmit_fn)(struct net_device *dev) = NULL;
-
+struct net_device* (*ppa_get_bond_xmit_xor_intrf_hook)(struct sk_buff *skb, struct net_device *bond_dev) = NULL;
 
 #if IS_ENABLED(CONFIG_PPA_QOS)
 int32_t (*ppa_hook_get_qos_qnum)(uint32_t portid, uint32_t flag) = NULL;
@@ -522,7 +522,7 @@ EXPORT_SYMBOL(ppa_if_is_ipoa_fn);
 EXPORT_SYMBOL(ppa_if_is_br2684_fn);
 EXPORT_SYMBOL(ppa_br2684_get_vcc_fn);
 EXPORT_SYMBOL(ppa_if_ops_veth_xmit_fn);
-
+EXPORT_SYMBOL(ppa_get_bond_xmit_xor_intrf_hook);
 #if IS_ENABLED(CONFIG_PPA_QOS)
 EXPORT_SYMBOL(ppa_hook_get_qos_qnum);
 EXPORT_SYMBOL(ppa_hook_get_qos_mib);
diff --git a/include/net/ppa/ppa_hook.h b/include/net/ppa/ppa_hook.h
index 730d421ce0b3..b28b6ff99f66 100644
--- a/include/net/ppa/ppa_hook.h
+++ b/include/net/ppa/ppa_hook.h
@@ -789,6 +789,11 @@ extern int32_t (*ppa_check_if_netif_l2nat_fn)(PPA_NETIF *netif, char *ifname, ui
 extern int32_t ppa_check_if_netif_l2nat_fn(PPA_NETIF *netif, char *ifname, uint32_t flags);
 #endif
 #endif /* CONFIG_L2NAT*/
+#ifdef NO_DOXY
+extern struct net_device* (*ppa_get_bond_xmit_xor_intrf_hook)(struct sk_buff *skb, struct net_device *bond_dev);
+#else
+extern struct net_device* ppa_get_bond_xmit_xor_intrf_hook(struct sk_buff *skb, struct net_device *bond_dev);
+#endif
 #endif /*end of __KERNEL__*/
 /* @} */
 #endif  /*  __PPA_HOOK_H__20081103_1736__*/
