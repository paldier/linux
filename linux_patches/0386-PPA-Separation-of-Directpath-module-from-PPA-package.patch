From 95408667b741522f58581d57fb631dc084e656e5 Mon Sep 17 00:00:00 2001
From: "Maitra, ArchismanX" <archismanx.maitra@intel.com>
Date: Sun, 16 Dec 2018 21:08:00 +0530
Subject: [PATCH] PPA: Separation of Directpath module from PPA package

---
 drivers/net/ethernet/lantiq/ppa/ppa_drv_wrapper.c |  8 ++++--
 drivers/net/ethernet/lantiq/ppa/ppa_hook.c        | 14 ++++++++++
 include/net/ppa/ppa_hook.h                        | 33 +++++++++++++++++++++++
 3 files changed, 53 insertions(+), 2 deletions(-)

diff --git a/drivers/net/ethernet/lantiq/ppa/ppa_drv_wrapper.c b/drivers/net/ethernet/lantiq/ppa/ppa_drv_wrapper.c
index 4d2ccce4ae5a..f7ecd9afab86 100644
--- a/drivers/net/ethernet/lantiq/ppa/ppa_drv_wrapper.c
+++ b/drivers/net/ethernet/lantiq/ppa/ppa_drv_wrapper.c
@@ -176,15 +176,19 @@ int32_t (*ppa_drv_hal_get_mpoa_type_hook)(uint32_t dslwan_qid, uint32_t *mpoa_ty
 #if IS_ENABLED(CONFIG_SOC_GRX500)
 int ppa_drv_directpath_send(PPA_SUBIF *subif, PPA_SKBUF *skb, int32_t len, uint32_t flags)
 {
-	if (!ppa_drv_directpath_send_hook)
+	if (!ppa_drv_directpath_send_hook) {
+		PPA_SKB_FREE(skb);
 		return PPA_EINVAL;
+	}
 	return ppa_drv_directpath_send_hook(subif, skb, len, flags);
 }
 #else
 int ppa_drv_directpath_send(uint32_t if_id, PPA_SKBUF *skb, int32_t len, uint32_t flags)
 {
-	if (!ppa_drv_directpath_send_hook)
+	if (!ppa_drv_directpath_send_hook) {
+		PPA_SKB_FREE(skb);
 		return PPA_EINVAL;
+	}
 	return ppa_drv_directpath_send_hook(if_id, skb, len, flags);
 }
 #endif
diff --git a/drivers/net/ethernet/lantiq/ppa/ppa_hook.c b/drivers/net/ethernet/lantiq/ppa/ppa_hook.c
index f74fa7dd05f4..c05f6b4aa4e9 100644
--- a/drivers/net/ethernet/lantiq/ppa/ppa_hook.c
+++ b/drivers/net/ethernet/lantiq/ppa/ppa_hook.c
@@ -257,6 +257,13 @@ int32_t (*ppa_register_qos_class2prio_hook_fn)(int32_t, PPA_NETIF *, PPA_QOS_CLA
 #endif
 #endif
 
+#if IS_ENABLED(CONFIG_PPA_API_DIRECTPATH)
+int32_t (*ppa_directpath_port_add_fn)(void) = NULL;
+int32_t (*ppa_check_if_netif_directpath_fn)(PPA_NETIF *netif,  uint16_t flag) = NULL;
+int32_t (*ppa_phys_port_add_hook_fn)(PPA_IFNAME *ifname, uint32_t port) = NULL;
+int32_t (*ppa_phys_port_remove_hook_fn)(uint32_t port) = NULL;
+#endif
+
 /**********************************************************************************************
  * PPA Extra ethernet interface hook function :ppa_hook_addppa_hook_directpath_register_dev_fn_if_fn
  * it is used to register/de-register a device for direct path support
@@ -483,6 +490,13 @@ EXPORT_SYMBOL(ppa_hook_disconn_if_fn);
 EXPORT_SYMBOL(ppa_register_qos_class2prio_hook_fn);
 #endif
 #endif
+
+#if IS_ENABLED(CONFIG_PPA_API_DIRECTPATH)
+EXPORT_SYMBOL(ppa_directpath_port_add_fn);
+EXPORT_SYMBOL(ppa_check_if_netif_directpath_fn);
+EXPORT_SYMBOL(ppa_phys_port_add_hook_fn);
+EXPORT_SYMBOL(ppa_phys_port_remove_hook_fn);
+#endif
 EXPORT_SYMBOL(ppa_hook_directpath_register_dev_fn);
 EXPORT_SYMBOL(ppa_hook_directpath_ex_register_dev_fn);
 EXPORT_SYMBOL(ppa_hook_directpath_send_fn);
diff --git a/include/net/ppa/ppa_hook.h b/include/net/ppa/ppa_hook.h
index 5c4f885bb8f7..730d421ce0b3 100644
--- a/include/net/ppa/ppa_hook.h
+++ b/include/net/ppa/ppa_hook.h
@@ -244,6 +244,39 @@ extern int32_t ppa_register_qos_class2prio_hook_fn(int32_t port_id, PPA_NETIF *n
 #endif
 #endif
 /*!
+  \This function adds all the PPE_DIRECTPATH_DATA_ENTRY_VALID ports as Physical ports in PPA
+  \return The return value can be any one of the following:  \n
+  - PPA_SUCCESS on sucess
+  - PPA_FAILURE on error
+ */ 
+extern int32_t (*ppa_directpath_port_add_fn)(void);
+/*!
+  \This function checks a netdevice is a directpath device or not
+  \param[in] netif Pointer to the network device structure in  the protocol stack. For eg. pointer to a struct netdevice
+  \param[in] flag  Directpath specific flags
+  \return The return value can be any one of the following:  \n
+  - PPA_SUCCESS on sucess
+  - PPA_FAILURE on error
+ */
+extern int32_t (*ppa_check_if_netif_directpath_fn)(PPA_NETIF *netif,  uint16_t flag);
+/*!
+  \This function allocates phys port for network interfaces
+  \param[in] ifname Name of netdevice
+  \param[in] port Port to be allocated
+  \return The return value can be any one of the following:  \n
+  - PPA_SUCCESS on sucess
+  - PPA_FAILURE on error
+ */
+extern int32_t (*ppa_phys_port_add_hook_fn)(PPA_IFNAME *ifname, uint32_t port);
+/*!
+  \This function deallocates phys port for network interfaces
+  \param[in] port Port to be deallocated
+  \return The return value can be any one of the following:  \n
+  - PPA_SUCCESS on sucess
+  - PPA_FAILURE on error
+ */
+extern int32_t (*ppa_phys_port_remove_hook_fn)(uint32_t port);
+/*!
   \brief This function allows a device driver to register or deregister a network device to the PPA
   \param[out] if_id  PPA specific Interface Identifier. It is currently a number between 0 to 7. This Id is returned by the PPA module
   \param[in] dev Pointer to the network device structure in  the protocol stack. For eg. pointer to a struct netdevice
