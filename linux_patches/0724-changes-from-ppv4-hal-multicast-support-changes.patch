From 93e16ebccfcf9dff04a5b3d86065ce5ea7986086 Mon Sep 17 00:00:00 2001
From: "kamal.eradath" <kamal.eradath@intel.com>
Date: Fri, 2 Aug 2019 09:37:27 +0530
Subject: [PATCH] changes from ppv4-hal-multicast-support-changes

---
 include/net/ppa/ppa_api.h | 24 ++++++++++++++++++------
 1 file changed, 18 insertions(+), 6 deletions(-)

diff --git a/include/net/ppa/ppa_api.h b/include/net/ppa/ppa_api.h
index ea9d7ab58efe..945d3ce00745 100644
--- a/include/net/ppa/ppa_api.h
+++ b/include/net/ppa/ppa_api.h
@@ -273,7 +273,19 @@ typedef struct {
 	uint8_t ttl; /*!< Time to Live (TTL) value of interface which is used for multicast routing to decide if a packet can be routed onto that interface
 					 Note, it is not used at present.
 					*/
-} IF_TTL_ENTRY;
+} PPA_IF_TTL_ENTRY;
+
+enum flg{
+	PPA_IF_DEL,
+	PPA_IF_ADD,
+	PPA_IF_DROP
+};
+
+typedef struct {
+	uint8_t index;
+	enum flg flag;
+} PPA_C_OP;
+
 /*!
 	\brief This is the data structure for PPA Multicast Group membership. It specifies the interfaces which are members of
 	the specified IP Multicast Group address. Please see the discussion on outer and inner VLAN tags in the
@@ -282,9 +294,10 @@ typedef struct {
 typedef struct {
 	IP_ADDR_C ip_mc_group; /*!< Multicast IP address group */
 	int8_t num_ifs; /*!< Number of Interfaces which are member of this Multicast IP group address */
-	IF_TTL_ENTRY array_mem_ifs[PPA_MAX_MC_IFS_NUM]; /*!< Array of interface elements of maximum PPA_MAX_MC_IFS_NUM elements.
+	PPA_IF_TTL_ENTRY array_mem_ifs[PPA_MAX_MC_IFS_NUM]; /*!< Array of interface elements of maximum PPA_MAX_MC_IFS_NUM elements.
 														Actual number of entries is specified by num_ifs */
-	uint8_t if_mask; /*!< Mask of Interfaces corresponding to num_ifs interfaces specified in array_mem_ifs. For internaly use only. */
+	PPA_C_OP cop;               /*Current Operation done on the Interface  when they Join and leave i.e Add when join and Del when they leave */
+	uint16_t if_mask; 		/*!< Mask of Interfaces corresponding to num_ifs interfaces specified in array_mem_ifs. For internaly use only. */
 	PPA_IFNAME *src_ifname; /*!< the source interface of specified multicast IP address group */
 	uint32_t vlan_insert:1; /*!< If inner VLAN tag should be inserted into the frame at egress. Valid values are: PPA_ENABLED and PPA_DISABLED */
 	uint32_t vlan_remove:1; /*!< If inner VLAN untagging should be performed on the received frame. Untagging, if enabled, is
@@ -309,10 +322,8 @@ typedef struct {
 #if defined(RTP_SAMPLING_ENABLE) && RTP_SAMPLING_ENABLE
 	uint8_t RTP_flag; /*!< rtp flag */
 #endif
-#if IS_ENABLED(CONFIG_SOC_GRX500)
-	uint16_t	 group_id;		 /*!< Multicast group identifier allocated by the multicast daemon */
+	uint16_t	group_id;		 /*!< Multicast group identifier allocated by the multicast daemon */
 	uint8_t src_mac[PPA_ETH_ALEN]; /*!< source mac address for grx5xx. */
-#endif
 } PPA_MC_GROUP;
 /*!
 	\brief This data structure is an abstraction for unicast and multicast routing sessions.
@@ -602,6 +613,7 @@ typedef struct {
 	uint64_t 	bytes;
 	uint64_t 	packets;
 	uint32_t 	update_flags; 
+	PPA_C_OP 	*cop; /*Current Operation i.e Add when join and Del when they leave */
 #if IS_ENABLED(CONFIG_SOC_GRX500)
 	PPA_TUNNEL_INFO tnnl_info;
 	uint8_t		f_hiprio;
