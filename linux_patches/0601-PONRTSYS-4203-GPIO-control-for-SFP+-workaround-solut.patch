From 40ea60aea93060eb83c9414199c329c6ed41701b Mon Sep 17 00:00:00 2001
From: Robert Dabrowski <robertx.dabrowski@intel.com>
Date: Wed, 15 May 2019 09:46:52 +0200
Subject: [PATCH] PONRTSYS-4203: GPIO control for SFP+ workaround solution

- Reset the GPIO direction register before registering the GPIO controller

    When the GPIO controller gets registered the hogged GPIOs are
    already configured. But after the GPIO controller is registered the
    direction for all pins is reset to input again.
    The hogged GPIOs can be used to set a GPIO to a fixed value at boot up.
    The device tree would look like this:
        aquantia_reset {
            gpio-hog;
            gpios = <18 GPIO_ACTIVE_HIGH>;
            output-high;
            line-name = "aquantia_reset";
        };
---
 drivers/pinctrl/pinctrl-equilibrium.c | 3 +--
 1 file changed, 1 insertion(+), 2 deletions(-)

diff --git a/drivers/pinctrl/pinctrl-equilibrium.c b/drivers/pinctrl/pinctrl-equilibrium.c
index 0f9c315f990e..2ed8a9b3df93 100644
--- a/drivers/pinctrl/pinctrl-equilibrium.c
+++ b/drivers/pinctrl/pinctrl-equilibrium.c
@@ -451,6 +451,7 @@ static int gpiolib_reg(struct intel_pinctrl_drv_data *drvdata)
 			return -ENXIO;
 		}
 		spin_lock_init(&desc->lock);
+		writel(0x0, desc->membase + GPIO_DIR);
 
 		ret = gpiochip_setup(dev, desc);
 		if (ret)
@@ -1505,8 +1506,6 @@ static void pinctrl_pin_reset(struct intel_pinctrl_drv_data *drvdata)
 				continue;
 			eqbr_set_pin_mux(drvdata, EQBR_MUX_GPIO,
 					 pin + gdesc->bank->pin_base);
-			intel_eqbr_gpio_dir_input(&gdesc->chip, pin);
-
 			spin_lock_irqsave(&drvdata->lock, flags);
 			eqbr_set_val(gdesc->bank->membase + REG_PUEN,
 				     pin, 1, 0, NULL);
