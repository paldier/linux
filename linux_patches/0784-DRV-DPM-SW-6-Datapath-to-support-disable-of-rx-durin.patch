From 6c89a80a071cb479af90d312e2068b46bce853c8 Mon Sep 17 00:00:00 2001
From: Rekha Eswaran <rekha.eswaran@intel.com>
Date: Thu, 12 Sep 2019 10:24:42 +0800
Subject: [PATCH] DRV_DPM_SW-6 - Datapath to support disable of rx during
 register subif using dp_subif_data information

---
 drivers/net/datapath/dpm/datapath_api.c        |  5 ++++-
 drivers/net/datapath/dpm/gswip31/datapath_rx.c | 14 ++++++++------
 include/net/datapath_api.h                     | 13 ++++++++++---
 3 files changed, 22 insertions(+), 10 deletions(-)

diff --git a/drivers/net/datapath/dpm/datapath_api.c b/drivers/net/datapath/dpm/datapath_api.c
index 87b91dfd93f1..04559aae9ced 100644
--- a/drivers/net/datapath/dpm/datapath_api.c
+++ b/drivers/net/datapath/dpm/datapath_api.c
@@ -633,7 +633,10 @@ int32_t dp_register_subif_private(int inst, struct module *owner,
 			subif_name, sizeof(sif->device_name) - 1);
 		sif->subif_flag = flags;
 		sif->data_flag_ops = data->flag_ops;
-		STATS_SET(sif->rx_flag, 1);
+		if (data->flag_ops & DP_SUBIF_RX_FLAG)
+			STATS_SET(sif->rx_flag, !!data->rx_en_flag);
+		else
+			STATS_SET(sif->rx_flag, 1);
 		port_info->status = PORT_SUBIF_REGISTERED;
 		subif_id->port_id = port_id;
 		subif_id->subif = sif->subif;
diff --git a/drivers/net/datapath/dpm/gswip31/datapath_rx.c b/drivers/net/datapath/dpm/gswip31/datapath_rx.c
index f6c4bda65cda..e726d9f36099 100644
--- a/drivers/net/datapath/dpm/gswip31/datapath_rx.c
+++ b/drivers/net/datapath/dpm/gswip31/datapath_rx.c
@@ -236,13 +236,15 @@ int32_t dp_rx_31(struct sk_buff *skb, u32 flags)
 		//desc_1->all &= dma_rx_desc_mask1.all;
 		desc_3->all &= dma_rx_desc_mask3.all;
 		skb->priority = desc_1->field.classid;
-		skb->dev = sif->netif; /* note: for DSL ATM case, its driver
-					* will correct it in later stage
+		skb->dev = sif->netif; /* note: for DSL ATM case, skb->dev can
+					* be NULL since DSL subif is not real
+					* subif as defined by GSWIP
+					* and we cannot get the proper vap.
+					* At the same time, for pppoa case,
+					* DSL DP driver register with NULL dev
+					* So its driver must correct it
 					*/
-		if (((dp_port->alloc_flags & DP_F_FAST_DSL) == 0) && /*non-dsl*/
-			sif->flags) { /*not de-registered */
-			dev = sif->netif;
-		}
+		dev = sif->netif;
 		if (decryp) { /*workaround mark for bypass xfrm policy*/
 			desc_1->field.dec = 1;
 			desc_1->field.enc = 1;
diff --git a/include/net/datapath_api.h b/include/net/datapath_api.h
index fd2774db2851..a955407af60a 100644
--- a/include/net/datapath_api.h
+++ b/include/net/datapath_api.h
@@ -768,6 +768,10 @@ enum DP_SUBIF_DATA_FLAG {
 	DP_SUBIF_LCT = BIT(2), /*!< Register as LCT port */
 	DP_SUBIF_VANI = BIT(3), /*!< Register as vANI Subif */
 	DP_SUBIF_DEQPORT_NUM = BIT(4), /*!< Specify num of deq port per subif */
+	DP_SUBIF_RX_FLAG = BIT(5), /*!< To Specify if Rx enable/disable during
+				    * DP register subif using rx_en_flag
+				    * specified under struct dp_subif_data
+				    */
 };
 
 /*! @brief dp_subif_id struct for get_netif_subif */
@@ -874,6 +878,9 @@ struct dp_subif_data {
 				* mac learning for subif
 				*/
 	u16 num_deq_port; /*!< [in] To specify number of DEQ_PORT one subif */
+	u32 rx_en_flag; /*!< [in] rx_en_flag = 1 - To enable dp_rx
+			 * rx_en_flag = 0 - disable dp_rx
+			 */
 };
 
 /*! @brief enum DP_F_DATA_RESV_CQM_PORT */
@@ -1660,11 +1667,11 @@ int dp_set_min_frame_len(s32 dp_port,
 /*!
  *@brief  Enable/Disable forwarding RX packet to specified netif or ifname
  *@param[in] netif netowrk device pointer. if NULL, then check ifname
- *@param[in] ifname if netif == NULL, then check ifname
- *@param[in] rx_enable: 1 enable rx for this device, otherwise
+ *@param[in] ifname if netif == NULL
+ *@param[in] rx_enable: 1 enable rx for this device
  *@param[in] flag:
  *            DP_RX_ENABLE: enable rx, ie, allow forwarding rx pkt to this dev
- *            DP_RX_ENABLE: stop rx, ie, DP should drop rx pkt for this dev
+ *            DP_RX_DISABLE: stop rx, ie, DP should drop rx pkt for this dev
  *@return return 0 if OK / -1 if error
  */
 #define DP_RX_ENABLE  1
