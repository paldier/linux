From 8f83a788db02aeeab63d1d33f5afaadfd4cbbae6 Mon Sep 17 00:00:00 2001
From: shaoguoh <guohua.shao@intel.com>
Date: Mon, 2 Jul 2018 14:00:18 +0800
Subject: [PATCH] Jira DRVLIB_SW-803: dp syn the code with 8.1_ER2

---
 drivers/net/ethernet/lantiq/cqm/grx500/cbm.c       | 12 +++----
 drivers/net/ethernet/lantiq/datapath/datapath.h    |  1 +
 .../net/ethernet/lantiq/datapath/datapath_api.c    |  7 ++--
 .../ethernet/lantiq/datapath/datapath_notifier.c   |  2 +-
 .../lantiq/datapath/gswip30/datapath_gswip.c       |  7 ++--
 .../lantiq/datapath/gswip30/datapath_misc.c        | 40 ++++++++++++----------
 .../lantiq/datapath/gswip30/datapath_proc.c        |  8 +++--
 .../lantiq/datapath/gswip31/datapath_misc.c        | 11 ++++--
 .../lantiq/datapath/gswip31/datapath_misc.h        |  1 -
 .../lantiq/datapath/gswip31/datapath_proc.c        |  8 +++--
 drivers/net/ethernet/lantiq/tmu/drv_tmu_ll.c       | 18 +++++-----
 drivers/net/ethernet/lantiq/tmu/drv_tmu_ll_proc.c  |  3 +-
 12 files changed, 68 insertions(+), 50 deletions(-)

diff --git a/drivers/net/ethernet/lantiq/cqm/grx500/cbm.c b/drivers/net/ethernet/lantiq/cqm/grx500/cbm.c
index 5d9319b2d3eb..78dbf732f7fc 100644
--- a/drivers/net/ethernet/lantiq/cqm/grx500/cbm.c
+++ b/drivers/net/ethernet/lantiq/cqm/grx500/cbm.c
@@ -330,10 +330,8 @@ s32 pmac, u32 flags)
 			if ((ptr->pmac == pmac) &&
 			    (!(ptr->egp_type & DP_F_MPE_ACCEL)) &&
 			    (!(ptr->egp_type & DP_F_DIRECTPATH_RX)) &&
-			#ifdef CONFIG_LTQ_DP_ACA_CSUM_WORKAROUND
-			    (1)
-			#else
-			    (!(ptr->egp_type & DP_F_CHECKSUM))
+			#ifndef CONFIG_LTQ_DATAPATH_ACA_CSUM_WORKAROUND
+				(!(ptr->egp_type & DP_F_CHECKSUM))
 			#endif
 			) {
 				spin_unlock_irqrestore(&cbm_port_mapping,
@@ -414,7 +412,7 @@ struct cbm_egp_map epg_lookup_table[] = {
 	{17,	6,			 DP_F_FAST_ETH_LAN},
 	{18,	CBM_PMAC_NOT_APPL, DP_F_FAST_DSL_DOWNSTREAM},
 	{19,	15,			 DP_F_FAST_ETH_WAN},
-	#ifdef CONFIG_LTQ_DP_ACA_CSUM_WORKAROUND
+	#ifdef CONFIG_LTQ_DATAPATH_ACA_CSUM_WORKAROUND
 	{20,	CBM_PMAC_DYNAMIC, DP_F_CHECKSUM},
 	#else
 	{20,	CBM_PMAC_NOT_APPL, DP_F_CHECKSUM},
@@ -3144,7 +3142,7 @@ s32 direct_dp_enable(u32 port_id, u32 flags, u32 type)
 	return CBM_SUCCESS;
 }
 
-#ifdef CONFIG_LTQ_DP_ACA_CSUM_WORKAROUND
+#ifdef CONFIG_LTQ_DATAPATH_ACA_CSUM_WORKAROUND
 s32 checksum_dp_enable(u32 port_id, u32 flags, u32 type)
 {
 	int j, queue_number;
@@ -3344,7 +3342,7 @@ dp_enable(
 		if ((local_entry->egp_type == DP_F_DIRECT) && (flags & CBM_PORT_F_DISABLE))
 			goto UNLOCK;
 	}
-	#ifdef CONFIG_LTQ_DP_ACA_CSUM_WORKAROUND
+	#ifdef CONFIG_LTQ_DATAPATH_ACA_CSUM_WORKAROUND
 	else if (local_entry && (local_entry->egp_type == DP_F_CHECKSUM))
 		checksum_dp_enable(port_id, flags, local_entry->egp_type);
 	#endif
diff --git a/drivers/net/ethernet/lantiq/datapath/datapath.h b/drivers/net/ethernet/lantiq/datapath/datapath.h
index f9014d0426da..be8b7debcdb2 100644
--- a/drivers/net/ethernet/lantiq/datapath/datapath.h
+++ b/drivers/net/ethernet/lantiq/datapath/datapath.h
@@ -129,6 +129,7 @@
 
 #define PARSER_FLAG_SIZE   40
 #define PARSER_OFFSET_SIZE 8
+#define DP_PMAC_OPS(gsw, cmd) (dp_gsw_cb)(gsw)->gsw_pmac_ops.cmd
 
 #define PKT_PASER_FLAG_OFFSET   0
 #define PKT_PASER_OFFSET_OFFSET (PARSER_FLAG_SIZE)
diff --git a/drivers/net/ethernet/lantiq/datapath/datapath_api.c b/drivers/net/ethernet/lantiq/datapath/datapath_api.c
index 7296b63a771c..b08f7a0893b7 100644
--- a/drivers/net/ethernet/lantiq/datapath/datapath_api.c
+++ b/drivers/net/ethernet/lantiq/datapath/datapath_api.c
@@ -831,7 +831,7 @@ int32_t dp_alloc_port_ext(int inst, struct module *owner,
 	res = dp_alloc_port_private(inst, owner, dev, dev_port,
 				    port_id, pmac_cfg, data, flags);
 	DP_LIB_UNLOCK(&dp_lock);
-	if (!inst)
+	if (inst) /* only inst zero need ACA workaround */
 		return res;
 
 #ifdef CONFIG_LTQ_DATAPATH_ACA_CSUM_WORKAROUND
@@ -2338,12 +2338,13 @@ int32_t dp_xmit(struct net_device *rx_if, dp_subif_t *rx_subif,
 			if (aca_portid > 0)
 				desc_1->field.ep = aca_portid;
 #endif
-		} else if (flags & DP_TX_DSL_FCS) {/*must after checksum chk*/
+		} else if (flags & DP_TX_DSL_FCS) {/* after checksum check */
 			/* w/ pmac for FCS purpose*/
-			DP_CB(inst, get_dma_pmac_templ)(TEMPL_OTHERS, &pmac,
+			DP_CB(inst, get_dma_pmac_templ)(TEMPL_CHECKSUM, &pmac,
 							desc_0, desc_1,
 							dp_info2);
 			DP_CB(inst, set_pmac_subif)(&pmac, rx_subif->subif);
+			insert_pmac_f = 1;
 		} else { /*no pmac */
 			DP_CB(inst, get_dma_pmac_templ)(TEMPL_NORMAL, NULL,
 							desc_0, desc_1,
diff --git a/drivers/net/ethernet/lantiq/datapath/datapath_notifier.c b/drivers/net/ethernet/lantiq/datapath/datapath_notifier.c
index fc3b083d66e9..32421fde8031 100644
--- a/drivers/net/ethernet/lantiq/datapath/datapath_notifier.c
+++ b/drivers/net/ethernet/lantiq/datapath/datapath_notifier.c
@@ -49,7 +49,7 @@ int dp_event(struct notifier_block *this, unsigned long event, void *ptr)
 	struct inst_property *prop;
 
 	dev = netdev_notifier_info_to_dev(ptr);
-	if(!dev)
+	if (!dev)
 		return 0;
 	addr = (u8 *)dev->dev_addr;
 	if (!addr || dev->addr_len != ETH_ALEN) /*only support ethernet */
diff --git a/drivers/net/ethernet/lantiq/datapath/gswip30/datapath_gswip.c b/drivers/net/ethernet/lantiq/datapath/gswip30/datapath_gswip.c
index 62fe4b585147..1fb4ff9ebd97 100644
--- a/drivers/net/ethernet/lantiq/datapath/gswip30/datapath_gswip.c
+++ b/drivers/net/ethernet/lantiq/datapath/gswip30/datapath_gswip.c
@@ -183,10 +183,11 @@ int dp_pmac_set_30(int inst, u32 port, dp_pmac_cfg_t *pmac_cfg)
 			egcfg.nDestPortId = port;
 			egcfg.nTrafficClass = i;
 			egcfg.nFlowIDMsb = j;
-
 			memset(&pmac_glb, 0, sizeof(pmac_glb));
-			gsw_core_api((dp_gsw_cb)gswr_r->gsw_pmac_ops
-				     .Pmac_Gbl_CfgGet, gswr_r, &pmac_glb);
+			gsw_core_api(DP_PMAC_OPS(gswr_r, Pmac_Gbl_CfgGet),
+				     gswr_r, &pmac_glb);
+			gsw_core_api(DP_PMAC_OPS(gswr_r, Pmac_Eg_CfgGet),
+				     gswr_r, &egcfg);
 			egcfg.bProcFlagsSelect = pmac_glb.bProcFlagsEgCfgEna;
 			DP_DEBUG(DP_DBG_FLAG_DBG, "bProcFlagsSelect=%u\n",
 				 egcfg.bProcFlagsSelect);
diff --git a/drivers/net/ethernet/lantiq/datapath/gswip30/datapath_misc.c b/drivers/net/ethernet/lantiq/datapath/gswip30/datapath_misc.c
index 8c03e4601c63..92c4fc2ef324 100644
--- a/drivers/net/ethernet/lantiq/datapath/gswip30/datapath_misc.c
+++ b/drivers/net/ethernet/lantiq/datapath/gswip30/datapath_misc.c
@@ -111,25 +111,6 @@ static void init_dma_pmac_template(int portid, u32 flags)
 		}
 		/*for checksum for pmac_template[1]*/
 		dp_info->pmac_template[TEMPL_CHECKSUM].tcp_chksum = 1;
-	} else if (flags & DP_F_FAST_WLAN) {
-		/*someties with pma
-		 *normal fast_wlan without pmac
-		 *So no need to configure pmac_tmplate[0]
-		 */
-		/*fast_wlan with checksum support */
-		dp_info->pmac_template[TEMPL_CHECKSUM].port_map_en = 1;
-		dp_info->pmac_template[TEMPL_CHECKSUM].sppid = portid;
-		dp_info->pmac_template[TEMPL_CHECKSUM].redirect = 1;
-		dp_info->pmac_template[TEMPL_CHECKSUM].tcp_chksum = 1;
-		dp_info->pmac_template[TEMPL_CHECKSUM].class_en = 1;
-		SET_PMAC_PORTMAP(&dp_info->pmac_template[TEMPL_CHECKSUM],
-				 portid);
-		dp_info->dma1_template[TEMPL_CHECKSUM].field.enc = 1;
-		dp_info->dma1_template[TEMPL_CHECKSUM].field.dec = 1;
-		dp_info->dma1_template[TEMPL_CHECKSUM].field.mpe2 = 1;
-		dp_info->dma1_mask_template[TEMPL_CHECKSUM].field.enc = 0;
-		dp_info->dma1_mask_template[TEMPL_CHECKSUM].field.dec = 0;
-		dp_info->dma1_mask_template[TEMPL_CHECKSUM].field.mpe2 = 0;
 	} else if (flags & DP_F_DIRECTLINK) { /*always with pmac*/
 		/*normal dirctpath without checksum support
 		 *but with pmac to Switch for accelerate
@@ -215,6 +196,27 @@ static void init_dma_pmac_template(int portid, u32 flags)
 		dp_info->dma1_mask_template[TEMPL_OTHERS].field.enc = 0;
 		dp_info->dma1_mask_template[TEMPL_OTHERS].field.dec = 0;
 		dp_info->dma1_mask_template[TEMPL_OTHERS].field.mpe2 = 0;
+	} else if (flags & DP_F_FAST_WLAN) {
+		/* WLAN block must put after DSL/DIRECTLINK block
+		 * since all ACA device in GRX500 is using WLAN flag wrongly
+		 * and here must make sure still be back-compatible for it.
+		 * normal fast_wlan without pmac except checksum offload support
+		 * So no need to configure pmac_tmplate[0]
+		 */
+		/*fast_wlan with checksum support */
+		dp_info->pmac_template[TEMPL_CHECKSUM].port_map_en = 1;
+		dp_info->pmac_template[TEMPL_CHECKSUM].sppid = portid;
+		dp_info->pmac_template[TEMPL_CHECKSUM].redirect = 1;
+		dp_info->pmac_template[TEMPL_CHECKSUM].tcp_chksum = 1;
+		dp_info->pmac_template[TEMPL_CHECKSUM].class_en = 1;
+		SET_PMAC_PORTMAP(&dp_info->pmac_template[TEMPL_CHECKSUM],
+				 portid);
+		dp_info->dma1_template[TEMPL_CHECKSUM].field.enc = 1;
+		dp_info->dma1_template[TEMPL_CHECKSUM].field.dec = 1;
+		dp_info->dma1_template[TEMPL_CHECKSUM].field.mpe2 = 1;
+		dp_info->dma1_mask_template[TEMPL_CHECKSUM].field.enc = 0;
+		dp_info->dma1_mask_template[TEMPL_CHECKSUM].field.dec = 0;
+		dp_info->dma1_mask_template[TEMPL_CHECKSUM].field.mpe2 = 0;
 	} else /*if(flags & DP_F_DIRECT ) */{/*always with pmac*/
 		/*normal dirctpath without checksum support */
 		dp_info->pmac_template[TEMPL_NORMAL].port_map_en = 0;
diff --git a/drivers/net/ethernet/lantiq/datapath/gswip30/datapath_proc.c b/drivers/net/ethernet/lantiq/datapath/gswip30/datapath_proc.c
index 9d405da18d2c..2173e2c26c2e 100644
--- a/drivers/net/ethernet/lantiq/datapath/gswip30/datapath_proc.c
+++ b/drivers/net/ethernet/lantiq/datapath/gswip30/datapath_proc.c
@@ -3077,6 +3077,10 @@ static ssize_t proc_gsw_pmac_write(struct file *file, const char *buf,
 		for (i = class_s; i <= class_e; i++) {
 			for (k = flow_s; k <= flow_e; k++) {
 				pmac.eg.nTrafficClass = i;
+				pmac.eg.nFlowIDMsb = k;
+				ret = gsw_core_api(DP_PMAC_OPS(gsw_handle,
+							       Pmac_Eg_CfgGet),
+						   gsw_handle, &pmac);
 				/*Note: bProcFlagsSelect zero,
 				 *just nTrafficClass,
 				 *else use MPE1/2/ENC/DEC flag instead
@@ -3090,8 +3094,8 @@ static ssize_t proc_gsw_pmac_write(struct file *file, const char *buf,
 				pmac.eg.bDecFlag = (pmac.eg.nTrafficClass >>
 					3) & 1;
 				pmac.eg.nFlowIDMsb = k;
-				ret = gsw_core_api((dp_gsw_cb)gsw_handle->
-						   gsw_pmac_ops.Pmac_Eg_CfgSet,
+				ret = gsw_core_api(DP_PMAC_OPS(gsw_handle,
+							       Pmac_Eg_CfgSet),
 						   gsw_handle, &pmac);
 			}
 		}
diff --git a/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_misc.c b/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_misc.c
index ad9d3c9e9843..1d325c32129a 100644
--- a/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_misc.c
+++ b/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_misc.c
@@ -101,8 +101,6 @@ static void init_dma_pmac_template(int portid, u32 flags)
 #if IS_ENABLED(CONFIG_LTQ_DATAPATH_PTP1588)
 		dp_info->pmac_template[TEMPL_PTP].ptp= 1;
 #endif
-	} else if (flags & DP_F_FAST_WLAN) {/*someties with pmac*/
-		/*normal fast_wlan without pmac.*/
 	} else if (flags & DP_F_DIRECTLINK) { /*always with pmac*/
 		/*normal dirctpath without checksum support
 		 *but with pmac to Switch for accelerate
@@ -196,6 +194,15 @@ static void init_dma_pmac_template(int portid, u32 flags)
 		dp_info->dma1_mask_template[TEMPL_OTHERS].field.enc = 0;
 		dp_info->dma1_mask_template[TEMPL_OTHERS].field.dec = 0;
 		dp_info->dma1_mask_template[TEMPL_OTHERS].field.mpe2 = 0;
+	} else if (flags & DP_F_FAST_WLAN) {
+		/* WLAN block must put after DSL/DIRECTLINK block
+		 * since all ACA device in GRX500 is using WLAN flag wrongly
+		 * and here must make sure still be back-compatible for it.
+		 * normal fast_wlan without pmac except checksum offload support
+		 * So no need to configure pmac_tmplate[0]
+		 *
+		 * Need to add real stuff later
+		 */
 	} else /*if(flags & DP_F_DIRECT ) */{/*always with pmac*/
 		/*normal dirctpath without checksum support */
 		dp_info->pmac_template[TEMPL_NORMAL].igp_msb = portid;
diff --git a/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_misc.h b/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_misc.h
index a44d4cb7f0cb..5cf02ad6598c 100644
--- a/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_misc.h
+++ b/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_misc.h
@@ -47,7 +47,6 @@ enum CQE_LOOKUP_MODE {
 };
 
 #define PMAC_SIZE 8
-
 struct gsw_itf {
 	u8 ep; /*-1 means no assigned yet for dynamic case */
 	u8 fixed; /*fixed (1) or dynamically allocate (0)*/
diff --git a/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_proc.c b/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_proc.c
index 3aedec511cfe..84222478fbd2 100644
--- a/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_proc.c
+++ b/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_proc.c
@@ -1712,6 +1712,10 @@ static ssize_t proc_gsw_pmac_write(struct file *file, const char *buf,
 		for (i = class_s; i <= class_e; i++) {
 			for (k = flow_s; k <= flow_e; k++) {
 				pmac.eg.nTrafficClass = i;
+				pmac.eg.nFlowIDMsb = k;
+				ret = gsw_core_api(DP_PMAC_OPS(gsw_handle,
+							       Pmac_Eg_CfgGet),
+						   gsw_handle, &pmac);
 				/*Note: bProcFlagsSelect zero,
 				 *just nTrafficClass,
 				 *else use MPE1/2/ENC/DEC flag instead
@@ -1725,8 +1729,8 @@ static ssize_t proc_gsw_pmac_write(struct file *file, const char *buf,
 				pmac.eg.bDecFlag = (pmac.eg.nTrafficClass >>
 					3) & 1;
 				pmac.eg.nFlowIDMsb = k;
-				ret = gsw_core_api((dp_gsw_cb)gsw_handle->
-						   gsw_pmac_ops.Pmac_Eg_CfgSet,
+				ret = gsw_core_api(DP_PMAC_OPS(gsw_handle,
+							       Pmac_Eg_CfgSet),
 						   gsw_handle, &pmac);
 			}
 		}
diff --git a/drivers/net/ethernet/lantiq/tmu/drv_tmu_ll.c b/drivers/net/ethernet/lantiq/tmu/drv_tmu_ll.c
old mode 100644
new mode 100755
index 3724e5942bc8..4b53b53c7179
--- a/drivers/net/ethernet/lantiq/tmu/drv_tmu_ll.c
+++ b/drivers/net/ethernet/lantiq/tmu/drv_tmu_ll.c
@@ -5069,20 +5069,20 @@ int tmu_queue_dump(struct seq_file *s, int pos)
 	/*Order the queues and link them together according to associated SBID */
 	print_queue1(s, first_print);
 	first_print = 0;
- EXIT:
-	if (stat.qnum == 0) {
-		pos++;
-	} else {
+EXIT:
+	pos++;
+	if (stat.qnum)
 		SEQ_PRINTF(s, "\n");
-		pos++;
-	}
-	/*pos=-1;  test */
-	if (pos >= EGRESS_PORT_ID_MAX || pos <= 0) {
+	if (pos >= EGRESS_PORT_ID_MAX) {
 		tmu_global_tail_drop_thr_get(&thr);
 		tmu_proc_printf(s, "           goth=(%d, %d, %d, %d)\n",
 				thr.goth[0], thr.goth[1], thr.goth[2],
 				thr.goth[3]);
-		pos = -1;	/*end of the loop */
+	}
+	if (seq_has_overflowed(s))
+		pos -= 1; /* return original pos */
+	if (pos >= EGRESS_PORT_ID_MAX) {
+		pos = -1; /* end of the loop */
 	}
 	return pos;
 }
diff --git a/drivers/net/ethernet/lantiq/tmu/drv_tmu_ll_proc.c b/drivers/net/ethernet/lantiq/tmu/drv_tmu_ll_proc.c
old mode 100644
new mode 100755
index 10e3ea83d070..3e78c2bb14c2
--- a/drivers/net/ethernet/lantiq/tmu/drv_tmu_ll_proc.c
+++ b/drivers/net/ethernet/lantiq/tmu/drv_tmu_ll_proc.c
@@ -97,7 +97,8 @@ int tmu_lookup_dump(struct seq_file *s, int pos)
 {
 	if (find_pattern(pos, s, -1) < 0)
 		return pos;
-	pos++;
+	if (!seq_has_overflowed(s))
+		pos++;
 	if (pos >= 16)
 		pos = -1;
 	return pos;
