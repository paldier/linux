From bdcb8cca43186ae4ab1176d8ed076ac466ef61ac Mon Sep 17 00:00:00 2001
From: thampan <joby.thampan@intel.com>
Date: Thu, 20 Sep 2018 17:20:45 +0800
Subject: [PATCH] Update the review comments

---
 drivers/net/ethernet/lantiq/switch-api/gsw_flow_core.c |  1 +
 drivers/net/ethernet/lantiq/switch-api/gsw_flow_core.h |  2 +-
 drivers/net/ethernet/lantiq/switch-api/gsw_swmcast.c   | 14 +++++++-------
 3 files changed, 9 insertions(+), 8 deletions(-)

diff --git a/drivers/net/ethernet/lantiq/switch-api/gsw_flow_core.c b/drivers/net/ethernet/lantiq/switch-api/gsw_flow_core.c
index 76d5c02b12c9..72cd9efeda0b 100644
--- a/drivers/net/ethernet/lantiq/switch-api/gsw_flow_core.c
+++ b/drivers/net/ethernet/lantiq/switch-api/gsw_flow_core.c
@@ -11303,6 +11303,7 @@ GSW_return_t GSW_MulticastTableEntryRead(void *cdev,
 
 		if (parm->bInitial == 1) {
 			gswdev->msw_rinx = 0; /*Start from the index 0 */
+			gswdev->msw_rinx_31 = 0;
 			parm->bInitial = 0;
 		}
 
diff --git a/drivers/net/ethernet/lantiq/switch-api/gsw_flow_core.h b/drivers/net/ethernet/lantiq/switch-api/gsw_flow_core.h
index 1cfe20478f12..460daeead0ef 100644
--- a/drivers/net/ethernet/lantiq/switch-api/gsw_flow_core.h
+++ b/drivers/net/ethernet/lantiq/switch-api/gsw_flow_core.h
@@ -911,7 +911,7 @@ typedef struct {
 	u16 mac_rd_index; 			/* read mac table index */
 	u8 mhw_rinx;
 	u8 msw_rinx;
-	u16 msw_rinx_31;	
+	u16 msw_rinx_31;
 	u8 cport;
 	u8 gsw_dev;
 
diff --git a/drivers/net/ethernet/lantiq/switch-api/gsw_swmcast.c b/drivers/net/ethernet/lantiq/switch-api/gsw_swmcast.c
index bb1402768086..75d103878fa3 100644
--- a/drivers/net/ethernet/lantiq/switch-api/gsw_swmcast.c
+++ b/drivers/net/ethernet/lantiq/switch-api/gsw_swmcast.c
@@ -365,7 +365,7 @@ int gsw_insert_hashtable_entry(void *cdev, GSW_multicastTable_t *parm)
 	ret = search_hashtable_entry(hashidx, &pattern, &found_loc);
 
 	if (ret == TABLE_ERROR) {
-		printk(":::::: IMPOSSIBLE ::::: TABLE ERROR\n");
+		pr_err(":::::: IMPOSSIBLE ::::: TABLE ERROR\n");
 		return ret;
 	} else if (ret ==  MATCH_FOUND) {
 
@@ -384,12 +384,12 @@ int gsw_insert_hashtable_entry(void *cdev, GSW_multicastTable_t *parm)
 	   2. Existing hashidx with a new entry
 	 */
 	if ((loc = get_hashtable_empty_slot(cdev, phtable)) == TBL_FULL) {
-		printk("Hash Table FULL\n");
+		pr_err("Hash Table FULL\n");
 		return TBL_FULL;
 	}
 
 	if (loc > MCAST_TABLE_SIZE) {
-		printk("Location got is wrong\n");
+		pr_err("Location got is wrong\n");
 		return FAIL;
 	}
 
@@ -493,15 +493,15 @@ int gsw_search_hashtable_entry(void *cdev, GSW_multicastTable_t *parm, GSW_multi
 	ret = search_hashtable_entry(hashidx, &pattern, &found_loc);
 
 	if (ret == TABLE_ERROR) {
-		printk(":::::: IMPOSSIBLE ::::: TABLE ERROR\n");
+		pr_err(":::::: IMPOSSIBLE ::::: TABLE ERROR\n");
 	} else if (ret ==  MATCH_FOUND) {
 		*loc = found_loc;
 		gsw_get_swmcast_entry(cdev, read_parm, found_loc);
 	} else if (ret == NO_VALID_HASHENTRY) {
-		printk("No Valid Entry to the HASHIDX %x\n", hashidx);
+		pr_err("No Valid Entry to the HASHIDX %x\n", hashidx);
 		/* There is already some entry in the hash index, add new one */
 	} else if (ret == MATCH_NOT_FOUND) {
-		printk("MATCH_NOT_FOUND to the HASHIDX %x\n", hashidx);
+		pr_err("MATCH_NOT_FOUND to the HASHIDX %x\n", hashidx);
 	}
 
 	return ret;
@@ -553,7 +553,7 @@ static int search_hashtable_entry(u32 hashidx, MCAST_HASHTBL_PTN *pattern, u32 *
 		pr_debug("Current Idx %d Nxt Ptr %d\n", table_ptr->idx, table_ptr->nxt_idx);
 
 		if (table_ptr->idx == table_ptr->nxt_idx) {
-			printk("No match is found\n");
+			pr_err("No match is found\n");
 			return MATCH_NOT_FOUND;
 		}
 
