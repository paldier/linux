From 83456e96d926cfd39f1d2022662e98d021472b6a Mon Sep 17 00:00:00 2001
From: Hua Ma <hua.ma@linux.intel.com>
Date: Thu, 21 Jun 2018 17:38:02 +0800
Subject: [PATCH] Add support for clk driver grx500

---
 drivers/clk/intel/clk-grx500.c               | 296 +++++++++++++++++++++++++++
 include/dt-bindings/clock/intel,grx500-clk.h | 146 +++++++++++++
 2 files changed, 442 insertions(+)

diff --git a/drivers/clk/intel/clk-grx500.c b/drivers/clk/intel/clk-grx500.c
new file mode 100644
index 000000000000..092246c87fdb
--- /dev/null
+++ b/drivers/clk/intel/clk-grx500.c
@@ -0,0 +1,296 @@
+/*
+ *  Copyright (C) 2016 Intel Corporation.
+ *  Zhu YiXin <Yixin.zhu@intel.com>
+ *
+ *  This program is free software; you can redistribute it and/or modify it
+ *  under the terms and conditions of the GNU General Public License,
+ *  version 2, as published by the Free Software Foundation.
+ *
+ *  This program is distributed in the hope it will be useful, but WITHOUT
+ *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ *  more details.
+ *
+ *  The full GNU General Public License is included in this distribution in
+ *  the file called "COPYING".
+ */
+
+#include <linux/clk-provider.h>
+#include <linux/of.h>
+#include <linux/of_address.h>
+#include <linux/spinlock.h>
+#include <dt-bindings/clock/intel,grx500-clk.h>
+#include "clk_api.h"
+
+static DEFINE_SPINLOCK(pll0a_lock);
+static DEFINE_SPINLOCK(pll0b_lock);
+
+/* clock speeds */
+#define CLK_16M		16000000
+#define CLK_33M		33333333
+#define CLK_50M		50000000
+#define CLK_100M	100000000
+#define CLK_133M	133333333
+#define CLK_150M	150000000
+#define CLK_166M	166666666
+#define CLK_200M	200000000
+#define CLK_250M	250000000
+#define CLK_300M	300000000
+#define CLK_333M	333333333
+#define CLK_400M	400000000
+#define CLK_500M	500000000
+#define CLK_600M	600000000
+#define CLK_666M	666666666
+#define CLK_720M	720000000
+#define CLK_800M	800000000
+#define CLK_1000M	1000000000
+#define CLK_1200M	1200000000
+#define CLK_2000M	2000000000UL
+#define CLK_2400M	2400000000UL
+
+/* clock out speeds */
+#define CLK_8M_192K	8192000
+#define CLK_25M		25000000
+#define CLK_40M		40000000
+
+#define VOICE_CLK_VAL	0x2
+
+static const struct gate_dummy_clk_data grx500_clk_gate_i2c_data __initconst = {
+	0
+};
+
+static void __init grx500_clk_gate_i2c_setup(struct device_node *node)
+{
+	gate_dummy_clk_setup(node, &grx500_clk_gate_i2c_data);
+}
+
+CLK_OF_DECLARE(grx500_gatei2cclk, INTEL_GRX500_DT_GATE_I2C_CLK,
+	       grx500_clk_gate_i2c_setup);
+
+static const struct fixed_rate_clk_data grx500_clk_voice_data __initconst = {
+	.shift = VOICE_CLK_SHIFT,
+	.width = VOICE_CLK_WIDTH,
+	.fixed_rate = CLK_8M_192K,
+	.setval = VOICE_CLK_VAL,
+};
+
+static void __init grx500_clk_voice_setup(struct device_node *node)
+{
+	fixed_rate_clk_setup(node, &grx500_clk_voice_data);
+}
+
+CLK_OF_DECLARE(grx500_voiceclk, INTEL_GRX500_DT_VOICE_CLK,
+	       grx500_clk_voice_setup);
+
+static const struct gate_clk_data grx500_clk_gate2_data __initconst = {
+	.mask = GATE2_CLK_MASK,
+	.def_onoff = BIT(GATE_PCIE0_CTRL) | BIT(GATE_PCIE1_CTRL)
+		| BIT(GATE_PCIE2_CTRL),
+	.reg_size = 32,
+	.flags = CLK_INIT_DEF_CFG_REQ,
+};
+
+static void __init grx500_clk_gate2_setup(struct device_node *node)
+{
+	gate_clk_setup(node, &grx500_clk_gate2_data);
+}
+
+CLK_OF_DECLARE(grx500_gate2clk, INTEL_GRX500_DT_GATE2_CLK,
+	       grx500_clk_gate2_setup);
+
+static const struct gate_clk_data grx500_clk_gate1_data __initconst = {
+	.mask = GATE1_CLK_MASK,
+	.def_onoff = BIT(GATE_CBM) | BIT(GATE_EBU) | BIT(GATE_UART)
+		| BIT(GATE_PAE) | BIT(GATE_GSWIP)
+		| BIT(GATE_USB0) | BIT(GATE_USB1),
+	.reg_size = 32,
+	.flags = CLK_INIT_DEF_CFG_REQ,
+};
+
+static void __init grx500_clk_gate1_setup(struct device_node *node)
+{
+	gate_clk_setup(node, &grx500_clk_gate1_data);
+}
+
+CLK_OF_DECLARE(grx500_gate1clk, INTEL_GRX500_DT_GATE1_CLK,
+	       grx500_clk_gate1_setup);
+
+static const struct gate_clk_data grx500_clk_gate0_data __initconst = {
+	.mask = GATE0_CLK_MASK,
+	.def_onoff = BIT(GATE_XBAR0) | BIT(GATE_XBAR1) | BIT(GATE_XBAR2)
+		| BIT(GATE_XBAR3) | BIT(GATE_XBAR6) | BIT(GATE_XBAR7),
+	.reg_size = 32,
+	.flags = CLK_INIT_DEF_CFG_REQ,
+};
+
+static void __init grx500_clk_gate0_setup(struct device_node *node)
+{
+	gate_clk_setup(node, &grx500_clk_gate0_data);
+}
+
+CLK_OF_DECLARE(grx500_gate0clk, INTEL_GRX500_DT_GATE0_CLK,
+	       grx500_clk_gate0_setup);
+
+static const struct mux_clk_data grx500_clk_cpu_data __initconst = {
+	.shift = CPU_CLK_SHIFT,
+	.width = CPU_CLK_WIDTH,
+	.lock = &pll0a_lock,
+	.flags = CLK_SET_RATE_PARENT,
+};
+
+static void __init grx500_clk_cpu_setup(struct device_node *node)
+{
+	mux_clk_setup(node, &grx500_clk_cpu_data);
+}
+
+CLK_OF_DECLARE(grx500_cpuclk, INTEL_GRX500_DT_CPU_CLK,
+	       grx500_clk_cpu_setup);
+
+static const struct div_tbl pcie_rgl_tbl[] = {
+	{3,	CLK_100M},
+};
+
+static const struct div_clk_data grx500_clk_pcie_data __initconst = {
+	.shift = PCIE_CLK_SHIFT,
+	.width = PCIE_CLK_WIDTH,
+	.table = pcie_rgl_tbl,
+	.tbl_sz = ARRAY_SIZE(pcie_rgl_tbl),
+	.lock = &pll0b_lock,
+};
+
+static void __init grx500_clk_pcie_setup(struct device_node *node)
+{
+	div_clk_setup(node, &grx500_clk_pcie_data);
+}
+
+CLK_OF_DECLARE(grx500_pcieclk, INTEL_GRX500_DT_PCIE_CLK,
+	       grx500_clk_pcie_setup);
+
+static const struct div_tbl cpu1_rgl_tbl[] = {
+	{8,	CLK_166M},
+	{5,	CLK_333M},
+	{2,	CLK_666M},
+	{1,	CLK_1000M},
+};
+
+static const struct div_tbl ddr_rgl_tbl[] = {
+	{8,	CLK_333M},
+	{5,	CLK_666M},
+	{4,	CLK_800M},
+};
+
+static const struct div_tbl gswip_rgl_tbl[] = {
+	{5,	CLK_333M},
+};
+
+static const struct div_tbl pae_rgl_tbl[] = {
+	{6,	CLK_250M},
+};
+
+static const struct div_clk_data grx500_clk_pll0b[] __initconst = {
+	{
+		.shift = PAE_CLK_SHIFT,
+		.width = PAE_CLK_WIDTH,
+		.table = pae_rgl_tbl,
+		.tbl_sz = ARRAY_SIZE(pae_rgl_tbl),
+		.lock = &pll0b_lock,
+	},
+	{
+		.shift = GSWIP_CLK_SHIFT,
+		.width = GSWIP_CLK_WIDTH,
+		.table = gswip_rgl_tbl,
+		.tbl_sz = ARRAY_SIZE(gswip_rgl_tbl),
+		.lock = &pll0b_lock,
+	},
+	{
+		.shift = DDR_CLK_SHIFT,
+		.width = DDR_CLK_WIDTH,
+		.table = ddr_rgl_tbl,
+		.tbl_sz = ARRAY_SIZE(ddr_rgl_tbl),
+		.lock = &pll0b_lock,
+	},
+	{
+		.shift = CPU1_CLK_SHIFT,
+		.width = CPU1_CLK_WIDTH,
+		.table = cpu1_rgl_tbl,
+		.tbl_sz = ARRAY_SIZE(cpu1_rgl_tbl),
+		.lock = &pll0b_lock,
+	},
+};
+
+static void __init grx500_clk_pll0b_setup(struct device_node *node)
+{
+	cluster_div_clk_setup(node, grx500_clk_pll0b,
+			      ARRAY_SIZE(grx500_clk_pll0b));
+}
+
+CLK_OF_DECLARE(grx500_pll0bclk, INTEL_GRX500_DT_PLL0B_CLK,
+	       grx500_clk_pll0b_setup);
+
+static const struct div_tbl cpu0_rgl_tbl[] = {
+	{9,	CLK_150M},
+	{6,	CLK_300M},
+	{3,	CLK_600M},
+	{2,	CLK_800M},
+	{1,	CLK_1200M},
+};
+
+static const struct div_tbl ssx4_rgl_tbl[] = {
+	{8,	CLK_200M},
+};
+
+static const struct div_tbl ngi_rgl_tbl[] = {
+	{14,	CLK_50M},
+	{9,	CLK_150M},
+	{6,	CLK_300M},
+	{5,	CLK_400M},
+};
+
+static const struct div_tbl cbm_rgl_tbl[] = {
+	{14,	CLK_50M},
+	{9,	CLK_150M},
+	{8,	CLK_200M},
+	{5,	CLK_400M},
+	{3,	CLK_600M},
+	{2,	CLK_800M},
+};
+
+static const struct div_clk_data grx500_clk_pll0a[] __initconst = {
+	{
+		.shift = CBM_CLK_SHIFT,
+		.width = CBM_CLK_WIDTH,
+		.table = cbm_rgl_tbl,
+		.tbl_sz = ARRAY_SIZE(cbm_rgl_tbl),
+		.lock = &pll0a_lock,
+	},
+	{
+		.shift = NGI_CLK_SHIFT,
+		.width = NGI_CLK_WIDTH,
+		.table = ngi_rgl_tbl,
+		.tbl_sz = ARRAY_SIZE(ngi_rgl_tbl),
+		.lock = &pll0a_lock,
+	},
+	{
+		.shift = SSX4_CLK_SHIFT,
+		.width = SSX4_CLK_WIDTH,
+		.table = ssx4_rgl_tbl,
+		.tbl_sz = ARRAY_SIZE(ssx4_rgl_tbl),
+		.lock = &pll0a_lock,
+	},
+	{
+		.shift = CPU0_CLK_SHIFT,
+		.width = CPU0_CLK_WIDTH,
+		.table = cpu0_rgl_tbl,
+		.tbl_sz = ARRAY_SIZE(cpu0_rgl_tbl),
+		.lock = &pll0a_lock,
+	},
+};
+
+static void __init grx500_clk_pll0a_setup(struct device_node *node)
+{
+	cluster_div_clk_setup(node, grx500_clk_pll0a,
+			      ARRAY_SIZE(grx500_clk_pll0a));
+}
+
+CLK_OF_DECLARE(grx500_pll0aclk, INTEL_GRX500_DT_PLL0A_CLK,
+	       grx500_clk_pll0a_setup);
diff --git a/include/dt-bindings/clock/intel,grx500-clk.h b/include/dt-bindings/clock/intel,grx500-clk.h
new file mode 100755
index 000000000000..9af16dbf2cb4
--- /dev/null
+++ b/include/dt-bindings/clock/intel,grx500-clk.h
@@ -0,0 +1,146 @@
+/*
+ *  Copyright (C) 2016 Intel Corporation.
+ *  Zhu YiXin <Yixin.zhu@intel.com>
+ *
+ *  This program is free software; you can redistribute it and/or modify it
+ *  under the terms and conditions of the GNU General Public License,
+ *  version 2, as published by the Free Software Foundation.
+ *
+ *  This program is distributed in the hope it will be useful, but WITHOUT
+ *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ *  more details.
+ *
+ *  The full GNU General Public License is included in this distribution in
+ *  the file called "COPYING".
+ */
+
+#ifndef __INTEL_GRX500_CLK_H
+#define __INTEL_GRX500_CLK_H
+
+/* Intel GRX500 CGU device tree "compatible" strings */
+#define INTEL_GRX500_DT_PLL0A_CLK	"lantiq, grx500-pll0a-output-clk"
+#define INTEL_GRX500_DT_PLL0B_CLK	"lantiq, grx500-pll0b-output-clk"
+#define INTEL_GRX500_DT_PCIE_CLK	"lantiq, grx500-pcie-clk"
+#define INTEL_GRX500_DT_CPU_CLK		"lantiq, grx500-cpu-clk"
+#define INTEL_GRX500_DT_GATE0_CLK	"lantiq, grx500-gate0-clk"
+#define INTEL_GRX500_DT_GATE1_CLK	"lantiq, grx500-gate1-clk"
+#define INTEL_GRX500_DT_GATE2_CLK	"lantiq, grx500-gate2-clk"
+#define INTEL_GRX500_DT_VOICE_CLK	"lantiq, grx500-voice-clk"
+#define INTEL_GRX500_DT_GATE_I2C_CLK	"lantiq, grx500-gate-dummy-clk"
+
+/* clocks under pll0a-clk */
+#define CBM_CLK			0
+#define NGI_CLK			1
+#define SSX4_CLK		2
+#define CPU0_CLK		3
+
+/* clocks under pll0b-clk */
+#define PAE_CLK			0
+#define GSWIP_CLK		1
+#define DDR_CLK			2
+#define CPU1_CLK		3
+
+/* clocks under lcpll-clk */
+#define GRX500_PCIE_CLK		0
+
+/* clocks under gate0-clk */
+#define GATE_XBAR0_CLK		0
+#define GATE_XBAR1_CLK		1
+#define GATE_XBAR2_CLK		2
+#define GATE_XBAR3_CLK		3
+#define GATE_XBAR6_CLK		4
+#define GATE_XBAR7_CLK		5
+
+/* clocks under gate1-clk */
+#define GATE_V_CODEC_CLK	0
+#define GATE_DMA0_CLK		1
+#define GATE_USB0_CLK		2
+#define GATE_SPI1_CLK		3
+#define GATE_SPI0_CLK		4
+#define GATE_CBM_CLK		5
+#define GATE_EBU_CLK		6
+#define GATE_SSO_CLK		7
+#define GATE_GPTC0_CLK		8
+#define GATE_GPTC1_CLK		9
+#define GATE_GPTC2_CLK		10
+#define GATE_URT_CLK		11
+#define GATE_EIP97_CLK		12
+#define GATE_EIP123_CLK		13
+#define GATE_TOE_CLK		14
+#define GATE_MPE_CLK		15
+#define GATE_TDM_CLK		16
+#define GATE_PAE_CLK		17
+#define GATE_USB1_CLK		18
+#define GATE_GSWIP_CLK		19
+
+/* clocks under gate2-clk */
+#define GATE_PCIE0_CLK		0
+#define GATE_PCIE1_CLK		1
+#define GATE_PCIE2_CLK		2
+
+/* Gate clock bits */
+#define GATE_XBAR0			0
+#define GATE_XBAR1			1
+#define GATE_XBAR2			2
+#define GATE_XBAR3			3
+#define GATE_XBAR6			6
+#define GATE_XBAR7			7
+
+#define GATE_V_CODEC			2
+#define GATE_DMA0			5
+#define GATE_USB0			6
+#define GATE_SPI1			7
+#define GATE_SPI0			8
+#define GATE_CBM			9
+#define GATE_EBU			10
+#define GATE_SSO			11
+#define GATE_GPTC0			12
+#define GATE_GPTC1			13
+#define GATE_GPTC2			14
+#define GATE_UART			17
+#define GATE_EIP97			20
+#define GATE_EIP123			21
+#define GATE_TOE			22
+#define GATE_MPE			23
+#define GATE_TDM			25
+#define GATE_PAE			26
+#define GATE_USB1			27
+#define GATE_GSWIP			28
+
+#define GATE_PCIE0_CTRL			1
+#define GATE_PCIE1_CTRL			17
+#define GATE_PCIE2_CTRL			25
+
+/* clock shift and width */
+#define CBM_CLK_SHIFT			0
+#define CBM_CLK_WIDTH			4
+#define NGI_CLK_SHIFT			4
+#define NGI_CLK_WIDTH			4
+#define SSX4_CLK_SHIFT			8
+#define SSX4_CLK_WIDTH			4
+#define CPU0_CLK_SHIFT			12
+#define CPU0_CLK_WIDTH			4
+
+#define PAE_CLK_SHIFT			0
+#define PAE_CLK_WIDTH			4
+#define GSWIP_CLK_SHIFT			4
+#define GSWIP_CLK_WIDTH			4
+#define DDR_CLK_SHIFT			8
+#define DDR_CLK_WIDTH			4
+#define CPU1_CLK_SHIFT			12
+#define CPU1_CLK_WIDTH			4
+
+#define PCIE_CLK_SHIFT			12
+#define PCIE_CLK_WIDTH			2
+
+#define CPU_CLK_SHIFT			29
+#define CPU_CLK_WIDTH			1
+
+#define VOICE_CLK_SHIFT			14
+#define VOICE_CLK_WIDTH			2
+
+#define GATE0_CLK_MASK			0xCF
+#define GATE1_CLK_MASK			0x1EF27FE4
+#define GATE2_CLK_MASK			0x2020002
+#endif /* __INTEL_GRX500_CLK_H */
