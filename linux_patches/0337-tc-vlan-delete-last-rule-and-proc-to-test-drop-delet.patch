From 07a62830fa7d94383fe5f7b674d922ca54ad7037 Mon Sep 17 00:00:00 2001
From: Rekha Eswaran <rekha.eswaran@intel.com>
Date: Fri, 2 Nov 2018 18:00:37 +0800
Subject: [PATCH] tc vlan delete last rule and proc to test drop, delete rules
 are added at DP

---
 .../net/ethernet/lantiq/datapath/datapath_proc.c   | 242 ++++++++++++++-------
 .../datapath/gswip31/datapath_tc_asym_vlan.c       | 128 ++++++-----
 include/net/datapath_api_vlan.h                    |   3 +-
 3 files changed, 238 insertions(+), 135 deletions(-)

diff --git a/drivers/net/ethernet/lantiq/datapath/datapath_proc.c b/drivers/net/ethernet/lantiq/datapath/datapath_proc.c
index e77017924edb..0fc4d99a4b73 100644
--- a/drivers/net/ethernet/lantiq/datapath/datapath_proc.c
+++ b/drivers/net/ethernet/lantiq/datapath/datapath_proc.c
@@ -865,9 +865,9 @@ static int proc_asym_vlan(struct file *file, const char *buf, size_t count,
 	int mcast = 0;
 	int dir = 0;
 	struct dp_tc_vlan vlan = {0};
-	struct dp_vlan0 vlan0_list = {0};
-	struct dp_vlan1 vlan1_list = {0};
-	struct dp_vlan2 vlan2_list = {0};
+	struct dp_vlan0 vlan0_list[1] = {0};
+	struct dp_vlan1 vlan1_list[4] = {0};
+	struct dp_vlan2 vlan2_list[3] = {0};
 	struct net_device *dev;
 
 #define TEST_VID 10
@@ -916,12 +916,12 @@ static int proc_asym_vlan(struct file *file, const char *buf, size_t count,
 		PR_INFO("Desc:pattern match = FALSE\n");
 		PR_INFO("Output:Enqueued packet is received without change\n");
 		set_dev(&vlan, dev, ctp, dir, 0, 1, 0, mcast);
-		vlan.vlan1_list = &vlan1_list;
+		vlan.vlan1_list = vlan1_list;
 		/*random proto for failing the pattern match*/
-		set_pattern(&vlan1_list.outer, DP_VLAN_PATTERN_NOT_CARE,
+		set_pattern(&vlan1_list[0].outer, DP_VLAN_PATTERN_NOT_CARE,
 			    DP_VLAN_PATTERN_NOT_CARE, DP_VLAN_PATTERN_NOT_CARE,
 			    DP_VLAN_PATTERN_NOT_CARE, 0x100);
-		vlan1_list.act.act = DP_VLAN_ACT_DROP;
+		vlan1_list[0].act.act = DP_VLAN_ACT_DROP;
 		dp_vlan_set(&vlan, 0);
 
 	break;
@@ -930,12 +930,12 @@ static int proc_asym_vlan(struct file *file, const char *buf, size_t count,
 		PR_INFO("Desc:pattern match = FALSE\n");
 		PR_INFO("Output:Enqueued packet is received without change\n");
 		set_dev(&vlan, dev, ctp, dir, 1, 0, 0, mcast);
-		vlan.vlan0_list = &vlan0_list;
+		vlan.vlan0_list = vlan0_list;
 		/*random proto for failing the pattern match*/
-		set_pattern(&vlan0_list.outer, DP_VLAN_PATTERN_NOT_CARE,
+		set_pattern(&vlan0_list[0].outer, DP_VLAN_PATTERN_NOT_CARE,
 			    DP_VLAN_PATTERN_NOT_CARE, DP_VLAN_PATTERN_NOT_CARE,
 			    DP_VLAN_PATTERN_NOT_CARE, 0x100);
-		vlan0_list.act.act = DP_VLAN_ACT_DROP;
+		vlan0_list[0].act.act = DP_VLAN_ACT_DROP;
 		dp_vlan_set(&vlan, 0);
 
 	break;
@@ -944,12 +944,12 @@ static int proc_asym_vlan(struct file *file, const char *buf, size_t count,
 		PR_INFO("Desc:pattern match = TRUE\n");
 		PR_INFO("Output:Enqueued packet is not received\n");
 		set_dev(&vlan, dev, ctp, dir, 1, 0, 0, mcast);
-		vlan.vlan0_list = &vlan0_list;
+		vlan.vlan0_list = vlan0_list;
 		/*random proto for failing the pattern match*/
-		set_pattern(&vlan0_list.outer, DP_VLAN_PATTERN_NOT_CARE,
+		set_pattern(&vlan0_list[0].outer, DP_VLAN_PATTERN_NOT_CARE,
 			    DP_VLAN_PATTERN_NOT_CARE, DP_VLAN_PATTERN_NOT_CARE,
 			    DP_VLAN_PATTERN_NOT_CARE, DP_PROTO_IP4);
-		vlan0_list.act.act = DP_VLAN_ACT_DROP;
+		vlan0_list[0].act.act = DP_VLAN_ACT_DROP;
 		dp_vlan_set(&vlan, 0);
 
 	break;
@@ -961,12 +961,12 @@ static int proc_asym_vlan(struct file *file, const char *buf, size_t count,
 		PR_INFO("Desc:pattern match = TRUE and POP action\n");
 		PR_INFO("Output:Enqueued packet is received without vlantag\n");
 		set_dev(&vlan, dev, ctp, dir, 0, 1, 0, mcast);
-		vlan.vlan1_list = &vlan1_list;
-		set_pattern(&vlan1_list.outer, DP_VLAN_PATTERN_NOT_CARE,
+		vlan.vlan1_list = vlan1_list;
+		set_pattern(&vlan1_list[0].outer, DP_VLAN_PATTERN_NOT_CARE,
 			    TEST_VID, DP_VLAN_PATTERN_NOT_CARE,
 			    DP_VLAN_PATTERN_NOT_CARE, DP_VLAN_PATTERN_NOT_CARE);
-		vlan1_list.act.act = DP_VLAN_ACT_POP;
-		vlan1_list.act.pop_n = 1;
+		vlan1_list[0].act.act = DP_VLAN_ACT_POP;
+		vlan1_list[0].act.pop_n = 1;
 		dp_vlan_set(&vlan, 0);
 
 	break;
@@ -975,15 +975,15 @@ static int proc_asym_vlan(struct file *file, const char *buf, size_t count,
 		PR_INFO("Desc:pattern match = TRUE and POP action\n");
 		PR_INFO("Output:Enqueued packet is received without vlantag\n");
 		set_dev(&vlan, dev, ctp, dir, 0, 0, 1, mcast);
-		vlan.vlan2_list = &vlan2_list;
-		set_pattern(&vlan2_list.outer, DP_VLAN_PATTERN_NOT_CARE,
+		vlan.vlan2_list = vlan2_list;
+		set_pattern(&vlan2_list[0].outer, DP_VLAN_PATTERN_NOT_CARE,
 			    TEST_VID, DP_VLAN_PATTERN_NOT_CARE,
 			    DP_VLAN_PATTERN_NOT_CARE, DP_VLAN_PATTERN_NOT_CARE);
-		set_pattern(&vlan2_list.inner, DP_VLAN_PATTERN_NOT_CARE,
+		set_pattern(&vlan2_list[0].inner, DP_VLAN_PATTERN_NOT_CARE,
 			    DP_VLAN_PATTERN_NOT_CARE, DP_VLAN_PATTERN_NOT_CARE,
 			    DP_VLAN_PATTERN_NOT_CARE, DP_VLAN_PATTERN_NOT_CARE);
-		vlan2_list.act.act = DP_VLAN_ACT_POP;
-		vlan2_list.act.pop_n = 2;
+		vlan2_list[0].act.act = DP_VLAN_ACT_POP;
+		vlan2_list[0].act.pop_n = 2;
 		dp_vlan_set(&vlan, 0);
 
 	break;
@@ -993,12 +993,12 @@ static int proc_asym_vlan(struct file *file, const char *buf, size_t count,
 		PR_INFO("Output:Enqueued packet is received with vlan tag");
 		PR_INFO("that is pushed\n");
 		set_dev(&vlan, dev, ctp, dir, 1, 0, 0, mcast);
-		vlan.vlan0_list = &vlan0_list;
-		set_pattern(&vlan0_list.outer, DP_VLAN_PATTERN_NOT_CARE,
+		vlan.vlan0_list = vlan0_list;
+		set_pattern(&vlan0_list[0].outer, DP_VLAN_PATTERN_NOT_CARE,
 			    DP_VLAN_PATTERN_NOT_CARE, DP_VLAN_PATTERN_NOT_CARE,
 			    DP_VLAN_PATTERN_NOT_CARE, DP_PROTO_IP4);
-		set_action(&vlan0_list.act, DP_VLAN_ACT_PUSH, 0, 1);
-		set_tag(&vlan0_list.act, 0, 0, 0, 10, 0x8100, 0);
+		set_action(&vlan0_list[0].act, DP_VLAN_ACT_PUSH, 0, 1);
+		set_tag(&vlan0_list[0].act, 0, 0, 0, 10, 0x8100, 0);
 		dp_vlan_set(&vlan, 0);
 
 	break;
@@ -1008,13 +1008,13 @@ static int proc_asym_vlan(struct file *file, const char *buf, size_t count,
 		PR_INFO("Output:Enqueued packet is received with 2 vlan tags");
 		PR_INFO("that are pushed\n");
 		set_dev(&vlan, dev, ctp, 0, 1, 0, 0, mcast);
-		vlan.vlan0_list = &vlan0_list;
-		set_pattern(&vlan0_list.outer, DP_VLAN_PATTERN_NOT_CARE,
+		vlan.vlan0_list = vlan0_list;
+		set_pattern(&vlan0_list[0].outer, DP_VLAN_PATTERN_NOT_CARE,
 			    DP_VLAN_PATTERN_NOT_CARE, DP_VLAN_PATTERN_NOT_CARE,
 			    DP_VLAN_PATTERN_NOT_CARE, DP_PROTO_IP4);
-		set_action(&vlan0_list.act, DP_VLAN_ACT_PUSH, 0, 2);
-		set_tag(&vlan0_list.act, 0, 0, 0, 10, 0x8100, 0);
-		set_tag(&vlan0_list.act, 0, 1, 1, 100, 0x8100, 0);
+		set_action(&vlan0_list[0].act, DP_VLAN_ACT_PUSH, 0, 2);
+		set_tag(&vlan0_list[0].act, 0, 0, 0, 10, 0x8100, 0);
+		set_tag(&vlan0_list[0].act, 0, 1, 1, 100, 0x8100, 0);
 		dp_vlan_set(&vlan, 0);
 
 	break;
@@ -1024,12 +1024,12 @@ static int proc_asym_vlan(struct file *file, const char *buf, size_t count,
 		PR_INFO("Output:Enqueued packet is received with vlan tag");
 		PR_INFO("that is pushed\n");
 		set_dev(&vlan, dev, ctp, dir, 1, 0, 0, mcast);
-		vlan.vlan0_list = &vlan0_list;
-		set_pattern(&vlan0_list.outer, DP_VLAN_PATTERN_NOT_CARE,
+		vlan.vlan0_list = vlan0_list;
+		set_pattern(&vlan0_list[0].outer, DP_VLAN_PATTERN_NOT_CARE,
 			    DP_VLAN_PATTERN_NOT_CARE, DP_VLAN_PATTERN_NOT_CARE,
 			    DP_VLAN_PATTERN_NOT_CARE, DP_PROTO_IP4);
-		set_action(&vlan0_list.act, DP_VLAN_ACT_PUSH, 0, 1);
-		set_tag(&vlan0_list.act, 0, 0, 0, 10, 0x8100, 0);
+		set_action(&vlan0_list[0].act, DP_VLAN_ACT_PUSH, 0, 1);
+		set_tag(&vlan0_list[0].act, 0, 0, 0, 10, 0x8100, 0);
 		dp_vlan_set(&vlan, 0);
 
 	break;
@@ -1039,13 +1039,13 @@ static int proc_asym_vlan(struct file *file, const char *buf, size_t count,
 		PR_INFO("Output:Enqueued packet is received with 2 vlan tags");
 		PR_INFO("that are pushed\n");
 		set_dev(&vlan, dev, ctp, dir, 1, 0, 0, mcast);
-		vlan.vlan0_list = &vlan0_list;
-		set_pattern(&vlan0_list.outer, DP_VLAN_PATTERN_NOT_CARE,
+		vlan.vlan0_list = vlan0_list;
+		set_pattern(&vlan0_list[0].outer, DP_VLAN_PATTERN_NOT_CARE,
 			    DP_VLAN_PATTERN_NOT_CARE, DP_VLAN_PATTERN_NOT_CARE,
 			    DP_VLAN_PATTERN_NOT_CARE, DP_PROTO_IP4);
-		set_action(&vlan0_list.act, DP_VLAN_ACT_PUSH, 0, 2);
-		set_tag(&vlan0_list.act, 0, 0, 0, 10, 0x8100, 0);
-		set_tag(&vlan0_list.act, 0, 1, 1, 100, 0x8100, 0);
+		set_action(&vlan0_list[0].act, DP_VLAN_ACT_PUSH, 0, 2);
+		set_tag(&vlan0_list[0].act, 0, 0, 0, 10, 0x8100, 0);
+		set_tag(&vlan0_list[0].act, 0, 1, 1, 100, 0x8100, 0);
 		dp_vlan_set(&vlan, 0);
 	break;
 	case 11:
@@ -1054,12 +1054,12 @@ static int proc_asym_vlan(struct file *file, const char *buf, size_t count,
 		PR_INFO("Output:Enqueued packet is received with 2 vlan tags,");
 		PR_INFO("the original and the pushed one\n");
 		set_dev(&vlan, dev, ctp, dir, 0, 1, 0, mcast);
-		vlan.vlan1_list = &vlan1_list;
-		set_pattern(&vlan1_list.outer, DP_VLAN_PATTERN_NOT_CARE,
+		vlan.vlan1_list = vlan1_list;
+		set_pattern(&vlan1_list[0].outer, DP_VLAN_PATTERN_NOT_CARE,
 			    DP_VLAN_PATTERN_NOT_CARE, DP_VLAN_PATTERN_NOT_CARE,
 			    DP_VLAN_PATTERN_NOT_CARE, DP_PROTO_IP4);
-		set_action(&vlan1_list.act, DP_VLAN_ACT_PUSH, 0, 1);
-		set_tag(&vlan1_list.act, CP_FROM_OUTER, 0, 0, 0, 0, 0);
+		set_action(&vlan1_list[0].act, DP_VLAN_ACT_PUSH, 0, 1);
+		set_tag(&vlan1_list[0].act, CP_FROM_OUTER, 0, 0, 0, 0, 0);
 		dp_vlan_set(&vlan, 0);
 
 	break;
@@ -1069,13 +1069,13 @@ static int proc_asym_vlan(struct file *file, const char *buf, size_t count,
 		PR_INFO("Output:Enqueued packet is received with 3 vlan tags,");
 		PR_INFO("the original and 2 pushed ones\n");
 		set_dev(&vlan, dev, ctp, dir, 0, 1, 0, mcast);
-		vlan.vlan1_list = &vlan1_list;
-		set_pattern(&vlan1_list.outer, DP_VLAN_PATTERN_NOT_CARE,
+		vlan.vlan1_list = vlan1_list;
+		set_pattern(&vlan1_list[0].outer, DP_VLAN_PATTERN_NOT_CARE,
 			    DP_VLAN_PATTERN_NOT_CARE, DP_VLAN_PATTERN_NOT_CARE,
 			    DP_VLAN_PATTERN_NOT_CARE, DP_PROTO_IP4);
-		set_action(&vlan1_list.act, DP_VLAN_ACT_PUSH, 0, 2);
-		set_tag(&vlan1_list.act, CP_FROM_OUTER, 0, 0, 0, 0, 0);
-		set_tag(&vlan1_list.act, CP_FROM_OUTER, 1, 0, 0, 0, 0);
+		set_action(&vlan1_list[0].act, DP_VLAN_ACT_PUSH, 0, 2);
+		set_tag(&vlan1_list[0].act, CP_FROM_OUTER, 0, 0, 0, 0, 0);
+		set_tag(&vlan1_list[0].act, CP_FROM_OUTER, 1, 0, 0, 0, 0);
 		dp_vlan_set(&vlan, 0);
 
 	break;
@@ -1085,12 +1085,12 @@ static int proc_asym_vlan(struct file *file, const char *buf, size_t count,
 		PR_INFO("Output:Enqueued packet is received with 2 vlan tags,");
 		PR_INFO("the original and the pushed one\n");
 		set_dev(&vlan, dev, ctp, dir, 0, 1, 0, mcast);
-		vlan.vlan1_list = &vlan1_list;
-		set_pattern(&vlan1_list.outer, DP_VLAN_PATTERN_NOT_CARE,
+		vlan.vlan1_list = vlan1_list;
+		set_pattern(&vlan1_list[0].outer, DP_VLAN_PATTERN_NOT_CARE,
 			    DP_VLAN_PATTERN_NOT_CARE, DP_VLAN_PATTERN_NOT_CARE,
 			    DP_VLAN_PATTERN_NOT_CARE, DP_PROTO_IP4);
-		set_action(&vlan1_list.act, DP_VLAN_ACT_PUSH, 0, 1);
-		set_tag(&vlan1_list.act, CP_FROM_OUTER, 0, 0, 0, 0, 0);
+		set_action(&vlan1_list[0].act, DP_VLAN_ACT_PUSH, 0, 1);
+		set_tag(&vlan1_list[0].act, CP_FROM_OUTER, 0, 0, 0, 0, 0);
 		dp_vlan_set(&vlan, 0);
 
 	break;
@@ -1100,13 +1100,13 @@ static int proc_asym_vlan(struct file *file, const char *buf, size_t count,
 		PR_INFO("Output:Enqueued packet is received with 3 vlan tags");
 		PR_INFO("the original and 2 pushed ones\n");
 		set_dev(&vlan, dev, ctp, dir, 0, 1, 0, mcast);
-		vlan.vlan1_list = &vlan1_list;
-		set_pattern(&vlan1_list.outer, DP_VLAN_PATTERN_NOT_CARE,
+		vlan.vlan1_list = vlan1_list;
+		set_pattern(&vlan1_list[0].outer, DP_VLAN_PATTERN_NOT_CARE,
 			    DP_VLAN_PATTERN_NOT_CARE, DP_VLAN_PATTERN_NOT_CARE,
 			    DP_VLAN_PATTERN_NOT_CARE, DP_PROTO_IP4);
-		set_action(&vlan1_list.act, DP_VLAN_ACT_PUSH, 0, 2);
-		set_tag(&vlan1_list.act, CP_FROM_OUTER, 0, 0, 0, 0, 0);
-		set_tag(&vlan1_list.act, CP_FROM_OUTER, 1, 0, 0, 0, 0);
+		set_action(&vlan1_list[0].act, DP_VLAN_ACT_PUSH, 0, 2);
+		set_tag(&vlan1_list[0].act, CP_FROM_OUTER, 0, 0, 0, 0, 0);
+		set_tag(&vlan1_list[0].act, CP_FROM_OUTER, 1, 0, 0, 0, 0);
 		dp_vlan_set(&vlan, 0);
 	break;
 	case 15:
@@ -1114,11 +1114,11 @@ static int proc_asym_vlan(struct file *file, const char *buf, size_t count,
 		PR_INFO("Desc:pattern match = FALSE and DROP action\n");
 		PR_INFO("Output:Enqueued packet is received unaltered\n");
 		set_dev(&vlan, dev, ctp, dir, 0, 1, 0, mcast);
-		vlan.vlan1_list = &vlan1_list;
-		set_pattern(&vlan1_list.outer, DP_VLAN_PATTERN_NOT_CARE,
+		vlan.vlan1_list = vlan1_list;
+		set_pattern(&vlan1_list[0].outer, DP_VLAN_PATTERN_NOT_CARE,
 			    100, DP_VLAN_PATTERN_NOT_CARE,
 			    DP_VLAN_PATTERN_NOT_CARE, DP_PROTO_IP4);
-		set_action(&vlan1_list.act, DP_VLAN_ACT_DROP, 0, 0);
+		set_action(&vlan1_list[0].act, DP_VLAN_ACT_DROP, 0, 0);
 		dp_vlan_set(&vlan, 0);
 
 	break;
@@ -1127,11 +1127,11 @@ static int proc_asym_vlan(struct file *file, const char *buf, size_t count,
 		PR_INFO("Desc:pattern match = TRUE and DROP action\n");
 		PR_INFO("Output:Enqueued packet is dropped\n");
 		set_dev(&vlan, dev, ctp, dir, 0, 1, 0, mcast);
-		vlan.vlan1_list = &vlan1_list;
-		set_pattern(&vlan1_list.outer, DP_VLAN_PATTERN_NOT_CARE,
+		vlan.vlan1_list = vlan1_list;
+		set_pattern(&vlan1_list[0].outer, DP_VLAN_PATTERN_NOT_CARE,
 			    10, DP_VLAN_PATTERN_NOT_CARE,
 			    DP_VLAN_PATTERN_NOT_CARE, DP_PROTO_IP4);
-		set_action(&vlan1_list.act, DP_VLAN_ACT_DROP, 0, 0);
+		set_action(&vlan1_list[0].act, DP_VLAN_ACT_DROP, 0, 0);
 		dp_vlan_set(&vlan, 0);
 
 	break;
@@ -1140,14 +1140,14 @@ static int proc_asym_vlan(struct file *file, const char *buf, size_t count,
 		PR_INFO("Desc:pattern match = FALSE and DROP action\n");
 		PR_INFO("Output:Enqueued packet is received unaltered\n");
 		set_dev(&vlan, dev, ctp, dir, 0, 0, 1, mcast);
-		vlan.vlan2_list = &vlan2_list;
-		set_pattern(&vlan2_list.outer, DP_VLAN_PATTERN_NOT_CARE,
+		vlan.vlan2_list = vlan2_list;
+		set_pattern(&vlan2_list[0].outer, DP_VLAN_PATTERN_NOT_CARE,
 			    100, DP_VLAN_PATTERN_NOT_CARE,
 			    DP_VLAN_PATTERN_NOT_CARE, DP_PROTO_IP4);
-		set_pattern(&vlan2_list.inner, DP_VLAN_PATTERN_NOT_CARE,
+		set_pattern(&vlan2_list[0].inner, DP_VLAN_PATTERN_NOT_CARE,
 			    200, DP_VLAN_PATTERN_NOT_CARE,
 			    DP_VLAN_PATTERN_NOT_CARE, DP_PROTO_IP4);
-		set_action(&vlan2_list.act, DP_VLAN_ACT_DROP, 0, 0);
+		set_action(&vlan2_list[0].act, DP_VLAN_ACT_DROP, 0, 0);
 		dp_vlan_set(&vlan, 0);
 
 	break;
@@ -1156,14 +1156,14 @@ static int proc_asym_vlan(struct file *file, const char *buf, size_t count,
 		PR_INFO("Desc:pattern match = TRUE and DROP action\n");
 		PR_INFO("Output:Enqueued packet is not received\n");
 		set_dev(&vlan, dev, ctp, dir, 0, 0, 1, mcast);
-		vlan.vlan2_list = &vlan2_list;
-		set_pattern(&vlan2_list.outer, DP_VLAN_PATTERN_NOT_CARE,
+		vlan.vlan2_list = vlan2_list;
+		set_pattern(&vlan2_list[0].outer, DP_VLAN_PATTERN_NOT_CARE,
 			    10, DP_VLAN_PATTERN_NOT_CARE,
 			    DP_VLAN_PATTERN_NOT_CARE, DP_PROTO_IP4);
-		set_pattern(&vlan2_list.inner, DP_VLAN_PATTERN_NOT_CARE,
+		set_pattern(&vlan2_list[0].inner, DP_VLAN_PATTERN_NOT_CARE,
 			    20, DP_VLAN_PATTERN_NOT_CARE,
 			    DP_VLAN_PATTERN_NOT_CARE, DP_PROTO_IP4);
-		set_action(&vlan2_list.act, DP_VLAN_ACT_DROP, 0, 0);
+		set_action(&vlan2_list[0].act, DP_VLAN_ACT_DROP, 0, 0);
 		dp_vlan_set(&vlan, 0);
 
 	break;
@@ -1178,10 +1178,10 @@ static int proc_asym_vlan(struct file *file, const char *buf, size_t count,
 		PR_INFO("PUSH for vid 5,6 POP for vid 7 and forward vid 8\n");
 		PR_INFO("Output:Enqueued packet received\n");
 		set_dev(&vlan, dev, ctp, dir, 0, 4, 0, mcast);
-		vlan1_list[0].def = DP_VLAN_DEF_ACCEPT;
-		vlan1_list[1].def = DP_VLAN_DEF_ACCEPT;
-		vlan1_list[2].def = DP_VLAN_DEF_ACCEPT;
-		vlan1_list[3].def = DP_VLAN_DEF_DROP;
+		vlan1_list[0].def = 0;
+		vlan1_list[1].def = 0;
+		vlan1_list[2].def = 0;
+		vlan1_list[3].def = 0;
 		vlan.vlan1_list = vlan1_list;
 		set_pattern(&vlan1_list[0].outer, DP_VLAN_PATTERN_NOT_CARE,
 			    5, DP_VLAN_PATTERN_NOT_CARE,
@@ -1209,6 +1209,98 @@ static int proc_asym_vlan(struct file *file, const char *buf, size_t count,
 	}
 	break;
 
+	case 20:
+		PR_INFO("This test to del rule\n");
+		set_dev(&vlan, dev, ctp, dir, 0, 0, 0, mcast);
+		vlan.vlan0_list = NULL;
+		vlan.vlan1_list = NULL;
+		vlan.vlan2_list = NULL;
+		dp_vlan_set(&vlan, 0);
+	break;
+	case 21:
+	{
+		PR_INFO("Input:IP packet single or double vlan tag,");
+		PR_INFO("with outer vid 74\n");
+		PR_INFO("Desc:pattern match = TRUE (vid match) , with action");
+		PR_INFO("forward vid 74 and drop other VLAN tag\n");
+		PR_INFO("Output:Enqueued pkt recv for vid 74 other vid drop\n");
+		set_dev(&vlan, dev, ctp, dir, 1, 2, 2, mcast);
+		vlan1_list[0].def = 1; /* default rule */
+		vlan1_list[1].def = 0;
+		vlan.vlan1_list = vlan1_list;
+		set_pattern(&vlan1_list[0].outer, DP_VLAN_PATTERN_NOT_CARE,
+			    DP_VLAN_PATTERN_NOT_CARE, DP_VLAN_PATTERN_NOT_CARE,
+			    DP_VLAN_PATTERN_NOT_CARE, DP_VLAN_PATTERN_NOT_CARE);
+		set_action(&vlan1_list[0].act, DP_VLAN_ACT_DROP, 0, 0);
+		set_pattern(&vlan1_list[1].outer, DP_VLAN_PATTERN_NOT_CARE,
+			    74, DP_VLAN_PATTERN_NOT_CARE,
+			    DP_VLAN_PATTERN_NOT_CARE, DP_VLAN_PATTERN_NOT_CARE);
+		set_action(&vlan1_list[1].act, DP_VLAN_ACT_FWD, 0, 0);
+		vlan2_list[0].def = 1;
+		vlan2_list[1].def = 0;
+		vlan.vlan2_list = vlan2_list;
+		set_pattern(&vlan2_list[0].outer, DP_VLAN_PATTERN_NOT_CARE,
+			    DP_VLAN_PATTERN_NOT_CARE, DP_VLAN_PATTERN_NOT_CARE,
+			    DP_VLAN_PATTERN_NOT_CARE, DP_VLAN_PATTERN_NOT_CARE);
+		set_pattern(&vlan2_list[0].inner, DP_VLAN_PATTERN_NOT_CARE,
+			    DP_VLAN_PATTERN_NOT_CARE, DP_VLAN_PATTERN_NOT_CARE,
+			    DP_VLAN_PATTERN_NOT_CARE, DP_VLAN_PATTERN_NOT_CARE);
+		set_action(&vlan2_list[0].act, DP_VLAN_ACT_DROP, 0, 0);
+		set_pattern(&vlan2_list[1].outer, DP_VLAN_PATTERN_NOT_CARE,
+			    74, DP_VLAN_PATTERN_NOT_CARE,
+			    DP_VLAN_PATTERN_NOT_CARE, DP_VLAN_PATTERN_NOT_CARE);
+		set_pattern(&vlan2_list[1].inner, DP_VLAN_PATTERN_NOT_CARE,
+			    DP_VLAN_PATTERN_NOT_CARE, DP_VLAN_PATTERN_NOT_CARE,
+			    DP_VLAN_PATTERN_NOT_CARE, DP_VLAN_PATTERN_NOT_CARE);
+		set_action(&vlan2_list[1].act, DP_VLAN_ACT_FWD, 0, 0);
+		dp_vlan_set(&vlan, 0);
+	}
+	break;
+	case 22:
+	{
+		PR_INFO("Input:IP packet single or double vlan tag,");
+		PR_INFO("with outer vid 100 or 200\n");
+		PR_INFO("Desc:pattern match = TRUE (vid match) , with action");
+		PR_INFO("forward vid 100,200 and drop other VLAN tag\n");
+		PR_INFO("Output:Enq pkt recv for vid 100,200 other vid drop\n");
+		set_dev(&vlan, dev, ctp, dir, 0, 3, 2, mcast);
+		vlan1_list[0].def = 1; /* default rule */
+		vlan1_list[1].def = 0;
+		vlan1_list[2].def = 0;
+		vlan.vlan1_list = vlan1_list;
+		set_pattern(&vlan1_list[0].outer, DP_VLAN_PATTERN_NOT_CARE,
+			    DP_VLAN_PATTERN_NOT_CARE, DP_VLAN_PATTERN_NOT_CARE,
+			    DP_VLAN_PATTERN_NOT_CARE, DP_VLAN_PATTERN_NOT_CARE);
+		set_action(&vlan1_list[0].act, DP_VLAN_ACT_DROP, 0, 0);
+		set_pattern(&vlan1_list[1].outer, 1,
+			    100, DP_VLAN_PATTERN_NOT_CARE,
+			    DP_VLAN_PATTERN_NOT_CARE, DP_VLAN_PATTERN_NOT_CARE);
+		set_action(&vlan1_list[1].act, DP_VLAN_ACT_FWD, 0, 0);
+		set_pattern(&vlan1_list[2].outer, 2,
+			    300, DP_VLAN_PATTERN_NOT_CARE,
+			    DP_VLAN_PATTERN_NOT_CARE, DP_VLAN_PATTERN_NOT_CARE);
+		set_action(&vlan1_list[2].act, DP_VLAN_ACT_DROP, 0, 0);
+		vlan2_list[0].def = 1;
+		vlan2_list[1].def = 0;
+		vlan.vlan2_list = vlan2_list;
+		set_pattern(&vlan2_list[0].outer, DP_VLAN_PATTERN_NOT_CARE,
+			    DP_VLAN_PATTERN_NOT_CARE, DP_VLAN_PATTERN_NOT_CARE,
+			    DP_VLAN_PATTERN_NOT_CARE, DP_VLAN_PATTERN_NOT_CARE);
+		set_pattern(&vlan2_list[0].inner, DP_VLAN_PATTERN_NOT_CARE,
+			    DP_VLAN_PATTERN_NOT_CARE, DP_VLAN_PATTERN_NOT_CARE,
+			    DP_VLAN_PATTERN_NOT_CARE, DP_VLAN_PATTERN_NOT_CARE);
+		set_action(&vlan2_list[0].act, DP_VLAN_ACT_DROP, 0, 0);
+		set_pattern(&vlan2_list[1].outer, 2,
+			    200, DP_VLAN_PATTERN_NOT_CARE,
+			    DP_VLAN_PATTERN_NOT_CARE, DP_VLAN_PATTERN_NOT_CARE);
+		set_pattern(&vlan2_list[1].inner, DP_VLAN_PATTERN_NOT_CARE,
+			    DP_VLAN_PATTERN_NOT_CARE, DP_VLAN_PATTERN_NOT_CARE,
+			    DP_VLAN_PATTERN_NOT_CARE, DP_VLAN_PATTERN_NOT_CARE);
+		set_action(&vlan2_list[1].act, DP_VLAN_ACT_FWD, 0, 0);
+		dp_vlan_set(&vlan, 0);
+	}
+	break;
+
 	default:
 		PR_INFO("unknown test case\n");
 	break;
diff --git a/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_tc_asym_vlan.c b/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_tc_asym_vlan.c
index b9a8413c4a98..74c58e306a59 100644
--- a/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_tc_asym_vlan.c
+++ b/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_tc_asym_vlan.c
@@ -254,6 +254,16 @@ static int tc_vlan_filter(struct core_ops *ops,
 	GSW_VLANFILTER_config_t *pcfg;
 	int i, j, k;
 
+	if (total <= 0) {
+		/* Update bridge port */
+		ret = update_bp(ops,
+				(u32)info->bp,
+				vlan->dir == DP_DIR_INGRESS,
+				NULL,
+				NULL);
+		return ret;
+	}
+
 	/* bridge port */
 	pcfg = kmalloc_array(total, sizeof(*pcfg), GFP_KERNEL);
 	if (!pcfg)
@@ -265,7 +275,7 @@ static int tc_vlan_filter(struct core_ops *ops,
 	/* untagged rule */
 	for (i = 0; i < vlan->n_vlan0; i++) {
 		if (!vlan->vlan0_list[i].def)
-	/* VLAN filter for untagged packet have default rule only */
+		/* VLAN filter for untagged packet have default rule only */
 			goto EXIT;
 		if ((vlan->vlan0_list[i].act.act & DP_VLAN_ACT_FWD)) {
 		/* default value was set to drop */
@@ -730,65 +740,67 @@ static int tc_ext_vlan(struct core_ops *ops,
 	GSW_EXTENDEDVLAN_config_t cfg;
 	int i, j;
 
-	alloc.nNumberOfEntries = (u32)total;
-	ret = ops->gsw_extvlan_ops.ExtendedVlan_Alloc(ops, &alloc);
-	if (ret != GSW_statusOk)
-		return -EIO;
-	DP_DEBUG(DP_DBG_FLAG_PAE, "ExtendedVlan_Alloc - %u[%u]\n",
-		 alloc.nExtendedVlanBlockId,
-		 alloc.nNumberOfEntries);
+	if (total > 0) {
+		alloc.nNumberOfEntries = (u32)total;
+		ret = ops->gsw_extvlan_ops.ExtendedVlan_Alloc(ops, &alloc);
+		if (ret != GSW_statusOk)
+			return -EIO;
+		DP_DEBUG(DP_DBG_FLAG_PAE, "ExtendedVlan_Alloc - %u[%u]\n",
+			 alloc.nExtendedVlanBlockId,
+			 alloc.nNumberOfEntries);
 
-	j = 0;
+		j = 0;
 
-	/* untagged rule */
-	for (i = 0; i < vlan->n_vlan0; i++) {
-		memset(&cfg, 0, sizeof(cfg));
-		cfg.nExtendedVlanBlockId = alloc.nExtendedVlanBlockId;
-		cfg.nEntryIndex = j;
-		j++;
-		ret = ext_vlan_cfg(ops,
-				   &cfg,
-				   vlan->vlan0_list[i].def,
-				   vlan->vlan0_list[i].outer.proto,
-				   NULL,
-				   NULL,
-				   &vlan->vlan0_list[i].act);
-		if (ret != 0)
-			goto ERROR;
-	}
+		/* untagged rule */
+		for (i = 0; i < vlan->n_vlan0; i++) {
+			memset(&cfg, 0, sizeof(cfg));
+			cfg.nExtendedVlanBlockId = alloc.nExtendedVlanBlockId;
+			cfg.nEntryIndex = j;
+			j++;
+			ret = ext_vlan_cfg(ops,
+					   &cfg,
+					   vlan->vlan0_list[i].def,
+					   vlan->vlan0_list[i].outer.proto,
+					   NULL,
+					   NULL,
+					   &vlan->vlan0_list[i].act);
+			if (ret != 0)
+				goto ERROR;
+		}
 
-	/* 1-tag rule */
-	for (i = 0; i < vlan->n_vlan1; i++) {
-		memset(&cfg, 0, sizeof(cfg));
-		cfg.nExtendedVlanBlockId = alloc.nExtendedVlanBlockId;
-		cfg.nEntryIndex = j;
-		j++;
-		ret = ext_vlan_cfg(ops,
-				   &cfg,
-				   vlan->vlan1_list[i].def,
-				   vlan->vlan1_list[i].outer.proto,
-				   &vlan->vlan1_list[i].outer,
-				   NULL,
-				   &vlan->vlan1_list[i].act);
-		if (ret != 0)
-			goto ERROR;
-	}
+		/* 1-tag rule */
+		for (i = 0; i < vlan->n_vlan1; i++) {
+			memset(&cfg, 0, sizeof(cfg));
+			cfg.nExtendedVlanBlockId = alloc.nExtendedVlanBlockId;
+			cfg.nEntryIndex = j;
+			j++;
+			ret = ext_vlan_cfg(ops,
+					   &cfg,
+					   vlan->vlan1_list[i].def,
+					   vlan->vlan1_list[i].outer.proto,
+					   &vlan->vlan1_list[i].outer,
+					   NULL,
+					   &vlan->vlan1_list[i].act);
+			if (ret != 0)
+				goto ERROR;
+		}
 
-	/* 2-tag rule */
-	for (i = 0; i < vlan->n_vlan2; i++) {
-		memset(&cfg, 0, sizeof(cfg));
-		cfg.nExtendedVlanBlockId = alloc.nExtendedVlanBlockId;
-		cfg.nEntryIndex = j;
-		j++;
-		ret = ext_vlan_cfg(ops,
-				   &cfg,
-				   vlan->vlan2_list[i].def,
-				   vlan->vlan2_list[i].outer.proto,
-				   &vlan->vlan2_list[i].outer,
-				   &vlan->vlan2_list[i].inner,
-				   &vlan->vlan2_list[i].act);
-		if (ret != 0)
-			goto ERROR;
+		/* 2-tag rule */
+		for (i = 0; i < vlan->n_vlan2; i++) {
+			memset(&cfg, 0, sizeof(cfg));
+			cfg.nExtendedVlanBlockId = alloc.nExtendedVlanBlockId;
+			cfg.nEntryIndex = j;
+			j++;
+			ret = ext_vlan_cfg(ops,
+					   &cfg,
+					   vlan->vlan2_list[i].def,
+					   vlan->vlan2_list[i].outer.proto,
+					   &vlan->vlan2_list[i].outer,
+					   &vlan->vlan2_list[i].inner,
+					   &vlan->vlan2_list[i].act);
+			if (ret != 0)
+				goto ERROR;
+		}
 	}
 
 	if ((info->dev_type & 0x01) == 0) {
@@ -798,14 +810,14 @@ static int tc_ext_vlan(struct core_ops *ops,
 				 (u32)info->subix,
 				 vlan->dir == DP_DIR_INGRESS,
 				 (info->dev_type & 0x02) != 0,
-				 &alloc);
+				 total > 0 ? &alloc : NULL);
 	} else {
 		/* Configure bridge port */
 		ret = update_bp(ops,
 				(u32)info->bp,
 				vlan->dir == DP_DIR_INGRESS,
 				NULL,
-				&alloc);
+				total > 0 ? &alloc : NULL);
 	}
 	if (ret == 0)
 		return 0;
diff --git a/include/net/datapath_api_vlan.h b/include/net/datapath_api_vlan.h
index 66051ad1fb73..5185215ef492 100644
--- a/include/net/datapath_api_vlan.h
+++ b/include/net/datapath_api_vlan.h
@@ -93,8 +93,7 @@ struct dp_act_vlan {
 };
 
 struct dp_vlan0 {
-#define DP_VLAN_DEF_DROP 1
-#define DP_VLAN_DEF_ACCEPT 0
+#define DP_VLAN_DEF_RULE 1
 	int def;		/* default rule for untagged packet */
 	struct dp_pattern_vlan outer;	/* match pattern.
 					 * only proto is valid for this case
