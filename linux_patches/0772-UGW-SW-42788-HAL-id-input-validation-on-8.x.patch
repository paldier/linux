From cdbe04eec88e85d653a1f1a45ea8fe50b4319f15 Mon Sep 17 00:00:00 2001
From: moinakde <moinak.debnath@intel.com>
Date: Fri, 6 Sep 2019 14:15:15 +0530
Subject: [PATCH] UGW_SW-42788: HAL id input validation on 8.x

---
 drivers/net/ethernet/lantiq/ppa/ppa_hal_wrapper.c | 228 ++++++++++++++++++++++
 1 file changed, 228 insertions(+)

diff --git a/drivers/net/ethernet/lantiq/ppa/ppa_hal_wrapper.c b/drivers/net/ethernet/lantiq/ppa/ppa_hal_wrapper.c
index 0de6e94c7229..d91af6fdd31a 100644
--- a/drivers/net/ethernet/lantiq/ppa/ppa_hal_wrapper.c
+++ b/drivers/net/ethernet/lantiq/ppa/ppa_hal_wrapper.c
@@ -64,6 +64,9 @@ uint8_t ppa_drv_get_num_registred_hals(void)
 /*****************************************************************************************/
 uint32_t ppa_drv_generic_hal_register(uint32_t hal_id, ppa_generic_hook_t generic_hook)
 {
+	if (hal_id >= MAX_HAL)
+		return PPA_FAILURE;
+
 	if (generic_hook) {
 		if (hal_id  ==  PPE_HAL) {/*ppe hal*/
 			ppa_drv_hal_generic_hook  =  generic_hook;
@@ -77,6 +80,9 @@ uint32_t ppa_drv_generic_hal_register(uint32_t hal_id, ppa_generic_hook_t generi
 
 void ppa_drv_generic_hal_deregister(uint32_t hal_id)
 {
+	if (hal_id >= MAX_HAL)
+		return PPA_FAILURE;
+
 	if (hal_id  ==  PPE_HAL) {/*ppe hal*/
 		ppa_drv_hal_generic_hook  =  NULL;
 	}
@@ -183,6 +189,9 @@ uint32_t ppa_drv_deregister_cap(PPA_API_CAPS cap, PPA_HAL_ID hal_id)
 /*****************************************************************************************/
 uint32_t ppa_hsel_hal_init(PPA_HAL_INIT_CFG *cfg, uint32_t flag, uint32_t hal_id)
 {
+	if (hal_id >= MAX_HAL)
+		return PPA_FAILURE;
+
 	if (!ppa_drv_hal_hook[hal_id])
 		return PPA_FAILURE;
 
@@ -191,6 +200,9 @@ uint32_t ppa_hsel_hal_init(PPA_HAL_INIT_CFG *cfg, uint32_t flag, uint32_t hal_id
 
 uint32_t ppa_hsel_hal_exit(uint32_t flag, uint32_t hal_id)
 {
+	if (hal_id >= MAX_HAL)
+		return PPA_FAILURE;
+
 	if (!ppa_drv_hal_hook[hal_id])
 		return PPA_FAILURE;
 
@@ -199,6 +211,9 @@ uint32_t ppa_hsel_hal_exit(uint32_t flag, uint32_t hal_id)
 
 uint32_t ppa_hsel_get_hal_id(PPA_VERSION *v, uint32_t flag, uint32_t hal_id)
 {
+	if (hal_id >= MAX_HAL)
+		return PPA_FAILURE;
+
 	if (!ppa_drv_hal_hook[hal_id])
 		return PPA_FAILURE;
 
@@ -207,6 +222,8 @@ uint32_t ppa_hsel_get_hal_id(PPA_VERSION *v, uint32_t flag, uint32_t hal_id)
 
 uint32_t ppa_hsel_get_firmware_id(PPA_VERSION *v, uint32_t flag, uint32_t hal_id)
 {
+	if (hal_id >= MAX_HAL)
+		return PPA_FAILURE;
 
 	if (!ppa_drv_hal_hook[hal_id])
 		return PPA_FAILURE;
@@ -216,6 +233,9 @@ uint32_t ppa_hsel_get_firmware_id(PPA_VERSION *v, uint32_t flag, uint32_t hal_id
 
 uint32_t ppa_hsel_get_number_of_phys_port(PPA_COUNT_CFG *count, uint32_t flag, uint32_t hal_id)
 {
+	if (hal_id >= MAX_HAL)
+		return PPA_FAILURE;
+
 	if (!ppa_drv_hal_hook[hal_id])
 		return PPA_FAILURE;
 
@@ -224,6 +244,9 @@ uint32_t ppa_hsel_get_number_of_phys_port(PPA_COUNT_CFG *count, uint32_t flag, u
 
 uint32_t ppa_hsel_get_phys_port_info(PPE_IFINFO *info, uint32_t flag, uint32_t hal_id)
 {
+	if (hal_id >= MAX_HAL)
+		return PPA_FAILURE;
+
 	if (!ppa_drv_hal_hook[hal_id])
 		return PPA_FAILURE;
 
@@ -232,6 +255,9 @@ uint32_t ppa_hsel_get_phys_port_info(PPE_IFINFO *info, uint32_t flag, uint32_t h
 
 uint32_t ppa_hsel_get_max_entries(PPA_MAX_ENTRY_INFO *entry, uint32_t flag, uint32_t hal_id)
 {
+	if (hal_id >= MAX_HAL)
+		return PPA_FAILURE;
+
 	if (!ppa_drv_hal_hook[hal_id])
 		return PPA_FAILURE;
 
@@ -240,6 +266,9 @@ uint32_t ppa_hsel_get_max_entries(PPA_MAX_ENTRY_INFO *entry, uint32_t flag, uint
 
 uint32_t ppa_hsel_set_route_cfg(PPA_ROUTING_CFG *cfg, uint32_t flag, uint32_t hal_id)
 {
+	if (hal_id >= MAX_HAL)
+		return PPA_FAILURE;
+
 	if (!ppa_drv_hal_hook[hal_id])
 		return PPA_FAILURE;
 
@@ -249,6 +278,9 @@ uint32_t ppa_hsel_set_route_cfg(PPA_ROUTING_CFG *cfg, uint32_t flag, uint32_t ha
 
 uint32_t ppa_hsel_set_bridging_cfg(PPA_BRDG_CFG *cfg, uint32_t flag, uint32_t hal_id)
 {
+	if (hal_id >= MAX_HAL)
+		return PPA_FAILURE;
+
 	if (!ppa_drv_hal_hook[hal_id])
 		return PPA_FAILURE;
 
@@ -257,6 +289,9 @@ uint32_t ppa_hsel_set_bridging_cfg(PPA_BRDG_CFG *cfg, uint32_t flag, uint32_t ha
 
 uint32_t ppa_hsel_get_acc_mode(PPA_ACC_ENABLE *cfg, uint32_t flag, uint32_t hal_id)
 {
+	if (hal_id >= MAX_HAL)
+		return PPA_FAILURE;
+
 	if (!ppa_drv_hal_hook[hal_id])
 		return PPA_FAILURE;
 
@@ -265,6 +300,9 @@ uint32_t ppa_hsel_get_acc_mode(PPA_ACC_ENABLE *cfg, uint32_t flag, uint32_t hal_
 
 uint32_t ppa_hsel_set_acc_mode(PPA_ACC_ENABLE *cfg, uint32_t flag, uint32_t hal_id)
 {
+	if (hal_id >= MAX_HAL)
+		return PPA_FAILURE;
+
 	if (!ppa_drv_hal_hook[hal_id])
 		return PPA_FAILURE;
 
@@ -273,6 +311,9 @@ uint32_t ppa_hsel_set_acc_mode(PPA_ACC_ENABLE *cfg, uint32_t flag, uint32_t hal_
 
 uint32_t ppa_hsel_is_ipv6_enabled(uint32_t flag, uint32_t hal_id)
 {
+	if (hal_id >= MAX_HAL)
+		return PPA_FAILURE;
+
 	if (!ppa_drv_hal_hook[hal_id])
 		return PPA_FAILURE;
 
@@ -282,6 +323,9 @@ uint32_t ppa_hsel_is_ipv6_enabled(uint32_t flag, uint32_t hal_id)
 
 uint32_t ppa_hsel_init_qos_cfg(uint32_t flag, uint32_t hal_id)
 {
+	if (hal_id >= MAX_HAL)
+		return PPA_FAILURE;
+
 	if (!ppa_drv_hal_hook[hal_id])
 		return PPA_FAILURE;
 
@@ -289,6 +333,9 @@ uint32_t ppa_hsel_init_qos_cfg(uint32_t flag, uint32_t hal_id)
 }
 uint32_t ppa_hsel_uninit_qos_cfg(uint32_t flag, uint32_t hal_id)
 {
+	if (hal_id >= MAX_HAL)
+		return PPA_FAILURE;
+
 	if (!ppa_drv_hal_hook[hal_id])
 		return PPA_FAILURE;
 
@@ -318,6 +365,9 @@ uint32_t ppa_hsel_dscp_class_reset(uint32_t flag, uint32_t hal_id)
 EXPORT_SYMBOL(ppa_hsel_dscp_class_reset);
 uint32_t ppa_hsel_add_qos_queue_entry(QOS_Q_ADD_CFG *entry, uint32_t flag, uint32_t hal_id)
 {
+	if (hal_id >= MAX_HAL)
+		return PPA_FAILURE;
+
 	if (!ppa_drv_hal_hook[hal_id])
 		return PPA_FAILURE;
 
@@ -325,6 +375,9 @@ uint32_t ppa_hsel_add_qos_queue_entry(QOS_Q_ADD_CFG *entry, uint32_t flag, uint3
 }
 uint32_t ppa_hsel_modify_qos_queue_entry(QOS_Q_MOD_CFG *entry, uint32_t flag, uint32_t hal_id)
 {
+	if (hal_id >= MAX_HAL)
+		return PPA_FAILURE;
+
 	if (!ppa_drv_hal_hook[hal_id])
 		return PPA_FAILURE;
 
@@ -332,6 +385,9 @@ uint32_t ppa_hsel_modify_qos_queue_entry(QOS_Q_MOD_CFG *entry, uint32_t flag, ui
 }
 uint32_t ppa_hsel_delete_qos_queue_entry(QOS_Q_DEL_CFG *entry, uint32_t flag, uint32_t hal_id)
 {
+	if (hal_id >= MAX_HAL)
+		return PPA_FAILURE;
+
 	if (!ppa_drv_hal_hook[hal_id])
 		return PPA_FAILURE;
 
@@ -339,6 +395,9 @@ uint32_t ppa_hsel_delete_qos_queue_entry(QOS_Q_DEL_CFG *entry, uint32_t flag, ui
 }
 uint32_t ppa_hsel_set_qos_rate_entry(QOS_RATE_SHAPING_CFG *entry, uint32_t flag, uint32_t hal_id)
 {
+	if (hal_id >= MAX_HAL)
+		return PPA_FAILURE;
+
 	if (!ppa_drv_hal_hook[hal_id])
 		return PPA_FAILURE;
 
@@ -346,6 +405,9 @@ uint32_t ppa_hsel_set_qos_rate_entry(QOS_RATE_SHAPING_CFG *entry, uint32_t flag,
 }
 uint32_t ppa_hsel_reset_qos_rate_entry(QOS_RATE_SHAPING_CFG *entry, uint32_t flag, uint32_t hal_id)
 {
+	if (hal_id >= MAX_HAL)
+		return PPA_FAILURE;
+
 	if (!ppa_drv_hal_hook[hal_id])
 		return PPA_FAILURE;
 
@@ -353,6 +415,9 @@ uint32_t ppa_hsel_reset_qos_rate_entry(QOS_RATE_SHAPING_CFG *entry, uint32_t fla
 }
 uint32_t ppa_hsel_set_qos_shaper_entry(QOS_RATE_SHAPING_CFG *entry, uint32_t flag, uint32_t hal_id)
 {
+	if (hal_id >= MAX_HAL)
+		return PPA_FAILURE;
+
 	if (!ppa_drv_hal_hook[hal_id])
 		return PPA_FAILURE;
 
@@ -361,6 +426,9 @@ uint32_t ppa_hsel_set_qos_shaper_entry(QOS_RATE_SHAPING_CFG *entry, uint32_t fla
 
 uint32_t ppa_hsel_set_qos_meter_entry(PPA_QOS_METER_CFG *entry, uint32_t flag, uint32_t hal_id)
 {
+	if (hal_id >= MAX_HAL)
+		return PPA_FAILURE;
+
 	if (!ppa_drv_hal_hook[hal_id])
 		return PPA_FAILURE;
 
@@ -370,6 +438,9 @@ EXPORT_SYMBOL(ppa_hsel_set_qos_meter_entry);
 
 uint32_t ppa_hsel_mod_subif_port_cfg(QOS_MOD_SUBIF_PORT_CFG *entry, uint32_t flag, uint32_t hal_id)
 {
+	if (hal_id >= MAX_HAL)
+		return PPA_FAILURE;
+
 	if (!ppa_drv_hal_hook[hal_id])
 		return PPA_FAILURE;
 
@@ -378,6 +449,9 @@ uint32_t ppa_hsel_mod_subif_port_cfg(QOS_MOD_SUBIF_PORT_CFG *entry, uint32_t fla
 
 uint32_t ppa_hsel_add_complement(PPA_ROUTING_INFO *entry, uint32_t flag, uint32_t hal_id)
 {
+	if (hal_id >= MAX_HAL)
+		return PPA_FAILURE;
+
 	if (!ppa_drv_hal_hook[hal_id])
 		return PPA_FAILURE;
 
@@ -387,6 +461,9 @@ EXPORT_SYMBOL(ppa_hsel_add_complement);
 
 uint32_t ppa_hsel_del_complement(PPA_ROUTING_INFO *entry, uint32_t flag, uint32_t hal_id)
 {
+	if (hal_id >= MAX_HAL)
+		return PPA_FAILURE;
+
 	if (!ppa_drv_hal_hook[hal_id])
 		return PPA_FAILURE;
 
@@ -397,6 +474,9 @@ EXPORT_SYMBOL(ppa_hsel_del_complement);
 #if IS_ENABLED(CONFIG_SOC_GRX500)
 uint32_t ppa_hsel_add_class_rule(PPA_CLASS_RULE *rule, uint32_t flag, uint32_t hal_id)
 {
+	if (hal_id >= MAX_HAL)
+		return PPA_FAILURE;
+
 	if (!ppa_drv_hal_hook[hal_id])
 		return PPA_FAILURE;
 
@@ -405,6 +485,9 @@ uint32_t ppa_hsel_add_class_rule(PPA_CLASS_RULE *rule, uint32_t flag, uint32_t h
 
 uint32_t ppa_hsel_mod_class_rule(PPA_CLASS_RULE *rule, uint32_t flag, uint32_t hal_id)
 {
+	if (hal_id >= MAX_HAL)
+		return PPA_FAILURE;
+
 	if (!ppa_drv_hal_hook[hal_id])
 		return PPA_FAILURE;
 
@@ -413,6 +496,9 @@ uint32_t ppa_hsel_mod_class_rule(PPA_CLASS_RULE *rule, uint32_t flag, uint32_t h
 
 uint32_t ppa_hsel_del_class_rule(PPA_CLASS_RULE *rule, uint32_t flag, uint32_t hal_id)
 {
+	if (hal_id >= MAX_HAL)
+		return PPA_FAILURE;
+
 	if (!ppa_drv_hal_hook[hal_id])
 		return PPA_FAILURE;
 
@@ -421,6 +507,9 @@ uint32_t ppa_hsel_del_class_rule(PPA_CLASS_RULE *rule, uint32_t flag, uint32_t h
 
 uint32_t ppa_hsel_get_class_rule(PPA_CLASS_RULE *rule, uint32_t flag, uint32_t hal_id)
 {
+	if (hal_id >= MAX_HAL)
+		return PPA_FAILURE;
+
 	if (!ppa_drv_hal_hook[hal_id])
 		return PPA_FAILURE;
 
@@ -430,6 +519,9 @@ uint32_t ppa_hsel_get_class_rule(PPA_CLASS_RULE *rule, uint32_t flag, uint32_t h
 
 uint32_t ppa_hsel_add_sess_meta(PPA_ROUTING_INFO *entry, PPA_BUF *skb, void *txifinfo, uint32_t hal_id)
 {
+	if (hal_id >= MAX_HAL)
+		return PPA_FAILURE;
+
 	PPA_SESSMETA_INFO metainfo={0};
 
 	if(!entry || !skb) return PPA_FAILURE;
@@ -445,6 +537,9 @@ uint32_t ppa_hsel_add_sess_meta(PPA_ROUTING_INFO *entry, PPA_BUF *skb, void *txi
 
 uint32_t ppa_hsel_del_sess_meta(PPA_ROUTING_INFO *entry, uint32_t hal_id)
 {
+	if (hal_id >= MAX_HAL)
+		return PPA_FAILURE;
+
 	if (!ppa_drv_hal_hook[hal_id])
 		return PPA_FAILURE;
 
@@ -453,6 +548,9 @@ uint32_t ppa_hsel_del_sess_meta(PPA_ROUTING_INFO *entry, uint32_t hal_id)
 
 uint32_t ppa_hsel_add_routing_entry(PPA_ROUTING_INFO *entry, uint32_t flag, uint32_t hal_id)
 {
+	if (hal_id >= MAX_HAL)
+		return PPA_FAILURE;
+
 	if (!ppa_drv_hal_hook[hal_id])
 		return PPA_FAILURE;
 
@@ -461,6 +559,9 @@ uint32_t ppa_hsel_add_routing_entry(PPA_ROUTING_INFO *entry, uint32_t flag, uint
 
 uint32_t ppa_hsel_del_routing_entry(PPA_ROUTING_INFO *entry, uint32_t flag, uint32_t hal_id)
 {
+	if (hal_id >= MAX_HAL)
+		return PPA_FAILURE;
+
 	if (!ppa_drv_hal_hook[hal_id])
 		return PPA_FAILURE;
 
@@ -469,6 +570,9 @@ uint32_t ppa_hsel_del_routing_entry(PPA_ROUTING_INFO *entry, uint32_t flag, uint
 
 uint32_t ppa_hsel_update_routing_entry(PPA_ROUTING_INFO *entry , uint32_t flag, uint32_t hal_id)
 {
+	if (hal_id >= MAX_HAL)
+		return PPA_FAILURE;
+
 	if (!ppa_drv_hal_hook[hal_id])
 		return PPA_FAILURE;
 
@@ -477,6 +581,9 @@ uint32_t ppa_hsel_update_routing_entry(PPA_ROUTING_INFO *entry , uint32_t flag,
 
 uint32_t ppa_hsel_add_wan_mc_entry(PPA_MC_INFO *entry , uint32_t flag, uint32_t hal_id)
 {
+	if (hal_id >= MAX_HAL)
+		return PPA_FAILURE;
+
 	if (!ppa_drv_hal_hook[hal_id])
 		return PPA_FAILURE;
 
@@ -485,6 +592,9 @@ uint32_t ppa_hsel_add_wan_mc_entry(PPA_MC_INFO *entry , uint32_t flag, uint32_t
 
 uint32_t ppa_hsel_del_wan_mc_entry(PPA_MC_INFO *entry, uint32_t flag, uint32_t hal_id)
 {
+	if (hal_id >= MAX_HAL)
+		return PPA_FAILURE;
+
 	if (!ppa_drv_hal_hook[hal_id])
 		return PPA_FAILURE;
 
@@ -493,6 +603,9 @@ uint32_t ppa_hsel_del_wan_mc_entry(PPA_MC_INFO *entry, uint32_t flag, uint32_t h
 
 uint32_t ppa_hsel_update_wan_mc_entry(PPA_MC_INFO *entry, uint32_t flag, uint32_t hal_id)
 {
+	if (hal_id >= MAX_HAL)
+		return PPA_FAILURE;
+
 	if (!ppa_drv_hal_hook[hal_id])
 		return PPA_FAILURE;
 
@@ -501,6 +614,9 @@ uint32_t ppa_hsel_update_wan_mc_entry(PPA_MC_INFO *entry, uint32_t flag, uint32_
 
 uint32_t ppa_hsel_add_bridging_entry(PPA_BR_MAC_INFO *entry, uint32_t flag, uint32_t hal_id)
 {
+	if (hal_id >= MAX_HAL)
+		return PPA_FAILURE;
+
 	if (!ppa_drv_hal_hook[hal_id])
 		return PPA_FAILURE;
 
@@ -509,6 +625,9 @@ uint32_t ppa_hsel_add_bridging_entry(PPA_BR_MAC_INFO *entry, uint32_t flag, uint
 
 uint32_t ppa_hsel_del_bridging_entry(PPA_BR_MAC_INFO *entry, uint32_t flag, uint32_t hal_id)
 {
+	if (hal_id >= MAX_HAL)
+		return PPA_FAILURE;
+
 	if (!ppa_drv_hal_hook[hal_id])
 		return PPA_FAILURE;
 
@@ -517,13 +636,20 @@ uint32_t ppa_hsel_del_bridging_entry(PPA_BR_MAC_INFO *entry, uint32_t flag, uint
 
 uint32_t ppa_hsel_test_and_clear_bridging_hit_stat(PPA_BR_MAC_INFO *entry, uint32_t flag, uint32_t hal_id)
 {
+	if (hal_id >= MAX_HAL)
+		return PPA_FAILURE;
+
 	if (!ppa_drv_hal_hook[hal_id])
 		return PPA_FAILURE;
+
 	return ppa_drv_hal_hook[hal_id](PPA_GENERIC_HAL_TEST_CLEAR_BR_HIT_STAT, (void *)entry, flag);
 }
 
 uint32_t ppa_hsel_add_tunnel_entry(PPA_TUNNEL_INFO *entry, uint32_t flag, uint32_t hal_id)
 {
+	if (hal_id >= MAX_HAL)
+		return PPA_FAILURE;
+
 	if (!ppa_drv_hal_hook[hal_id])
 		return PPA_FAILURE;
 
@@ -557,6 +683,9 @@ uint32_t ppa_drv_set_hal_dbg(PPA_CMD_GENERAL_ENABLE_INFO *cfg, uint32_t flag)
 
 uint32_t ppa_hsel_del_tunnel_entry(PPA_TUNNEL_INFO *entry, uint32_t flag, uint32_t hal_id)
 {
+	if (hal_id >= MAX_HAL)
+		return PPA_FAILURE;
+
 	if (!ppa_drv_hal_hook[hal_id])
 		return PPA_FAILURE;
 
@@ -571,6 +700,9 @@ uint32_t ppa_hsel_del_tunnel_entry(PPA_TUNNEL_INFO *entry, uint32_t flag, uint32
 #if IS_ENABLED(CONFIG_LTQ_TOE_DRIVER)
 uint32_t ppa_hsel_del_lro_entry(PPA_LRO_INFO *entry, uint32_t flag, uint32_t hal_id)
 {
+	if (hal_id >= MAX_HAL)
+		return PPA_FAILURE;
+
 	if (!ppa_drv_hal_hook[hal_id])
 		return PPA_FAILURE;
 
@@ -579,6 +711,9 @@ uint32_t ppa_hsel_del_lro_entry(PPA_LRO_INFO *entry, uint32_t flag, uint32_t hal
 
 uint32_t ppa_hsel_add_lro_entry(PPA_LRO_INFO *entry, uint32_t flag, uint32_t hal_id)
 {
+	if (hal_id >= MAX_HAL)
+		return PPA_FAILURE;
+
 	if (!ppa_drv_hal_hook[hal_id])
 		return PPA_FAILURE;
 
@@ -589,6 +724,9 @@ uint32_t ppa_hsel_add_lro_entry(PPA_LRO_INFO *entry, uint32_t flag, uint32_t hal
 #if IS_ENABLED(CONFIG_PPA_MPE_IP97)
 uint32_t ppa_hsel_get_ipsec_tunnel_mib(IPSEC_TUNNEL_MIB_INFO *entry, uint32_t flag, uint32_t hal_id)
 {
+	if (hal_id >= MAX_HAL)
+		return PPA_FAILURE;
+
 	if (!ppa_drv_hal_hook[hal_id])
 		return PPA_FAILURE;
 
@@ -598,6 +736,9 @@ uint32_t ppa_hsel_get_ipsec_tunnel_mib(IPSEC_TUNNEL_MIB_INFO *entry, uint32_t fl
 
 uint32_t ppa_hsel_get_routing_entry_bytes(PPA_ROUTING_INFO *entry, uint32_t flag, uint32_t hal_id)
 {
+	if (hal_id >= MAX_HAL)
+		return PPA_FAILURE;
+
 	if (!ppa_drv_hal_hook[hal_id])
 		return PPA_FAILURE;
 
@@ -606,6 +747,9 @@ uint32_t ppa_hsel_get_routing_entry_bytes(PPA_ROUTING_INFO *entry, uint32_t flag
 
 uint32_t ppa_hsel_get_mc_entry_bytes(PPA_MC_INFO *entry, uint32_t flag, uint32_t hal_id)
 {
+	if (hal_id >= MAX_HAL)
+		return PPA_FAILURE;
+
 	if (!ppa_drv_hal_hook[hal_id])
 		return PPA_FAILURE;
 
@@ -614,6 +758,9 @@ uint32_t ppa_hsel_get_mc_entry_bytes(PPA_MC_INFO *entry, uint32_t flag, uint32_t
 
 uint32_t ppa_hsel_add_outer_vlan_entry(PPA_OUT_VLAN_INFO *entry, uint32_t flag, uint32_t hal_id)
 {
+	if (hal_id >= MAX_HAL)
+		return PPA_FAILURE;
+
 	if (!ppa_drv_hal_hook[hal_id])
 		return PPA_FAILURE;
 
@@ -622,6 +769,9 @@ uint32_t ppa_hsel_add_outer_vlan_entry(PPA_OUT_VLAN_INFO *entry, uint32_t flag,
 
 uint32_t ppa_hsel_del_outer_vlan_entry(PPA_OUT_VLAN_INFO *entry, uint32_t flag, uint32_t hal_id)
 {
+	if (hal_id >= MAX_HAL)
+		return PPA_FAILURE;
+
 	if (!ppa_drv_hal_hook[hal_id])
 		return PPA_FAILURE;
 
@@ -630,6 +780,9 @@ uint32_t ppa_hsel_del_outer_vlan_entry(PPA_OUT_VLAN_INFO *entry, uint32_t flag,
 
 uint32_t ppa_hsel_get_outer_vlan_entry(PPA_OUT_VLAN_INFO *entry, uint32_t flag, uint32_t hal_id)
 {
+	if (hal_id >= MAX_HAL)
+		return PPA_FAILURE;
+
 	if (!ppa_drv_hal_hook[hal_id])
 		return PPA_FAILURE;
 
@@ -638,6 +791,9 @@ uint32_t ppa_hsel_get_outer_vlan_entry(PPA_OUT_VLAN_INFO *entry, uint32_t flag,
 
 uint32_t ppa_hsel_get_itf_mib(PPE_ITF_MIB_INFO *mib, uint32_t flag, uint32_t hal_id)
 {
+	if (hal_id >= MAX_HAL)
+		return PPA_FAILURE;
+
 	if (!ppa_drv_hal_hook[hal_id])
 		return PPA_FAILURE;
 
@@ -646,6 +802,9 @@ uint32_t ppa_hsel_get_itf_mib(PPE_ITF_MIB_INFO *mib, uint32_t flag, uint32_t hal
 
 uint32_t ppa_hsel_get_generic_itf_mib( PPA_ITF_MIB_INFO *mib, uint32_t flag, uint32_t hal_id)
 {
+	if (hal_id >= MAX_HAL)
+		return PPA_FAILURE;
+
 	if( !ppa_drv_hal_hook[hal_id] ) return PPA_FAILURE;
 
 	return ppa_drv_hal_hook[hal_id](PPA_GENERIC_HAL_GET_NEW_ITF_MIB,(void *)mib, flag );
@@ -653,6 +812,9 @@ uint32_t ppa_hsel_get_generic_itf_mib( PPA_ITF_MIB_INFO *mib, uint32_t flag, uin
 
 uint32_t ppa_hsel_get_dsl_mib(PPA_DSL_QUEUE_MIB *mib, uint32_t flag, uint32_t hal_id)
 {
+	if (hal_id >= MAX_HAL)
+		return PPA_FAILURE;
+
 	if (!ppa_drv_hal_hook[hal_id])
 		return PPA_FAILURE;
 
@@ -661,6 +823,9 @@ uint32_t ppa_hsel_get_dsl_mib(PPA_DSL_QUEUE_MIB *mib, uint32_t flag, uint32_t ha
 
 uint32_t ppa_hsel_get_ports_mib(PPA_PORT_MIB *mib, uint32_t flag, uint32_t hal_id)
 {
+	if (hal_id >= MAX_HAL)
+		return PPA_FAILURE;
+
 	if (!ppa_drv_hal_hook[hal_id])
 		return PPA_FAILURE;
 
@@ -669,6 +834,9 @@ uint32_t ppa_hsel_get_ports_mib(PPA_PORT_MIB *mib, uint32_t flag, uint32_t hal_i
 
 uint32_t ppa_hsel_test_and_clear_hit_stat(PPA_ROUTING_INFO *entry, uint32_t flag, uint32_t hal_id)
 {
+	if (hal_id >= MAX_HAL)
+		return PPA_FAILURE;
+
 	if (!ppa_drv_hal_hook[hal_id])
 		return PPA_FAILURE;
 
@@ -677,6 +845,9 @@ uint32_t ppa_hsel_test_and_clear_hit_stat(PPA_ROUTING_INFO *entry, uint32_t flag
 
 uint32_t ppa_hsel_test_and_clear_mc_hit_stat(PPA_MC_INFO *entry, uint32_t flag, uint32_t hal_id)
 {
+	if (hal_id >= MAX_HAL)
+		return PPA_FAILURE;
+
 	if (!ppa_drv_hal_hook[hal_id])
 		return PPA_FAILURE;
 
@@ -685,6 +856,9 @@ uint32_t ppa_hsel_test_and_clear_mc_hit_stat(PPA_MC_INFO *entry, uint32_t flag,
 
 uint32_t ppa_hsel_get_qos_qnum(PPA_QOS_COUNT_CFG *count, uint32_t flag, uint32_t hal_id)
 {
+	if (hal_id >= MAX_HAL)
+		return PPA_FAILURE;
+
 	if (!ppa_drv_hal_hook[hal_id])
 		return PPA_FAILURE;
 
@@ -693,6 +867,9 @@ uint32_t ppa_hsel_get_qos_qnum(PPA_QOS_COUNT_CFG *count, uint32_t flag, uint32_t
 
 uint32_t ppa_hsel_get_qos_status(PPA_QOS_STATUS *status, uint32_t flag, uint32_t hal_id)
 {
+	if (hal_id >= MAX_HAL)
+		return PPA_FAILURE;
+
 	if (!ppa_drv_hal_hook[hal_id])
 		return PPA_FAILURE;
 
@@ -702,6 +879,9 @@ uint32_t ppa_hsel_get_qos_status(PPA_QOS_STATUS *status, uint32_t flag, uint32_t
 
 uint32_t ppa_hsel_get_qos_mib(PPA_QOS_MIB_INFO *mib, uint32_t flag, uint32_t hal_id)
 {
+	if (hal_id >= MAX_HAL)
+		return PPA_FAILURE;
+
 	if (!ppa_drv_hal_hook[hal_id])
 		return PPA_FAILURE;
 
@@ -710,6 +890,9 @@ uint32_t ppa_hsel_get_qos_mib(PPA_QOS_MIB_INFO *mib, uint32_t flag, uint32_t hal
 
 uint32_t ppa_hsel_set_ctrl_qos_rate(PPA_QOS_ENABLE_CFG *enable_cfg, uint32_t flag, uint32_t hal_id)
 {
+	if (hal_id >= MAX_HAL)
+		return PPA_FAILURE;
+
 	if (!ppa_drv_hal_hook[hal_id])
 		return PPA_FAILURE;
 
@@ -717,6 +900,9 @@ uint32_t ppa_hsel_set_ctrl_qos_rate(PPA_QOS_ENABLE_CFG *enable_cfg, uint32_t fla
 }
 uint32_t ppa_hsel_get_ctrl_qos_rate(PPA_QOS_ENABLE_CFG *enable_cfg, uint32_t flag, uint32_t hal_id)
 {
+	if (hal_id >= MAX_HAL)
+		return PPA_FAILURE;
+
 	if (!ppa_drv_hal_hook[hal_id])
 		return PPA_FAILURE;
 
@@ -725,6 +911,9 @@ uint32_t ppa_hsel_get_ctrl_qos_rate(PPA_QOS_ENABLE_CFG *enable_cfg, uint32_t fla
 
 uint32_t ppa_hsel_set_qos_rate(PPA_QOS_RATE_SHAPING_CFG *cfg, uint32_t flag, uint32_t hal_id)
 {
+	if (hal_id >= MAX_HAL)
+		return PPA_FAILURE;
+
 	if (!ppa_drv_hal_hook[hal_id])
 		return PPA_FAILURE;
 
@@ -733,6 +922,9 @@ uint32_t ppa_hsel_set_qos_rate(PPA_QOS_RATE_SHAPING_CFG *cfg, uint32_t flag, uin
 
 uint32_t ppa_hsel_get_qos_rate(PPA_QOS_RATE_SHAPING_CFG *cfg, uint32_t flag, uint32_t hal_id)
 {
+	if (hal_id >= MAX_HAL)
+		return PPA_FAILURE;
+
 	if (!ppa_drv_hal_hook[hal_id])
 		return PPA_FAILURE;
 
@@ -741,6 +933,9 @@ uint32_t ppa_hsel_get_qos_rate(PPA_QOS_RATE_SHAPING_CFG *cfg, uint32_t flag, uin
 
 uint32_t ppa_hsel_reset_qos_rate(PPA_QOS_RATE_SHAPING_CFG *cfg , uint32_t flag, uint32_t hal_id)
 {
+	if (hal_id >= MAX_HAL)
+		return PPA_FAILURE;
+
 	if (!ppa_drv_hal_hook[hal_id])
 		return PPA_FAILURE;
 
@@ -749,6 +944,9 @@ uint32_t ppa_hsel_reset_qos_rate(PPA_QOS_RATE_SHAPING_CFG *cfg , uint32_t flag,
 
 uint32_t ppa_hsel_init_qos_rate(uint32_t flag, uint32_t hal_id)
 {
+	if (hal_id >= MAX_HAL)
+		return PPA_FAILURE;
+
 	if (!ppa_drv_hal_hook[hal_id])
 		return PPA_FAILURE;
 
@@ -757,6 +955,9 @@ uint32_t ppa_hsel_init_qos_rate(uint32_t flag, uint32_t hal_id)
 
 uint32_t ppa_hsel_set_ctrl_qos_wfq(PPA_QOS_ENABLE_CFG *enable_cfg, uint32_t flag, uint32_t hal_id)
 {
+	if (hal_id >= MAX_HAL)
+		return PPA_FAILURE;
+
 	if (!ppa_drv_hal_hook[hal_id])
 		return PPA_FAILURE;
 
@@ -765,6 +966,9 @@ uint32_t ppa_hsel_set_ctrl_qos_wfq(PPA_QOS_ENABLE_CFG *enable_cfg, uint32_t flag
 
 uint32_t ppa_hsel_get_ctrl_qos_wfq(PPA_QOS_ENABLE_CFG *enable_cfg, uint32_t flag, uint32_t hal_id)
 {
+	if (hal_id >= MAX_HAL)
+		return PPA_FAILURE;
+
 	if (!ppa_drv_hal_hook[hal_id])
 		return PPA_FAILURE;
 
@@ -773,6 +977,9 @@ uint32_t ppa_hsel_get_ctrl_qos_wfq(PPA_QOS_ENABLE_CFG *enable_cfg, uint32_t flag
 
 uint32_t ppa_hsel_set_qos_wfq(PPA_QOS_WFQ_CFG *cfg, uint32_t flag, uint32_t hal_id)
 {
+	if (hal_id >= MAX_HAL)
+		return PPA_FAILURE;
+
 	if (!ppa_drv_hal_hook[hal_id])
 		return PPA_FAILURE;
 
@@ -781,6 +988,9 @@ uint32_t ppa_hsel_set_qos_wfq(PPA_QOS_WFQ_CFG *cfg, uint32_t flag, uint32_t hal_
 
 uint32_t ppa_hsel_get_qos_wfq(PPA_QOS_WFQ_CFG *cfg, uint32_t flag, uint32_t hal_id)
 {
+	if (hal_id >= MAX_HAL)
+		return PPA_FAILURE;
+
 	if (!ppa_drv_hal_hook[hal_id])
 		return PPA_FAILURE;
 
@@ -789,6 +999,9 @@ uint32_t ppa_hsel_get_qos_wfq(PPA_QOS_WFQ_CFG *cfg, uint32_t flag, uint32_t hal_
 
 uint32_t ppa_hsel_reset_qos_wfq(PPA_QOS_WFQ_CFG *cfg, uint32_t flag, uint32_t hal_id)
 {
+	if (hal_id >= MAX_HAL)
+		return PPA_FAILURE;
+
 	if (!ppa_drv_hal_hook[hal_id])
 		return PPA_FAILURE;
 
@@ -797,6 +1010,9 @@ uint32_t ppa_hsel_reset_qos_wfq(PPA_QOS_WFQ_CFG *cfg, uint32_t flag, uint32_t ha
 
 uint32_t ppa_hsel_init_qos_wfq(uint32_t flag, uint32_t hal_id)
 {
+	if (hal_id >= MAX_HAL)
+		return PPA_FAILURE;
+
 	if (!ppa_drv_hal_hook[hal_id])
 		return PPA_FAILURE;
 
@@ -1058,6 +1274,9 @@ uint32_t ppa_drv_get_mib_mode(PPA_MIB_MODE_ENABLE *cfg)
 #if defined(RTP_SAMPLING_ENABLE) && RTP_SAMPLING_ENABLE
 uint32_t ppa_hsel_set_wan_mc_rtp(PPA_MC_INFO *entry, uint32_t hal_id)
 {
+	if (hal_id >= MAX_HAL)
+		return PPA_FAILURE;
+
 	if (!ppa_drv_hal_hook[hal_id]) return PPA_SUCCESS;
 
 	return ppa_drv_hal_hook[hal_id](PPA_GENERIC_HAL_SET_MC_RTP, (void *)entry, 0);
@@ -1071,6 +1290,9 @@ uint32_t ppa_drv_set_wan_mc_rtp(PPA_MC_INFO *entry)
 
 uint32_t ppa_hsel_get_mc_rtp_sampling_cnt(PPA_MC_INFO *entry, uint32_t hal_id)
 {
+	if (hal_id >= MAX_HAL)
+		return PPA_FAILURE;
+
 	if (!ppa_drv_hal_hook[hal_id]) return PPA_SUCCESS;
 
 	return ppa_drv_hal_hook[hal_id](PPA_GENERIC_HAL_GET_MC_RTP_SAMPLING_CNT, (void *)entry, 0);
@@ -1336,6 +1558,9 @@ uint32_t ppa_drv_init_qos_wfq(uint32_t flag)
 #if defined(MBR_CONFIG) && MBR_CONFIG
 uint32_t ppa_hsel_set_qos_shaper(PPA_QOS_RATE_SHAPING_CFG *cfg, uint32_t flag, uint32_t hal_id)
 {
+	if (hal_id >= MAX_HAL)
+		return PPA_FAILURE;
+
 	if (!ppa_drv_hal_hook[hal_id])
 		return PPA_FAILURE;
 
@@ -1344,6 +1569,9 @@ uint32_t ppa_hsel_set_qos_shaper(PPA_QOS_RATE_SHAPING_CFG *cfg, uint32_t flag, u
 
 uint32_t ppa_hsel_get_qos_shaper(PPA_QOS_RATE_SHAPING_CFG *cfg, uint32_t flag, uint32_t hal_id)
 {
+	if (hal_id >= MAX_HAL)
+		return PPA_FAILURE;
+
 	if (!ppa_drv_hal_hook[hal_id])
 		return PPA_FAILURE;
 
