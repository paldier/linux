From 945764e838b30d8257186452f3e28e399978ff63 Mon Sep 17 00:00:00 2001
From: Rekha Eswaran <rekha.eswaran@intel.com>
Date: Mon, 29 Jul 2019 11:10:42 +0800
Subject: [PATCH] LMTSYS-1149 To sync changes of swdev compilation issue in lgm
 repo to fmx

---
 drivers/net/datapath/dpm/datapath_swdev.c             | 14 ++++++++------
 drivers/net/datapath/dpm/gswip32/datapath_switchdev.c | 10 +++++-----
 2 files changed, 13 insertions(+), 11 deletions(-)

diff --git a/drivers/net/datapath/dpm/datapath_swdev.c b/drivers/net/datapath/dpm/datapath_swdev.c
index e063f7991249..605ce0cde625 100644
--- a/drivers/net/datapath/dpm/datapath_swdev.c
+++ b/drivers/net/datapath/dpm/datapath_swdev.c
@@ -366,7 +366,7 @@ static int dp_swdev_cfg_gswip(struct bridge_id_entry_item *br_item, u8 *addr)
 			br_info = kmalloc(sizeof(*br_info), GFP_KERNEL);
 			if (!br_info) {
 				PR_ERR
-				("Switch cfg Failed as kmalloc %d bytes fail\n",
+				("Switch cfg Fail as kmalloc %zd bytes fail\n",
 				 sizeof(*br_info));
 				/*TODO need to check return value
 				 *for switchdev commit
@@ -846,8 +846,6 @@ static int dp_swdev_port_obj_add(struct net_device *dev,
 	case SWITCHDEV_OBJ_ID_PORT_VLAN:
 		err = dp_swdev_filter_vlan(obj->orig_dev, obj, trans, br_dev);
 		break;
-	case SWITCHDEV_OBJ_ID_PORT_FDB:
-		break;
 	default:
 		err = -EOPNOTSUPP;
 		break;
@@ -884,6 +882,7 @@ static int dp_swdev_port_obj_del(struct net_device *dev,
 	return err;
 }
 
+#if IS_ENABLED(CONFIG_INTEL_DATAPATH_SWDEV_TEST)
 static int dp_swdev_port_fdb_dump(struct net_device *dev,
 				  struct switchdev_obj_port_fdb *fdb_obj,
 				  switchdev_obj_dump_cb_t *cb)
@@ -920,13 +919,11 @@ static int dp_swdev_port_obj_dump(struct net_device *dev,
 
 	DP_DEBUG(DP_DBG_FLAG_SWDEV, "dp_swdev_port_obj_dump\r\n");
 	switch (obj->id) {
-#if IS_ENABLED(CONFIG_INTEL_DATAPATH_SWDEV_TEST)
 	case SWITCHDEV_OBJ_ID_PORT_VLAN:
 		err = dp_swdev_port_vlan_dump(mlxsw_sp_port,
 					      SWITCHDEV_OBJ_PORT_VLAN(obj),
 					      cb);
 		break;
-#endif
 	case SWITCHDEV_OBJ_ID_PORT_FDB:
 		err = dp_swdev_port_fdb_dump(dev,
 					     SWITCHDEV_OBJ_PORT_FDB(obj),
@@ -991,6 +988,7 @@ int dp_ndo_bridge_dellink(struct net_device *dev, struct nlmsghdr *nlh,
 		return -EINVAL;
 	return switchdev_port_bridge_dellink(dev, nlh, flags);
 }
+#endif
 
 int dp_notif_br_alloc(struct net_device *br_dev)
 {
@@ -1004,7 +1002,7 @@ int dp_notif_br_alloc(struct net_device *br_dev)
 			br_info = kmalloc(sizeof(*br_info), GFP_KERNEL);
 			if (!br_info) {
 				PR_ERR
-				("Switch cfg Failed as kmalloc %d bytes fail\n",
+				("Switch cfg Fail as kmalloc %zd bytes fail\n",
 				 sizeof(*br_info));
 				return -1;
 			}
@@ -1026,6 +1024,7 @@ int dp_notif_br_alloc(struct net_device *br_dev)
 	return br_id;
 }
 
+#if IS_ENABLED(CONFIG_INTEL_DATAPATH_SWDEV_TEST)
 /*Register netdev_ops for switchdev*/
 static int dp_set_netdev_ops(struct dp_dev *dp_dev,
 			     struct net_device *dp_port)
@@ -1090,6 +1089,7 @@ static int dp_set_netdev_ops(struct dp_dev *dp_dev,
 		return DP_FAILURE;
 	return 0;
 }
+#endif
 
 /* This function registers the created port in datapath to switchdev */
 int dp_port_register_switchdev(struct dp_dev  *dp_dev,
@@ -1143,6 +1143,7 @@ int dp_port_register_switchdev(struct dp_dev  *dp_dev,
 			 &dp_swdev_port_obj_del);
 	if (err)
 		return DP_FAILURE;
+#if IS_ENABLED(CONFIG_INTEL_DATAPATH_SWDEV_TEST)
 	err = dp_ops_set((void **)&dp_port->switchdev_ops,
 			 offsetof(const struct switchdev_ops,
 				  switchdev_port_obj_dump),
@@ -1153,6 +1154,7 @@ int dp_port_register_switchdev(struct dp_dev  *dp_dev,
 	if (err)
 		return DP_FAILURE;
 	dp_set_netdev_ops(dp_dev, dp_port);
+#endif
 	}
 	return 0;
 }
diff --git a/drivers/net/datapath/dpm/gswip32/datapath_switchdev.c b/drivers/net/datapath/dpm/gswip32/datapath_switchdev.c
index 5886337b714c..0d87f846a167 100644
--- a/drivers/net/datapath/dpm/gswip32/datapath_switchdev.c
+++ b/drivers/net/datapath/dpm/gswip32/datapath_switchdev.c
@@ -33,8 +33,8 @@ int dp_swdev_alloc_bridge_id_32(int inst)
 	return br.nBridgeId;
 }
 
-int dp_swdev_bridge_port_cfg_set(struct br_info *br_item,
-				 int inst, int bport)
+int dp_swdev_bridge_port_cfg_set_32(struct br_info *br_item,
+				    int inst, int bport)
 {
 	GSW_return_t ret;
 	struct bridge_member_port *bport_list = NULL;
@@ -278,18 +278,18 @@ int dp_gswip_ext_vlan_32(int inst, int vap, int ep)
 	port = get_dp_port_info(inst, ep);
 	vlan = kzalloc(sizeof(*vlan), GFP_KERNEL);
 	if (!vlan) {
-		PR_ERR("failed to alloc ext_vlan of %d bytes\n", sizeof(*vlan));
+		PR_ERR("failed to alloc ext_vlan of %zd bytes\n", sizeof(*vlan));
 		return 0;
 	}
 	vlan->vlan2_list = kzalloc(sizeof(*vlan->vlan2_list), GFP_KERNEL);
 	if (!vlan->vlan2_list) {
-		PR_ERR("failed to alloc ext_vlan of %d bytes\n",
+		PR_ERR("failed to alloc ext_vlan of %zd bytes\n",
 		       sizeof(*vlan->vlan2_list));
 		goto EXIT;
 	}
 	vlan->vlan1_list = kzalloc(sizeof(*vlan->vlan1_list), GFP_KERNEL);
 	if (!vlan->vlan1_list) {
-		PR_ERR("failed to alloc ext_vlan of %d bytes\n",
+		PR_ERR("failed to alloc ext_vlan of %zd bytes\n",
 		       sizeof(*vlan->vlan1_list));
 		goto EXIT;
 	}
