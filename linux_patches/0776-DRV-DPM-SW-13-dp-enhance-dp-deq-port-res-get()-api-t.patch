From 4d4c091575e950b3469a7c6857fb13511818a32f Mon Sep 17 00:00:00 2001
From: Rekha Eswaran <rekha.eswaran@intel.com>
Date: Mon, 9 Sep 2019 14:48:02 +0800
Subject: [PATCH] DRV_DPM_SW-13 dp enhance dp_deq_port_res_get() api to return
 cpu type, cbm deq port for MPEFW type (DRVLIB_SW-2910)

---
 drivers/net/datapath/dpm/datapath.h                  | 1 +
 drivers/net/datapath/dpm/gswip31/datapath_gswip.c    | 9 ++++++++-
 drivers/net/datapath/dpm/gswip31/datapath_misc.c     | 5 +++++
 drivers/net/datapath/dpm/gswip31/datapath_ppv4_api.c | 4 ++--
 drivers/net/datapath/dpm/gswip32/datapath_ppv4_api.c | 1 -
 drivers/net/ethernet/lantiq/cqm/prx300/cqm.c         | 1 +
 include/net/datapath_api.h                           | 6 ++++++
 include/net/datapath_api_qos.h                       | 2 ++
 include/net/lantiq_cbm_api.h                         | 1 +
 9 files changed, 26 insertions(+), 4 deletions(-)

diff --git a/drivers/net/datapath/dpm/datapath.h b/drivers/net/datapath/dpm/datapath.h
index e1863d464026..759a0966f05d 100644
--- a/drivers/net/datapath/dpm/datapath.h
+++ b/drivers/net/datapath/dpm/datapath.h
@@ -623,6 +623,7 @@ struct cqm_port_info {
 	int dp_port; /* dp_port info */
 	u32 dma_chan;
 	u32 dma_ch_offset; /*! Offset of dp_dma_chan_tbl */
+	u32 cpu_type;
 };
 
 struct parser_info {
diff --git a/drivers/net/datapath/dpm/gswip31/datapath_gswip.c b/drivers/net/datapath/dpm/gswip31/datapath_gswip.c
index 9cb71e1f0091..cefbdf318f36 100644
--- a/drivers/net/datapath/dpm/gswip31/datapath_gswip.c
+++ b/drivers/net/datapath/dpm/gswip31/datapath_gswip.c
@@ -398,6 +398,7 @@ int dp_set_gsw_parser_31(u8 flag, u8 cpu, u8 mpe1,
 			 u8 mpe2, u8 mpe3)
 {
 	GSW_CPU_PortCfg_t param = {0};
+	GSW_register_t reg;
 	struct core_ops *gsw_handle = dp_port_prop[0].ops[0];/*gswip o */
 
 	if (gsw_handle->gsw_common_ops.CPU_PortCfgGet(gsw_handle, &param)) {
@@ -426,6 +427,12 @@ int dp_set_gsw_parser_31(u8 flag, u8 cpu, u8 mpe1,
 		PR_ERR("Failed GSW_CPU_PORT_CFG_SET\n");
 		return -1;
 	}
+	memset(&reg, 0, sizeof(reg));
+	reg.nRegAddr = 0x001; /**/
+	gsw_handle->gsw_common_ops.RegisterGet(gsw_handle, &reg);
+	reg.nData |= 1 << 0; /**/
+	gsw_handle->gsw_common_ops.RegisterSet(gsw_handle, &reg);
+
 	dp_parser_info_refresh(param.eNoMPEParserCfg,
 			       param.eMPE1ParserCfg,
 			       param.eMPE2ParserCfg,
@@ -1496,4 +1503,4 @@ int dp_set_bp_attr_31(struct dp_bp_attr *conf, int bport, uint32_t flag)
 	}
 
 	return DP_SUCCESS;
-}
\ No newline at end of file
+}
diff --git a/drivers/net/datapath/dpm/gswip31/datapath_misc.c b/drivers/net/datapath/dpm/gswip31/datapath_misc.c
index 0703b7d0ef54..2f3727c0ffa1 100644
--- a/drivers/net/datapath/dpm/gswip31/datapath_misc.c
+++ b/drivers/net/datapath/dpm/gswip31/datapath_misc.c
@@ -1100,6 +1100,11 @@ int dp_platform_queue_set(int inst, u32 flag)
 		dp_deq_port_tbl[inst][q_port.cqe_deq].tx_ring_size =
 			cpu_data.dq_tx_push_info[i].tx_ring_size;
 		dp_deq_port_tbl[inst][q_port.cqe_deq].dp_port = 0;/* CPU */
+		/* Store CPU type when MPEFW is selected */
+		if (cpu_data.dq_tx_push_info[i].type == DP_F_DEQ_MPE) {
+			dp_deq_port_tbl[inst][q_port.cqe_deq].cpu_type =
+					DP_DATA_PORT_MPE;
+		}
 		DP_DEBUG(DP_DBG_FLAG_QOS, "Store CPU ring info\n");
 		DP_DEBUG(DP_DBG_FLAG_QOS, "  ring_address[%d]=0x%p\n",
 			 q_port.cqe_deq,
diff --git a/drivers/net/datapath/dpm/gswip31/datapath_ppv4_api.c b/drivers/net/datapath/dpm/gswip31/datapath_ppv4_api.c
index 9f791343933f..7a2f8be5a1cc 100644
--- a/drivers/net/datapath/dpm/gswip31/datapath_ppv4_api.c
+++ b/drivers/net/datapath/dpm/gswip31/datapath_ppv4_api.c
@@ -2728,6 +2728,8 @@ int dp_deq_port_res_get_31(struct dp_dequeue_res *res, int flag)
 				    DP_NODE_PORT) {/* port */
 					res->q_res[idx].qos_deq_port = p_id;
 					res->q_res[idx].cqm_deq_port = k;
+					res->q_res[idx].cqm_deq_port_type =
+					dp_deq_port_tbl[res->inst][k].cpu_type;
 					break;
 				} else if (priv->qos_sch_stat[p_id].type !=
 					   DP_NODE_SCH) {
@@ -2751,7 +2753,6 @@ int dp_deq_port_res_get_31(struct dp_dequeue_res *res, int flag)
 			} while (1);
 			idx++;
 		}
-		return DP_SUCCESS;
 	}
 	return DP_SUCCESS;
 }
@@ -4132,7 +4133,6 @@ int dp_queue_map_set_31(struct dp_queue_map_set *cfg, int flag)
 		       priv->qos_queue_stat[cfg->q_id].flag);
 		return DP_FAILURE;
 	}
-
 	qmap_cfg.mpe1 = cfg->map.mpe1;
 	qmap_cfg.mpe2 = cfg->map.mpe2;
 	qmap_cfg.ep = cfg->map.dp_port;
diff --git a/drivers/net/datapath/dpm/gswip32/datapath_ppv4_api.c b/drivers/net/datapath/dpm/gswip32/datapath_ppv4_api.c
index ecb6935d2572..6092e4f20236 100644
--- a/drivers/net/datapath/dpm/gswip32/datapath_ppv4_api.c
+++ b/drivers/net/datapath/dpm/gswip32/datapath_ppv4_api.c
@@ -2686,7 +2686,6 @@ int dp_deq_port_res_get_32(struct dp_dequeue_res *res, int flag)
 			} while (1);
 			idx++;
 		}
-		return DP_SUCCESS;
 	}
 	return DP_SUCCESS;
 }
diff --git a/drivers/net/ethernet/lantiq/cqm/prx300/cqm.c b/drivers/net/ethernet/lantiq/cqm/prx300/cqm.c
index c38a12520a58..1ab03e9cf012 100644
--- a/drivers/net/ethernet/lantiq/cqm/prx300/cqm.c
+++ b/drivers/net/ethernet/lantiq/cqm/prx300/cqm.c
@@ -1866,6 +1866,7 @@ s32 cqm_cpu_port_get(struct cbm_cpu_port_data *data, u32 flags)
 		}
 		ptr = &data->dq_tx_push_info[i];
 		ptr->deq_port = i;
+		ptr->type = type;
 		ptr->tx_ring_size = 1;
 		ptr->tx_b_credit = 0;
 		ptr->txpush_addr_qos = (u32)(cqm_ctrl->txpush +
diff --git a/include/net/datapath_api.h b/include/net/datapath_api.h
index f83446c1d7c4..fd2774db2851 100644
--- a/include/net/datapath_api.h
+++ b/include/net/datapath_api.h
@@ -1825,6 +1825,12 @@ static inline struct umt_ops *dp_get_umt_ops(int inst)
 	return (struct umt_ops *)dp_get_ops(inst, DP_OPS_UMT);
 }
 
+enum DP_DATA_PORT_TYPE {
+        DP_DATA_PORT_LINUX = 0, /*!< data port owned by Linux */
+        DP_DATA_PORT_DPDK, /*!< data port owned by DKDP */
+        DP_DATA_PORT_MPE, /*!< data port owned by MPE */
+};
+
 /*!
  *@brief parse dma ID
  *@param[in] inst     : DMA ID
diff --git a/include/net/datapath_api_qos.h b/include/net/datapath_api_qos.h
index a44c7e1de261..af833c9b1467 100644
--- a/include/net/datapath_api_qos.h
+++ b/include/net/datapath_api_qos.h
@@ -877,6 +877,8 @@ struct dp_queue_res {
 				   */
 	int cqm_deq_port; /*!< cqm dequeue port: absolute port id */
 	int qos_deq_port; /*!< qos dequeue port: Normally user no need to know*/
+	u32 cqm_deq_port_type; /*!< output: Valid only in case of CPU DQ port
+				* with MPE*/
 };
 
 #define DEQ_PORT_OFFSET_ALL -1 /*!< @brief Port offset all */
diff --git a/include/net/lantiq_cbm_api.h b/include/net/lantiq_cbm_api.h
index db3de7e750a4..febea3018af8 100644
--- a/include/net/lantiq_cbm_api.h
+++ b/include/net/lantiq_cbm_api.h
@@ -582,6 +582,7 @@ struct cbm_tx_push {
 	u32 txpush_addr;  /*port ring address. should follow HW defintion*/
 	u32 tx_ring_size; /*ring size */
 	u32 tx_ring_offset;  /*next tx_ring_addr = current tx_ring_addr + tx_ring_offset */
+	u32 type; /* output */
 };
 
 struct cbm_cpu_port_data {
