From 0ccdba7af22146a4c3b86a8583d6de96700273c0 Mon Sep 17 00:00:00 2001
From: pungavan <ramesh.pungavanam@intel.com>
Date: Mon, 15 Apr 2019 09:36:08 +0530
Subject: [PATCH] UGW_SW-32383 disable mknod in icc drv

---
 drivers/char/ltq_icc/drv_icc.c | 64 ------------------------------------------
 1 file changed, 64 deletions(-)

diff --git a/drivers/char/ltq_icc/drv_icc.c b/drivers/char/ltq_icc/drv_icc.c
index fc80456a74dc..3a192ec51a1e 100644
--- a/drivers/char/ltq_icc/drv_icc.c
+++ b/drivers/char/ltq_icc/drv_icc.c
@@ -64,16 +64,6 @@
 CREATE_TRACE_GROUP(ICC);
 /********************************Local functions*************************/
 
-#ifdef CONFIG_SOC_GRX500_MKNOD
-
-#define SS_DEVICE_NAME "ltq_icc"
-static short ss_major_id ;
-static struct cdev *icc_cdev;
-static dev_t dev_no;
-static struct class *icc_class;
-
-#endif
-
 #ifndef  __LIBRARY__
 unsigned int icc_poll(struct file *file_p, poll_table *wait);
 int icc_read_d(struct file *file_p, char *buf, size_t count, loff_t *ppos);
@@ -773,47 +763,6 @@ void pfn_icc_callback(void){
 int __init icc_init_module (void){
 	int result = 0;
 
-#ifdef CONFIG_SOC_GRX500_MKNOD
-	ss_major_id = 0;
-	result = alloc_chrdev_region(&dev_no, 0, 1, SS_DEVICE_NAME);
-	if (result < 0) {
-		printk(KERN_INFO "Major number allocation is failed\n");
-		goto finish;
-	}
-
-	ss_major_id = MAJOR(dev_no);
-
-	icc_class = class_create(THIS_MODULE, SS_DEVICE_NAME);
-	if (icc_class == NULL) {
-		printk(KERN_INFO "Unable to create class");
-		result = -EINVAL;
-		goto finish;
-	}
-
-	icc_cdev = cdev_alloc();
-	if (icc_cdev == NULL) {
-		class_destroy(icc_class);
-		result = -ENOMEM;
-		goto finish;
-	}
-
-	icc_cdev->ops = &icc_fops;
-	icc_cdev->owner = THIS_MODULE;
-
-	if (cdev_add(icc_cdev, dev_no, 1) < 0) {
-		class_destroy(icc_class);
-		result = -EINVAL;
-		goto finish;
-	}
-
-	if (device_create(icc_class, NULL, dev_no, NULL, SS_DEVICE_NAME) == NULL) {
-		printk(KERN_INFO "Unable to create device node");
-		result = -EINVAL;
-		cdev_del(icc_cdev);
-		class_destroy(icc_class);
-		goto finish;
-	}
-#endif
 	result = mps_open((struct inode *)1, NULL);
 	if (result < 0) {
 		TRACE(ICC, DBG_LEVEL_HIGH, ("open MPS2 Failed\n"));
@@ -834,12 +783,6 @@ int __init icc_init_module (void){
 	sema_init(&icc_callback_sem,1);
 #endif
 finish:
-#ifdef CONFIG_SOC_GRX500_MKNOD
-	if (result != 0) {
-		if (ss_major_id != 0)
-			unregister_chrdev_region(dev_no, 1);
-	}
-#endif
 	return result;
 }
 
@@ -848,13 +791,6 @@ void __exit icc_cleanup_module (void){
 	mps_close((struct inode *)1,NULL);
 	mps_unregister_callback();
 	icc_os_unregister ();
-#ifdef CONFIG_SOC_GRX500_MKNOD
-	device_destroy(icc_class, dev_no);
-	cdev_del(icc_cdev);
-	class_destroy(icc_class);
-	if (ss_major_id != 0)
-		unregister_chrdev_region(dev_no, 1);
-#endif
 	return;
 }
 #ifdef KTHREAD
