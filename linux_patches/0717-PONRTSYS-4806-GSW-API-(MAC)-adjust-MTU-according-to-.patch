From e6c8356a7dafa35ebe42d5435dedcda7229d5f3e Mon Sep 17 00:00:00 2001
From: Xu Liang <liang.xu@intel.com>
Date: Wed, 31 Jul 2019 12:20:46 +0800
Subject: [PATCH] PONRTSYS-4806: GSW API (MAC) - adjust MTU according to MAC
 adaption configuration

---
 .../net/ethernet/lantiq/switch-api/mac/gswss_api.h |  4 ++++
 .../net/ethernet/lantiq/switch-api/mac/mac_cfg.c   | 25 +++++++++++++++++++---
 2 files changed, 26 insertions(+), 3 deletions(-)

diff --git a/drivers/net/ethernet/lantiq/switch-api/mac/gswss_api.h b/drivers/net/ethernet/lantiq/switch-api/mac/gswss_api.h
index a54628708378..451d90d898ec 100644
--- a/drivers/net/ethernet/lantiq/switch-api/mac/gswss_api.h
+++ b/drivers/net/ethernet/lantiq/switch-api/mac/gswss_api.h
@@ -162,6 +162,10 @@
 #define FREEZE				0
 #define UNFREEZE			1
 
+#define ETHERNET_FCS_SIZE		4
+#define SPTAG_SIZE			8
+#define TIMESTAMP80_SIZE		10
+
 enum {
 	XGMAC = 0,
 	LMAC,
diff --git a/drivers/net/ethernet/lantiq/switch-api/mac/mac_cfg.c b/drivers/net/ethernet/lantiq/switch-api/mac/mac_cfg.c
index 71db45d30700..4e35f2ebd7dd 100644
--- a/drivers/net/ethernet/lantiq/switch-api/mac/mac_cfg.c
+++ b/drivers/net/ethernet/lantiq/switch-api/mac/mac_cfg.c
@@ -575,6 +575,13 @@ int mac_set_mtu(void *pdev, u32 mtu)
 	spin_lock_bh(&pdata->mac_lock);
 #endif
 
+	if (gswss_get_mac_rxfcs_op(pdev) == (RX_FCS_REMOVE % 4))
+		mtu -= ETHERNET_FCS_SIZE;
+	if (gswss_get_mac_rxtime_op(pdev) == (RX_TIME_INSERT % 4))
+		mtu += TIMESTAMP80_SIZE;
+	if (gswss_get_mac_rxsptag_op(pdev) == (RX_SPTAG_INSERT % 4))
+		mtu += SPTAG_SIZE;
+
 	if (mtu > FALCON_MAX_MTU) {
 		ret = -1;
 		goto err;
@@ -606,6 +613,13 @@ int mac_get_mtu(void *pdev)
 
 	mtu = gswss_get_mtu(pdev);
 
+	if (gswss_get_mac_rxfcs_op(pdev) == (RX_FCS_REMOVE % 4))
+		mtu += ETHERNET_FCS_SIZE;
+	if (gswss_get_mac_rxtime_op(pdev) == (RX_TIME_INSERT % 4))
+		mtu -= TIMESTAMP80_SIZE;
+	if (gswss_get_mac_rxsptag_op(pdev) == (RX_SPTAG_INSERT % 4))
+		mtu -= SPTAG_SIZE;
+
 #ifdef __KERNEL__
 	spin_unlock_bh(&pdata->mac_lock);
 #endif
@@ -674,13 +688,11 @@ int mac_oper_cfg(void *pdev, MAC_OPER_CFG oper)
 int mac_get_oper_cfg(void *pdev, MAC_OPER_CFG oper)
 {
 	struct mac_prv_data *pdata = GET_MAC_PDATA(pdev);
-	u32 mode;
 	int ret = 0;
 
 #ifdef __KERNEL__
 	spin_lock_bh(&pdata->mac_lock);
 #endif
-	mode = oper % 4;
 
 	switch (oper) {
 	case TX_FCS_NO_INSERT:
@@ -912,6 +924,10 @@ int mac_enable_ts(void *pdev)
 
 	//mac_printf("MAC %d: Enable Timestamp operations\n", pdata->mac_idx);
 
+	/* Adjust MTU */
+	if (gswss_get_mac_rxtime_op(pdev) != MODE1)
+		gswss_set_mtu(pdev, gswss_get_mtu(pdev) + TIMESTAMP80_SIZE);
+
 	/* Tell adaption layer to attach Timestamp */
 	gswss_set_mac_rxtime_op(pdev, MODE1);
 
@@ -955,9 +971,12 @@ int mac_disable_ts(void *pdev)
 #endif
 	mac_printf("MAC %d: Disable Timestamp operations\n", pdata->mac_idx);
 
+	/* Adjust MTU */
+	if (gswss_get_mac_rxtime_op(pdev) == MODE1)
+		gswss_set_mtu(pdev, gswss_get_mtu(pdev) - TIMESTAMP80_SIZE);
+
 	gswss_set_mac_rxtime_op(pdev, MODE0);
 	gswss_set_mac_txsptag_op(pdev, MODE0);
-	gswss_set_mac_rxsptag_op(pdev, MODE0);
 
 	xgmac_disable_tstamp(pdev);
 
