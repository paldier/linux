From d1a2af580f3fd13b1ae86c20eb1e2b0e3dd9198a Mon Sep 17 00:00:00 2001
From: zhu yixin <yixin.zhu@intel.com>
Date: Fri, 6 Jul 2018 09:54:04 +0800
Subject: [PATCH] Enhance reset driver to support multiple reset request
 register

Driver expecting reset request register offset and reset bit offset
passed by device tree as parameter for each reset consumer.
Driver expecting reset request register offset + 0x4 is corresponding
reset status register.
HW that not following the convention handled in soc_data.
---
 .../bindings/reset/intel,syscon-reset.txt          |  38 +++++++
 drivers/reset/Kconfig                              |   0
 drivers/reset/Makefile                             |   0
 drivers/reset/reset-intel-syscon.c                 | 117 ++++++++++++---------
 4 files changed, 105 insertions(+), 50 deletions(-)

diff --git a/Documentation/devicetree/bindings/reset/intel,syscon-reset.txt b/Documentation/devicetree/bindings/reset/intel,syscon-reset.txt
new file mode 100644
index 000000000000..d53d1c2da687
--- /dev/null
+++ b/Documentation/devicetree/bindings/reset/intel,syscon-reset.txt
@@ -0,0 +1,38 @@
+Intel System Reset Controller
+======================================
+
+Please also refer to reset.txt in this directory for common reset
+controller binding usage.
+
+The reset controller registers are RCU module on Intel GRX500/Falconmx SoC.
+
+Required properties:
+- compatible: should be
+		 "lantiq,rcu-grx500"
+- reg:	should be register base and size for this reset controller
+- #reset-cells : must be 2. type should be a <u32>
+
+	 Cell #1 : offset of the reset assert control
+	           register from the syscon register base
+		   offset + 4: status control register
+	 Cell #2 : bit offset in the reset request control register
+-intel,global-reset: offset and bit offset of global reset
+	in the reset controller that can be used in system reboot.
+
+Example:
+	rcu0: reset-controller@00000000 {
+		compatible = "lantiq,rcu-grx500", "syscon";
+		reg = <0x000000 0x80000>;
+		#reset-cells = <2>;
+		intel,global-reset = <0x10 30>;
+	};
+
+
+Specifying reset lines connected to IP modules
+==============================================
+example:
+	pcie_phy0: pciephy@.... {
+		....
+		resets = <&rcu0 0x10 12>; /* address offset: 0x10, bit offset: 12 */
+		....
+	};
diff --git a/drivers/reset/Kconfig b/drivers/reset/Kconfig
old mode 100755
new mode 100644
diff --git a/drivers/reset/Makefile b/drivers/reset/Makefile
old mode 100755
new mode 100644
diff --git a/drivers/reset/reset-intel-syscon.c b/drivers/reset/reset-intel-syscon.c
old mode 100755
new mode 100644
index fc3ca9bf9461..cdccff23a62d
--- a/drivers/reset/reset-intel-syscon.c
+++ b/drivers/reset/reset-intel-syscon.c
@@ -14,48 +14,40 @@
 #include <linux/regmap.h>
 #include <linux/reset-controller.h>
 
-/* Reset request register */
-#define RCU_RST_REQ		0x0010
-/* Reset status register */
-#define RCU_RST_STAT		0x0014
+#define RCU_RST_STAT		0x0024
+#define RCU_RST_REQ		0x0048
 
-#define RCU_RST_STAT2		0x0024
-#define RCU_RST_REQ2		0x0048
+/* reset platform data */
+#define to_reset_data(x)	container_of(x, struct intel_reset_data, rcdev)
 
-/* Global software reboot */
-#define RCU_RD_SRST		30
-
-/* Status */
-static const u32 rcu_stat[] = {
-	RCU_RST_STAT,
-	RCU_RST_STAT2,
-};
-
-/* Request */
-static const u32 rcu_req[] = {
-	RCU_RST_REQ,
-	RCU_RST_REQ2,
+struct intel_reset_soc_data {
+	int legacy;
 };
 
-#define RCU_STAT_REG(x)		(rcu_stat[(x)])
-#define RCU_REQ_REG(x)		(rcu_req[(x)])
-
-#define to_reset_data(x) container_of(x, struct intel_reset_data, rcdev)
-
 struct intel_reset_data {
 	struct reset_controller_dev rcdev;
 	struct notifier_block restart_nb;
 	struct regmap *regmap;
+	const struct intel_reset_soc_data *soc_data;
+	u32 reboot_id;
 };
 
+static u32 intel_stat_reg_off(struct intel_reset_data *data, u32 req_off)
+{
+	if (data->soc_data->legacy && req_off == RCU_RST_REQ)
+		return RCU_RST_STAT;
+	else
+		return req_off + 0x4;
+}
+
 static int intel_assert_device(struct reset_controller_dev *rcdev,
 			       unsigned long id)
 {
 	struct intel_reset_data *data = to_reset_data(rcdev);
-	u32 regidx = id >> 5;
-	u32 regbit = id & 0x1f;
+	u32 regoff = id >> 8;
+	u32 regbit = id & 0x3f;
 
-	return regmap_update_bits(data->regmap, RCU_REQ_REG(regidx),
+	return regmap_update_bits(data->regmap, regoff,
 				  BIT(regbit), BIT(regbit));
 }
 
@@ -63,10 +55,10 @@ static int intel_deassert_device(struct reset_controller_dev *rcdev,
 				 unsigned long id)
 {
 	struct intel_reset_data *data = to_reset_data(rcdev);
-	u32 regidx = id >> 5;
-	u32 regbit = id & 0x1f;
+	u32 regoff = id >> 8;
+	u32 regbit = id & 0x3f;
 
-	return regmap_update_bits(data->regmap, RCU_REQ_REG(regidx),
+	return regmap_update_bits(data->regmap, regoff,
 				  BIT(regbit), 0 << regbit);
 }
 
@@ -74,16 +66,18 @@ static int intel_reset_device(struct reset_controller_dev *rcdev,
 			      unsigned long id)
 {
 	struct intel_reset_data *data = to_reset_data(rcdev);
-	u32 regidx = id >> 5;
-	u32 regbit = id & 0x1F;
+	u32 regoff = id >> 8;
+	u32 regbit = id & 0x3f;
+	u32 regstoff;
 	unsigned int val = 0;
 	int ret;
 
-	ret = regmap_write(data->regmap, RCU_REQ_REG(regidx), BIT(regbit));
+	ret = regmap_write(data->regmap, regoff, BIT(regbit));
 	if (ret)
 		return ret;
 
-	return regmap_read_poll_timeout(data->regmap, RCU_STAT_REG(regidx), val,
+	regstoff = intel_stat_reg_off(data, regoff);
+	return regmap_read_poll_timeout(data->regmap, regstoff, val,
 					val & BIT(regbit), 20, 20000);
 }
 
@@ -91,12 +85,14 @@ static int intel_reset_status(struct reset_controller_dev *rcdev,
 			      unsigned long id)
 {
 	struct intel_reset_data *data = to_reset_data(rcdev);
-	u32 regidx = id >> 5;
-	u32 regbit = id & 0x1F;
+	u32 regoff = id >> 8;
+	u32 regbit = id & 0x3f;
+	u32 regstoff;
 	unsigned int val;
 	int ret;
 
-	ret = regmap_read(data->regmap, RCU_STAT_REG(regidx), &val);
+	regstoff = intel_stat_reg_off(data, regoff);
+	ret = regmap_read(data->regmap, regstoff, &val);
 	if (ret)
 		return ret;
 
@@ -110,13 +106,24 @@ static const struct reset_control_ops intel_reset_ops = {
 	.status = intel_reset_status,
 };
 
+static int intel_reset_xlate(struct reset_controller_dev *rcdev,
+			     const struct of_phandle_args *spec)
+{
+	unsigned int offset, bit;
+
+	offset = spec->args[0];
+	bit = spec->args[1];
+
+	return (offset << 8) | bit;
+}
+
 static int intel_reset_restart_handler(struct notifier_block *nb,
 				       unsigned long action, void *data)
 {
 	struct intel_reset_data *reset_data =
 		container_of(nb, struct intel_reset_data, restart_nb);
 
-	intel_assert_device(&reset_data->rcdev, RCU_RD_SRST);
+	intel_assert_device(&reset_data->rcdev, reset_data->reboot_id);
 
 	return NOTIFY_DONE;
 }
@@ -128,6 +135,7 @@ static int intel_reset_probe(struct platform_device *pdev)
 	struct device *dev = &pdev->dev;
 	struct intel_reset_data *data;
 	struct regmap *regmap;
+	u32 rb_id[2];
 
 	data = devm_kzalloc(dev, sizeof(*data), GFP_KERNEL);
 	if (!data)
@@ -135,15 +143,28 @@ static int intel_reset_probe(struct platform_device *pdev)
 
 	regmap = syscon_node_to_regmap(np);
 	if (IS_ERR(regmap)) {
-		dev_err(dev, "failed to get reset controller regmap\n");
+		dev_err(dev, "Failed to get reset controller regmap\n");
 		return PTR_ERR(regmap);
 	}
 
+	data->soc_data = of_device_get_match_data(dev);
+	if (!data->soc_data) {
+		dev_err(dev, "Failed to find soc data!\n");
+		return -ENODEV;
+	}
+
+	if (device_property_read_u32_array(dev,
+					   "intel,global-reset", rb_id, 2)) {
+		dev_err(dev, "Failed to get global reset offset!\n");
+		return -EINVAL;
+	}
+	data->reboot_id = (rb_id[0] << 8) | rb_id[1];
 	data->regmap = regmap;
 	data->rcdev.of_node = np;
 	data->rcdev.owner = dev->driver->owner;
 	data->rcdev.ops = &intel_reset_ops;
-	data->rcdev.nr_resets = 64;
+	data->rcdev.of_reset_n_cells = 2;
+	data->rcdev.of_xlate = intel_reset_xlate;
 
 	err = devm_reset_controller_register(&pdev->dev, &data->rcdev);
 	if (err)
@@ -154,24 +175,20 @@ static int intel_reset_probe(struct platform_device *pdev)
 
 	err = register_restart_handler(&data->restart_nb);
 	if (err)
-		dev_warn(&pdev->dev, "Failed to register restart handler\n");
+		dev_warn(dev, "Failed to register restart handler\n");
 
 	return 0;
 }
 
+struct intel_reset_soc_data grx500_data = {
+	.legacy = 1,
+};
+
 /* If some SoCs have different property, customized in data field */
 static const struct of_device_id intel_reset_match[] = {
 	{
-		.compatible = "lantiq,rcu-xway",
-	},
-	{
 		.compatible = "lantiq,rcu-grx500",
-	},
-	{
-		.compatible = "intel,rcu-lgh",
-	},
-	{
-		.compatible = "intel,rcu-lgm",
+		.data = &grx500_data,
 	},
 	{ /* sentinel */ },
 };
