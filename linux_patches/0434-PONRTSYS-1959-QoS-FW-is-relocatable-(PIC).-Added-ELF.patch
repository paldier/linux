From 103d985bd7f72b1e1afa23fcc125e7569566a470 Mon Sep 17 00:00:00 2001
From: Oren Bakshe <oren.bakshe@intel.com>
Date: Sun, 13 Jan 2019 16:04:43 +0200
Subject: [PATCH] PONRTSYS-1959: QoS FW is relocatable (PIC). Added ELF parser
 to support the new fw format

---
 drivers/net/ethernet/lantiq/ppv4/qos/Makefile      |   4 +-
 drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_elf.c  | 221 ++++++++++++++++
 drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_elf.h  |  62 +++++
 drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_fw.c   | 280 ++++++++++++++-------
 drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_fw.h   |   5 +-
 .../net/ethernet/lantiq/ppv4/qos/pp_qos_kernel.h   |   8 +-
 .../net/ethernet/lantiq/ppv4/qos/pp_qos_linux.c    |  65 ++---
 .../net/ethernet/lantiq/ppv4/qos/pp_qos_utils.h    |   2 +-
 8 files changed, 498 insertions(+), 149 deletions(-)

diff --git a/drivers/net/ethernet/lantiq/ppv4/qos/Makefile b/drivers/net/ethernet/lantiq/ppv4/qos/Makefile
index c461b727d261..d572a6764d96 100644
--- a/drivers/net/ethernet/lantiq/ppv4/qos/Makefile
+++ b/drivers/net/ethernet/lantiq/ppv4/qos/Makefile
@@ -3,5 +3,5 @@
 #
 
 obj-$(CONFIG_LTQ_PPV4_QOS) += pp_qos_drv.o
-pp_qos_drv-y 	:= pp_qos_linux.o pp_qos_main.o pp_qos_utils.o pp_qos_fw.o pp_qos_debugfs.o
-ccflags-y	+= -Iinclude/net -DQOS_CPU_UC_SAME_ENDIANESS
+pp_qos_drv-y 	:= pp_qos_linux.o pp_qos_main.o pp_qos_utils.o pp_qos_fw.o pp_qos_elf.o pp_qos_debugfs.o
+ccflags-y	+= -Iinclude/net -Iinclude/uapi/linux -DQOS_CPU_UC_SAME_ENDIANESS
diff --git a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_elf.c b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_elf.c
new file mode 100644
index 000000000000..356d4a86d12e
--- /dev/null
+++ b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_elf.c
@@ -0,0 +1,221 @@
+/*
+ * GPL LICENSE SUMMARY
+ *
+ *  Copyright(c) 2017 Intel Corporation.
+ */
+
+#include <linux/printk.h>
+#include <linux/string.h>
+#include <linux/firmware.h>
+#include <asm/byteorder.h>
+#include "pp_qos_elf.h"
+#include "elf.h"
+
+#define ELF_FLD_RD(type, field, end, cls)				\
+	({								\
+		u64 ret = 0;						\
+		int __size;						\
+		if (cls == ELFCLASS32)					\
+			__size = FIELD_SIZEOF(struct elf32_##type, field); \
+		else							\
+			__size = FIELD_SIZEOF(struct elf64_##type, field); \
+		switch (__size) {					\
+		case 2:							\
+			ret = (end == ELFDATA2LSB) ?			\
+			le16_to_cpu(*(u16 *)data) :			\
+			be16_to_cpu(*(u16 *)data);			\
+			break;						\
+		case 4:							\
+			ret = (end == ELFDATA2LSB) ?			\
+			le32_to_cpu(*(u32 *)data) :			\
+			be32_to_cpu(*(u32 *)data);			\
+			break;						\
+		case 8:							\
+			ret = (end == ELFDATA2LSB) ?			\
+			le64_to_cpu(*(u64 *)data) :			\
+			be64_to_cpu(*(u64 *)data);			\
+			break;						\
+		default:						\
+			pr_err("ELF Field read: Illegal size\n");	\
+			break;						\
+		}							\
+		data += __size;						\
+		ret;							\
+	})
+
+static void parse_elf_sec(const unsigned char *data, struct elf_sec *sh,
+			  u8 endian, u8 cls)
+{
+	sh->name_idx = ELF_FLD_RD(shdr, sh_name, endian, cls);
+	sh->type = ELF_FLD_RD(shdr, sh_type, endian, cls);
+	sh->flags = ELF_FLD_RD(shdr, sh_flags, endian, cls);
+	sh->addr = ELF_FLD_RD(shdr, sh_addr, endian, cls);
+	sh->offset = ELF_FLD_RD(shdr, sh_offset, endian, cls);
+	sh->size = ELF_FLD_RD(shdr, sh_size, endian, cls);
+}
+
+static s32 parse_elf_identification(const unsigned char *data,
+				    u32 len, u8 *endian, u8 *cls)
+{
+	if (unlikely(len < 64)) {
+		pr_err("ELF file too small %d\n", len);
+		return -EIO;
+	}
+
+	if (unlikely(strncmp((const char *)data, ELFMAG, 4) != 0)) {
+		pr_err("Could not find ELF magic\n");
+		return -EIO;
+	}
+
+	*cls = data[EI_CLASS];
+	pr_debug("CLASS --> %d\n", data[EI_CLASS]);
+	if (unlikely(data[EI_CLASS] != ELFCLASS32 &&
+		     data[EI_CLASS] != ELFCLASS64)) {
+		pr_err("Unsupported ELF class %d\n", data[EI_CLASS]);
+		return -EIO;
+	}
+
+	*endian = data[EI_DATA];
+	pr_debug("ENDIANNESS --> %d\n", data[EI_DATA]);
+	if (unlikely(data[EI_DATA] == ELFDATANONE)) {
+		pr_err("Invalid endianness %d\n", data[EI_DATA]);
+		return -EIO;
+	}
+
+	return 0;
+}
+
+s32 elf_parse(const unsigned char *elf, u32 len, struct elf_sec secs[],
+	      u16 max_secs, u16 *num_secs)
+{
+	s32 ret;
+	const unsigned char *data = elf;
+	u32 file_offset;
+	struct elf_sec strtab;
+	unsigned long soff;
+	const unsigned char *s;
+	int i;
+	u8 endian;
+	u8 cls;
+	struct elf64_hdr hdr; /* Using hdr 64b version. Suitable also for 32b */
+
+	pr_debug("Start parsing elf size %d\n", len);
+
+	if (!num_secs) {
+		pr_err("num_secs is NULL\n");
+		return -EIO;
+	}
+
+	*num_secs = 0;
+
+	ret = parse_elf_identification(data, len, &endian, &cls);
+	if (unlikely(ret))
+		return ret;
+
+	/* Skip e_ident*/
+	data += EI_NIDENT;
+
+	hdr.e_type = ELF_FLD_RD(hdr, e_type, endian, cls);
+	hdr.e_machine = ELF_FLD_RD(hdr, e_machine, endian, cls);
+	hdr.e_version = ELF_FLD_RD(hdr, e_version, endian, cls);
+	hdr.e_entry = ELF_FLD_RD(hdr, e_entry, endian, cls);
+	hdr.e_phoff = ELF_FLD_RD(hdr, e_phoff, endian, cls);
+	hdr.e_shoff = ELF_FLD_RD(hdr, e_shoff, endian, cls);
+	hdr.e_flags = ELF_FLD_RD(hdr, e_flags, endian, cls);
+	hdr.e_ehsize = ELF_FLD_RD(hdr, e_ehsize, endian, cls);
+
+	pr_debug("Sec header table file offset: %#llx bytes\n", hdr.e_shoff);
+	pr_debug("ELF header size: %#x bytes\n", hdr.e_ehsize);
+
+	if (unlikely(hdr.e_ehsize > len)) {
+		pr_err("Section header size is bigger than ELF file size\n");
+		return -EIO;
+	}
+
+	hdr.e_phentsize = ELF_FLD_RD(hdr, e_phentsize, endian, cls);
+	hdr.e_phnum = ELF_FLD_RD(hdr, e_phnum, endian, cls);
+	hdr.e_shentsize = ELF_FLD_RD(hdr, e_shentsize, endian, cls);
+
+	if (unlikely(hdr.e_shentsize % 4)) {
+		pr_err("ELF wrong sh entry size %d\n", hdr.e_shentsize);
+		return -EIO;
+	}
+
+	hdr.e_shnum = ELF_FLD_RD(hdr, e_shnum, endian, cls);
+
+	if (unlikely(hdr.e_shnum > max_secs)) {
+		pr_err("ELF No room for %u sections\n", hdr.e_shnum);
+		return -EIO;
+	}
+
+	hdr.e_shstrndx = ELF_FLD_RD(hdr, e_shstrndx, endian, cls);
+
+	if ((hdr.e_shnum * hdr.e_shentsize) > len) {
+		pr_err("ELF Exceed file size\n");
+		return -EIO;
+	}
+
+	soff = hdr.e_shoff + (hdr.e_shentsize * hdr.e_shstrndx);
+
+	if ((soff + hdr.e_shentsize) > len || soff % 4 || soff == 0) {
+		pr_err("Wrong ELF format\n");
+		return -EIO;
+	}
+
+	parse_elf_sec(elf + soff, &strtab, endian, cls);
+	file_offset = strtab.offset;
+
+	if ((u32)(file_offset + hdr.e_shentsize) >= len || file_offset == 0) {
+		pr_err("Wrong ELF offset to name\n");
+		return -EIO;
+	}
+
+	s = (const unsigned char *)(elf + hdr.e_shoff);
+
+	for (i = 0; i < hdr.e_shnum; ++i) {
+		parse_elf_sec(s, &secs[*num_secs], endian, cls);
+		s += hdr.e_shentsize;
+
+		if (secs[*num_secs].name_idx == 0)
+			continue;
+
+		secs[*num_secs].name = (char *)(elf + file_offset +
+				secs[*num_secs].name_idx);
+
+		if (file_offset + secs[*num_secs].name_idx > len) {
+			pr_err("Name offset exceeds file size\n");
+			return 1;
+		}
+
+		secs[*num_secs].need_copy =
+				((secs[*num_secs].flags & SHF_ALLOC) &&
+				(secs[*num_secs].type & SHT_PROGBITS))
+				? 1 : 0;
+
+		secs[*num_secs].data = (void *)(elf + secs[*num_secs].offset);
+
+		(*num_secs)++;
+	}
+
+	return 0;
+}
+
+s32 elf_request_fw_and_parse(struct device *dev, const unsigned char *name,
+			     const struct firmware **fw, struct elf_sec secs[],
+			     u16 max_secs, u16 *num_secs)
+{
+	s32 ret;
+
+	ret = request_firmware(fw, name, dev);
+	if (ret < 0) {
+		pr_err("Failed loading firmware ret is %d\n", ret);
+		return ret;
+	}
+
+	return elf_parse((*fw)->data, (*fw)->size, secs, max_secs, num_secs);
+}
+
+void elf_release_fw(const struct firmware *fw)
+{
+	release_firmware(fw);
+}
diff --git a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_elf.h b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_elf.h
new file mode 100644
index 000000000000..dc9148a1bfd9
--- /dev/null
+++ b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_elf.h
@@ -0,0 +1,62 @@
+/*
+ * GPL LICENSE SUMMARY
+ *
+ *  Copyright(c) 2017 Intel Corporation.
+ */
+
+#ifndef PP_QOS_ELF_H
+#define PP_QOS_ELF_H
+
+#include <linux/types.h>
+#include <linux/firmware.h>
+
+struct elf_sec {
+	char	*name;		/*! Section name */
+	void	*data;		/*! Source (Copy from this address) */
+	u64	name_idx;	/*! Source (Copy from this address) */
+	u64	addr;		/*! Dest (Copy to this address) */
+	u64	size;		/*! Section size */
+	u8	need_copy;	/*! Whether this section needs to be copied */
+	u64	type;		/*! Section type (Internal) */
+	u64	flags;		/*! Section flags (Internal) */
+	u64	offset;		/*! Section offset from beginning (Internal) */
+};
+
+/**
+ * @brief Parse ELF buffer
+ * This function parses ELF buffer
+ * @param elf:		ELF buffer to parse
+ * @param len:		Size of the ELF buffer
+ * @param secs:		ELF Sections array to be filled by this function
+ * @param max_secs:	Number of sections available in secs
+ * @param num_secs:	Number of total sections in ELF
+ * @return 0 on success.
+ */
+s32 elf_parse(const unsigned char *elf, u32 len, struct elf_sec secs[],
+	      u16 max_secs, u16 *num_secs);
+
+/**
+ * @brief Open ELF file, and parse
+ * This function requests ELF FW file, and parses it
+ * @param dev:		Device
+ * @param name:		ELF file name
+ * @param fw:		fw struct (Used in elf_release_fw).
+ *                      User should define const struct firmware *fw,
+ *                      and pass its pointer to this function
+ * @param secs:		ELF Sections array to be filled by this function
+ * @param max_secs:	Number of sections available in secs
+ * @param num_secs:	Number of total sections in ELF
+ * @return 0 on success.
+ */
+s32 elf_request_fw_and_parse(struct device *dev, const unsigned char *name,
+			     const struct firmware **fw, struct elf_sec secs[],
+			     u16 max_secs, u16 *num_secs);
+
+/**
+ * @brief Release ELF fw
+ * This function releases the FW
+ * @param fw:	Pointer to fw struct (Used in elf_request_fw_and_parse)
+ */
+void elf_release_fw(const struct firmware *fw);
+
+#endif
diff --git a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_fw.c b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_fw.c
index 119aa418e0d8..a0ae04150caa 100644
--- a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_fw.c
+++ b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_fw.c
@@ -24,11 +24,15 @@
  *  2200 Mission College Blvd.
  *  Santa Clara, CA  97052
  */
+
 #include "pp_qos_common.h"
 #include "pp_qos_utils.h"
 #include "pp_qos_uc_wrapper.h"
 #include "pp_qos_fw.h"
-
+#include "pp_qos_elf.h"
+#include <linux/dma-mapping.h>
+#include <linux/platform_device.h>
+#include <linux/slab.h>
 
 #ifdef __LP64__
 #define GET_ADDRESS_HIGH(addr) ((((uintptr_t)(addr)) >> 32) & 0xFFFFFFFF)
@@ -89,115 +93,208 @@ struct ppv4_qos_fw_hdr {
 	uint32_t build;
 };
 
-struct ppv4_qos_fw_sec {
-	uint32_t dst;
-	uint32_t size;
-};
-
-#define FW_OK_SIGN (0xCAFECAFEU)
-#define FW_DDR_LOWEST (0x400000U)
+#define FW_OK_SIGN			(0xCAFECAFEU)
+#define QOS_ELF_MAX_SECS		(64)
+#define FW_DCCM_START			(0xF0000000)
+#define FW_CMD_BUFFER_DCCM_START	(FW_DCCM_START + 0x6000)
 
 static void copy_section(void *_dst, const void *_src, unsigned int size)
 {
-	unsigned int i;
-	const uint32_t *src;
-	uint32_t *dst;
+	unsigned int i = size;
+	const u8 *src;
+	u8 *dst;
+
+	src = (uint8_t *)_src;
+	dst = (uint8_t *)_dst;
+
+	for (i = size; i > 3; i -= 4) {
+		*(uint32_t *)dst = cpu_to_le32(*(uint32_t *)src);
+		src += 4;
+		dst += 4;
+	}
+
+	/* Section size must be aligned to 2 */
+	if (i == 1 || i == 3)
+		QOS_LOG_ERR("Size %u not aligned to 2 (i=%u)\n", size, i);
+
+	/* Copy last u16 if exists */
+	if (i == 2)
+		*(uint32_t *)dst = (uint32_t)cpu_to_le16(*(uint16_t *)src);
+}
+
+static void calc_elf_sections_sizes(struct elf_sec secs[], u16 num_secs,
+				    u32 *total_sz, u32 *data_sz, u32 *stack_sz)
+{
+	u16 ind;
+
+	for (ind = 0; ind < num_secs; ind++) {
+		if (secs[ind].need_copy)
+			*total_sz += secs[ind].size;
+
+		if (!strncmp(secs[ind].name, ".data", 5))
+			*data_sz = secs[ind].size;
+		else if (!strncmp(secs[ind].name, ".stack", 6))
+			*stack_sz = secs[ind].size;
+	}
+}
+
+static void copy_sections(struct elf_sec secs[], u16 num_secs, void *virt_txt,
+			  void *virt_data, dma_addr_t phys_txt,
+			  dma_addr_t phys_data,
+			  dma_addr_t phys_stack, void *ivt)
+{
+	u16 ind;
+	void *src;
+	void *dst;
+	u32 ivt_tbl[3] = {0};
+
+	for (ind = 0; ind < num_secs; ind++) {
+		if (!secs[ind].need_copy)
+			continue;
+
+		src = secs[ind].data;
 
-	src = (uint32_t *)_src;
-	dst = (uint32_t *)_dst;
+		if (!strncmp(secs[ind].name, ".data", 5)) {
+			dst = virt_data;
+		} else {
+			dst = (void *)((unsigned long)(virt_txt) +
+					(unsigned long)(secs[ind].addr));
+		}
+
+		if (!strncmp(secs[ind].name, ".vectors", 8)) {
+			ivt_tbl[0] = le32_to_cpu(*(u32 *)src) + phys_txt;
+			ivt_tbl[1] = phys_stack;
+			ivt_tbl[2] = phys_data;
+			/* Copy to QoS */
+			memcpy(ivt, ivt_tbl, 12);
+		}
+
+		QOS_LOG_DEBUG("Section %s: COPY %llu bytes from %#lx[%#x %#x..] to %#lx\n",
+			      secs[ind].name, secs[ind].size,
+			      (unsigned long)src, *(u32 *)src,
+			      *(u32 *)(src + 4), (unsigned long)dst);
 
-	for (i = size; i > 0; i -= 4)
-		*dst++ = cpu_to_le32(*src++);
+		copy_section(dst, src, secs[ind].size);
+	}
 }
 
 /*
  * This function loads the firmware.
- * The firmware is built from a header which holds the major, minor
- * and build numbers.
- * Following the header are sections. Each section is composed of
- * header which holds the memory destination where this section's
- * data should be copied and the size of this section in bytes.
- * After the header comes section's data which is a stream of uint32
- * words.
- * The memory destination on section header designates offset relative
- * to either ddr (a.k.a external) or qos (a.k.a) spaces. Offsets higher
- * than FW_DDR_LOWEST refer to ddr space.
+ * The firmware binary is saved in ELF format
+ * Text section is copyied to the DDR (Dynamically allocated).
+ * The data and stack can be located in the DDR or in the DCCM. This is
+ * configurable from the DTS.
  *
  * Firmware is little endian.
  *
- * When firmware runs it writes 0xCAFECAFE to offset FW_OK_OFFSET of ddr
- * space.
+ * When firmware runs it writes FW_OK_SIGN to FW_CMD_BUFFER_DCCM_START.
  */
-int do_load_firmware(
-		struct pp_qos_dev *qdev,
-		const struct ppv4_qos_fw *fw,
-		void *ddr_base,
-		void *qos_base,
-		void *data)
-{
-	size_t size;
-	struct ppv4_qos_fw_hdr *hdr;
-	const uint8_t *cur;
-	const uint8_t *last;
-	void *dst;
-	struct ppv4_qos_fw_sec *sec;
-	uint32_t val;
-
-	size = fw->size;
-	hdr = (struct ppv4_qos_fw_hdr *)(fw->data);
-	hdr->major = le32_to_cpu(hdr->major);
-	hdr->minor = le32_to_cpu(hdr->minor);
-	hdr->build = le32_to_cpu(hdr->build);
-	QOS_LOG_DEBUG("Firmware size(%zu) major(%u) minor(%u) build(%u)\n",
-			size,
-			hdr->major,
-			hdr->minor,
-			hdr->build);
-
-	if (hdr->major != UC_VERSION_MAJOR || hdr->minor != UC_VERSION_MINOR) {
-		QOS_LOG_ERR("mismatch major %u or minor %u\n",
-				UC_VERSION_MAJOR, UC_VERSION_MINOR);
-		return -EINVAL;
+int do_load_firmware(struct pp_qos_dev *qdev, const struct ppv4_qos_fw *fw,
+		     struct pp_qos_drv_data *pdata)
+{
+	u32 val;
+	u8 poll = 0;
+	struct device *dev = &((struct platform_device *)qdev->pdev)->dev;
+	u32 alloc_size;
+	u32 align = 4;
+	struct elf_sec *secs;
+	u16 num_secs;
+	u32 total_sz = 0;
+	u32 data_sz = 0;
+	u32 stack_sz = 0;
+	void *virt_txt;
+	void *virt_data;
+	void *virt_stack;
+	dma_addr_t phys_txt;
+	dma_addr_t phys_data;
+	dma_addr_t phys_stack; /* End of stack! */
+
+	secs = kmalloc_array(QOS_ELF_MAX_SECS, sizeof(struct elf_sec),
+			     GFP_KERNEL);
+	if (!secs)
+		return -ENOMEM;
+
+	if (elf_parse(fw->data, fw->size, secs, QOS_ELF_MAX_SECS, &num_secs)) {
+		QOS_LOG_ERR("ELF parse error!\n");
+		kfree(secs);
+		return -ENOEXEC;
 	}
 
-	qdev->fwver.major = hdr->major;
-	qdev->fwver.minor = hdr->minor;
-	qdev->fwver.build = hdr->build;
+	calc_elf_sections_sizes(secs, num_secs, &total_sz, &data_sz, &stack_sz);
 
-	last = fw->data + size - 1;
-	cur = (uint8_t *)(hdr + 1);
-	while (cur < last) {
-		sec = (struct ppv4_qos_fw_sec *)cur;
-		sec->dst = le32_to_cpu(sec->dst);
-		sec->size = le32_to_cpu(sec->size);
-		cur = (uint8_t *)(sec + 1);
+	/* No room for data and stack as defined from DTS */
+	if ((data_sz + stack_sz) > pdata->fw_sec_data_stack.max_size) {
+		QOS_LOG_ERR("Need to alloc %u bytes while dts limits to %u\n",
+			    (data_sz + stack_sz),
+			    pdata->fw_sec_data_stack.max_size);
+		kfree(secs);
+		return -ENOMEM;
+	}
 
-		if (sec->dst >= FW_DDR_LOWEST)
-			dst = ddr_base + sec->dst;
-		else
-			dst = qos_base + sec->dst;
+	QOS_LOG_INFO("=====> fw_data_stack_off %d, %d, %d\n",
+		     pdata->fw_sec_data_stack.is_in_dccm,
+		     pdata->fw_sec_data_stack.dccm_offset,
+		     pdata->fw_sec_data_stack.max_size);
+
+	/* Is data stack sections in DCCM */
+	if (pdata->fw_sec_data_stack.is_in_dccm) {
+		alloc_size = ALIGN(total_sz, align);
+	} else { /* DDR */
+		alloc_size = ALIGN(total_sz, align) +
+			     ALIGN(data_sz, align) +
+			     ALIGN(stack_sz, align);
+	}
 
-		QOS_LOG_DEBUG("Copying %u bytes (0x%08X) <-- (0x%08X)\n",
-				sec->size,
-				(unsigned int)(uintptr_t)(dst),
-				(unsigned int)(uintptr_t)(cur));
+	virt_txt = dmam_alloc_coherent(dev, alloc_size, &phys_txt, GFP_KERNEL);
+	if (!virt_txt) {
+		QOS_LOG_ERR("Could not allocate %u bytes for fw\n", alloc_size);
+		kfree(secs);
+		return -ENOMEM;
+	}
 
-		copy_section(dst, cur, sec->size);
-		cur += sec->size;
+	/* Is data stack sections in DCCM */
+	if (pdata->fw_sec_data_stack.is_in_dccm) {
+		phys_data = FW_DCCM_START +
+			    pdata->fw_sec_data_stack.dccm_offset;
+		virt_data = pdata->dccm + pdata->fw_sec_data_stack.dccm_offset;
+	} else { /* DDR */
+		phys_data = phys_txt + ALIGN(total_sz, align);
+		virt_data = virt_txt + ALIGN(total_sz, align);
 	}
 
-	wake_uc(data);
+	phys_stack = phys_data + ALIGN(data_sz, align) +
+		     ALIGN(stack_sz, align) - 4;
+	virt_stack = virt_data + ALIGN(data_sz, align) +
+		     ALIGN(stack_sz, align) - 4;
+
+	QOS_LOG_DEBUG("Text %#x [%#lx] (%d), Data %#x (%d), Stack %#x (%d)\n",
+		      phys_txt,
+		      (unsigned long)(virt_txt),
+		      total_sz,
+		      phys_data, data_sz,
+		      phys_stack, stack_sz);
+
+	copy_sections(secs, num_secs, virt_txt, virt_data, phys_txt,
+		      phys_data, phys_stack, pdata->ivt);
+
+	kfree(secs);
+
+	wake_uc((void *)pdata);
 	QOS_LOG_DEBUG("waked fw\n");
-	qos_sleep(10);
-	val = *((uint32_t *)(qdev->fwcom.cmdbuf));
-	if (val != FW_OK_SIGN) {
-		QOS_LOG_ERR("FW OK value is 0x%08X, instead got 0x%08X\n",
-				FW_OK_SIGN, val);
-		return  -ENODEV;
-	}
 
-	QOS_LOG_INFO("QoS FW ver %d.%d.%d was loaded\n", qdev->fwver.major,
-		     qdev->fwver.minor, qdev->fwver.build);
+	do {
+		poll++;
+		qos_sleep(10);
+		val = *((uint32_t *)(qdev->fwcom.cmdbuf));
+		if (poll == 3) {
+			QOS_LOG_ERR("FW OK value is 0x%08X, got 0x%08X\n",
+				    FW_OK_SIGN, val);
+			return -ENODEV;
+		}
+	} while (val != FW_OK_SIGN);
+
+	QOS_LOG_INFO("PPV4 QoS FW is running (%d polls) :)\n", poll);
+
 	*((uint32_t *)(qdev->fwcom.cmdbuf)) = 0;
 	return 0;
 }
@@ -600,7 +697,7 @@ void create_remove_node_cmd(
 	}
 		break;
 	case TYPE_UNKNOWN:
-		QOS_ASSERT(0, "Unexpected unknow type\n");
+		QOS_ASSERT(0, "Unexpected unknown type\n");
 		ctype = CMD_TYPE_REMOVE_NODE;
 		break;
 	default:
@@ -1838,7 +1935,7 @@ static void set_child(
 		child->bw_share = conf->bandwidth_share;
 	}
 
-	// Should be changed. Currently both are using bw_share variable
+	/* Should be changed. Currently both are using bw_share variable */
 	if (QOS_BITS_IS_SET(modified, QOS_MODIFIED_SHARED_GROUP_ID)) {
 		QOS_BITS_SET(valid, TSCD_NODE_CONF_SHARED_BWL_GROUP);
 		child->bw_share = conf->bandwidth_share;
@@ -2474,7 +2571,7 @@ static void post_process(struct pp_qos_dev *qdev, union driver_cmd *dcmd)
  * Go over all commands on pending queue until cmd id
  * is changed or queue is empty
  * (refer to driver design document to learn more about cmd id).
- * On current implmentation it is expected that pending queue contain
+ * On current implementation it is expected that pending queue contain
  * firmware commands for a single client command, therfore queue should
  * become empty before cmd id is changed.
  *
@@ -2555,9 +2652,6 @@ void check_completion(struct pp_qos_dev *qdev)
 	qdev->drvcmds.cmd_fw_id = 0;
 }
 
-#define FW_CMD_BUFFER_DCCM_START 0xF0006000
-
-
 /*
  * Take all commands from driver cmd queue, translate them to
  * firmware format and put them on firmware queue.
diff --git a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_fw.h b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_fw.h
index 7a6f96d9131b..6ff5fa0cec15 100644
--- a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_fw.h
+++ b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_fw.h
@@ -30,6 +30,7 @@
 #include "pp_qos_utils.h"
 #include "pp_qos_common.h"
 #include "pp_qos_uc_wrapper.h"
+#include "pp_qos_kernel.h"
 
 struct ppv4_qos_fw {
 	size_t size;
@@ -98,9 +99,7 @@ void create_flush_queue_cmd(struct pp_qos_dev *qdev, unsigned int rlm);
 int do_load_firmware(
 		struct pp_qos_dev *qdev,
 		const struct ppv4_qos_fw *fw,
-		void *ddr_base,
-		void *ivt_base,
-		void *data);
+		struct pp_qos_drv_data *pdata);
 
 void add_suspend_port(struct pp_qos_dev *qdev, unsigned int port);
 void signal_uc(struct pp_qos_dev *qdev);
diff --git a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_kernel.h b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_kernel.h
index fe1d38b81036..662eb787a315 100644
--- a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_kernel.h
+++ b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_kernel.h
@@ -42,6 +42,12 @@ struct pp_qos_dbg_data {
 	void		*fw_logger_addr;
 };
 
+struct fw_sec_info {
+	u32	is_in_dccm;
+	u32	dccm_offset;
+	u32	max_size;
+};
+
 struct pp_qos_drv_data {
 	int	id;
 	struct pp_qos_dev *qdev;
@@ -51,7 +57,7 @@ struct pp_qos_drv_data {
 	void *ivt;
 	void __iomem *wakeuc;
 	resource_size_t ddr_phy_start;
-
+	struct fw_sec_info fw_sec_data_stack;
 };
 
 #ifndef __BIG_ENDIAN
diff --git a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_linux.c b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_linux.c
index 0fcdb2dfbd8d..7d8ea8f812cd 100644
--- a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_linux.c
+++ b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_linux.c
@@ -90,11 +90,7 @@ int load_firmware(struct pp_qos_dev *qdev, const char *name)
 
 	fw.size = firmware->size;
 	fw.data = firmware->data;
-	err = do_load_firmware(qdev,
-			&fw,
-			pdata->ddr - pdata->ddr_phy_start,
-			pdata->ivt - PPV4_QOS_IVT_START,
-			pdata);
+	err = do_load_firmware(qdev, &fw, pdata);
 
 	release_firmware(firmware);
 	return err;
@@ -158,11 +154,7 @@ static void *map_mem_resource(
 
 	dev = &pdev->dev;
 
-	r = get_resource(
-			pdev,
-			name,
-			type,
-			size);
+	r = get_resource(pdev, name, type, size);
 	if (!r)
 		return NULL;
 
@@ -190,12 +182,7 @@ static void __iomem *map_reg_resource(
 	struct resource *r;
 	void __iomem *addr;
 
-	r = get_resource(
-			pdev,
-			name,
-			type,
-			size);
-
+	r = get_resource(pdev, name, type, size);
 	if (!r)
 		return NULL;
 
@@ -320,11 +307,12 @@ static int pp_qos_config_from_of_node(
 {
 	int err;
 	uint32_t val;
-	struct resource r;
 	struct device_node *node;
 	struct device *dev;
 	void *addr;
 	dma_addr_t dma;
+	struct property *prop;
+	const __be32 *p;
 
 	dev = &pdev->dev;
 	node = pdev->dev.of_node;
@@ -345,10 +333,7 @@ static int pp_qos_config_from_of_node(
 	}
 	pdata->max_port = val;
 
-	err = of_property_read_u32(
-			node,
-			"intel,wred-prioritize",
-			&val);
+	err = of_property_read_u32(node, "intel,wred-prioritize", &val);
 	if (err) {
 		dev_err(dev,
 			"Could not get wred pop prioritize from DT, error is %d\n",
@@ -357,9 +342,7 @@ static int pp_qos_config_from_of_node(
 	}
 	pdata->wred_prioritize_pop = val;
 
-	err = of_property_read_u32(node,
-				   "intel,clock-frequency-mhz",
-				   &val);
+	err = of_property_read_u32(node, "intel,clock-frequency-mhz", &val);
 	if (err) {
 		dev_err(dev,
 			"Could not get qos clock from DT, error is %d\n",
@@ -368,31 +351,16 @@ static int pp_qos_config_from_of_node(
 	}
 	pdata->qos_clock = val;
 
-	/* Get reserved memory region */
-	node = of_parse_phandle(node, "memory-region", 0);
-	if (!node) {
-		dev_err(dev, "No memory-region specified\n");
+	if (of_property_count_u32_elems(node, "intel,fw-sec-data-stack") != 3) {
+		dev_err(dev, "intel,fw-sec-data-stack num fields must be 3\n");
 		return -ENODEV;
 	}
-	err = of_address_to_resource(node, 0, &r);
-	if (err) {
-		dev_err(dev, "No memory address assigned to the region\n");
-		return err;
-	}
 
-	print_resource(dev, "ddr", &r);
-	pdrvdata->ddr_phy_start = r.start;
-	pdrvdata->ddr = devm_memremap(
-			dev,
-			r.start,
-			resource_size(&r),
-			MEMREMAP_WT);
-	if (IS_ERR_OR_NULL(pdrvdata->ddr)) {
-		err = (int) PTR_ERR(pdrvdata->ddr);
-		dev_err(dev, "devm_memremap failed mapping ddr with %d\n", err);
-		return err;
-	}
-	dev_dbg(dev, "DDR memory mapped to %p\n", pdrvdata->ddr);
+	prop = of_find_property(node, "intel,fw-sec-data-stack", NULL);
+	p = of_prop_next_u32(prop, NULL,
+			     &pdrvdata->fw_sec_data_stack.is_in_dccm);
+	p = of_prop_next_u32(prop, p, &pdrvdata->fw_sec_data_stack.dccm_offset);
+	p = of_prop_next_u32(prop, p, &pdrvdata->fw_sec_data_stack.max_size);
 
 	addr = dmam_alloc_coherent(
 			dev,
@@ -400,9 +368,8 @@ static int pp_qos_config_from_of_node(
 			&dma,
 			GFP_KERNEL);
 	if (addr == NULL) {
-		dev_err(dev,
-				"Could not allocate %u bytes for logger buffer\n",
-				PPV4_QOS_LOGGER_BUF_SIZE);
+		dev_err(dev, "Could not allocate %u bytes for logger buffer\n",
+			PPV4_QOS_LOGGER_BUF_SIZE);
 		return -ENOMEM;
 	}
 	pdata->fw_logger_start = (unsigned int)(dma);
diff --git a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_utils.h b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_utils.h
index 7a3a7ba3194c..a1992977be0a 100644
--- a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_utils.h
+++ b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_utils.h
@@ -53,7 +53,7 @@
 
 #define PPV4_QOS_IVT_START (0x48000U)
 
-#define FIRMWARE_FILE "ppv4-qos-fw.bin"
+#define FIRMWARE_FILE "ppv4-qos-fw.elf"
 /******************************************************************************/
 /*                              DEFINES                                       */
 /******************************************************************************/
