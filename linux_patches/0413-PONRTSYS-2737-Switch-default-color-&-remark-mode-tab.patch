From 67ea4857041990861d79199f787df8d910b252ec Mon Sep 17 00:00:00 2001
From: Rekha Eswaran <rekha.eswaran@intel.com>
Date: Mon, 17 Dec 2018 11:47:57 +0800
Subject: [PATCH] PONRTSYS-2737: Switch default color & remark mode table
 config

---
 .../lantiq/datapath/gswip31/datapath_misc.c        | 310 +++++++++++++++++++++
 1 file changed, 310 insertions(+)

diff --git a/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_misc.c b/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_misc.c
index 03a076c82d7d..656077d51744 100644
--- a/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_misc.c
+++ b/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_misc.c
@@ -544,6 +544,310 @@ int alloc_q_to_port(struct ppv4_q_sch_port *info, u32 flag)
 #define PRIO6	6
 #define PRIO7	7
 
+static int dp_gswip_remark_8P0D_set(int mode, int inst)
+{
+	struct core_ops *gsw_handle;
+	GSW_QoS_colorRemarkingEntry_t color_remark = {0};
+
+	gsw_handle = dp_port_prop[inst].ops[0];
+	color_remark.eMode = mode;
+	color_remark.nVal[0] = 0;
+	color_remark.nVal[1] = 2;
+	color_remark.nVal[2] = 4;
+	color_remark.nVal[3] = 6;
+	color_remark.nVal[4] = 8;
+	color_remark.nVal[5] = 10;
+	color_remark.nVal[6] = 12;
+	color_remark.nVal[7] = 14;
+	color_remark.nVal[8] = 1;
+	color_remark.nVal[9] = 3;
+	color_remark.nVal[10] = 5;
+	color_remark.nVal[11] = 7;
+	color_remark.nVal[12] = 9;
+	color_remark.nVal[13] = 11;
+	color_remark.nVal[14] = 13;
+	color_remark.nVal[15] = 15;
+	if (gsw_core_api((dp_gsw_cb)gsw_handle->gsw_qos_ops
+				.QOS_ColorReMarkingTableSet,
+				gsw_handle, &color_remark)) {
+		PR_ERR("GSW_QOS_COLOR_REMARKING_CFG_SET failed\n");
+		return -1;
+	}
+	return 0;
+}
+
+static int dp_gswip_remark_7P1D_set(int mode, int inst)
+{
+	struct core_ops *gsw_handle;
+	GSW_QoS_colorRemarkingEntry_t color_remark = {0};
+
+	gsw_handle = dp_port_prop[inst].ops[0];
+	color_remark.eMode = mode;
+	color_remark.nVal[0] = 0;
+	color_remark.nVal[1] = 2;
+	color_remark.nVal[2] = 4;
+	color_remark.nVal[3] = 6;
+	color_remark.nVal[4] = 10;
+	color_remark.nVal[5] = 10;
+	color_remark.nVal[6] = 12;
+	color_remark.nVal[7] = 14;
+	color_remark.nVal[8] = 1;
+	color_remark.nVal[9] = 3;
+	color_remark.nVal[10] = 5;
+	color_remark.nVal[11] = 7;
+	color_remark.nVal[12] = 9;
+	color_remark.nVal[13] = 9;
+	color_remark.nVal[14] = 13;
+	color_remark.nVal[15] = 15;
+	if (gsw_core_api((dp_gsw_cb)gsw_handle->gsw_qos_ops
+				.QOS_ColorReMarkingTableSet,
+				gsw_handle, &color_remark)) {
+		PR_ERR("GSW_QOS_COLOR_REMARKING_CFG_SET failed\n");
+		return -1;
+	}
+	return 0;
+}
+
+static int dp_gswip_remark_6P2D_set(int mode, int inst)
+{
+	struct core_ops *gsw_handle;
+	GSW_QoS_colorRemarkingEntry_t color_remark = {0};
+
+	gsw_handle = dp_port_prop[inst].ops[0];
+	color_remark.eMode = mode;
+	color_remark.nVal[0] = 0;
+	color_remark.nVal[1] = 2;
+	color_remark.nVal[2] = 6;
+	color_remark.nVal[3] = 6;
+	color_remark.nVal[4] = 10;
+	color_remark.nVal[5] = 10;
+	color_remark.nVal[6] = 12;
+	color_remark.nVal[7] = 14;
+	color_remark.nVal[8] = 1;
+	color_remark.nVal[9] = 3;
+	color_remark.nVal[10] =	5;
+	color_remark.nVal[11] = 5;
+	color_remark.nVal[12] = 9;
+	color_remark.nVal[13] = 9;
+	color_remark.nVal[14] = 13;
+	color_remark.nVal[15] = 15;
+	if (gsw_core_api((dp_gsw_cb)gsw_handle->gsw_qos_ops
+				.QOS_ColorReMarkingTableSet,
+				gsw_handle, &color_remark)) {
+		PR_ERR("GSW_QOS_COLOR_REMARKING_CFG_SET failed\n");
+		return -1;
+	}
+	return 0;
+}
+
+static int dp_gswip_remark_5P3D_set(int mode, int inst)
+{
+	struct core_ops *gsw_handle;
+	GSW_QoS_colorRemarkingEntry_t color_remark = {0};
+
+	gsw_handle = dp_port_prop[inst].ops[0];
+	color_remark.eMode = mode;
+	color_remark.nVal[0] = 2;
+	color_remark.nVal[1] = 2;
+	color_remark.nVal[2] = 6;
+	color_remark.nVal[3] = 6;
+	color_remark.nVal[4] = 10;
+	color_remark.nVal[5] = 10;
+	color_remark.nVal[6] = 12;
+	color_remark.nVal[7] = 14;
+	color_remark.nVal[8] = 1;
+	color_remark.nVal[9] = 1;
+	color_remark.nVal[10] = 5;
+	color_remark.nVal[11] = 5;
+	color_remark.nVal[12] = 9;
+	color_remark.nVal[13] = 9;
+	color_remark.nVal[14] = 13;
+	color_remark.nVal[15] = 15;
+	if (gsw_core_api((dp_gsw_cb)gsw_handle->gsw_qos_ops
+				.QOS_ColorReMarkingTableSet,
+				gsw_handle, &color_remark)) {
+		PR_ERR("GSW_QOS_COLOR_REMARKING_CFG_SET failed\n");
+		return -1;
+	}
+	return 0;
+}
+
+static int dp_gswip_remark_dscp_set(int mode, int inst)
+{
+	struct core_ops *gsw_handle;
+	GSW_QoS_colorRemarkingEntry_t color_remark = {0};
+
+	gsw_handle = dp_port_prop[inst].ops[0];
+	color_remark.eMode = mode;
+	color_remark.nVal[0] = 10;
+	color_remark.nVal[1] = 18;
+	color_remark.nVal[2] = 26;
+	color_remark.nVal[3] = 34;
+	color_remark.nVal[4] = 34;
+	color_remark.nVal[5] = 34;
+	color_remark.nVal[6] = 34;
+	color_remark.nVal[7] = 34;
+	color_remark.nVal[8] = 12;
+	color_remark.nVal[9] = 20;
+	color_remark.nVal[10] = 28;
+	color_remark.nVal[11] = 36;
+	color_remark.nVal[12] = 36;
+	color_remark.nVal[13] = 36;
+	color_remark.nVal[14] = 36;
+	color_remark.nVal[15] = 36;
+	if (gsw_core_api((dp_gsw_cb)gsw_handle->gsw_qos_ops
+				.QOS_ColorReMarkingTableSet,
+				gsw_handle, &color_remark)) {
+		PR_ERR("GSW_QOS_COLOR_REMARKING_CFG_SET failed\n");
+		return -1;
+	}
+	return 0;
+}
+
+static int dp_gswip_color_dscp_set(int mode, int inst)
+{
+	struct core_ops *gsw_handle;
+	GSW_QoS_colorMarkingEntry_t color_mark = {0};
+
+	gsw_handle = dp_port_prop[inst].ops[0];
+	color_mark.eMode = mode;
+	color_mark.nPriority[0] = PRIO0;
+	color_mark.nPriority[1] = PRIO0;
+	color_mark.nPriority[2] = PRIO0;
+	color_mark.nPriority[3] = PRIO0;
+	color_mark.nPriority[4] = PRIO0;
+	color_mark.nPriority[5] = PRIO0;
+	color_mark.nPriority[6] = PRIO0;
+	color_mark.nPriority[7] = PRIO0;
+	color_mark.nPriority[8] = PRIO0;
+	color_mark.nPriority[9] = PRIO0;
+	color_mark.nPriority[10] = PRIO0;
+	color_mark.nPriority[11] = PRIO0;
+	color_mark.nPriority[12] = PRIO0;
+	color_mark.nPriority[13] = PRIO0;
+	color_mark.nPriority[14] = PRIO0;
+	color_mark.nPriority[15] = PRIO0;
+	color_mark.nPriority[16] = PRIO0;
+	color_mark.nPriority[17] = PRIO0;
+	color_mark.nPriority[18] = PRIO1;
+	color_mark.nPriority[19] = PRIO0;
+	color_mark.nPriority[20] = PRIO1;
+	color_mark.nPriority[21] = PRIO0;
+	color_mark.nPriority[22] = PRIO1;
+	color_mark.nPriority[23] = PRIO0;
+	color_mark.nPriority[24] = PRIO0;
+	color_mark.nPriority[25] = PRIO0;
+	color_mark.nPriority[26] = PRIO2;
+	color_mark.nPriority[27] = PRIO0;
+	color_mark.nPriority[28] = PRIO2;
+	color_mark.nPriority[29] = PRIO0;
+	color_mark.nPriority[30] = PRIO2;
+	color_mark.nPriority[31] = PRIO0;
+	color_mark.nPriority[32] = PRIO0;
+	color_mark.nPriority[33] = PRIO0;
+	color_mark.nPriority[34] = PRIO3;
+	color_mark.nPriority[35] = PRIO0;
+	color_mark.nPriority[36] = PRIO3;
+	color_mark.nPriority[37] = PRIO0;
+	color_mark.nPriority[38] = PRIO3;
+	color_mark.nPriority[39] = PRIO0;
+	color_mark.nPriority[40] = PRIO0;
+	color_mark.nPriority[41] = PRIO0;
+	color_mark.nPriority[42] = PRIO0;
+	color_mark.nPriority[43] = PRIO0;
+	color_mark.nPriority[44] = PRIO0;
+	color_mark.nPriority[45] = PRIO0;
+	color_mark.nPriority[46] = PRIO0;
+	color_mark.nPriority[47] = PRIO0;
+	color_mark.nPriority[48] = PRIO0;
+	color_mark.nPriority[49] = PRIO0;
+	color_mark.nPriority[50] = PRIO0;
+	color_mark.nPriority[51] = PRIO0;
+	color_mark.nPriority[52] = PRIO0;
+	color_mark.nPriority[53] = PRIO0;
+	color_mark.nPriority[54] = PRIO0;
+	color_mark.nPriority[55] = PRIO0;
+	color_mark.nPriority[56] = PRIO0;
+	color_mark.nPriority[57] = PRIO0;
+	color_mark.nPriority[58] = PRIO0;
+	color_mark.nPriority[59] = PRIO0;
+	color_mark.nPriority[60] = PRIO0;
+	color_mark.nPriority[61] = PRIO0;
+	color_mark.nPriority[62] = PRIO0;
+	color_mark.nPriority[63] = PRIO0;
+	color_mark.nColor[0] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[1] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[2] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[3] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[4] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[5] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[6] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[7] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[8] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[9] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[10] = GSW_DROP_PRECEDENCE_GREEN;
+	color_mark.nColor[11] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[12] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[13] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[14] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[15] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[16] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[17] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[18] = GSW_DROP_PRECEDENCE_GREEN;
+	color_mark.nColor[19] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[20] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[21] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[22] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[23] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[24] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[25] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[26] = GSW_DROP_PRECEDENCE_GREEN;
+	color_mark.nColor[27] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[28] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[29] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[30] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[31] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[32] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[33] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[34] = GSW_DROP_PRECEDENCE_GREEN;
+	color_mark.nColor[35] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[36] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[37] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[38] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[39] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[40] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[41] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[42] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[43] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[44] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[45] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[46] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[47] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[48] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[49] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[50] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[51] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[52] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[53] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[54] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[55] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[56] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[57] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[58] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[59] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[60] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[61] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[62] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[63] = GSW_DROP_PRECEDENCE_YELLOW;
+	if (gsw_core_api((dp_gsw_cb)gsw_handle->gsw_qos_ops
+				.QOS_ColorMarkingTableSet,
+				gsw_handle, &color_mark)) {
+		PR_ERR("GSW_QOS_COLOR_MARKING_CFG_SET failed\n");
+		return -1;
+	}
+	return 0;
+}
+
 static int dp_gswip_color_5P3D_set(int mode, int inst)
 {
 	struct core_ops *gsw_handle;
@@ -742,6 +1046,12 @@ static int dp_platform_color_table_set(int inst)
 	dp_gswip_color_7P1D_set(GSW_MARKING_PCP_7P1D, inst);
 	dp_gswip_color_6P2D_set(GSW_MARKING_PCP_6P2D, inst);
 	dp_gswip_color_5P3D_set(GSW_MARKING_PCP_5P3D, inst);
+	dp_gswip_color_dscp_set(GSW_MARKING_DSCP_AF, inst);
+	dp_gswip_remark_8P0D_set(GSW_MARKING_PCP_8P0D, inst);
+	dp_gswip_remark_7P1D_set(GSW_MARKING_PCP_7P1D, inst);
+	dp_gswip_remark_6P2D_set(GSW_MARKING_PCP_6P2D, inst);
+	dp_gswip_remark_5P3D_set(GSW_MARKING_PCP_5P3D, inst);
+	dp_gswip_remark_dscp_set(GSW_MARKING_DSCP_AF, inst);
 
 	return 0;
 }
