From 5ad9d7858e8c0f98b1bd3530f776aacbf7c2d6e9 Mon Sep 17 00:00:00 2001
From: Hua Ma <hua.ma@linux.intel.com>
Date: Thu, 21 Jun 2018 17:38:11 +0800
Subject: [PATCH] Add support for net macAdd support for1 changes

---
 include/linux/ieee80211.h  |   6 ++
 include/net/cfg80211.h     |  29 ++++++++-
 include/net/mac80211.h     |  61 +++++++++++++++++++
 net/mac80211/cfg.c         |  10 ++-
 net/mac80211/chan.c        |   3 +-
 net/mac80211/driver-ops.h  |  22 +++++++
 net/mac80211/ibss.c        |   2 +-
 net/mac80211/ieee80211_i.h |  21 ++++++-
 net/mac80211/mlme.c        |  61 +++++++++++++++++--
 net/mac80211/scan.c        |  19 ++++++
 net/mac80211/util.c        | 148 +++++++++++++++++++++++++++++++++++++++------
 net/wireless/rdev-ops.h    |   8 +++
 12 files changed, 358 insertions(+), 32 deletions(-)

diff --git a/include/linux/ieee80211.h b/include/linux/ieee80211.h
index d3417c18ee2f..a699c49ba686 100644
--- a/include/linux/ieee80211.h
+++ b/include/linux/ieee80211.h
@@ -2333,6 +2333,12 @@ enum ieee80211_sa_query_action {
 #define WLAN_OUI_TYPE_MICROSOFT_WMM	2
 #define WLAN_OUI_TYPE_MICROSOFT_WPS	4
 
+#define WLAN_OUI_BROADCOM 			0x00904c /* Broadcom (Epigram) */
+#define WLAN_VENDOR_VHT_TYPE		0x04
+#define WLAN_VENDOR_VHT_SUBTYPE		0x08
+#define WLAN_VENDOR_VHT_SUBTYPE2	0x00
+#define WLAN_VENDOR_VHT_SUBTYPE3	0x18
+
 /*
  * WMM/802.11e Tspec Element
  */
diff --git a/include/net/cfg80211.h b/include/net/cfg80211.h
index 9d57639223c3..22b0100da3e1 100644
--- a/include/net/cfg80211.h
+++ b/include/net/cfg80211.h
@@ -769,6 +769,7 @@ struct cfg80211_csa_settings {
 	bool radar_required;
 	bool block_tx;
 	u8 count;
+	u8 sb_dfs_bw; /* from enum nl80211_sb_dfs_bw */
 };
 
 /**
@@ -825,6 +826,10 @@ enum station_parameters_apply_mask {
  * @opmode_notif: operating mode field from Operating Mode Notification
  * @opmode_notif_used: information if operating mode field is used
  * @support_p2p_ps: information if station supports P2P PS mechanism
+ * @resp: last association response frame
+ *	(or NULL for no change)
+ * @resp_len: length of last association response
+ * @rssi: received signal strength indicator
  */
 struct station_parameters {
 	const u8 *supported_rates;
@@ -852,6 +857,9 @@ struct station_parameters {
 	u8 opmode_notif;
 	bool opmode_notif_used;
 	int support_p2p_ps;
+	u8 *resp;
+	size_t resp_len;
+	u32 rssi;
 };
 
 /**
@@ -1071,6 +1079,7 @@ struct cfg80211_tid_stats {
  * @nonpeer_pm: non-peer mesh STA power save mode
  * @expected_throughput: expected throughput in kbps (including 802.11 headers)
  *	towards this station.
+ * @max_rssi: maximum received signal strength indicator
  * @rx_beacon: number of beacons received from this peer
  * @rx_beacon_signal_avg: signal strength average (in dBm) for beacons received
  *	from this peer
@@ -1116,6 +1125,7 @@ struct station_info {
 	enum nl80211_mesh_power_mode nonpeer_pm;
 
 	u32 expected_throughput;
+	u32 max_rssi;
 
 	u64 rx_beacon;
 	u64 rx_duration;
@@ -1814,6 +1824,7 @@ enum cfg80211_assoc_req_flags {
  * @ht_capa_mask:  The bits of ht_capa which are to be used.
  * @vht_capa: VHT capability override
  * @vht_capa_mask: VHT capability mask indicating which fields to use
+ * @vendor_wds: use WDS vendor specific capabilities
  */
 struct cfg80211_assoc_request {
 	struct cfg80211_bss *bss;
@@ -1825,6 +1836,7 @@ struct cfg80211_assoc_request {
 	struct ieee80211_ht_cap ht_capa;
 	struct ieee80211_ht_cap ht_capa_mask;
 	struct ieee80211_vht_cap vht_capa, vht_capa_mask;
+	int vendor_wds;
 };
 
 /**
@@ -2958,6 +2970,8 @@ struct cfg80211_ops {
 	int	(*set_ap_chanwidth)(struct wiphy *wiphy, struct net_device *dev,
 				    struct cfg80211_chan_def *chandef);
 
+	bool    (*is_all_iface_idle)(struct wiphy *wiphy);
+
 	int	(*add_tx_ts)(struct wiphy *wiphy, struct net_device *dev,
 			     u8 tsid, const u8 *peer, u8 user_prio,
 			     u16 admitted_time);
@@ -3056,6 +3070,7 @@ enum wiphy_flags {
 	WIPHY_FLAG_SUPPORTS_5_10_MHZ		= BIT(22),
 	WIPHY_FLAG_HAS_CHANNEL_SWITCH		= BIT(23),
 	WIPHY_FLAG_HAS_STATIC_WEP		= BIT(24),
+	WIPHY_FLAG_DISABLE_11D_HINT			= BIT(31),
 };
 
 /**
@@ -3819,6 +3834,9 @@ struct wireless_dev {
 
 	u32 owner_nlportid;
 
+	u8 *vendor_events_filter;
+	u8 vendor_events_filter_len;
+
 #ifdef CONFIG_CFG80211_WEXT
 	/* wext data */
 	struct {
@@ -5153,6 +5171,9 @@ void cfg80211_conn_failed(struct net_device *dev, const u8 *mac_addr,
 			  enum nl80211_connect_failed_reason reason,
 			  gfp_t gfp);
 
+int cfg80211_rx_vendor_specific_mgmt(struct wireless_dev *wdev, int freq,
+		      const u8 *buf, size_t len, gfp_t gfp);
+
 /**
  * cfg80211_rx_mgmt - notification of received, unprocessed management frame
  * @wdev: wireless device receiving the frame
@@ -5243,12 +5264,13 @@ void cfg80211_cqm_beacon_loss_notify(struct net_device *dev, gfp_t gfp);
  * cfg80211_radar_event - radar detection event
  * @wiphy: the wiphy
  * @chandef: chandef for the current channel
+ * @radar_bit_map: Bit map of channels, on which radar was detected
  * @gfp: context flags
  *
  * This function is called when a radar is detected on the current chanenl.
  */
-void cfg80211_radar_event(struct wiphy *wiphy,
-			  struct cfg80211_chan_def *chandef, gfp_t gfp);
+void cfg80211_radar_event(struct wiphy *wiphy, struct cfg80211_chan_def *chandef,
+			  u8 radar_bit_map, gfp_t gfp);
 
 /**
  * cfg80211_cac_event - Channel availability check (CAC) event
@@ -5596,6 +5618,9 @@ void cfg80211_report_wowlan_wakeup(struct wireless_dev *wdev,
  * by .crit_proto_start() has expired.
  */
 void cfg80211_crit_proto_stopped(struct wireless_dev *wdev, gfp_t gfp);
+void cfg80211_set_dfs_state_bit_map(struct wiphy *wiphy,
+				    struct cfg80211_chan_def *chandef,
+				    u8 radar_bit_map, enum nl80211_dfs_state dfs_state);
 
 /**
  * ieee80211_get_num_supported_channels - get number of channels device has
diff --git a/include/net/mac80211.h b/include/net/mac80211.h
index 920a771c710f..1591b1909229 100644
--- a/include/net/mac80211.h
+++ b/include/net/mac80211.h
@@ -1493,6 +1493,50 @@ struct ieee80211_vif *wdev_to_ieee80211_vif(struct wireless_dev *wdev);
 struct wireless_dev *ieee80211_vif_to_wdev(struct ieee80211_vif *vif);
 
 /**
+ * net_device_to_ieee80211_vif - return a vif from net_device
+ * @dev: the net_device to get the vif for
+ *
+ * This can be used by mac80211 drivers which needs to manipulate data
+ * path with tier own implementation of net_device_ops.
+ */
+struct ieee80211_vif *net_device_to_ieee80211_vif(struct net_device *dev);
+
+/**
+ * get_net_device_ops_from_wdev - extract the net_device from wdev
+ * @wdev: the wdev to get the net_device for
+ */
+const struct net_device_ops *get_net_device_ops_from_wdev(
+		struct wireless_dev *wdev);
+
+/**
+ * set_net_device_ops_from_wdev - replace the net_device to a wdev
+ * @wdev: the wdev to set the net_device for
+ */
+void set_net_device_ops_in_wdev(struct wireless_dev *wdev,
+		const struct net_device_ops *ops);
+
+/**
+ * copy_net_device_ops_from_wdev - clone a net_device_ops from wdev
+ * @wdev: the wdev to get the net_device_ops for
+ * @ops: the net_device_ops object to clone the ops to
+ */
+void copy_net_device_ops_from_wdev(struct wireless_dev *wdev,
+		struct net_device_ops *ops);
+
+/**
+ * ieee80211_vif_to_name - return the vif name
+ * @vif: the vif to get the wdev for
+ *
+ * This can be used by mac80211 drivers with direct cfg80211 APIs
+ * (like the vendor commands) that needs to get the name for a vif.
+ *
+ * Note that this function may return %NULL if the given wdev isn't
+ * associated with a vif that the driver knows about (e.g. monitor
+ * or AP_VLAN interfaces.)
+ */
+const char *ieee80211_vif_to_name(struct ieee80211_vif *vif);
+
+/**
  * enum ieee80211_key_flags - key flags
  *
  * These flags are used for communication about keys between the driver
@@ -1754,6 +1798,8 @@ struct ieee80211_sta_rates {
  * @tdls_initiator: indicates the STA is an initiator of the TDLS link. Only
  *	valid if the STA is a TDLS peer in the first place.
  * @mfp: indicates whether the STA uses management frame protection or not.
+ * @vendor_wds: indicates whether the STA supports
+ *	wds vendor specific capabilities.
  * @max_amsdu_subframes: indicates the maximal number of MSDUs in a single
  *	A-MSDU. Taken from the Extended Capabilities element. 0 means
  *	unlimited.
@@ -1787,6 +1833,7 @@ struct ieee80211_sta {
 	bool tdls;
 	bool tdls_initiator;
 	bool mfp;
+	int vendor_wds;
 	u8 max_amsdu_subframes;
 	u16 max_amsdu_len;
 	bool support_p2p_ps;
@@ -3643,6 +3690,11 @@ struct ieee80211_ops {
 	void (*reconfig_complete)(struct ieee80211_hw *hw,
 				  enum ieee80211_reconfig_type reconfig_type);
 
+	int (*get_connection_alive)(struct ieee80211_hw *hw,
+				struct ieee80211_vif *vif);
+
+	bool (*is_all_iface_idle)(struct ieee80211_hw *hw);
+
 #if IS_ENABLED(CONFIG_IPV6)
 	void (*ipv6_addr_change)(struct ieee80211_hw *hw,
 				 struct ieee80211_vif *vif,
@@ -5744,6 +5796,15 @@ int ieee80211_reserve_tid(struct ieee80211_sta *sta, u8 tid);
 void ieee80211_unreserve_tid(struct ieee80211_sta *sta, u8 tid);
 
 /**
+ * ieee80211_drv_start_sw_scan - allow driver to fallback to sw scan from hw
+ * @hw: pointer as obtained from ieee80211_alloc_hw()
+ *
+ * Note: This function must be called from hw_scan callback only.
+ *
+ */
+void ieee80211_drv_start_sw_scan(struct ieee80211_hw *hw);
+
+/**
  * ieee80211_tx_dequeue - dequeue a packet from a software tx queue
  *
  * @hw: pointer as obtained from ieee80211_alloc_hw()
diff --git a/net/mac80211/cfg.c b/net/mac80211/cfg.c
index 3b2c4692d966..e3b865b4c871 100644
--- a/net/mac80211/cfg.c
+++ b/net/mac80211/cfg.c
@@ -619,7 +619,7 @@ void sta_set_rate_info_tx(struct sta_info *sta,
 		struct ieee80211_supported_band *sband;
 		int shift = ieee80211_vif_get_shift(&sta->sdata->vif);
 		u16 brate;
-
+		
 		sband = ieee80211_get_sband(sta->sdata);
 		if (sband) {
 			brate = sband->bitrates[rate->idx].bitrate;
@@ -3212,6 +3212,13 @@ int ieee80211_channel_switch(struct wiphy *wiphy, struct net_device *dev,
 	return err;
 }
 
+static bool ieee80211_is_all_iface_idle(struct wiphy *wiphy)
+{
+	struct ieee80211_local *local = wiphy_priv(wiphy);
+
+	return drv_is_all_iface_idle(local);
+}
+
 u64 ieee80211_mgmt_tx_cookie(struct ieee80211_local *local)
 {
 	lockdep_assert_held(&local->mtx);
@@ -3698,6 +3705,7 @@ const struct cfg80211_ops mac80211_config_ops = {
 	.get_channel = ieee80211_cfg_get_channel,
 	.start_radar_detection = ieee80211_start_radar_detection,
 	.channel_switch = ieee80211_channel_switch,
+	.is_all_iface_idle = ieee80211_is_all_iface_idle,
 	.set_qos_map = ieee80211_set_qos_map,
 	.set_ap_chanwidth = ieee80211_set_ap_chanwidth,
 	.add_tx_ts = ieee80211_add_tx_ts,
diff --git a/net/mac80211/chan.c b/net/mac80211/chan.c
index a0d901d8992e..e1399db9504a 100644
--- a/net/mac80211/chan.c
+++ b/net/mac80211/chan.c
@@ -1564,7 +1564,8 @@ int ieee80211_vif_use_channel(struct ieee80211_sub_if_data *sdata,
 
 	lockdep_assert_held(&local->mtx);
 
-	WARN_ON(sdata->dev && netif_carrier_ok(sdata->dev));
+	if (local->use_chanctx)
+		WARN_ON(sdata->dev && netif_carrier_ok(sdata->dev));
 
 	mutex_lock(&local->chanctx_mtx);
 
diff --git a/net/mac80211/driver-ops.h b/net/mac80211/driver-ops.h
index 1a169de60192..0f2bacd3a735 100644
--- a/net/mac80211/driver-ops.h
+++ b/net/mac80211/driver-ops.h
@@ -656,6 +656,14 @@ static inline int drv_set_antenna(struct ieee80211_local *local,
 	return ret;
 }
 
+static inline bool drv_is_all_iface_idle(struct ieee80211_local *local)
+{
+	if (!local->ops->is_all_iface_idle)
+		return true;
+
+	return local->ops->is_all_iface_idle(&local->hw);
+}
+
 static inline int drv_get_antenna(struct ieee80211_local *local,
 				  u32 *tx_ant, u32 *rx_ant)
 {
@@ -973,6 +981,20 @@ drv_reconfig_complete(struct ieee80211_local *local,
 	trace_drv_return_void(local);
 }
 
+static inline int drv_get_connection_alive(struct ieee80211_local *local,
+			      struct ieee80211_sub_if_data *sdata)
+{
+	int ret;
+
+	check_sdata_in_driver(sdata);
+
+	ret = local->ops->get_connection_alive(&local->hw, &sdata->vif);
+
+	trace_drv_return_int(local, ret);
+
+	return ret;
+}
+
 static inline void
 drv_set_default_unicast_key(struct ieee80211_local *local,
 			    struct ieee80211_sub_if_data *sdata,
diff --git a/net/mac80211/ibss.c b/net/mac80211/ibss.c
index 0c0695eb2609..ab5d12f09136 100644
--- a/net/mac80211/ibss.c
+++ b/net/mac80211/ibss.c
@@ -776,7 +776,7 @@ static void ieee80211_ibss_csa_mark_radar(struct ieee80211_sub_if_data *sdata)
 					    NL80211_IFTYPE_ADHOC);
 	if (err > 0)
 		cfg80211_radar_event(sdata->local->hw.wiphy, &ifibss->chandef,
-				     GFP_ATOMIC);
+				     0, GFP_ATOMIC);
 }
 
 static bool
diff --git a/net/mac80211/ieee80211_i.h b/net/mac80211/ieee80211_i.h
index 0b0de3030e0d..cd3bf1bb2185 100644
--- a/net/mac80211/ieee80211_i.h
+++ b/net/mac80211/ieee80211_i.h
@@ -125,6 +125,9 @@ struct ieee80211_bss {
 
 	/* Keep track of what bits of information we have valid info for. */
 	u8 valid_data;
+
+	const u8 *vendor_vht;
+	u8 vendor_vht_len;
 };
 
 /**
@@ -145,6 +148,7 @@ enum ieee80211_bss_corrupt_data_flags {
  * @IEEE80211_BSS_VALID_WMM: WMM/UAPSD data was gathered from non-corrupt IE
  * @IEEE80211_BSS_VALID_RATES: Supported rates were gathered from non-corrupt IE
  * @IEEE80211_BSS_VALID_ERP: ERP flag was gathered from non-corrupt IE
+ * @IEEE80211_BSS_VALID_VENDOR_VHT: vendor VHT was gathered from non-corrupt IE
  *
  * These are bss flags that are attached to a bss in the
  * @valid_data field of &struct ieee80211_bss.  They show which parts
@@ -154,7 +158,8 @@ enum ieee80211_bss_corrupt_data_flags {
 enum ieee80211_bss_valid_data_flags {
 	IEEE80211_BSS_VALID_WMM			= BIT(1),
 	IEEE80211_BSS_VALID_RATES		= BIT(2),
-	IEEE80211_BSS_VALID_ERP			= BIT(3)
+	IEEE80211_BSS_VALID_ERP			= BIT(3),
+	IEEE80211_BSS_VALID_VENDOR_VHT	= BIT(4)
 };
 
 typedef unsigned __bitwise__ ieee80211_tx_result;
@@ -398,6 +403,9 @@ struct ieee80211_mgd_assoc_data {
 
 	struct ieee80211_vht_cap ap_vht_cap;
 
+	const u8 *vendor_vht;
+	u8 vendor_vht_len;
+
 	size_t ie_len;
 	u8 ie[];
 };
@@ -525,6 +533,8 @@ struct ieee80211_if_managed {
 	struct ieee80211_vht_cap vht_capa; /* configured VHT overrides */
 	struct ieee80211_vht_cap vht_capa_mask; /* Valid parts of vht_capa */
 
+	int vendor_wds;
+
 	/* TDLS support */
 	u8 tdls_peer[ETH_ALEN] __aligned(2);
 	struct delayed_work tdls_peer_del_work;
@@ -1427,6 +1437,8 @@ struct ieee80211_csa_ie {
 struct ieee802_11_elems {
 	const u8 *ie_start;
 	size_t total_len;
+	u8 *vendor_events_filter;
+	u8 vendor_events_filter_len;
 
 	/* pointers to IEs */
 	const struct ieee80211_tdls_lnkie *lnk_id;
@@ -1464,6 +1476,8 @@ struct ieee802_11_elems {
 	const u8 *opmode_notif;
 	const struct ieee80211_sec_chan_offs_ie *sec_chan_offs;
 	const struct ieee80211_mesh_chansw_params_ie *mesh_chansw_params_ie;
+	const u8 *vendor_vht;
+	const u8 *vendor_ie_to_notify;
 
 	/* length of them, respectively */
 	u8 ext_capab_len;
@@ -1481,6 +1495,8 @@ struct ieee802_11_elems {
 	u8 prep_len;
 	u8 perr_len;
 	u8 country_elem_len;
+	u8 vendor_vht_len;
+	u8 vendor_ie_to_notify_len;
 
 	/* whether a parse error occurred while retrieving these elements */
 	bool parse_error;
@@ -1889,12 +1905,13 @@ static inline void ieee80211_tx_skb(struct ieee80211_sub_if_data *sdata,
 
 u32 ieee802_11_parse_elems_crc(const u8 *start, size_t len, bool action,
 			       struct ieee802_11_elems *elems,
+				   u8 *vendor_events_filter, u8 vendor_events_filter_len,
 			       u64 filter, u32 crc);
 static inline void ieee802_11_parse_elems(const u8 *start, size_t len,
 					  bool action,
 					  struct ieee802_11_elems *elems)
 {
-	ieee802_11_parse_elems_crc(start, len, action, elems, 0, 0);
+	ieee802_11_parse_elems_crc(start, len, action, elems, NULL, 0, 0, 0);
 }
 
 
diff --git a/net/mac80211/mlme.c b/net/mac80211/mlme.c
index 048389b5aa0f..ab17acc32a3d 100644
--- a/net/mac80211/mlme.c
+++ b/net/mac80211/mlme.c
@@ -868,6 +868,20 @@ static void ieee80211_send_assoc(struct ieee80211_sub_if_data *sdata)
 		pos = ieee80211_add_wmm_info_ie(skb_put(skb, 9), qos_info);
 	}
 
+	if (assoc_data->vendor_vht && sband->vht_cap.vht_supported) {
+		struct ieee80211_vht_cap *ap_vht_cap =
+				(struct ieee80211_vht_cap *) (assoc_data->vendor_vht + 7);
+		pos = skb_put(skb, 7);
+		*pos++ = WLAN_EID_VENDOR_SPECIFIC;
+		*pos++ = 5 + 2 + sizeof(struct ieee80211_vht_cap);
+		*pos++ = 0x00; /* Broadcom (Epigram) (00:90:4C) */
+		*pos++ = 0x90;
+		*pos++ = 0x4C;
+		*pos++ = WLAN_VENDOR_VHT_TYPE;
+		*pos++ = WLAN_VENDOR_VHT_SUBTYPE;
+		ieee80211_add_vht_ie(sdata, skb, sband, ap_vht_cap);
+	}
+
 	/* add any remaining custom (i.e. vendor specific here) IEs */
 	if (assoc_data->ie_len) {
 		noffset = assoc_data->ie_len;
@@ -1072,6 +1086,10 @@ static void ieee80211_chswitch_work(struct work_struct *work)
 		goto out;
 	}
 
+	if(ieee80211_vif_use_channel(sdata, &sdata->csa_chandef,
+					IEEE80211_CHANCTX_SHARED))
+		sdata_info(sdata, "driver channel switch failed\n");
+
 	ifmgd->csa_waiting_bcn = true;
 
 	ieee80211_sta_reset_beacon_monitor(sdata);
@@ -2352,6 +2370,7 @@ static void ieee80211_mgd_probe_ap(struct ieee80211_sub_if_data *sdata,
 				   bool beacon)
 {
 	struct ieee80211_if_managed *ifmgd = &sdata->u.mgd;
+	struct ieee80211_local *local = sdata->local;
 	bool already = false;
 
 	if (!ieee80211_sdata_running(sdata))
@@ -2375,6 +2394,16 @@ static void ieee80211_mgd_probe_ap(struct ieee80211_sub_if_data *sdata,
 				     beacon_loss_count);
 
 		ieee80211_cqm_beacon_loss_notify(&sdata->vif, GFP_KERNEL);
+	} else {
+		if (local->ops->get_connection_alive) {
+			if (drv_get_connection_alive(local, sdata)) {
+				mod_timer(&ifmgd->conn_mon_timer,
+						round_jiffies_up(jiffies +
+								IEEE80211_CONNECTION_IDLE_TIME));
+				mutex_unlock(&sdata->local->mtx);
+				goto out;
+			}
+		}
 	}
 
 	/*
@@ -3101,6 +3130,12 @@ static bool ieee80211_assoc_success(struct ieee80211_sub_if_data *sdata,
 		ieee80211_vht_cap_ie_to_sta_vht_cap(sdata, sband,
 						    elems.vht_cap_elem, sta);
 
+	if (elems.vendor_vht) {
+		struct ieee80211_vht_cap *vht_cap_ie =
+				(struct ieee80211_vht_cap *) (elems.vendor_vht + 7);
+		ieee80211_vht_cap_ie_to_sta_vht_cap(sdata, sband, vht_cap_ie, sta);
+	}
+
 	/*
 	 * Some APs, e.g. Netgear WNDR3700, report invalid HT operation data
 	 * in their association response, so ignore that data for our own
@@ -3133,6 +3168,7 @@ static bool ieee80211_assoc_success(struct ieee80211_sub_if_data *sdata,
 	}
 
 	sta->sta.wme = elems.wmm_param && local->hw.queues >= IEEE80211_NUM_ACS;
+	sta->sta.vendor_wds = ifmgd->vendor_wds;
 
 	err = sta_info_move_state(sta, IEEE80211_STA_ASSOC);
 	if (!err && !(ifmgd->flags & IEEE80211_STA_CONTROL_PORT))
@@ -3342,11 +3378,16 @@ static void ieee80211_rx_mgmt_probe_resp(struct ieee80211_sub_if_data *sdata,
 	if (baselen > len)
 		return;
 
-	ieee802_11_parse_elems(mgmt->u.probe_resp.variable, len - baselen,
-			       false, &elems);
+	ieee802_11_parse_elems_crc(mgmt->u.probe_resp.variable, len - baselen,
+			       false, &elems, sdata->wdev.vendor_events_filter,
+				   sdata->wdev.vendor_events_filter_len, 0, 0);
 
 	ieee80211_rx_bss_info(sdata, mgmt, len, rx_status, &elems);
 
+	if (elems.vendor_ie_to_notify)
+		cfg80211_rx_vendor_specific_mgmt(&sdata->wdev, rx_status->freq,
+				(const u8 *)mgmt, len, GFP_ATOMIC);
+
 	if (ifmgd->associated &&
 	    ether_addr_equal(mgmt->bssid, ifmgd->associated->bssid))
 		ieee80211_reset_ap_probe(sdata);
@@ -3402,6 +3443,14 @@ static void ieee80211_rx_mgmt_beacon(struct ieee80211_sub_if_data *sdata,
 	if (baselen > len)
 		return;
 
+	ieee802_11_parse_elems_crc(mgmt->u.beacon.variable,
+			len - baselen, false, &elems, sdata->wdev.vendor_events_filter,
+			   sdata->wdev.vendor_events_filter_len, 0, 0);
+
+	if (elems.vendor_ie_to_notify)
+		 cfg80211_rx_vendor_specific_mgmt(&sdata->wdev, rx_status->freq,
+			(const u8 *)mgmt, len, GFP_ATOMIC);
+
 	rcu_read_lock();
 	chanctx_conf = rcu_dereference(sdata->vif.chanctx_conf);
 	if (!chanctx_conf) {
@@ -3418,8 +3467,6 @@ static void ieee80211_rx_mgmt_beacon(struct ieee80211_sub_if_data *sdata,
 
 	if (ifmgd->assoc_data && ifmgd->assoc_data->need_beacon &&
 	    ether_addr_equal(mgmt->bssid, ifmgd->assoc_data->bss->bssid)) {
-		ieee802_11_parse_elems(mgmt->u.beacon.variable,
-				       len - baselen, false, &elems);
 
 		ieee80211_rx_bss_info(sdata, mgmt, len, rx_status, &elems);
 		if (elems.tim && !elems.parse_error) {
@@ -3530,7 +3577,7 @@ static void ieee80211_rx_mgmt_beacon(struct ieee80211_sub_if_data *sdata,
 	ncrc = crc32_be(0, (void *)&mgmt->u.beacon.beacon_int, 4);
 	ncrc = ieee802_11_parse_elems_crc(mgmt->u.beacon.variable,
 					  len - baselen, false, &elems,
-					  care_about_ies, ncrc);
+					  NULL, 0, care_about_ies, ncrc);
 
 	if (ieee80211_hw_check(&local->hw, PS_NULLFUNC_STACK) &&
 	    ieee80211_check_tim(elems.tim, elems.tim_len, ifmgd->aid)) {
@@ -4808,6 +4855,8 @@ int ieee80211_mgd_assoc(struct ieee80211_sub_if_data *sdata,
 	assoc_data->capability = req->bss->capability;
 	assoc_data->supp_rates = bss->supp_rates;
 	assoc_data->supp_rates_len = bss->supp_rates_len;
+	assoc_data->vendor_vht = bss->vendor_vht;
+	assoc_data->vendor_vht_len = bss->vendor_vht_len;
 
 	rcu_read_lock();
 	ht_ie = ieee80211_bss_get_ie(req->bss, WLAN_EID_HT_OPERATION);
@@ -4849,6 +4898,8 @@ int ieee80211_mgd_assoc(struct ieee80211_sub_if_data *sdata,
 		ifmgd->flags &= ~IEEE80211_STA_MFP_ENABLED;
 	}
 
+	ifmgd->vendor_wds = req->vendor_wds;
+
 	if (req->flags & ASSOC_REQ_USE_RRM)
 		ifmgd->flags |= IEEE80211_STA_ENABLE_RRM;
 	else
diff --git a/net/mac80211/scan.c b/net/mac80211/scan.c
index 23d8ac829279..9558f0595101 100644
--- a/net/mac80211/scan.c
+++ b/net/mac80211/scan.c
@@ -171,6 +171,14 @@ ieee80211_bss_info_update(struct ieee80211_local *local,
 			bss->valid_data |= IEEE80211_BSS_VALID_WMM;
 	}
 
+	if (elems->vendor_vht && (!elems->parse_error ||
+			!(bss->valid_data & IEEE80211_BSS_VALID_VENDOR_VHT))) {
+		bss->vendor_vht = elems->vendor_vht;
+		bss->vendor_vht_len = elems->vendor_vht_len;
+		if (!elems->parse_error)
+			bss->valid_data |= IEEE80211_BSS_VALID_VENDOR_VHT;
+	}
+
 	if (beacon) {
 		struct ieee80211_supported_band *sband =
 			local->hw.wiphy->bands[rx_status->band];
@@ -474,6 +482,17 @@ static int ieee80211_start_sw_scan(struct ieee80211_local *local,
 	return 0;
 }
 
+void ieee80211_drv_start_sw_scan(struct ieee80211_hw *hw)
+{
+	struct ieee80211_local *local = hw_to_local(hw);
+	test_and_clear_bit(SCAN_HW_SCANNING, &local->scanning);
+	__set_bit(SCAN_SW_SCANNING, &local->scanning);
+	/* TODO: check remain on channel (scan for current channel requested) */
+
+	ieee80211_start_sw_scan(local, local->scan_sdata);
+}
+EXPORT_SYMBOL(ieee80211_drv_start_sw_scan);
+
 static bool ieee80211_can_scan(struct ieee80211_local *local,
 			       struct ieee80211_sub_if_data *sdata)
 {
diff --git a/net/mac80211/util.c b/net/mac80211/util.c
index ca7de02e0a6e..9a735a54dd49 100644
--- a/net/mac80211/util.c
+++ b/net/mac80211/util.c
@@ -723,6 +723,72 @@ struct wireless_dev *ieee80211_vif_to_wdev(struct ieee80211_vif *vif)
 }
 EXPORT_SYMBOL_GPL(ieee80211_vif_to_wdev);
 
+struct ieee80211_vif *net_device_to_ieee80211_vif(struct net_device *dev)
+{
+	struct ieee80211_sub_if_data *sdata;
+
+	if (!dev)
+		return NULL;
+
+	sdata = IEEE80211_DEV_TO_SUB_IF(dev);
+	return &sdata->vif;
+}
+EXPORT_SYMBOL_GPL(net_device_to_ieee80211_vif);
+
+const struct net_device_ops *get_net_device_ops_from_wdev(
+		struct wireless_dev *wdev)
+{
+	struct ieee80211_sub_if_data *sdata;
+
+	if (!wdev)
+		return NULL;
+	sdata = IEEE80211_WDEV_TO_SUB_IF(wdev);
+	return sdata->dev->netdev_ops;
+}
+EXPORT_SYMBOL_GPL(get_net_device_ops_from_wdev);
+
+void set_net_device_ops_in_wdev(struct wireless_dev *wdev,
+		const struct net_device_ops *ops)
+{
+	struct ieee80211_sub_if_data *sdata;
+
+	if (!wdev || !ops)
+		return;
+	sdata = IEEE80211_WDEV_TO_SUB_IF(wdev);
+	sdata->dev->netdev_ops = ops;
+}
+EXPORT_SYMBOL_GPL(set_net_device_ops_in_wdev);
+
+void copy_net_device_ops_from_wdev(struct wireless_dev *wdev,
+		struct net_device_ops *ops)
+{
+	struct ieee80211_sub_if_data *sdata;
+
+	if (!wdev || !ops)
+		return;
+	sdata = IEEE80211_WDEV_TO_SUB_IF(wdev);
+	if (!sdata->dev->netdev_ops)
+		return;
+	memcpy(ops, sdata->dev->netdev_ops, sizeof(struct net_device_ops));
+}
+EXPORT_SYMBOL_GPL(copy_net_device_ops_from_wdev);
+
+const char *ieee80211_vif_to_name(struct ieee80211_vif *vif)
+{
+	struct ieee80211_sub_if_data *sdata;
+
+	if (!vif)
+		return NULL;
+
+	sdata = vif_to_sdata(vif);
+
+	if (!sdata)
+		return NULL;
+
+	return (const char *)sdata->name;
+}
+EXPORT_SYMBOL_GPL(ieee80211_vif_to_name);
+
 /*
  * Nothing should have been stuffed into the workqueue during
  * the suspend->resume cycle. Since we can't check each caller
@@ -766,8 +832,63 @@ void ieee80211_queue_delayed_work(struct ieee80211_hw *hw,
 }
 EXPORT_SYMBOL(ieee80211_queue_delayed_work);
 
+static u32 ieee802_11_parse_vendor_specific(const u8 *pos, u8 elen,
+		struct ieee802_11_elems *elems, bool calc_crc, u32 crc)
+{
+	if (elen >= 4 && pos[0] == 0x00 && pos[1] == 0x50 && pos[2] == 0xf2) {
+		/* Microsoft OUI (00:50:F2) */
+
+		if (calc_crc)
+			crc = crc32_be(crc, pos - 2, elen + 2);
+
+		if (elen >= 5 && pos[3] == 2) {
+			/* OUI Type 2 - WMM IE */
+			if (pos[4] == 0) {
+				elems->wmm_info = pos;
+				elems->wmm_info_len = elen;
+			} else if (pos[4] == 1) {
+				elems->wmm_param = pos;
+				elems->wmm_param_len = elen;
+			}
+		}
+	}
+
+	if (elen >= 4 && pos[0] == 0x00 && pos[1] == 0x90 && pos[2] == 0x4c) {
+		/* Broadcom (Epigram) (00:90:4C) */
+
+		if (calc_crc)
+			crc = crc32_be(crc, pos - 2, elen + 2);
+
+		if (elen >= 5 && pos[3] == WLAN_VENDOR_VHT_TYPE) {
+			if ((pos[4] == WLAN_VENDOR_VHT_SUBTYPE  ||
+			     pos[4] == WLAN_VENDOR_VHT_SUBTYPE2 ||
+			     pos[4] == WLAN_VENDOR_VHT_SUBTYPE3)) {
+				elems->vendor_vht = pos;
+				elems->vendor_vht_len = elen;
+			}
+		}
+	}
+
+	if (elen >= 4 && elems->vendor_events_filter && elems->vendor_events_filter_len >= 3) {
+		int i = 0, found = 1;
+		for (i = 0; i < elems->vendor_events_filter_len; i++) {
+			if (pos[i] != elems->vendor_events_filter[i]) {
+				found = 0;
+				break;
+			}
+		}
+		if (found) {
+			elems->vendor_ie_to_notify = pos;
+			elems->vendor_ie_to_notify_len = elen;
+		}
+	}
+
+	return crc;
+}
+
 u32 ieee802_11_parse_elems_crc(const u8 *start, size_t len, bool action,
 			       struct ieee802_11_elems *elems,
+				   u8 *vendor_events_filter, u8 vendor_events_filter_len,
 			       u64 filter, u32 crc)
 {
 	size_t left = len;
@@ -780,6 +901,8 @@ u32 ieee802_11_parse_elems_crc(const u8 *start, size_t len, bool action,
 	memset(elems, 0, sizeof(*elems));
 	elems->ie_start = start;
 	elems->total_len = len;
+	elems->vendor_events_filter = vendor_events_filter;
+	elems->vendor_events_filter_len = vendor_events_filter_len;
 
 	while (left >= 2) {
 		u8 id, elen;
@@ -891,24 +1014,8 @@ u32 ieee802_11_parse_elems_crc(const u8 *start, size_t len, bool action,
 			elems->challenge_len = elen;
 			break;
 		case WLAN_EID_VENDOR_SPECIFIC:
-			if (elen >= 4 && pos[0] == 0x00 && pos[1] == 0x50 &&
-			    pos[2] == 0xf2) {
-				/* Microsoft OUI (00:50:F2) */
-
-				if (calc_crc)
-					crc = crc32_be(crc, pos - 2, elen + 2);
-
-				if (elen >= 5 && pos[3] == 2) {
-					/* OUI Type 2 - WMM IE */
-					if (pos[4] == 0) {
-						elems->wmm_info = pos;
-						elems->wmm_info_len = elen;
-					} else if (pos[4] == 1) {
-						elems->wmm_param = pos;
-						elems->wmm_param_len = elen;
-					}
-				}
-			}
+			crc = ieee802_11_parse_vendor_specific(pos, elen, elems,
+					calc_crc, crc);
 			break;
 		case WLAN_EID_RSN:
 			elems->rsn = pos;
@@ -1456,7 +1563,8 @@ static int ieee80211_build_preq_ies_band(struct ieee80211_local *local,
 		break;
 	}
 
-	if (sband->vht_cap.vht_supported && have_80mhz) {
+	/* Don't add VHT capab. in 2GHZ, even if we support it */
+	if (sband->vht_cap.vht_supported && have_80mhz && band != NL80211_BAND_2GHZ) {
 		if (end - pos < 2 + sizeof(struct ieee80211_vht_cap))
 			goto out_err;
 		pos = ieee80211_ie_build_vht_cap(pos, &sband->vht_cap,
@@ -2838,7 +2946,7 @@ void ieee80211_dfs_radar_detected_work(struct work_struct *work)
 		/* XXX: multi-channel is not supported yet */
 		WARN_ON(1);
 	else
-		cfg80211_radar_event(local->hw.wiphy, &chandef, GFP_KERNEL);
+		cfg80211_radar_event(local->hw.wiphy, &chandef, 0, GFP_KERNEL);
 }
 
 void ieee80211_radar_detected(struct ieee80211_hw *hw)
diff --git a/net/wireless/rdev-ops.h b/net/wireless/rdev-ops.h
index 11cf83c8ad4f..669bca63c33f 100644
--- a/net/wireless/rdev-ops.h
+++ b/net/wireless/rdev-ops.h
@@ -758,6 +758,14 @@ static inline int rdev_set_antenna(struct cfg80211_registered_device *rdev,
 	return ret;
 }
 
+static inline bool rdev_is_all_iface_idle(struct cfg80211_registered_device *rdev)
+{
+	if (!rdev->ops->is_all_iface_idle)
+		return true;
+
+	return rdev->ops->is_all_iface_idle(&rdev->wiphy);
+}
+
 static inline int rdev_get_antenna(struct cfg80211_registered_device *rdev,
 				   u32 *tx_ant, u32 *rx_ant)
 {
