From 0ed50c01f73f382f91d71ab447b25187599de74b Mon Sep 17 00:00:00 2001
From: Rekha Eswaran <rekha.eswaran@intel.com>
Date: Fri, 3 May 2019 12:56:14 +0800
Subject: [PATCH] DP address review comments

---
 .../lantiq/datapath/gswip30/datapath_coc.c         | 36 ++++++++++++++--------
 1 file changed, 23 insertions(+), 13 deletions(-)

diff --git a/drivers/net/ethernet/lantiq/datapath/gswip30/datapath_coc.c b/drivers/net/ethernet/lantiq/datapath/gswip30/datapath_coc.c
index 0ffbb635c623..696059224c04 100644
--- a/drivers/net/ethernet/lantiq/datapath/gswip30/datapath_coc.c
+++ b/drivers/net/ethernet/lantiq/datapath/gswip30/datapath_coc.c
@@ -286,7 +286,6 @@ ssize_t proc_coc_write_30(struct file *file, const char *buf, size_t count,
 	return count;
 }
 
-#if defined(DATAPATH_ENABLE_CPU)
 int clear_meter_interrupt(void)
 {
 	GSW_register_t reg;
@@ -340,7 +339,6 @@ int enable_meter_interrupt(void)
 
 	return 0;
 }
-#endif
 
 /* rate      0: disable meter
  * -1: enable meter
@@ -351,8 +349,7 @@ int apply_meter_rate(u32 rate, unsigned int new_state)
 	GSW_QoS_meterCfg_t meter_cfg;
 	struct core_ops *gsw_handle;
 
-	DP_DEBUG(DP_DBG_FLAG_COC,
-		 "rate=%d new state=%d\n", rate, new_state);
+	DP_DEBUG(DP_DBG_FLAG_COC, "rate=%d new state=%d\n", rate, new_state);
 	gsw_handle = dp_port_prop[inst].ops[GSWIP_R];
 	memset(&meter_cfg, 0, sizeof(meter_cfg));
 	meter_cfg.nMeterId = meter_id;
@@ -612,6 +609,14 @@ int update_coc_rmon_timer(uint32_t new_state)
 
 		/*disable meter */
 		apply_meter_rate(0, 0);
+	} else if ((new_state > dp_coc_ps_min) &&
+				(new_state < dp_coc_ps_max)) {
+		/*enable meter, but first disable to fix red color issue
+		 * if last already triggered
+		 */
+		apply_meter_rate(0, 0);
+		apply_meter_rate(-1, new_state);	/*enable again */
+
 	} else if (new_state == dp_coc_ps_min) {
 		/*disable rmon timer */
 		del_timer(&dp_coc_timer);
@@ -631,17 +636,21 @@ int update_coc_rmon_timer(uint32_t new_state)
 
 static int dp_coc_policy_notify(struct cpufreq_policy *policy)
 {
-	if (dp_coc_ps_curr == -1) {
-		dp_coc_ps_curr = policy->max;
-		dp_coc_ps_max = policy->max;
-		dp_coc_ps_min = policy->min;
-	}
 	/* Datapath COC supports only in conservative governor */
 	if (dp_strncmpi(policy->governor->name, "conservative",
-			strlen("conservative") + 1) == 0) {
+				strlen("conservative") + 1) == 0) {
+		if (dp_coc_ps_curr == -1) {
+			dp_coc_ps_curr = policy->cur;
+			dp_coc_ps_max = policy->max;
+			dp_coc_ps_min = policy->min;
+		}
 		DP_DEBUG(DP_DBG_FLAG_COC, "policy (min, max, cur):%u, %u, %u\n",
 			 policy->min, policy->max, policy->cur);
-		if (dp_coc_ps_new >= dp_coc_ps_max) {
+		if (dp_coc_ps_new == -1) {
+			coc_lock();
+			update_coc_rmon_timer(dp_coc_ps_curr);
+			coc_unlock();
+		} else if (dp_coc_ps_new >= dp_coc_ps_max) {
 			DP_DEBUG(DP_DBG_FLAG_COC,
 				 "Up scale-limit to freq=%d dp_freq_new=%d\n",
 				 dp_coc_ps_max, dp_coc_ps_new);
@@ -651,8 +660,7 @@ static int dp_coc_policy_notify(struct cpufreq_policy *policy)
 			/*No down scaling allowed, limit the frequency to max */
 			cpufreq_verify_within_limits(policy, dp_coc_ps_max,
 						     policy->max);
-		} else if ((dp_coc_ps_new == dp_coc_ps_min) ||
-						(dp_coc_ps_new == -1)) {
+		} else if (dp_coc_ps_new == dp_coc_ps_min) {
 			coc_lock();
 			update_coc_rmon_timer(dp_coc_ps_min);
 			coc_unlock();
@@ -666,6 +674,7 @@ static int dp_coc_policy_notify(struct cpufreq_policy *policy)
 	/*disable meter */
 	apply_meter_rate(0, 0);
 	last_rmon_rx = 0;
+	dp_coc_ps_curr = -1;
 	coc_unlock();
 	return NOTIFY_OK;
 }
@@ -691,6 +700,7 @@ static int dp_coc_postchange(struct cpufreq_freqs *freq)
 		return NOTIFY_OK;
 
 	dp_coc_ps_curr = freq->new;
+	dp_coc_ps_new = -1;
 	DP_DEBUG(DP_DBG_FLAG_COC,
 		 "dp_coc_postchange:to switch from %d to %d\n",
 		 freq->old, freq->new);
