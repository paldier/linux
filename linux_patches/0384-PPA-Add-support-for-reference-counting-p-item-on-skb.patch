From 0491bb96a4b92085a268447d66ac2fbd79a1a470 Mon Sep 17 00:00:00 2001
From: "Maitra, ArchismanX" <archismanx.maitra@intel.com>
Date: Thu, 13 Dec 2018 15:23:13 +0530
Subject: [PATCH] PPA: Add support for reference counting p_item on skb alloc
 and free

---
 drivers/net/ethernet/lantiq/ppa/ppa_hook.c |  4 ++++
 include/linux/skbuff.h                     |  2 +-
 include/net/ppa/ppa_api.h                  |  2 ++
 include/net/ppa/ppa_hook.h                 | 11 +++++++++++
 net/core/skbuff.c                          | 15 ++++++++++-----
 5 files changed, 28 insertions(+), 6 deletions(-)

diff --git a/drivers/net/ethernet/lantiq/ppa/ppa_hook.c b/drivers/net/ethernet/lantiq/ppa/ppa_hook.c
index f26af816e1c3..f74fa7dd05f4 100644
--- a/drivers/net/ethernet/lantiq/ppa/ppa_hook.c
+++ b/drivers/net/ethernet/lantiq/ppa/ppa_hook.c
@@ -125,6 +125,8 @@ int32_t (*ppa_hook_session_bradd_fn)(PPA_BUF *, PPA_SESSION *, uint32_t) = NULL;
 int32_t (*ppa_hook_session_del_fn)(PPA_SESSION *, uint32_t) = NULL;
 #endif /*CONFIG_PPA_RT_SESS_LEARNING*/
 
+void (*ppa_hook_pitem_refcnt_inc_fn)(PPA_BUF *) = NULL;
+void (*ppa_hook_pitem_refcnt_dec_fn)(PPA_BUF *) = NULL;
 #if IS_ENABLED(CONFIG_PPA_MPE_IP97)
 int32_t (*ppa_hook_session_ipsec_add_fn)(PPA_XFRM_STATE *, sa_direction) = NULL;
 int32_t (*ppa_hook_session_ipsec_del_fn)(PPA_XFRM_STATE *) = NULL;
@@ -452,6 +454,8 @@ EXPORT_SYMBOL(ppa_hook_session_add_fn);
 EXPORT_SYMBOL(ppa_hook_session_bradd_fn);
 #endif /*CONFIG_PPA_BR_SESS_LEARNING*/
 EXPORT_SYMBOL(ppa_hook_session_del_fn);
+EXPORT_SYMBOL(ppa_hook_pitem_refcnt_inc_fn);
+EXPORT_SYMBOL(ppa_hook_pitem_refcnt_dec_fn);
 #if IS_ENABLED(CONFIG_PPA_MPE_IP97)
 EXPORT_SYMBOL(ppa_hook_session_ipsec_add_fn);
 EXPORT_SYMBOL(ppa_hook_session_ipsec_del_fn);
diff --git a/include/linux/skbuff.h b/include/linux/skbuff.h
index ee52934149f3..f77a08e1ec11 100644
--- a/include/linux/skbuff.h
+++ b/include/linux/skbuff.h
@@ -810,7 +810,7 @@ struct sk_buff {
 	__u32 DW0, DW1, DW2, DW3;
 #endif
 #ifdef CONFIG_PPA
-	__u32			ptr_ppa_pitem;
+	void			*ptr_ppa_pitem;
 #endif
 
 	/* private: */
diff --git a/include/net/ppa/ppa_api.h b/include/net/ppa/ppa_api.h
index a083db5ac2b6..9cf2f77d1ab8 100644
--- a/include/net/ppa/ppa_api.h
+++ b/include/net/ppa/ppa_api.h
@@ -966,6 +966,8 @@ int32_t ppa_mc_group_update(PPA_MC_GROUP *, uint32_t);
 int32_t ppa_mc_group_get(IP_ADDR_C, IP_ADDR_C, PPA_MC_GROUP *, uint32_t);
 int32_t ppa_mc_entry_modify(IP_ADDR_C, IP_ADDR_C, PPA_MC_GROUP *, PPA_SESSION_EXTRA *, uint32_t);
 int32_t ppa_mc_entry_get(IP_ADDR_C, IP_ADDR_C, PPA_SESSION_EXTRA *, uint32_t);
+void ppa_pitem_refcnt_inc(PPA_BUF *ppa_buf);
+void ppa_pitem_refcnt_dec(PPA_BUF *ppa_buf);
 #if IS_ENABLED(CONFIG_PPA_MPE_IP97)
 int32_t ppa_session_ipsec_add(PPA_XFRM_STATE *ppa_x, sa_direction dir);
 int32_t ppa_session_ipsec_delete(PPA_XFRM_STATE *ppa_x);
diff --git a/include/net/ppa/ppa_hook.h b/include/net/ppa/ppa_hook.h
index 6b0260c193cd..5c4f885bb8f7 100644
--- a/include/net/ppa/ppa_hook.h
+++ b/include/net/ppa/ppa_hook.h
@@ -56,6 +56,17 @@ extern int32_t (*ppa_hook_session_add_fn)(PPA_BUF *skb, PPA_SESSION *p_session,
 extern int32_t ppa_hook_session_add_fn(PPA_BUF *skb, PPA_SESSION *p_session, uint32_t flags);
 #endif
 extern int32_t (*ppa_hook_session_bradd_fn)(PPA_BUF *skb, PPA_SESSION *p_session, uint32_t flags);
+/*!
+  \brief If skb stores a p_item, increase ref count of the p_item->used
+  \param[in] skb points to the skb pointer
+ */
+extern void (*ppa_hook_pitem_refcnt_inc_fn)(PPA_BUF *skb);
+/*!
+  \brief If skb stores a p_item, call ppa_session_put
+  \param[in] skb points to the skb pointer
+ */
+extern void (*ppa_hook_pitem_refcnt_dec_fn)(PPA_BUF *skb);
+
 #if defined(CONFIG_PPA_MPE_IP97)
 #ifdef NO_DOXY
 extern int32_t (*ppa_hook_session_ipsec_add_fn)(PPA_XFRM_STATE *, sa_direction);
diff --git a/net/core/skbuff.c b/net/core/skbuff.c
index 5ab94673ca07..037bb4a4af69 100644
--- a/net/core/skbuff.c
+++ b/net/core/skbuff.c
@@ -82,6 +82,9 @@
 #include <net/lantiq_cbm_api.h>
 #endif
 
+#if IS_ENABLED(CONFIG_PPA)
+#include <net/ppa/ppa_api.h>
+#endif
 
 struct kmem_cache *skbuff_head_cache __read_mostly;
 static struct kmem_cache *skbuff_fclone_cache __read_mostly;
@@ -260,7 +263,7 @@ struct sk_buff *__alloc_skb(unsigned int size, gfp_t gfp_mask,
 	skb_reset_tail_pointer(skb);
 	skb->end = skb->tail + size;
 #if IS_ENABLED(CONFIG_PPA)
-	skb->ptr_ppa_pitem = 0;
+	skb->ptr_ppa_pitem = NULL;
 #endif
 	skb->mac_header = (typeof(skb->mac_header))~0U;
 	skb->transport_header = (typeof(skb->transport_header))~0U;
@@ -708,6 +711,10 @@ static void skb_release_all(struct sk_buff *skb)
 
 void __kfree_skb(struct sk_buff *skb)
 {
+#if IS_ENABLED(CONFIG_PPA)
+	if (ppa_hook_pitem_refcnt_dec_fn && skb->ptr_ppa_pitem)
+		ppa_hook_pitem_refcnt_dec_fn(skb);
+#endif
 	skb_release_all(skb);
 	kfree_skbmem(skb);
 }
@@ -728,9 +735,6 @@ void kfree_skb(struct sk_buff *skb)
 		smp_rmb();
 	else if (likely(!atomic_dec_and_test(&skb->users)))
 		return;
-#if IS_ENABLED(CONFIG_PPA)
-	skb->ptr_ppa_pitem = 0;
-#endif
 	trace_kfree_skb(skb, __builtin_return_address(0));
 	__kfree_skb(skb);
 }
@@ -886,7 +890,8 @@ static void __copy_skb_header(struct sk_buff *new, const struct sk_buff *old)
 	new->extmark	 = old->extmark;
 #endif
 #if IS_ENABLED(CONFIG_PPA)
-	new->ptr_ppa_pitem = old->ptr_ppa_pitem;
+	if (ppa_hook_pitem_refcnt_inc_fn && new->ptr_ppa_pitem)
+		ppa_hook_pitem_refcnt_inc_fn(new);
 #endif
 	CHECK_SKB_FIELD(protocol);
 	CHECK_SKB_FIELD(csum);
