From 8d05f606ffba3f3ef6940c0a1090c982254b17a7 Mon Sep 17 00:00:00 2001
From: manohara <s.manoharan@intel.com>
Date: Fri, 29 Jun 2018 15:37:41 +0800
Subject: [PATCH] arx3000-axepoint-model f24s support initial version

---
 .../net/ethernet/lantiq/switch-api/gsw_flow_core.c |  54 ++++--
 .../net/ethernet/lantiq/switch-api/gsw_flow_core.h |   9 +
 drivers/net/ethernet/lantiq/switch-api/gsw_init.c  | 186 +++++++++++++++++----
 drivers/net/ethernet/lantiq/switch-api/gsw_init.h  |   4 +-
 .../ethernet/lantiq/switch-api/gswip_dev/gsw_dev.c |  21 ++-
 5 files changed, 222 insertions(+), 52 deletions(-)

diff --git a/drivers/net/ethernet/lantiq/switch-api/gsw_flow_core.c b/drivers/net/ethernet/lantiq/switch-api/gsw_flow_core.c
index e66789dc77ec..210a0fdcaf48 100644
--- a/drivers/net/ethernet/lantiq/switch-api/gsw_flow_core.c
+++ b/drivers/net/ethernet/lantiq/switch-api/gsw_flow_core.c
@@ -2613,10 +2613,14 @@ static void get_gsw_hw_cap(void *cdev)
 		printk("Switch Version ID                =  0x%x\n", gswdev->gipver);
 		printk("\n");
 		printk("Number of logical port           =  %d\n", gswdev->pnum);
-		printk("Number of CTP Port               =  %d\n", gswdev->num_of_ctp);
-		printk("Number of Bridge                 =  %d\n", gswdev->num_of_bridge);
-		printk("Number of Bridge Port            =  %d\n", gswdev->num_of_bridge_port);
-		printk("Number of P-Mapper               =  %d\n", gswdev->num_of_pmapper);
+		printk("Number of ports including V port =  %d\n", gswdev->tpnum);
+		if (gswdev->gipver == LTQ_GSWIP_3_1) {
+			printk("Number of CTP Port               =  %d\n", gswdev->num_of_ctp);
+			printk("Number of Bridge                 =  %d\n", gswdev->num_of_bridge);
+			printk("Number of Bridge Port            =  %d\n", gswdev->num_of_bridge_port);
+			printk("Number of P-Mapper               =  %d\n", gswdev->num_of_pmapper);
+
+		}
 		printk("Number of queues                 =  %d\n", gswdev->num_of_queues);
 		printk("Number of meter instance         =  %d\n", gswdev->num_of_meters);
 		printk("Number of shapers                =  %d\n", gswdev->num_of_shapers);
@@ -2634,10 +2638,14 @@ static void get_gsw_hw_cap(void *cdev)
 		printk("Multicast Hw Snoop               =  %d\n", gswdev->mcsthw_snoop);
 		printk("TFLOW table size                 =  %d\n", gswdev->tftblsize);
 		printk("MAC bridge table size            =  %d\n", gswdev->mactblsize);
-		printk("TFLOW RMON counter table Size    =  %d\n", gswdev->num_of_ifrmon);
-		printk("Payload Table Size               =  %d\n", gswdev->pdtblsize);
-		printk("Extend VLAN Table Size table     =  %d\n", gswdev->num_of_extendvlan);
-		printk("Number of VlanFilter table Size  =  %d\n\n", gswdev->num_of_vlanfilter);
+
+		if (gswdev->gipver == LTQ_GSWIP_3_0 || IS_VRSN_31(gswdev->gipver)) {
+			printk("TFLOW RMON counter table Size    =  %d\n", gswdev->num_of_ifrmon);
+			printk("Payload Table Size               =  %d\n", gswdev->pdtblsize);
+			printk("Extend VLAN Table Size table     =  %d\n", gswdev->num_of_extendvlan);
+			printk("VlanFilter table Size            =  %d\n\n", gswdev->num_of_vlanfilter);
+		}
+		printk("\n");
 	}
 
 }
@@ -3161,11 +3169,12 @@ void *ethsw_api_core_init(ethsw_core_init_t *ethcinit)
 	struct core_ops *ops;
 	void *cdev;
 	u32 ret;
-	printk("Switch Core INIT...................\n");
+	printk("\n########## Switch Core INIT for device = %d ##########\n",ethcinit->sdev);
 
 #ifdef __KERNEL__
 	/* KERNEL_MODE */
 	/** Get Platform Driver Data */
+	if((ethcinit->sdev == LTQ_FLOW_DEV_INT) || (ethcinit->sdev == LTQ_FLOW_DEV_INT_R)) {
 	ops = platform_get_drvdata(ethcinit->pdev);
 
 	/** Get Switch Core Private Data */
@@ -3178,8 +3187,10 @@ void *ethsw_api_core_init(ethsw_core_init_t *ethcinit)
 	}
 
 	/** Clear Switch Core Private Data */
-	memset(PrvData, 0, sizeof(ethsw_api_dev_t));
-
+	} else {
+		/*External switch*/
+		PrvData = ethcinit->pdev;
+	}
 	/** Set Core OPS struct Adress to cdev*/
 	cdev = &PrvData->ops;
 
@@ -3237,8 +3248,11 @@ void *ethsw_api_core_init(ethsw_core_init_t *ethcinit)
 	}
 
 #if defined(CONFIG_LTQ_MULTICAST) && CONFIG_LTQ_MULTICAST
-	/*Reset Multicast software table*/
-	reset_multicast_sw_table(cdev);
+	if((ethcinit->sdev == LTQ_FLOW_DEV_INT) || (ethcinit->sdev == LTQ_FLOW_DEV_INT_R)) {
+		/*Reset Multicast software table*/
+		reset_multicast_sw_table(cdev);
+	}
+
 #endif /*CONFIG_LTQ_MULTICAST*/
 
 	/** TFlow Table Init */
@@ -3249,14 +3263,18 @@ void *ethsw_api_core_init(ethsw_core_init_t *ethcinit)
 	gsw_w32(cdev, PCE_GCTRL_0_MC_VALID_OFFSET,
 		PCE_GCTRL_0_MC_VALID_SHIFT, PCE_GCTRL_0_MC_VALID_SIZE, 0x1);
 #else
-	gsw_pmicro_code_init(cdev);
-	printk("Switch API: PCE MicroCode loaded !!\n");
+	if((ethcinit->sdev == LTQ_FLOW_DEV_INT) || (ethcinit->sdev == LTQ_FLOW_DEV_INT_R)) {
+		gsw_pmicro_code_init(cdev);
+		printk("Switch API: PCE MicroCode loaded !!\n");
+	}
 #endif
 
+	if((ethcinit->sdev == LTQ_FLOW_DEV_INT) || (ethcinit->sdev == LTQ_FLOW_DEV_INT_R)) {
 	if (IS_VRSN_31(PrvData->gipver))
 		switch_core_init(cdev);
 	else
 		legacy_switch_core_init(cdev);
+	}
 
 #ifdef CONFIG_X86_INTEL_CE2700
 	cport_sgmii_config(cdev);
@@ -11648,6 +11666,12 @@ GSW_return_t GSW_CapGet(void *cdev, GSW_cap_t *parm)
 
 	switch (parm->nCapType) {
 	case GSW_CAP_TYPE_PORT:
+		/*Temp work around for the below external switch model*/
+		if(gswdev->gsw_dev == LTQ_FLOW_DEV_EXT_AX3000_F24S)
+		{
+			get_gsw_hw_cap (cdev);
+		}
+
 		gsw_r32(cdev, ETHSW_CAP_1_PPORTS_OFFSET,
 			ETHSW_CAP_1_PPORTS_SHIFT,
 			ETHSW_CAP_1_PPORTS_SIZE, &value);
diff --git a/drivers/net/ethernet/lantiq/switch-api/gsw_flow_core.h b/drivers/net/ethernet/lantiq/switch-api/gsw_flow_core.h
index f70743523d40..8eec8a1f4d58 100644
--- a/drivers/net/ethernet/lantiq/switch-api/gsw_flow_core.h
+++ b/drivers/net/ethernet/lantiq/switch-api/gsw_flow_core.h
@@ -516,9 +516,11 @@ typedef enum {
 typedef enum {
 	LTQ_FLOW_DEV_INT	= 0,
 	LTQ_FLOW_DEV_INT_R	= 1,
+	LTQ_FLOW_DEV_EXT_AX3000_F24S = 2,	
 	LTQ_FLOW_DEV_MAX
 } gsw_devtype_t;
 
+
 typedef struct {
 	u16 pkg_lng;
 	u16 pkg_lng_rng;
@@ -909,6 +911,10 @@ typedef struct {
 	u8 cport;
 	u8 gsw_dev;
 
+	u32 parent_devid;
+	u32 ext_devid;
+	u32 ext_phyid;
+
 	u16 mrtpcnt;			 	/* multicast router port count */
 	u16 meter_cnt;
 	u16 num_of_queues; 			/* Number of priority queues . */
@@ -951,6 +957,9 @@ typedef struct {
 	u16 gipver;
 	void *gswl_base;			/*Base address GSWIP-L */
 	void *gswr_base; 		 	/*Base address GSWIP-R */
+	u32 gswex_base; 		 	/*Base address GSWIP External switch */
+	u32	gswex_sgmiibase; 		/*Base address GSWIP External switch-SGMII */
+
 	void *gsw_base;  			/*Base address GSWITCH */
 
 #ifdef __KERNEL__
diff --git a/drivers/net/ethernet/lantiq/switch-api/gsw_init.c b/drivers/net/ethernet/lantiq/switch-api/gsw_init.c
index c22ac4bcb440..46b07866b13d 100644
--- a/drivers/net/ethernet/lantiq/switch-api/gsw_init.c
+++ b/drivers/net/ethernet/lantiq/switch-api/gsw_init.c
@@ -109,7 +109,7 @@ extern ltq_lowlevel_fkts_t ltq_rt_fkt_tbl;
 
 ioctl_wrapper_init_t ioctlinit;
 ioctl_wrapper_ctx_t *pioctlctl = NULL;
-ethsw_api_dev_t *pEDev0 = NULL, *pEDev1 = NULL;
+ethsw_api_dev_t *pEDev0 = NULL, *pEDev1 = NULL, *pEDevExt = NULL;
 struct ltq_lowlevel_fkts_t	 *ioct_cmd_start_node = NULL;
 
 #if defined(WIN_PC_MODE) && WIN_PC_MODE
@@ -415,8 +415,15 @@ void gsw_r32_raw(void *cdev, short offset, u32 *value)
 		pr_err("%s:%s:%d", __FILE__, __func__, __LINE__);
 		return;
 	}
+	
+	if (pethdev->gsw_base != 0) {
+		*value = gsw1_r32((volatile void *)pethdev->gsw_base + (offset * 4));
+	}
+	else {
+		/*external switch*/
+		gsw_ext_r32(cdev,offset,0,16,value);
+	}
 
-	*value = gsw1_r32((volatile void *)pethdev->gsw_base + (offset * 4));
 }
 
 void gsw_w32_raw(void *cdev, short offset, u32 value)
@@ -428,47 +435,73 @@ void gsw_w32_raw(void *cdev, short offset, u32 value)
 		return;
 	}
 
-	gsw1_w32(value, (volatile void *)(pethdev->gsw_base + (offset * 4)));
+	if (pethdev->gsw_base != 0) {
+		gsw1_w32(value, (volatile void *)(pethdev->gsw_base + (offset * 4)));
+	} else {
+		/*external switch*/
+		gsw_ext_w32(cdev,offset,0,16,value);
+	}
 }
 
-#endif
-
-#ifdef CONFIG_X86_INTEL_CE2700
 
 int GSW_SMDIO_DataRead(void *cdev, GSW_MDIO_data_t *pPar)
 {
-	u32 data;
-	int ret;
+	int ret=0;
+	ethsw_api_dev_t *pethdev = GSW_PDATA_GET(cdev);
 
+#ifdef CONFIG_X86_INTEL_CE2700
+	u32 data;
 	ret = DWC_ETH_QOS_mdio_read_direct(MDIO_BUS_NUMBER_0, C45_ENABLED,
 					   MDIO_ADDR_LANTIQ, MMD_DISABLED, pPar->nAddressReg & 0x1F, &data);
 	pPar->nData = data & 0xFFFF;
+#else
+	struct core_ops *gsw_ops;
+	gsw_ops=gsw_get_swcore_ops(pethdev->parent_devid);
+	gsw_ops->gsw_common_ops.MDIO_DataRead(gsw_ops,pPar);
+
+#endif
 	return ret;
 }
 
 int GSW_SMDIO_DataWrite(void *cdev, GSW_MDIO_data_t *pPar)
 {
-	return DWC_ETH_QOS_mdio_write_direct(MDIO_BUS_NUMBER_0, C45_ENABLED,
+	int ret=0;
+	ethsw_api_dev_t *pethdev = GSW_PDATA_GET(cdev);
+
+#ifdef CONFIG_X86_INTEL_CE2700
+	ret = DWC_ETH_QOS_mdio_write_direct(MDIO_BUS_NUMBER_0, C45_ENABLED,
 					     MDIO_ADDR_LANTIQ, MMD_DISABLED, pPar->nAddressReg & 0x1F, pPar->nData & 0xFFFF);
+#else
+	struct core_ops *gsw_ops;
+	gsw_ops=gsw_get_swcore_ops(pethdev->parent_devid);
+	gsw_ops->gsw_common_ops.MDIO_DataWrite(gsw_ops,pPar);
+#endif
+
+	return ret;
 }
 
 /** read the gswitch register */
-void gsw_r32(void *cdev, short offset, short shift, short size, u32 *value)
+void gsw_ext_r32(void *cdev, short offset, short shift, short size, u32 *value)
 {
 	u32 rvalue, mask;
+	GSW_MDIO_data_t mdio_data;
 	ethsw_api_dev_t *pethdev = GSW_PDATA_GET(cdev);
 
-	GSW_MDIO_data_t mdio_data;
-	mdio_data.nAddressDev = 0x1F;
+	if (pethdev == NULL) {
+		pr_err("%s:%s:%d", __FILE__, __func__, __LINE__);
+		return;
+	}
+
+	mdio_data.nAddressDev = pethdev->ext_phyid;
 	mdio_data.nAddressReg = 0x1F;
 
-	if ((offset & 0xD000) == 0xD000)
+	if ((offset & pethdev->gswex_sgmiibase) == 0xD000)
 		mdio_data.nData = (offset);
 	else
-		mdio_data.nData = (offset | 0xE000);
+		mdio_data.nData = (offset | pethdev->gswex_base);
 
 	GSW_SMDIO_DataWrite(cdev, &mdio_data);
-	mdio_data.nAddressDev = 0x1F;
+	mdio_data.nAddressDev = pethdev->ext_phyid;
 	mdio_data.nAddressReg = 0x00;
 	mdio_data.nData = 0;
 	GSW_SMDIO_DataRead(cdev, &mdio_data);
@@ -477,12 +510,14 @@ void gsw_r32(void *cdev, short offset, short shift, short size, u32 *value)
 	mask = (1 << size) - 1;
 	rvalue = (rvalue >> shift);
 	*value = (rvalue & mask);
+	
 }
 
 /** read and update the GSWIP register */
-void gsw_w32(void *cdev, short offset, short shift, short size, u32 value)
+void gsw_ext_w32(void *cdev, short offset, short shift, short size, u32 value)
 {
 	u32 rvalue, mask;
+	GSW_MDIO_data_t mdio_data;
 	ethsw_api_dev_t *pethdev = GSW_PDATA_GET(cdev);
 
 	if (pethdev == NULL) {
@@ -490,19 +525,18 @@ void gsw_w32(void *cdev, short offset, short shift, short size, u32 value)
 		return;
 	}
 
-	GSW_MDIO_data_t mdio_data;
-	mdio_data.nAddressDev = 0x1F;
+	mdio_data.nAddressDev = pethdev->ext_phyid;
 	mdio_data.nAddressReg = 0x1F;
 
-	if ((offset & 0xD000) == 0xD000)
+	if ((offset & pethdev->gswex_sgmiibase) == 0xD000)
 		mdio_data.nData = (offset);
 	else
-		mdio_data.nData = (offset | 0xE000);
+		mdio_data.nData = (offset | pethdev->gswex_base);
 
 	GSW_SMDIO_DataWrite(cdev, &mdio_data);
 
 	if (size != 16) {
-		mdio_data.nAddressDev = 0x1F;
+		mdio_data.nAddressDev = pethdev->ext_phyid;;
 		mdio_data.nAddressReg = 0x00;
 		mdio_data.nData = 0;
 		GSW_SMDIO_DataRead(cdev, &mdio_data);
@@ -516,24 +550,25 @@ void gsw_w32(void *cdev, short offset, short shift, short size, u32 value)
 		/*  Mask out the bit field from the read register and place in the new value */
 		value = (rvalue & ~mask) | value ;
 
-		mdio_data.nAddressDev = 0x1F;
+		mdio_data.nAddressDev = pethdev->ext_phyid;
 		mdio_data.nAddressReg = 0x1F;
 
-		if ((offset & 0xD000) == 0xD000)
+		if ((offset & pethdev->gswex_sgmiibase) == 0xD000)
 			mdio_data.nData = (offset);
 		else
-			mdio_data.nData = (offset | 0xE000);
+			mdio_data.nData = (offset | pethdev->gswex_base);
 
 		GSW_SMDIO_DataWrite(cdev, &mdio_data);
 	}
 
-	mdio_data.nAddressDev = 0x1F;
+	mdio_data.nAddressDev = pethdev->ext_phyid;
 	mdio_data.nAddressReg = 0x0;
 	mdio_data.nData = value;
 	GSW_SMDIO_DataWrite(cdev, &mdio_data);
 }
 
-#else /* If not CONFIG_X86_INTEL_CE2700*/
+#endif
+
 
 #if defined(UART_INTERFACE) && UART_INTERFACE
 /* UART inetrface suppot function */
@@ -565,6 +600,7 @@ void gsw_r32(void *cdev, short offset, short shift, short size, u32 *value)
 	}
 
 	if (pethdev->gsw_base != 0) {
+
 #if defined(UART_INTERFACE) && UART_INTERFACE
 		u32 ro;
 		ro = (uintptr_t)(pethdev->gsw_base + (offset * 4));
@@ -576,8 +612,17 @@ void gsw_r32(void *cdev, short offset, short shift, short size, u32 *value)
 		rvalue = (rvalue >> shift);
 		*value = (rvalue & mask);
 	} else {
-		pr_err("%s:%s:%d,(ERROR)\n", __FILE__, __func__, __LINE__);
+
+#ifdef __KERNEL__
+	/*external switch*/
+		if(pethdev->ext_devid) {
+			gsw_ext_r32(cdev,offset,shift,size,value);
+		}
+		else
+#endif
+			pr_err("%s:%s:%d,(ERROR)\n", __FILE__, __func__, __LINE__);
 	}
+	
 }
 
 /** read and update the GSWIP register */
@@ -611,11 +656,17 @@ void gsw_w32(void *cdev, short offset, short shift, short size, u32 value)
 		gsw1_w32(value, ((volatile void *)pethdev->gsw_base + (offset * 4)));
 #endif /* UART_INTERFACE */
 	} else {
-		pr_err("%s:%s:%d,(ERROR)\n", __FILE__, __func__, __LINE__);
+
+#ifdef __KERNEL__
+		/*external switch*/
+		if(pethdev->ext_devid)
+			gsw_ext_w32(cdev,offset,shift,size,value);
+		else
+#endif
+			pr_err("%s:%s:%d,(ERROR)\n", __FILE__, __func__, __LINE__);
 	}
 }
 
-#endif
 
 #ifdef CONFIG_X86_INTEL_CE2700
 void inline gsw_p7_netss_write(void *base, unsigned int off, unsigned int val)
@@ -858,6 +909,10 @@ int ltq_gsw_api_register(struct platform_device *pdev)
 	struct gswss *gswdev = dev_get_drvdata(pdev->dev.parent);
 	u32 device_id = pdev->dev.parent->id;
 
+	/** Clear core_init */
+	memset(&core_init, 0, sizeof(ethsw_core_init_t));
+
+
 	/*Initialize global array*/
 	gswdev->core_dev = pdev;
 
@@ -908,6 +963,7 @@ int ltq_gsw_api_register(struct platform_device *pdev)
 		       __FILE__, __func__, __LINE__, (u32)addr_gswr);
 	}
 
+
 	/* Register Char Device */
 	if (device_id == 0) {
 		result = gsw_api_drv_register(GSW_API_MAJOR_NUMBER);
@@ -942,6 +998,9 @@ int ltq_gsw_api_register(struct platform_device *pdev)
 	}
 
 	if (device_id == 1) {
+		ethsw_api_dev_t *PrvData,*ExtPrvData;
+		struct core_ops *ops;
+
 		/* Init FLOW Switch Core Layer */
 		core_init.sdev = LTQ_FLOW_DEV_INT_R;
 		core_init.gsw_base_addr = addr_gswr;
@@ -958,7 +1017,64 @@ int ltq_gsw_api_register(struct platform_device *pdev)
 		pEDev1->gsw_dev = LTQ_FLOW_DEV_INT_R;
 		pEDev1->gswr_base = addr_gswr;
 		pEDev1->gsw_base = addr_gswr;
+
+		/*Check whether External switch is attched to GSWIP-R*/
+		/** Get Platform Driver Data of GSWIP-R */
+		ops = platform_get_drvdata(pdev);
+		/** Get Switch Core Private Data */
+		PrvData = container_of(ops, ethsw_api_dev_t, ops);
+
+		if(PrvData->ext_devid == LTQ_FLOW_DEV_EXT_AX3000_F24S) {
+			ethsw_core_init_t ext_core_init;
+			
+			/** Clear core_init */
+			memset(&ext_core_init, 0, sizeof(ethsw_core_init_t));
+
+#if 0
+			/*hardcoded temp setting to power on F24s
+			  Note : will be removed when check in ugw 8*/
+			gsw1_w32(0x800,	(volatile void *)0xb6080120);
+			gsw1_w32(0x7c,	(volatile void *)0xbc003c1c);
+			gsw1_w32(0x180,	(volatile void *)0xba003d10);
+			gsw1_w32(0x100800,  (volatile void *)0xb6080120);
+			gsw1_w32(0x80000000,  (volatile void *)0xb6000010);
+			gsw1_w32(0x0,  (volatile void *)0xb6000010);
+			gsw1_w32(0xff,  (volatile void *)0xb6D00034);
+			gsw1_w32(0xff,  (volatile void *)0xb6D00044);
+			gsw1_w32(0x00008800,  (volatile void *)0xb6D002B8);
+#endif
+			ExtPrvData = (void *)kmalloc(sizeof(ethsw_api_dev_t), GFP_KERNEL);
+			if (ExtPrvData== NULL) {
+				pr_err("%s:%s:%d (Exterenal switch:LTQ_FLOW_DEV_EXT_AX3000_F24S Init Failed)\n",
+			       __FILE__, __func__, __LINE__);
+				return -1;
+			}
+			memset(ExtPrvData, 0, sizeof(ethsw_api_dev_t));
+			
+			/*init external switch private data*/
+			ExtPrvData->cport = GSW_2X_SOC_CPU_PORT;
+			ExtPrvData->gsw_dev = LTQ_FLOW_DEV_EXT_AX3000_F24S;
+			ExtPrvData->parent_devid = LTQ_FLOW_DEV_INT_R;
+			ExtPrvData->ext_devid = PrvData->ext_devid;
+			ExtPrvData->ext_phyid = PrvData->ext_phyid;
+			ExtPrvData->gswex_base = PrvData->gswex_base;
+			ExtPrvData->gswex_sgmiibase = PrvData->gswex_sgmiibase;
+			
+			/* Init External Switch Core Layer */
+			ext_core_init.sdev = LTQ_FLOW_DEV_EXT_AX3000_F24S;
+			ext_core_init.gsw_base_addr = NULL;
+			ext_core_init.pdev = (void *)ExtPrvData;
+			pEDevExt = ethsw_api_core_init(&ext_core_init);
+			if (pEDevExt == NULL) {
+				pr_err("%s:%s:%d (Init Failed)\n",
+				       __FILE__, __func__, __LINE__);
+				return -1;
+			}
+			
+		}
+
 	}
+	
 
 	if (device_id == 0) {
 		ioct_cmd_start_node = gsw_create_ioctl_cmd_linklist(&pEDev0->ops);
@@ -975,12 +1091,18 @@ int ltq_gsw_api_register(struct platform_device *pdev)
 
 	/* add Internal switch */
 	if ((device_id == 0) && pioctlctl && pEDev0)
-		ioctl_wrapper_dev_add(pioctlctl, &pEDev0->ops, LTQ_INT_GSWITCH);
+		ioctl_wrapper_dev_add(pioctlctl, &pEDev0->ops, LTQ_FLOW_DEV_INT);
 
 	/* add Internal switch */
-	if ((device_id == 1) && pioctlctl && pEDev1)
-		ioctl_wrapper_dev_add(pioctlctl, &pEDev1->ops, LTQ_EXT_GSWITCH);
+	if ((device_id == 1) && pioctlctl && pEDev1) {
+		ioctl_wrapper_dev_add(pioctlctl, &pEDev1->ops, LTQ_FLOW_DEV_INT_R);
+		
+		/* Init wrapper , if external switch attached to GSWIP-R*/
+		if ((pEDev1->ext_devid == LTQ_FLOW_DEV_EXT_AX3000_F24S) && pioctlctl && pEDevExt) {
+			ioctl_wrapper_dev_add(pioctlctl, &pEDevExt->ops, LTQ_FLOW_DEV_EXT_AX3000_F24S);
+		}
 
+	}
 	return 0;
 }
 #endif /* CONFIG_SOC_GRX500 */
diff --git a/drivers/net/ethernet/lantiq/switch-api/gsw_init.h b/drivers/net/ethernet/lantiq/switch-api/gsw_init.h
index 220c6d6f3553..fb244459a61b 100644
--- a/drivers/net/ethernet/lantiq/switch-api/gsw_init.h
+++ b/drivers/net/ethernet/lantiq/switch-api/gsw_init.h
@@ -73,7 +73,7 @@
 /*#include <xway/switch-api/lantiq_gsw_routing.h>*/
 /*#include <xway/switch-api/gsw_types.h>*/
 
-#define LTQ_GSW_DEV_MAX 2
+#define LTQ_GSW_DEV_MAX 3
 #endif /* KERNEL_MODE */
 
 #if defined(WIN_PC_MODE) && WIN_PC_MODE
@@ -194,6 +194,8 @@ int pc_uart_datawrite_32(u32 Offset, u32 value);
 #ifdef __KERNEL__
 void gsw_r32_raw(void *cdev, short offset, u32 *value);
 void gsw_w32_raw(void *cdev, short offset, u32 value);
+void gsw_ext_r32(void *cdev, short offset, short shift, short size, u32 *value);
+void gsw_ext_w32(void *cdev, short offset, short shift, short size, u32 value);
 #endif
 
 static inline u32 gsw_field_r32(u32 rval, short shift, short size)
diff --git a/drivers/net/ethernet/lantiq/switch-api/gswip_dev/gsw_dev.c b/drivers/net/ethernet/lantiq/switch-api/gswip_dev/gsw_dev.c
index d5bd355e6634..254c3289144d 100644
--- a/drivers/net/ethernet/lantiq/switch-api/gswip_dev/gsw_dev.c
+++ b/drivers/net/ethernet/lantiq/switch-api/gswip_dev/gsw_dev.c
@@ -19,10 +19,13 @@
 #include <gswss_api.h>
 #include <gsw_flow_core.h>
 
-#define GRX500_MACH_NAME        "lantiq,xrx500"
-#define FALC_MACH_NAME          "intel,falconmx"
-#define DEVID_STR               "intel,gsw-devid"
-
+#define GRX500_MACH_NAME        		"lantiq,xrx500"
+#define FALC_MACH_NAME          		"intel,falconmx"
+#define DEVID_STR               		"intel,gsw-devid"
+#define EXTERNAL_SWITCH_DEVID    		"intel,gsw_ext-devid"
+#define EXTERNAL_SWITCH_PHYID			"intel,gsw_ext-phyid"
+#define EXTERNAL_SWITCH_BASEADDR		"intel,gsw_ext-baseaddr"
+#define EXTERNAL_SWITCH_SGMIIBASEADDR   "intel,gsw_ext-sgmiibaseaddr"
 /* Structure for GSWIP Subsystem operations
  * used to start Sub-Functional Drivers
  */
@@ -31,6 +34,7 @@ struct gsw_cell {
 	int                       cell_id;
 	u32                       device_id;
 	u32                       prod_id;
+
 	/* platform data passed to the sub devices drivers */
 	void                      *platform_data;
 	u32                       pdata_size;
@@ -274,11 +278,20 @@ static int gsw_add_switchdev(struct gsw_cell *gsw_dev_cell, u32 devid)
 	if (!switch_pdata)
 		return -ENOMEM;
 
+	/** Clear Switch Core Private Data */
+	memset(switch_pdata, 0, sizeof(ethsw_api_dev_t));
 	gsw_dev_cell->drv_data = (void *)(&switch_pdata->ops);
 	gsw_dev_cell->drv_data_size = sizeof(switch_pdata->ops);
 
 	of_irq_to_resource_table(gsw_dev_cell->of_node, &irqres, 1);
 	switch_pdata->irq_num = irqres.start;
+	
+	if(devid == 1) {
+		of_property_read_u32(gsw_dev_cell->of_node,EXTERNAL_SWITCH_DEVID,&switch_pdata->ext_devid);
+		of_property_read_u32(gsw_dev_cell->of_node,EXTERNAL_SWITCH_PHYID,&switch_pdata->ext_phyid);
+		of_property_read_u32(gsw_dev_cell->of_node,EXTERNAL_SWITCH_BASEADDR,&switch_pdata->gswex_base);
+		of_property_read_u32(gsw_dev_cell->of_node,EXTERNAL_SWITCH_SGMIIBASEADDR,&switch_pdata->gswex_sgmiibase);
+	}
 
 #ifndef CONFIG_OF
 
