From d15ccb35c487918e9f0949519f05e275bb4162d2 Mon Sep 17 00:00:00 2001
From: Wu Zhixian <zhixianx.wu@intel.com>
Date: Wed, 27 Feb 2019 15:42:47 +0800
Subject: [PATCH] remove unused file

remove from Makefile

remove from Kconfig

fix issue
---
 drivers/pinctrl/Kconfig          |   6 -
 drivers/pinctrl/Makefile         |   1 -
 drivers/pinctrl/pinctrl-xrx500.c | 997 ---------------------------------------
 3 files changed, 1004 deletions(-)

diff --git a/drivers/pinctrl/Kconfig b/drivers/pinctrl/Kconfig
index 5471b39163c4..9478710d9ee5 100755
--- a/drivers/pinctrl/Kconfig
+++ b/drivers/pinctrl/Kconfig
@@ -287,12 +287,6 @@ config PINCTRL_SYSFS
     help
       Say Y here to add a sysfs interface for pinctrl for Lantiq SoCs.
 
-	
-config PINCTRL_XRX500
-	bool "Lantiq XRX500 SoC pinctrl driver"
-	depends on SOC_GRX500
-	depends on PINCTRL_LANTIQ
-
 config PINCTRL_TB10X
 	bool
 	depends on OF && ARC_PLAT_TB10X
diff --git a/drivers/pinctrl/Makefile b/drivers/pinctrl/Makefile
index eb99939ff503..11b73a3a084b 100755
--- a/drivers/pinctrl/Makefile
+++ b/drivers/pinctrl/Makefile
@@ -17,7 +17,6 @@ obj-$(CONFIG_PINCTRL_AMD)	+= pinctrl-amd.o
 obj-$(CONFIG_PINCTRL_DIGICOLOR)	+= pinctrl-digicolor.o
 obj-$(CONFIG_PINCTRL_FALCON)	+= pinctrl-falcon.o
 obj-$(CONFIG_PINCTRL_MAX77620)	+= pinctrl-max77620.o
-obj-$(CONFIG_PINCTRL_XRX500)	+= pinctrl-xrx500.o
 obj-$(CONFIG_PINCTRL_MESON)	+= meson/
 obj-$(CONFIG_PINCTRL_OXNAS)	+= pinctrl-oxnas.o
 obj-$(CONFIG_PINCTRL_PALMAS)	+= pinctrl-palmas.o
diff --git a/drivers/pinctrl/pinctrl-xrx500.c b/drivers/pinctrl/pinctrl-xrx500.c
deleted file mode 100755
index ce2892b9dcd4..000000000000
--- a/drivers/pinctrl/pinctrl-xrx500.c
+++ /dev/null
@@ -1,997 +0,0 @@
-/*
- *  linux/drivers/pinctrl/pinmux-xrx500.c
- *  based on linux/drivers/pinctrl/pinmux-falcon.c
- *
- *  This program is free software; you can redistribute it and/or modify it
- *  under the terms of the GNU General Public License version 2 as published
- *  by the Free Software Foundation.
- *
- *  Copyright (C) 2014 Kavitha  Subramanian <s.kavitha.EE@lantiq.com>
- */
-
-#include <linux/gpio.h>
-#include <linux/interrupt.h>
-#include <linux/slab.h>
-#include <linux/export.h>
-#include <linux/err.h>
-#include <linux/module.h>
-#include <linux/of.h>
-#include <linux/of_platform.h>
-#include <linux/of_address.h>
-#include <linux/of_gpio.h>
-#include <linux/platform_device.h>
-
-#ifdef CONFIG_PINCTRL_SYSFS
-#include <linux/device.h>
-#include <linux/kdev_t.h>
-#endif
-#include "pinctrl-lantiq.h"
-
-#include <lantiq_soc.h>
-
-#define PORTS			2
-#define PINS			32
-#define PORT(x)			((x) / PINS)
-#define PORT_PIN(x)			((x) % PINS)
-#define GRX500_COMP_STR	"lantiq,pinctrl-xrx500"
-#define IRX200_COMP_STR	"lantiq,pinctrl-irx200"
-#define FALCONMX_COMP_STR	"intel,pinctrl-falconmx"
-#define PORTMUX61_OFFSET	0x74
-#define REG_HOLE_OFFSET	0x7c
-/* Multiplexer Control Register */
-#define LTQ_PADC_MUX(p)		(PORT_PIN(p) * 0x4)
-/* Pull Up Enable Register */
-#define LTQ_PADC_PUEN		0x80
-/* Pull Down Enable Register */
-#define LTQ_PADC_PDEN		0x84
-/* Slew Rate Control Register */
-#define LTQ_PADC_SRC		0x88
-/* Drive Current Control Register */
-#define LTQ_PADC_DCC0		0x8C
-/* Drive Current Control Register */
-#define LTQ_PADC_DCC1		0x90
-/* Open Drain Register */
-#define LTQ_PADC_OD		0x94
-
-/* Pad Control Availability Register */
-#define LTQ_PADC_AVAIL		0x98
-
-#define pad_r32(p, reg)		ltq_r32(p + reg)
-#define pad_w32(p, val, reg)	ltq_w32(val, p + reg)
-#define pad_w32_mask(c, clear, set, reg) \
-		pad_w32(c, (pad_r32(c, reg) & ~(clear)) | (set), reg)
-
-#define pad_getbit(m, r, p)	(!!(ltq_r32(m + r) & (1 << p)))
-#define pad_setbit(m, r, p)	ltq_w32_mask(0, BIT(p), m + r)
-#define pad_clearbit(m, r, p)	ltq_w32_mask(BIT(p), 0, m + r)
-
-#define MFP_XRX500(a, f0, f1, f2, f3)		\
-{						\
-	.name = #a,				\
-	.pin = a,				\
-	.func = {				\
-		XRX500_MUX_##f0,		\
-		XRX500_MUX_##f1,		\
-		XRX500_MUX_##f2,		\
-		XRX500_MUX_##f3,		\
-		XRX500_MUX_NONE,		\
-	},					\
-}
-#define MFP_FLCNMX(a, f0, f1, f2, f3, f4)		\
-{						\
-	.name = #a,				\
-	.pin = a,				\
-	.func = {				\
-		XRX500_MUX_##f0,		\
-		XRX500_MUX_##f1,		\
-		XRX500_MUX_##f2,		\
-		XRX500_MUX_##f3,		\
-		XRX500_MUX_##f4,		\
-	},					\
-}
-
-#define GRP_MUX(a, m, p)	\
-{				\
-	.name = a,		\
-	.mux = XRX500_MUX_##m,	\
-	.pins = p,		\
-	.npins = ARRAY_SIZE(p),	\
-}
-
-enum xrx500_mux {
-	XRX500_MUX_GPIO = 0,
-	XRX500_MUX_RST,
-	XRX500_MUX_NTR,
-	XRX500_MUX_PPS,
-	XRX500_MUX_MDIO,
-	XRX500_MUX_LEDC,
-	XRX500_MUX_SPI0,
-	XRX500_MUX_SPI1,
-	XRX500_MUX_ASC,
-	XRX500_MUX_I2C,
-	XRX500_MUX_HOSTIF,
-	XRX500_MUX_SLIC,
-	XRX500_MUX_JTAG,
-	XRX500_MUX_PCM,
-	XRX500_MUX_MII,
-	XRX500_MUX_PHY,
-	XRX500_MUX_WLAN,
-	XRX500_MUX_USB,
-	XRX500_MUX_CGU,
-	XRX500_MUX_EBU,
-	XRX500_MUX_TDM,
-	XRX500_MUX_QSPI,
-	XRX500_MUX_PON,
-	XRX500_MUX_UART,
-	XRX500_MUX_LED_PAR,
-	XRX500_MUX_PCIE,
-	XRX500_MUX_ACA,
-	XRX500_MUX_NONE = 0xffff,
-};
-
-
-static struct pinctrl_pin_desc xrx500_pads[PORTS * PINS];
-static int pad_count[PORTS];
-static void lantiq_load_pin_desc(struct pinctrl_pin_desc *d, int bank, int len)
-{
-	int base = bank * PINS;
-	int i;
-
-	for (i = 0; i < len; i++) {
-		/* strlen("ioXYZ") + 1 = 6 */
-		char *name = kzalloc(6, GFP_KERNEL);
-		if (name) {
-			snprintf(name, 6, "io%d", base + i);
-			d[i].name = name;
-		} else {
-			pr_err("Failed to alloc for pin desc name\r\n");
-		}
-		d[i].number = base + i;
-	}
-	pad_count[bank] = len;
-}
-static uint32_t default_reg_bank0[] = {
-0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
-0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0,
-0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1,
-0x1, 0x0, 0x0, 0x0, 0x1, 0x1, 0x1, 0x1,
-0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xF1EFEFFF
-};
-static uint32_t default_reg_bank1[] = {
-0x0,
-0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
-0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1,
-0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1,
-0x1, 0x0, 0x1, 0x1, 0x1, 0x0, 0x0, 0x0,
-0x0, 0x0, 0x0, 0x3BFF0C1F
-};
-static struct ltq_mfp_pin flcnmx_mfp[] = {
-	MFP_FLCNMX(GPIO0,	GPIO,	LED_PAR,	QSPI,	SPI0,	NONE),
-	MFP_FLCNMX(GPIO1,	GPIO,	LED_PAR,	QSPI,	SPI0,	NONE),
-	MFP_FLCNMX(GPIO2,	GPIO,	NONE,		QSPI,	SPI0,	NONE),
-	MFP_FLCNMX(GPIO3,	GPIO,	NONE,		QSPI,	SPI0,	NONE),
-	MFP_FLCNMX(GPIO4,	GPIO,	NONE,		QSPI,	SPI0,	NONE),
-	MFP_FLCNMX(GPIO5,	GPIO,	NONE,		QSPI,	SPI0,	NONE),
-	MFP_FLCNMX(GPIO6,	GPIO,	NONE,		SLIC,	SPI0,	NONE),
-	MFP_FLCNMX(GPIO7,	GPIO,	NONE,		SLIC,	SPI0,	NONE),
-	MFP_FLCNMX(GPIO8,	GPIO,	PCIE,		SLIC,	SPI0,	NONE),
-	MFP_FLCNMX(GPIO9,	GPIO,	NONE,		SLIC,	SPI0,	TDM),
-	MFP_FLCNMX(GPIO10,	GPIO,	MDIO,		I2C,	SPI0,	PCIE),
-	MFP_FLCNMX(GPIO11,	GPIO,	MDIO,		I2C,	SPI0,	PCIE),
-	MFP_FLCNMX(GPIO12,	GPIO,	LED_PAR,	NONE,	SPI1,	NONE),
-	MFP_FLCNMX(GPIO13,	GPIO,	LED_PAR,	NONE,	SPI1,	NONE),
-	MFP_FLCNMX(GPIO14,	GPIO,	LED_PAR,	LEDC,	NONE,	NONE),
-	MFP_FLCNMX(GPIO15,	GPIO,	LED_PAR,	LEDC,	NONE,	NONE),
-	MFP_FLCNMX(GPIO16,	GPIO,	LED_PAR,	LEDC,	NONE,	NONE),
-	MFP_FLCNMX(GPIO17,	GPIO,	LED_PAR,	NONE,	SPI1,	NONE),
-	MFP_FLCNMX(GPIO18,	GPIO,	LED_PAR,	CGU,	SPI1,	TDM),
-	MFP_FLCNMX(GPIO19,	GPIO,	LED_PAR,	CGU,	NONE,	NONE),
-	MFP_FLCNMX(GPIO20,	GPIO,	LED_PAR,	PON,	NONE,	ACA),
-	MFP_FLCNMX(GPIO21,	GPIO,	LED_PAR,	PON,	NONE,	ACA),
-	MFP_FLCNMX(GPIO22,	GPIO,	NONE,		PON,	NONE,	ACA),
-	MFP_FLCNMX(GPIO23,	GPIO,	NONE,		PON,	SPI0,	ACA),
-	MFP_FLCNMX(GPIO24,	GPIO,	MDIO,		PON,	SPI0,	TDM),
-	MFP_FLCNMX(GPIO25,	GPIO,	MDIO,		PON,	SPI0,	TDM),
-	MFP_FLCNMX(GPIO26,	GPIO,	NONE,		I2C,	NONE,	NONE),
-	MFP_FLCNMX(GPIO27,	GPIO,	NONE,		I2C,	NONE,	NONE),
-	MFP_FLCNMX(GPIO28,	GPIO,	NONE,		CGU,	NONE,	NONE),
-	MFP_FLCNMX(GPIO29,	GPIO,	NONE,		CGU,	NONE,	NONE),
-	MFP_FLCNMX(GPIO30,	GPIO,	UART,		NONE,	NONE,	NONE),
-	MFP_FLCNMX(GPIO31,	GPIO,	UART,		NONE,	NONE,	NONE),
-	MFP_FLCNMX(GPIO32,	GPIO,	LED_PAR,	PON,	NONE,	NONE),
-	MFP_FLCNMX(GPIO33,	GPIO,	LED_PAR,	PON,	NONE,	NONE),
-	MFP_FLCNMX(GPIO34,	GPIO,	LED_PAR,	PON,	NONE,	NONE),
-	MFP_FLCNMX(GPIO35,	GPIO,	LED_PAR,	PON,	NONE,	NONE),
-	MFP_FLCNMX(GPIO36,	GPIO,	LED_PAR,	PON,	NONE,	NONE),
-	MFP_FLCNMX(GPIO37,	GPIO,	LED_PAR,	PON,	NONE,	NONE),
-	MFP_FLCNMX(GPIO38,	GPIO,	LED_PAR,	PON,	NONE,	NONE),
-	MFP_FLCNMX(GPIO39,	GPIO,	LED_PAR,	NONE,	NONE,	NONE),
-};
-
-static struct ltq_mfp_pin xrx500_mfp[] = {
-	/*	pin		f0	f1	f2	f3 */
-	MFP_XRX500(GPIO0,	GPIO,	NONE,	PHY,	NONE),
-	MFP_XRX500(GPIO1,	GPIO,	PHY,	SLIC,	NONE),
-	MFP_XRX500(GPIO2,	GPIO,	PHY,	USB,	NONE),
-	MFP_XRX500(GPIO3,	GPIO,	NONE,	CGU,	NTR),
-	MFP_XRX500(GPIO4,	GPIO,	LEDC,	PHY,	PHY),
-	MFP_XRX500(GPIO5,	GPIO,	LEDC,	PHY,	PHY),
-	MFP_XRX500(GPIO6,	GPIO,	LEDC,	PHY,	PHY),
-	MFP_XRX500(GPIO7,	GPIO,	CGU,	PHY,	USB),
-	MFP_XRX500(GPIO8,	GPIO,	CGU,	NONE,	PHY),
-	MFP_XRX500(GPIO9,	GPIO,	WLAN,	PHY,	NONE),
-	MFP_XRX500(GPIO10,	GPIO,	SPI1,	SPI0,	NONE),
-	MFP_XRX500(GPIO11,	GPIO,	SPI1,	WLAN,	SPI0),
-	MFP_XRX500(GPIO12,	NONE,	NONE,	NONE,	NONE),
-	MFP_XRX500(GPIO13,	GPIO,	EBU,	NONE,	NONE),
-	MFP_XRX500(GPIO14,	GPIO,	NONE,	SPI1,	PHY),
-	MFP_XRX500(GPIO15,	GPIO,	SPI0,	PHY,	NONE),
-	MFP_XRX500(GPIO16,	GPIO,	SPI0,	NONE,	PHY),
-	MFP_XRX500(GPIO17,	GPIO,	SPI0,	NONE,	PHY),
-	MFP_XRX500(GPIO18,	GPIO,	SPI0,	NONE,	PHY),
-	MFP_XRX500(GPIO19,	GPIO,	SPI1,	NONE,	PHY),
-	MFP_XRX500(GPIO20,	NONE,	NONE,	NONE,	NONE),
-	MFP_XRX500(GPIO21,	GPIO,	I2C,	NONE,	NONE),
-	MFP_XRX500(GPIO22,	GPIO,	I2C,	NONE,	PHY),
-	MFP_XRX500(GPIO23,	GPIO,	EBU,	NONE,	NONE),
-	MFP_XRX500(GPIO24,	GPIO,	EBU,	NONE,	NONE),
-	MFP_XRX500(GPIO25,	NONE,	NONE,	NONE,	NONE),
-	MFP_XRX500(GPIO26,	NONE,	NONE,	NONE,	NONE),
-	MFP_XRX500(GPIO27,	NONE,	NONE,	NONE,	NONE),
-	MFP_XRX500(GPIO28,	GPIO,	MII,	PHY,	TDM),
-	MFP_XRX500(GPIO29,	GPIO,	MII,	PHY,	TDM),
-	MFP_XRX500(GPIO30,	GPIO,	MII,	PHY,	TDM),
-	MFP_XRX500(GPIO31,	GPIO,	MII,	NONE,	TDM),
-
-	MFP_XRX500(GPIO32,	GPIO,	MDIO,	NONE,	NONE),
-	MFP_XRX500(GPIO33,	GPIO,	MDIO,	NONE,	NONE),
-	MFP_XRX500(GPIO34,	GPIO,	NONE,	SLIC,	PHY),
-	MFP_XRX500(GPIO35,	GPIO,	NONE,	SLIC,	PHY),
-	MFP_XRX500(GPIO36,	GPIO,	NONE,	SLIC,	PHY),
-	MFP_XRX500(GPIO37,	NONE,	NONE,	NONE,	NONE),
-	MFP_XRX500(GPIO38,	NONE,	NONE,	NONE,	NONE),
-	MFP_XRX500(GPIO39,	NONE,	NONE,	NONE,	NONE),
-	MFP_XRX500(GPIO40,	NONE,	NONE,	NONE,	NONE),
-	MFP_XRX500(GPIO41,	NONE,	NONE,	NONE,	NONE),
-	MFP_XRX500(GPIO42,	GPIO,	MDIO,	NONE,	NONE),
-	MFP_XRX500(GPIO43,	GPIO,	MDIO,	NONE,	NONE),
-	MFP_XRX500(GPIO44,	NONE,	NONE,	NONE,	NONE),
-	MFP_XRX500(GPIO45,	NONE,	NONE,	NONE,	NONE),
-	MFP_XRX500(GPIO46,	NONE,	NONE,	NONE,	NONE),
-	MFP_XRX500(GPIO47,	NONE,	NONE,	NONE,	NONE),
-	MFP_XRX500(GPIO48,	GPIO,	EBU,	NONE,	NONE),
-	MFP_XRX500(GPIO49,	GPIO,	EBU,	NONE,	NONE),
-	MFP_XRX500(GPIO50,	GPIO,	EBU,	NONE,	NONE),
-	MFP_XRX500(GPIO51,	GPIO,	EBU,	NONE,	NONE),
-	MFP_XRX500(GPIO52,	GPIO,	EBU,	NONE,	NONE),
-	MFP_XRX500(GPIO53,	GPIO,	EBU,	NONE,	NONE),
-	MFP_XRX500(GPIO54,	GPIO,	EBU,	NONE,	NONE),
-	MFP_XRX500(GPIO55,	GPIO,	EBU,	NONE,	NONE),
-	MFP_XRX500(GPIO56,	GPIO,	EBU,	NONE,	NONE),
-	MFP_XRX500(GPIO57,	GPIO,	EBU,	NONE,	NONE),
-	MFP_XRX500(GPIO58,	NONE,	NONE,	NONE,	NONE),
-	MFP_XRX500(GPIO59,	GPIO,	EBU,	NONE,	NONE),
-	MFP_XRX500(GPIO60,	GPIO,	EBU,	NONE,	NONE),
-	MFP_XRX500(GPIO61,	GPIO,	EBU,	NONE,	NONE),
-	MFP_XRX500(GPIO62,	NONE,	NONE,	NONE,	NONE),
-	MFP_XRX500(GPIO63,	NONE,	NONE,	NONE,	NONE),
-};
-
-static struct ltq_mfp_pin irx200_mfp[] = {
-	MFP_XRX500(GPIO0,	GPIO,	NONE,	PHY,	NONE),
-	MFP_XRX500(GPIO1,	GPIO,	PHY,	SLIC,	NONE),
-	MFP_XRX500(GPIO2,	GPIO,	PHY,	USB,	NONE),
-	MFP_XRX500(GPIO3,	GPIO,	NONE,	CGU,	NTR),
-	MFP_XRX500(GPIO4,	GPIO,	LEDC,	PHY,	PHY),
-	MFP_XRX500(GPIO5,	GPIO,	LEDC,	PHY,	PHY),
-	MFP_XRX500(GPIO6,	GPIO,	LEDC,	PHY,	PHY),
-	MFP_XRX500(GPIO7,	GPIO,	CGU,	PHY,	USB),
-	MFP_XRX500(GPIO8,	GPIO,	CGU,	NONE,	PHY),
-	MFP_XRX500(GPIO9,	GPIO,	WLAN,	PHY,	NONE),
-	MFP_XRX500(GPIO10,	GPIO,	NONE,	NONE,	NONE),
-	MFP_XRX500(GPIO11,	GPIO,	NONE,	NONE,	NONE),
-	MFP_XRX500(GPIO12,	NONE,	NONE,	NONE,	NONE),
-	MFP_XRX500(GPIO13,	GPIO,	EBU,	NONE,	NONE),
-	MFP_XRX500(GPIO14,	GPIO,	NONE,	SPI1,	PHY),
-	MFP_XRX500(GPIO15,	GPIO,	SPI0,	PHY,	NONE),
-	MFP_XRX500(GPIO16,	GPIO,	SPI0,	NONE,	PHY),
-	MFP_XRX500(GPIO17,	GPIO,	SPI0,	NONE,	PHY),
-	MFP_XRX500(GPIO18,	GPIO,	SPI0,	NONE,	PHY),
-	MFP_XRX500(GPIO19,	GPIO,	SPI1,	NONE,	PHY),
-	MFP_XRX500(GPIO20,	NONE,	NONE,	NONE,	NONE),
-	MFP_XRX500(GPIO21,	GPIO,	I2C,	NONE,	NONE),
-	MFP_XRX500(GPIO22,	GPIO,	I2C,	NONE,	PHY),
-	MFP_XRX500(GPIO23,	GPIO,	EBU,	NONE,	NONE),
-	MFP_XRX500(GPIO24,	GPIO,	EBU,	NONE,	NONE),
-	MFP_XRX500(GPIO25,	NONE,	NONE,	NONE,	NONE),
-	MFP_XRX500(GPIO26,	NONE,	NONE,	NONE,	NONE),
-	MFP_XRX500(GPIO27,	NONE,	NONE,	NONE,	NONE),
-	MFP_XRX500(GPIO28,	GPIO,	MII,	PHY,	TDM),
-	MFP_XRX500(GPIO29,	GPIO,	MII,	PHY,	TDM),
-	MFP_XRX500(GPIO30,	GPIO,	MII,	PHY,	TDM),
-	MFP_XRX500(GPIO31,	GPIO,	MII,	NONE,	TDM),
-	MFP_XRX500(GPIO32,	GPIO,	MDIO,	NONE,	NONE),
-	MFP_XRX500(GPIO33,	GPIO,	MDIO,	NONE,	NONE),
-	MFP_XRX500(GPIO34,	GPIO,	NONE,	SLIC,	PHY),
-	MFP_XRX500(GPIO35,	GPIO,	NONE,	SLIC,	PHY),
-	MFP_XRX500(GPIO36,	GPIO,	NONE,	SLIC,	PHY),
-	MFP_XRX500(GPIO37,	NONE,	NONE,	NONE,	NONE),
-	MFP_XRX500(GPIO38,	NONE,	NONE,	NONE,	NONE),
-	MFP_XRX500(GPIO39,	NONE,	NONE,	NONE,	NONE),
-	MFP_XRX500(GPIO40,	NONE,	NONE,	NONE,	NONE),
-	MFP_XRX500(GPIO41,	NONE,	NONE,	NONE,	NONE),
-	MFP_XRX500(GPIO42,	GPIO,	NONE,	NONE,	NONE),
-	MFP_XRX500(GPIO43,	GPIO,	NONE,	NONE,	NONE),
-	MFP_XRX500(GPIO44,	NONE,	NONE,	NONE,	NONE),
-	MFP_XRX500(GPIO45,	NONE,	NONE,	NONE,	NONE),
-	MFP_XRX500(GPIO46,	NONE,	NONE,	NONE,	NONE),
-	MFP_XRX500(GPIO47,	NONE,	NONE,	NONE,	NONE),
-	MFP_XRX500(GPIO48,	GPIO,	EBU,	NONE,	NONE),
-	MFP_XRX500(GPIO49,	GPIO,	EBU,	NONE,	NONE),
-	MFP_XRX500(GPIO50,	GPIO,	EBU,	NONE,	NONE),
-	MFP_XRX500(GPIO51,	GPIO,	EBU,	NONE,	NONE),
-	MFP_XRX500(GPIO52,	GPIO,	EBU,	NONE,	NONE),
-	MFP_XRX500(GPIO53,	GPIO,	EBU,	NONE,	NONE),
-	MFP_XRX500(GPIO54,	GPIO,	EBU,	NONE,	NONE),
-	MFP_XRX500(GPIO55,	GPIO,	EBU,	NONE,	NONE),
-	MFP_XRX500(GPIO56,	GPIO,	EBU,	NONE,	NONE),
-	MFP_XRX500(GPIO57,	GPIO,	EBU,	NONE,	NONE),
-	MFP_XRX500(GPIO58,	NONE,	NONE,	NONE,	NONE),
-	MFP_XRX500(GPIO59,	GPIO,	EBU,	NONE,	NONE),
-	MFP_XRX500(GPIO60,	GPIO,	EBU,	NONE,	NONE),
-	MFP_XRX500(GPIO61,	GPIO,	NONE,	NONE,	NONE),
-	MFP_XRX500(GPIO62,	NONE,	NONE,	NONE,	NONE),
-	MFP_XRX500(GPIO63,	NONE,	NONE,	NONE,	NONE),
-};
-static const unsigned flcnmx_pins_spi0[] = {GPIO6, GPIO7, GPIO8};
-static const unsigned flcnmx_pins_spi0_cs1[] = {GPIO9};
-static const unsigned flcnmx_pins_spi0_cs2[] = {GPIO10};
-static const unsigned flcnmx_pins_spi0_cs3[] = {GPIO11};
-static const unsigned flcnmx_pins_spi1[] = {GPIO12, GPIO13, GPIO17};
-static const unsigned flcnmx_pins_spi1_cs0[] = {GPIO18};
-static const unsigned flcnmx_pins_ledc[] = {GPIO14, GPIO15, GPIO16};
-static const unsigned flcnmx_pins_i2c0[] = {GPIO26, GPIO27};
-static const unsigned flcnmx_pins_i2c1[] = {GPIO10, GPIO11};
-static const unsigned flcnmx_pins_mdio_0[] = {GPIO10, GPIO11};
-static const unsigned flcnmx_pins_mdio_1[] = {GPIO24, GPIO25};
-static const unsigned flcnmx_pins_tdm[] = {GPIO9, GPIO18, GPIO24, GPIO25};
-static const unsigned flcnmx_pins_led_hgu[] = {GPIO0, GPIO1};
-static const unsigned flcnmx_pins_vcodec[] = {GPIO6, GPIO7, GPIO8, GPIO9};
-static const unsigned flcnmx_pins_led0[] = {GPIO12};
-static const unsigned flcnmx_pins_led1[] = {GPIO13};
-static const unsigned flcnmx_pins_led2[] = {GPIO14};
-static const unsigned flcnmx_pins_led3[] = {GPIO15};
-static const unsigned flcnmx_pins_led4[] = {GPIO16};
-static const unsigned flcnmx_pins_led5[] = {GPIO17};
-static const unsigned flcnmx_pins_led6[] = {GPIO18};
-static const unsigned flcnmx_pins_led7[] = {GPIO19};
-static const unsigned flcnmx_pins_led8[] = {GPIO20};
-static const unsigned flcnmx_pins_led9[] = {GPIO21};
-static const unsigned flcnmx_pins_qspi[] = {GPIO0, GPIO1,
-GPIO2, GPIO3, GPIO4, GPIO5};
-static const unsigned flcnmx_pins_gpc0[] = {GPIO19};
-static const unsigned flcnmx_pins_gpc1[] = {GPIO28};
-static const unsigned flcnmx_pins_gpc2[] = {GPIO18};
-static const unsigned flcnmx_pins_gpc3[] = {GPIO29};
-static const unsigned flcnmx_pins_uart1[] = {GPIO30, GPIO31};
-static const unsigned flcnmx_pins_pon[] = {GPIO20, GPIO22, GPIO23};
-static const unsigned flcnmx_pins_pon_tx_dis[] = {GPIO21, GPIO24, GPIO25};
-static const unsigned flcnmx_pins_pcie0_wk[] = {GPIO8};
-static const unsigned flcnmx_pins_pcie0_refclk[] = {GPIO10};
-static const unsigned flcnmx_pins_pcie1_refclk[] = {GPIO11};
-static const unsigned xrx500_pins_spi0[] = {GPIO16, GPIO17, GPIO18};
-static const unsigned xrx500_pins_spi0_cs1[] = {GPIO15};
-static const unsigned xrx500_pins_spi0_cs4[] = {GPIO10};
-static const unsigned xrx500_pins_spi0_cs6[] = {GPIO11};
-static const unsigned xrx500_pins_spi1[] = {GPIO10, GPIO11, GPIO19};
-static const unsigned xrx500_pins_spi1_cs0[] = {GPIO14};
-static const unsigned xrx500_pins_ledc[] = {GPIO4, GPIO5, GPIO6};
-static const unsigned xrx500_pins_nand_ale[] = {GPIO13};
-static const unsigned xrx500_pins_i2c[] = {GPIO21, GPIO22};
-static const unsigned xrx500_pins_nand_cs1[] = {GPIO23};
-static const unsigned xrx500_pins_nand_cle[] = {GPIO24};
-static const unsigned xrx500_pins_nand_rdy[] = {GPIO48};
-static const unsigned xrx500_pins_nand_rd[] = {GPIO49};
-static const unsigned xrx500_pins_nand_d1[] = {GPIO50};
-static const unsigned xrx500_pins_nand_d0[] = {GPIO51};
-static const unsigned xrx500_pins_nand_d2[] = {GPIO52};
-static const unsigned xrx500_pins_nand_d7[] = {GPIO53};
-static const unsigned xrx500_pins_nand_d6[] = {GPIO54};
-static const unsigned xrx500_pins_nand_d5[] = {GPIO55};
-static const unsigned xrx500_pins_nand_d4[] = {GPIO56};
-static const unsigned xrx500_pins_nand_d3[] = {GPIO57};
-static const unsigned xrx500_pins_nand_wr[] = {GPIO59};
-static const unsigned xrx500_pins_nand_wp[] = {GPIO60};
-static const unsigned xrx500_pins_nand_se[] = {GPIO61};
-static const unsigned xrx500_pins_mdio_l[] = {GPIO42, GPIO43};
-static const unsigned xrx500_pins_mdio_r[] = {GPIO32, GPIO33};
-static const unsigned xrx500_pins_vcodec[] = {GPIO1, GPIO34, GPIO35, GPIO36};
-static const unsigned xrx500_pins_clkout0[] = {GPIO8};
-static const unsigned xrx500_pins_tdm[] = {GPIO28, GPIO29, GPIO30, GPIO31};
-static const unsigned xrx500_pins_25MHz[] = {GPIO3};
-
-static struct ltq_pin_group xrx500_grps[] = {
-	GRP_MUX("spi0", SPI0, xrx500_pins_spi0),
-	GRP_MUX("spi0_cs1", SPI0, xrx500_pins_spi0_cs1),
-	GRP_MUX("spi0_cs4", SPI0, xrx500_pins_spi0_cs4),
-	GRP_MUX("spi0_cs6", SPI0, xrx500_pins_spi0_cs6),
-	GRP_MUX("spi1", SPI1, xrx500_pins_spi1),
-	GRP_MUX("spi1_cs0", SPI1, xrx500_pins_spi1_cs0),
-	GRP_MUX("ledc", LEDC, xrx500_pins_ledc),
-	GRP_MUX("nand ale", EBU, xrx500_pins_nand_ale),
-	GRP_MUX("i2c", I2C, xrx500_pins_i2c),
-	GRP_MUX("nand cs1", EBU, xrx500_pins_nand_cs1),
-	GRP_MUX("nand cle", EBU, xrx500_pins_nand_cle),
-	GRP_MUX("nand rdy", EBU, xrx500_pins_nand_rdy),
-	GRP_MUX("nand rd", EBU, xrx500_pins_nand_rd),
-	GRP_MUX("nand d1", EBU, xrx500_pins_nand_d1),
-	GRP_MUX("nand d0", EBU, xrx500_pins_nand_d0),
-	GRP_MUX("nand d2", EBU, xrx500_pins_nand_d2),
-	GRP_MUX("nand d7", EBU, xrx500_pins_nand_d7),
-	GRP_MUX("nand d6", EBU, xrx500_pins_nand_d6),
-	GRP_MUX("nand d5", EBU, xrx500_pins_nand_d5),
-	GRP_MUX("nand d4", EBU, xrx500_pins_nand_d4),
-	GRP_MUX("nand d3", EBU, xrx500_pins_nand_d3),
-	GRP_MUX("nand wr", EBU, xrx500_pins_nand_wr),
-	GRP_MUX("nand wp", EBU, xrx500_pins_nand_wp),
-	GRP_MUX("nand se", EBU, xrx500_pins_nand_se),
-	GRP_MUX("mdio_l", MDIO, xrx500_pins_mdio_l),
-	GRP_MUX("mdio_r", MDIO, xrx500_pins_mdio_r),
-	GRP_MUX("clkout0", CGU, xrx500_pins_clkout0),
-	GRP_MUX("25MHz", CGU, xrx500_pins_25MHz),
-	GRP_MUX("vcodec", SLIC, xrx500_pins_vcodec),
-	GRP_MUX("tdm", TDM, xrx500_pins_tdm),
-};
-
-static struct ltq_pin_group irx200_grps[] = {
-	GRP_MUX("spi1", SPI1, xrx500_pins_spi1),
-	GRP_MUX("spi1_cs0", SPI1, xrx500_pins_spi1_cs0),
-	GRP_MUX("ledc", LEDC, xrx500_pins_ledc),
-	GRP_MUX("nand ale", EBU, xrx500_pins_nand_ale),
-	GRP_MUX("i2c", I2C, xrx500_pins_i2c),
-	GRP_MUX("nand cs1", EBU, xrx500_pins_nand_cs1),
-	GRP_MUX("nand cle", EBU, xrx500_pins_nand_cle),
-	GRP_MUX("nand rdy", EBU, xrx500_pins_nand_rdy),
-	GRP_MUX("nand rd", EBU, xrx500_pins_nand_rd),
-	GRP_MUX("nand d1", EBU, xrx500_pins_nand_d1),
-	GRP_MUX("nand d0", EBU, xrx500_pins_nand_d0),
-	GRP_MUX("nand d2", EBU, xrx500_pins_nand_d2),
-	GRP_MUX("nand d7", EBU, xrx500_pins_nand_d7),
-	GRP_MUX("nand d6", EBU, xrx500_pins_nand_d6),
-	GRP_MUX("nand d5", EBU, xrx500_pins_nand_d5),
-	GRP_MUX("nand d4", EBU, xrx500_pins_nand_d4),
-	GRP_MUX("nand d3", EBU, xrx500_pins_nand_d3),
-	GRP_MUX("nand wr", EBU, xrx500_pins_nand_wr),
-	GRP_MUX("nand wp", EBU, xrx500_pins_nand_wp),
-	GRP_MUX("mdio_r", MDIO, xrx500_pins_mdio_r),
-	GRP_MUX("clkout0", CGU, xrx500_pins_clkout0),
-	GRP_MUX("25MHz", CGU, xrx500_pins_25MHz),
-	GRP_MUX("tdm", TDM, xrx500_pins_tdm),
-};
-static struct ltq_pin_group flcnmx_grps[] = {
-	GRP_MUX("spi0", SPI0, flcnmx_pins_spi0),
-	GRP_MUX("spi0_cs1", SPI0, flcnmx_pins_spi0_cs1),
-	GRP_MUX("spi0_cs2", SPI0, flcnmx_pins_spi0_cs2),
-	GRP_MUX("spi0_cs3", SPI0, flcnmx_pins_spi0_cs3),
-	GRP_MUX("spi1", SPI1, flcnmx_pins_spi1),
-	GRP_MUX("spi1_cs0", SPI1, flcnmx_pins_spi1_cs0),
-	GRP_MUX("ledc", LEDC, flcnmx_pins_ledc),
-	GRP_MUX("i2c0", I2C, flcnmx_pins_i2c0),
-	GRP_MUX("i2c1", I2C, flcnmx_pins_i2c1),
-	GRP_MUX("mdio_0", MDIO, flcnmx_pins_mdio_0),
-	GRP_MUX("mdio_1", MDIO, flcnmx_pins_mdio_1),
-	GRP_MUX("tdm", TDM, flcnmx_pins_tdm),
-	GRP_MUX("led_hgu", LED_PAR, flcnmx_pins_led_hgu),
-	GRP_MUX("vcodec", SLIC, flcnmx_pins_vcodec),
-	GRP_MUX("led0", LED_PAR, flcnmx_pins_led0),
-	GRP_MUX("led1", LED_PAR, flcnmx_pins_led1),
-	GRP_MUX("led2", LED_PAR, flcnmx_pins_led2),
-	GRP_MUX("led3", LED_PAR, flcnmx_pins_led3),
-	GRP_MUX("led4", LED_PAR, flcnmx_pins_led4),
-	GRP_MUX("led5", LED_PAR, flcnmx_pins_led5),
-	GRP_MUX("led6", LED_PAR, flcnmx_pins_led6),
-	GRP_MUX("led7", LED_PAR, flcnmx_pins_led7),
-	GRP_MUX("led8", LED_PAR, flcnmx_pins_led8),
-	GRP_MUX("led9", LED_PAR, flcnmx_pins_led9),
-	GRP_MUX("qspi", QSPI, flcnmx_pins_qspi),
-	GRP_MUX("gpc0", CGU, flcnmx_pins_gpc0),
-	GRP_MUX("gpc1", CGU, flcnmx_pins_gpc1),
-	GRP_MUX("gpc2", CGU, flcnmx_pins_gpc2),
-	GRP_MUX("gpc3", CGU, flcnmx_pins_gpc3),
-	GRP_MUX("uart1", UART, flcnmx_pins_uart1),
-	GRP_MUX("pon", PON, flcnmx_pins_pon),
-	GRP_MUX("pon_tx_dis", PON, flcnmx_pins_pon_tx_dis),
-	GRP_MUX("pcie_wk", PON, flcnmx_pins_pcie0_wk),
-	GRP_MUX("pcie0_refclk", PON, flcnmx_pins_pcie0_refclk),
-	GRP_MUX("pcie1_refclk", PON, flcnmx_pins_pcie1_refclk),
-};
-static const char * const flcnmx_spi0_grps[] = {"spi0", "spi0_cs1",
-"spi0_cs2", "spi0_cs3"};
-static const char * const flcnmx_spi1_grps[] = {"spi1", "spi1_cs0"};
-static const char * const flcnmx_ledc_grps[] = {"ledc"};
-static const char * const flcnmx_i2c_grps[] = {"i2c0", "i2c1"};
-static const char * const flcnmx_mdio_grps[] = {"mdio_0", "mdio_1"};
-static const char * const flcnmx_tdm_grps[] = {"tdm"};
-static const char * const flcnmx_vcodec_grps[] = {"vcodec", "gpc0"};
-static const char * const flcnmx_hgu_led_grps[] = {"led_hgu"};
-static const char * const flcnmx_par_led_grps[] = {"led0", "led1", "led2",
-"led3", "led4", "led5", "led6", "led7", "led8", "led9"};
-static const char * const flcnmx_gpc_grps[] = {"gpc1", "gpc2", "gpc3"};
-static const char * const flcnmx_pcie_grps[] = {"pcie_wk", "pcie0_refclk",
-"pcie1_refclk"};
-static const char * const flcnmx_pon_grps[] = {"pon", "pon_tx_dis"};
-static const char * const flcnmx_uart_grps[] = {"uart1"};
-static const char * const flcnmx_qspi_grps[] = {"qspi"};
-static const char * const xrx500_spi0_grps[] = {"spi0", "spi0_cs1",
-"spi0_cs4", "spi0_cs6"};
-
-static const char * const xrx500_spi1_grps[] = {"spi1", "spi1_cs0"};
-static const char * const xrx500_ledc_grps[] = {"ledc"};
-static const char * const xrx500_i2c_grps[] = {"i2c"};
-static const char * const xrx500_ebu_grps[] = {
-"nand ale", "nand cs1",
-"nand cle", "nand rdy",
-"nand rd", "nand d1",
-"nand d0", "nand d2",
-"nand d7", "nand d6",
-"nand d5", "nand d4",
-"nand d3", "nand wr",
-"nand wp", "nand se"};
-static const char * const xrx500_mdio_grps[] = {"mdio_l", "mdio_r"};
-static const char * const xrx500_vcodec_grps[] = {"vcodec", "clkout0"};
-static const char * const xrx500_25MHz_grps[] = {"25MHz"};
-static const char * const xrx500_tdm_grps[] = {"tdm"};
-static struct ltq_pmx_func flcnmx_funcs[] = {
-	{"spi0",	ARRAY_AND_SIZE(flcnmx_spi0_grps)},
-	{"spi1",	ARRAY_AND_SIZE(flcnmx_spi1_grps)},
-	{"ledc",	ARRAY_AND_SIZE(flcnmx_ledc_grps)},
-	{"led_hgu",	ARRAY_AND_SIZE(flcnmx_hgu_led_grps)},
-	{"i2c0",	ARRAY_AND_SIZE(flcnmx_i2c_grps)},
-	{"i2c1",	ARRAY_AND_SIZE(flcnmx_i2c_grps)},
-	{"mdio",	ARRAY_AND_SIZE(flcnmx_mdio_grps)},
-	{"vcodec",	ARRAY_AND_SIZE(flcnmx_vcodec_grps)},
-	{"tdm",		ARRAY_AND_SIZE(flcnmx_tdm_grps)},
-	{"qspi",	ARRAY_AND_SIZE(flcnmx_qspi_grps)},
-	{"par_led",	ARRAY_AND_SIZE(flcnmx_par_led_grps)},
-	{"gpc",		ARRAY_AND_SIZE(flcnmx_gpc_grps)},
-	{"pon",		ARRAY_AND_SIZE(flcnmx_pon_grps)},
-	{"pcie",	ARRAY_AND_SIZE(flcnmx_pcie_grps)},
-	{"uart",	ARRAY_AND_SIZE(flcnmx_uart_grps)}
-};
-
-static struct ltq_pmx_func xrx500_funcs[] = {
-	{"spi0",	ARRAY_AND_SIZE(xrx500_spi0_grps)},
-	{"spi1",	ARRAY_AND_SIZE(xrx500_spi1_grps)},
-	{"ledc",	ARRAY_AND_SIZE(xrx500_ledc_grps)},
-	{"ebu",		ARRAY_AND_SIZE(xrx500_ebu_grps)},
-	{"i2c",		ARRAY_AND_SIZE(xrx500_i2c_grps)},
-	{"25MHz",	ARRAY_AND_SIZE(xrx500_25MHz_grps)},
-	{"mdio",	ARRAY_AND_SIZE(xrx500_mdio_grps)},
-	{"vcodec",	ARRAY_AND_SIZE(xrx500_vcodec_grps)},
-	{"tdm",		ARRAY_AND_SIZE(xrx500_tdm_grps)}
-};
-
-/* ---------  pinconf related code --------- */
-static int xrx500_pinconf_group_get(struct pinctrl_dev *pctrldev,
-unsigned group, unsigned long *config)
-{
-	return -ENOTSUPP;
-}
-
-
-static int xrx500_pinconf_get(struct pinctrl_dev *pctrldev,
-unsigned pin, unsigned long *config)
-{
-	struct ltq_pinmux_info *info = pinctrl_dev_get_drvdata(pctrldev);
-	enum ltq_pinconf_param param = LTQ_PINCONF_UNPACK_PARAM(*config);
-	void __iomem *mem = info->membase[PORT(pin)];
-
-	switch (param) {
-	case LTQ_PINCONF_PARAM_DRIVE_CURRENT:
-		*config = LTQ_PINCONF_PACK(param,
-			(pad_r32(mem, ((PORT_PIN(pin) <= 15) ?
-			LTQ_PADC_DCC0 : LTQ_PADC_DCC1)) >>
-			((pin % 16) * 2) & 0x3));
-		break;
-
-	case LTQ_PINCONF_PARAM_SLEW_RATE:
-		*config = LTQ_PINCONF_PACK(param,
-			!!pad_getbit(mem, LTQ_PADC_SRC, PORT_PIN(pin)));
-		break;
-
-	case LTQ_PINCONF_PARAM_PULL:
-		if (pad_getbit(mem, LTQ_PADC_PDEN, PORT_PIN(pin)))
-			*config = LTQ_PINCONF_PACK(param, 1);
-		else if (pad_getbit(mem, LTQ_PADC_PUEN, PORT_PIN(pin)))
-			*config = LTQ_PINCONF_PACK(param, 2);
-		else
-			*config = LTQ_PINCONF_PACK(param, 0);
-
-		break;
-
-	case LTQ_PINCONF_PARAM_OPEN_DRAIN:
-		*config = LTQ_PINCONF_PACK(param,
-			pad_getbit(mem, LTQ_PADC_OD, PORT_PIN(pin)));
-		break;
-
-	default:
-		return -ENOTSUPP;
-	}
-
-	return 0;
-}
-
-static int xrx500_pinconf_set(struct pinctrl_dev *pctrldev, unsigned pin,
-unsigned long *configs, unsigned num_configs)
-{
-	struct ltq_pinmux_info *info = pinctrl_dev_get_drvdata(pctrldev);
-	void __iomem *mem = info->membase[PORT(pin)];
-	enum ltq_pinconf_param param;
-	int arg;
-	u32 reg;
-	int i;
-
-	for (i = 0; i < num_configs; i++) {
-		param = LTQ_PINCONF_UNPACK_PARAM(configs[i]);
-		arg = LTQ_PINCONF_UNPACK_ARG(configs[i]);
-
-		pr_debug("%s called with pin: %d and param:%x\n",
-			 __func__, pin, param);
-		switch (param) {
-		case LTQ_PINCONF_PARAM_DRIVE_CURRENT:
-			reg = (PORT_PIN(pin) <= 15) ?
-			      LTQ_PADC_DCC0 : LTQ_PADC_DCC1;
-			pad_w32_mask(mem, (0x3 << ((pin % 16) * 2)),
-				     (arg << ((pin % 16) * 2)), reg);
-			break;
-
-		case LTQ_PINCONF_PARAM_SLEW_RATE:
-			reg = LTQ_PADC_SRC;
-			if (arg)
-				pad_setbit(mem, reg, PORT_PIN(pin));
-			else
-				pad_clearbit(mem, reg, PORT_PIN(pin));
-			break;
-
-		case LTQ_PINCONF_PARAM_PULL:
-			if (arg == 1) {
-				reg = LTQ_PADC_PDEN;
-				pad_setbit(mem, reg, PORT_PIN(pin));
-				reg = LTQ_PADC_PUEN;
-				pad_clearbit(mem, reg, PORT_PIN(pin));
-			} else {
-				reg = LTQ_PADC_PUEN;
-				pad_setbit(mem, reg, PORT_PIN(pin));
-				reg = LTQ_PADC_PDEN;
-				pad_clearbit(mem, reg, PORT_PIN(pin));
-			}
-			break;
-
-		case LTQ_PINCONF_PARAM_OPEN_DRAIN:
-			reg = LTQ_PADC_OD;
-			if (arg)
-				pad_setbit(mem, reg, PORT_PIN(pin));
-			else
-				pad_clearbit(mem, reg, PORT_PIN(pin));
-			break;
-		default:
-			pr_err("%s: Invalid config param %04x\n",
-			       pinctrl_dev_get_name(info->pctrl), param);
-			return -ENOTSUPP;
-		}
-
-		pr_debug("DIR0: %x\n", pad_r32(mem, reg));
-	}
-	return 0;
-}
-
-static int xrx500_pinconf_group_set(struct pinctrl_dev *pctrldev,
-			unsigned selector,
-			unsigned long *configs,
-			unsigned num_configs)
-{
-	struct ltq_pinmux_info *info = pinctrl_dev_get_drvdata(pctrldev);
-	int i, ret = 0;
-
-	for (i = 0; i < info->grps[selector].npins && !ret; i++)
-		ret = xrx500_pinconf_set(pctrldev,
-				info->grps[selector].pins[i],
-				configs,
-				num_configs);
-
-	return ret;
-}
-static void xrx500_pinconf_dbg_show(struct pinctrl_dev *pctrldev,
-			struct seq_file *s, unsigned offset)
-{
-	unsigned long config;
-	struct pin_desc *desc;
-	char buf[64];
-
-	struct ltq_pinmux_info *info = pinctrl_dev_get_drvdata(pctrldev);
-	int port = PORT(offset);
-
-	sprintf(buf, " (port %d) mux %d -- ", port,
-		pad_r32(info->membase[port], LTQ_PADC_MUX(PORT_PIN(offset))));
-	seq_puts(s, buf);
-
-	config = LTQ_PINCONF_PACK(LTQ_PINCONF_PARAM_PULL, 0);
-	if (!xrx500_pinconf_get(pctrldev, offset, &config)) {
-		sprintf(buf, "pull %d ",
-			(int)LTQ_PINCONF_UNPACK_ARG(config));
-	}
-
-	config = LTQ_PINCONF_PACK(LTQ_PINCONF_PARAM_DRIVE_CURRENT, 0);
-	if (!xrx500_pinconf_get(pctrldev, offset, &config)) {
-		seq_printf(s, "drive-current %d ",
-			   (int)LTQ_PINCONF_UNPACK_ARG(config));
-		seq_puts(s, buf);
-	}
-
-	config = LTQ_PINCONF_PACK(LTQ_PINCONF_PARAM_SLEW_RATE, 0);
-	if (!xrx500_pinconf_get(pctrldev, offset, &config)) {
-		sprintf(buf, "slew-rate %d ",
-			(int)LTQ_PINCONF_UNPACK_ARG(config));
-		seq_puts(s, buf);
-	}
-
-	desc = pin_desc_get(pctrldev, offset);
-	if (desc) {
-		if (desc->gpio_owner) {
-			sprintf(buf, " owner: %s", desc->gpio_owner);
-			seq_puts(s, buf);
-		}
-	} else {
-		seq_puts(s, "not registered");
-	}
-}
-
-static void xrx500_pinconf_group_dbg_show(struct pinctrl_dev *pctrldev,
-			struct seq_file *s, unsigned selector)
-{
-}
-
-static const struct pinconf_ops xrx500_pinconf_ops = {
-	.pin_config_get			= xrx500_pinconf_get,
-	.pin_config_set			= xrx500_pinconf_set,
-	.pin_config_group_get		= xrx500_pinconf_group_get,
-	.pin_config_group_set		= xrx500_pinconf_group_set,
-	.pin_config_dbg_show		= xrx500_pinconf_dbg_show,
-	.pin_config_group_dbg_show	= xrx500_pinconf_group_dbg_show,
-};
-
-static struct pinctrl_desc xrx500_pctrl_desc = {
-	.owner		= THIS_MODULE,
-	.pins		= xrx500_pads,
-	.confops	= &xrx500_pinconf_ops,
-};
-
-static int xrx500_mux_get(struct pinctrl_dev *pctrldev, int mfp, int *mux)
-{
-	struct ltq_pinmux_info *info = pinctrl_dev_get_drvdata(pctrldev);
-	int port = PORT(info->mfp[mfp].pin);
-
-	pr_debug("%s called pin %d\n", __func__, info->mfp[mfp].pin);
-	if ((port >= PORTS) || (!info->membase[port]))
-		return -ENODEV;
-
-	pr_debug("Reading value from register:%p\n",
-		 info->membase[port] + LTQ_PADC_MUX(info->mfp[mfp].pin));
-	*mux = pad_r32(info->membase[port], LTQ_PADC_MUX(info->mfp[mfp].pin));
-	return 0;
-}
-
-static int xrx500_mux_avail_get(struct pinctrl_dev *pctrldev,
-int mfp, int *avail)
-{
-	struct ltq_pinmux_info *info = pinctrl_dev_get_drvdata(pctrldev);
-	int port = PORT(info->mfp[mfp].pin);
-	unsigned int value;
-	pr_debug("%s called pin %d\n", __func__, info->mfp[mfp].pin);
-	if ((port >= PORTS) || (!info->membase[port]))
-		return -ENODEV;
-
-	value = pad_r32(info->membase[PORT(mfp)], LTQ_PADC_AVAIL);
-	*avail = (value & BIT(PORT_PIN(mfp))) >> PORT_PIN(mfp);
-	return 0;
-}
-
-static inline int xrx500_mux_apply(struct pinctrl_dev *pctrldev,
-			int mfp, int mux)
-{
-	struct ltq_pinmux_info *info = pinctrl_dev_get_drvdata(pctrldev);
-	int port = PORT(info->mfp[mfp].pin);
-
-	pr_debug("%s called with mux: %d and pin %d\n", __func__, mux,
-		 info->mfp[mfp].pin);
-	if ((port >= PORTS) || (!info->membase[port]))
-		return -ENODEV;
-
-	pr_debug("writing value:%d to register:%p\n", mux, info->membase[port]
-		+ LTQ_PADC_MUX(info->mfp[mfp].pin));
-	pad_w32(info->membase[port], mux, LTQ_PADC_MUX(info->mfp[mfp].pin));
-	return 0;
-}
-
-static const struct ltq_cfg_param xrx500_cfg_params[] = {
-	{"lantiq,pull",			LTQ_PINCONF_PARAM_PULL},
-	{"lantiq,drive-current",	LTQ_PINCONF_PARAM_DRIVE_CURRENT},
-	{"lantiq,slew-rate",		LTQ_PINCONF_PARAM_SLEW_RATE},
-	{"lantiq,open-drain",		LTQ_PINCONF_PARAM_OPEN_DRAIN},
-};
-
-static struct ltq_pinmux_info xrx500_info = {
-	.desc		= &xrx500_pctrl_desc,
-	.apply_mux	= xrx500_mux_apply,
-	.params		= xrx500_cfg_params,
-	.num_params	= ARRAY_SIZE(xrx500_cfg_params),
-};
-#ifdef CONFIG_PINCTRL_SYSFS
-static struct ltq_pinctrl_sysfs_ops xrx500_sysfs_ops = {
-	.pin_config_get		= xrx500_pinconf_get,
-	.pin_config_set		= xrx500_pinconf_set,
-	.pin_mux_set		= xrx500_mux_apply,
-	.pin_mux_get		= xrx500_mux_get,
-	.pin_mux_avail_get	= xrx500_mux_avail_get,
-};
-#endif
-struct pinctrl_xrx500_soc {
-	const struct ltq_mfp_pin *mfp;
-	unsigned int num_mfp;
-	const struct ltq_pin_group *grps;
-	unsigned int num_grps;
-	const struct ltq_pmx_func *funcs;
-	unsigned int num_funcs;
-	const char pad_compatible[32];
-	int reset_weak_reg;
-};
-static struct pinctrl_xrx500_soc xrx500_pinctrl = {
-	.mfp = xrx500_mfp,
-	.num_mfp = ARRAY_SIZE(xrx500_mfp),
-	.grps = xrx500_grps,
-	.num_grps = ARRAY_SIZE(xrx500_grps),
-	.funcs = xrx500_funcs,
-	.num_funcs = ARRAY_SIZE(xrx500_funcs),
-	.pad_compatible = "lantiq,pad-xrx500",
-	.reset_weak_reg = 1,
-};
-static struct pinctrl_xrx500_soc irx200_pinctrl = {
-	.mfp = irx200_mfp,
-	.num_mfp = ARRAY_SIZE(irx200_mfp),
-	.grps = irx200_grps,
-	.num_grps = ARRAY_SIZE(irx200_grps),
-	.funcs = xrx500_funcs,
-	.num_funcs = ARRAY_SIZE(xrx500_funcs),
-	.pad_compatible = "lantiq,pad-xrx500",
-	.reset_weak_reg = 1,
-};
-static struct pinctrl_xrx500_soc flcnmx_pinctrl = {
-	.mfp = flcnmx_mfp,
-	.num_mfp = ARRAY_SIZE(flcnmx_mfp),
-	.grps = flcnmx_grps,
-	.num_grps = ARRAY_SIZE(flcnmx_grps),
-	.funcs = flcnmx_funcs,
-	.num_funcs = ARRAY_SIZE(flcnmx_funcs),
-	.pad_compatible = "intel,falconmx-pad",
-	.reset_weak_reg = 0,
-
-};
-static const struct of_device_id xrx500_match[] = {
-	{ .compatible = GRX500_COMP_STR, .data = &xrx500_pinctrl},
-	{ .compatible = IRX200_COMP_STR, .data = &irx200_pinctrl},
-	{ .compatible = FALCONMX_COMP_STR, .data = &flcnmx_pinctrl},
-};
-/* --------- register the pinctrl layer --------- */
-static void reset_registers(const __be32 *bank)
-{
-	int i = 0, j = 0;
-	if (!(*bank)) {
-		for (i = 0, j = 0;
-		    i < sizeof(default_reg_bank0)/sizeof(uint32_t); j += 4) {
-			pad_w32(xrx500_info.membase[*bank], default_reg_bank0[i]
-			, j);
-			i++;
-		}
-	} else {
-		for (i = 0, j = 0;
-		    i < sizeof(default_reg_bank1)/sizeof(uint32_t); j += 4) {
-			pad_w32(xrx500_info.membase[*bank],
-				default_reg_bank1[i], j);
-			if (j == PORTMUX61_OFFSET)
-				j = REG_HOLE_OFFSET;
-			i++;
-		}
-	}
-}
-static int pinctrl_xrx500_probe(struct platform_device *pdev)
-{
-	struct device_node *np;
-	int pad_count = 0;
-	int ret = 0;
-	const struct of_device_id *match;
-	const struct pinctrl_xrx500_soc *xrx500_soc;
-	pr_debug("[%s] .. [%d]\n", __func__, __LINE__);
-
-	match = of_match_device(xrx500_match, &pdev->dev);
-	if (!match) {
-		dev_err(&pdev->dev, "Error: No matching device found\n");
-		return -ENODEV;
-	}
-	xrx500_soc = (const struct pinctrl_xrx500_soc *)match->data;
-
-	/* load and remap the pad resources of the different banks */
-	for_each_compatible_node(np, NULL, xrx500_soc->pad_compatible) {
-		struct platform_device *ppdev = of_find_device_by_node(np);
-		const __be32 *bank = of_get_property(np, "lantiq,bank", NULL);
-		struct resource res;
-
-		if (!of_device_is_available(np))
-			continue;
-
-		if (!ppdev) {
-			dev_err(&pdev->dev, "failed to find pad pdev\n");
-			continue;
-		}
-		if (!bank || *bank >= PORTS)
-			continue;
-		if (of_address_to_resource(np, 0, &res))
-			continue;
-
-		xrx500_info.membase[*bank] = devm_ioremap_resource(&pdev->dev,
-								&res);
-		dev_dbg(&pdev->dev, "Bank: [%d] .. [%p]\n",
-			*bank, xrx500_info.membase[*bank]);
-		if (IS_ERR(xrx500_info.membase[*bank]))
-			return PTR_ERR(xrx500_info.membase[*bank]);
-
-		lantiq_load_pin_desc(&xrx500_pads[pad_count], *bank, PINS);
-		pad_count += PINS;
-		dev_dbg(&pdev->dev, "found %s with %d pads\n", res.name, PINS);
-		if (xrx500_soc->reset_weak_reg)
-			reset_registers(bank);
-	}
-	dev_dbg(&pdev->dev, "found a total of %d pads\n", pad_count);
-	pr_debug("found a total of %d pads\n", pad_count);
-
-	/* Init the Pin controller */
-	xrx500_pctrl_desc.name	= dev_name(&pdev->dev);
-	xrx500_pctrl_desc.npins	= pad_count;
-
-	xrx500_info.mfp		= xrx500_soc->mfp;
-	xrx500_info.num_mfp	= xrx500_soc->num_mfp;
-	xrx500_info.grps		= xrx500_soc->grps;
-	xrx500_info.num_grps	= xrx500_soc->num_grps;
-	xrx500_info.funcs	= xrx500_soc->funcs;
-	xrx500_info.num_funcs	= xrx500_soc->num_funcs;
-
-	ret = ltq_pinctrl_register(pdev, &xrx500_info);
-
-	if (ret) {
-		dev_err(&pdev->dev, "Failed to register pinctrl driver\n");
-		return ret;
-	}
-#ifdef CONFIG_PINCTRL_SYSFS
-	pinctrl_sysfs_init(pdev, (PORTS * PINS), &xrx500_sysfs_ops);
-#endif
-	dev_info(&pdev->dev, "Init done\n");
-	return ret;
-}
-
-
-
-static struct platform_driver pinctrl_xrx500_driver = {
-	.probe = pinctrl_xrx500_probe,
-	.driver = {
-		.name = "pinctrl-xrx500",
-		.owner = THIS_MODULE,
-		.of_match_table = xrx500_match,
-	},
-};
-
-int __init pinctrl_xrx500_init(void)
-{
-	pr_info("Register pinctrl driver\n");
-	return platform_driver_register(&pinctrl_xrx500_driver);
-}
-
-core_initcall_sync(pinctrl_xrx500_init);
