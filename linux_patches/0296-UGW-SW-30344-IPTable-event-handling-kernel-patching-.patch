From 0f1dc8435485faa146a625dc01777da84b9f703d Mon Sep 17 00:00:00 2001
From: moinakde <moinak.debnath@intel.com>
Date: Mon, 17 Sep 2018 16:04:12 +0530
Subject: [PATCH] UGW_SW-30344: IPTable event handling kernel patching or event
 generation part

---
 include/net/ip.h               |  2 ++
 include/net/ppa/ppa_stack_al.h | 10 ++++++++
 net/ipv4/netfilter/ip_tables.c | 58 ++++++++++++++++++++++++++++++++++++++++++
 net/netfilter/Kconfig          |  7 +++++
 4 files changed, 77 insertions(+)

diff --git a/include/net/ip.h b/include/net/ip.h
index a3c1b9dfc9a1..24992dece10f 100644
--- a/include/net/ip.h
+++ b/include/net/ip.h
@@ -98,6 +98,8 @@ extern struct ip_ra_chain __rcu *ip_ra_chain;
 
 #define IP_FRAG_TIME	(30 * HZ)		/* fragment lifetime	*/
 
+#define IPTABLE_CHANGE 0x0005		/* PPA iptable change for SDL	*/
+
 struct msghdr;
 struct net_device;
 struct packet_type;
diff --git a/include/net/ppa/ppa_stack_al.h b/include/net/ppa/ppa_stack_al.h
index 7ae2e8b2d944..520f5b9589aa 100644
--- a/include/net/ppa/ppa_stack_al.h
+++ b/include/net/ppa/ppa_stack_al.h
@@ -607,8 +607,18 @@ typedef struct list_head		PPA_LIST_NODE;
 /*!
 	\brief netdevice event registeration/unregisteration functions
  */
+extern int register_iptable_notifier(struct notifier_block *nb);
+extern int unregister_iptable_notifier(struct notifier_block *nb);
+
+#define ppa_register_iptable_notifier register_iptable_notifier
+#define ppa_unregister_iptable_notifier unregister_iptable_notifier
+
+/*
+	This is for iptable notifier, not for netdev notification
+*/
 #define ppa_register_netdevice_notifier register_netdevice_notifier
 #define ppa_unregister_netdevice_notifier unregister_netdevice_notifier
+
 /*
  * ####################################
  * Inline Functions
diff --git a/net/ipv4/netfilter/ip_tables.c b/net/ipv4/netfilter/ip_tables.c
index 4822459e8f42..62ed7c1879d5 100644
--- a/net/ipv4/netfilter/ip_tables.c
+++ b/net/ipv4/netfilter/ip_tables.c
@@ -1123,6 +1123,58 @@ __do_replace(struct net *net, const char *name, unsigned int valid_hooks,
 	return ret;
 }
 
+#if IS_ENABLED(CONFIG_PPA_IPTABLE_EVENT_HANDLING)
+static RAW_NOTIFIER_HEAD(iptable_chain);
+
+static int call_iptable_notifier(struct notifier_block *nb, unsigned long val)
+{
+	return nb->notifier_call(nb, val, NULL);
+}
+
+int register_iptable_notifier(struct notifier_block *nb)
+{
+	int err;
+
+	rtnl_lock();
+	err = raw_notifier_chain_register(&iptable_chain, nb);
+	if (err)
+		goto unlock;
+
+	err = call_iptable_notifier(nb, IPTABLE_CHANGE);
+	err = notifier_to_errno(err);
+	if (err)
+		raw_notifier_chain_unregister(&iptable_chain, nb);
+
+unlock:
+	rtnl_unlock();
+	return err;
+}
+EXPORT_SYMBOL(register_iptable_notifier);
+
+int unregister_iptable_notifier(struct notifier_block *nb)
+{
+	int err;
+
+	rtnl_lock();
+	err = raw_notifier_chain_unregister(&iptable_chain, nb);
+	rtnl_unlock();
+
+	return err;
+}
+EXPORT_SYMBOL(unregister_iptable_notifier);
+
+static int call_iptable_notifiers_info(unsigned long val)
+{
+	return raw_notifier_call_chain(&iptable_chain, val, NULL);
+}
+
+int call_iptable_notifiers(void)
+{
+	return call_iptable_notifiers_info(1);
+}
+EXPORT_SYMBOL(call_iptable_notifiers);
+#endif
+
 static int
 do_replace(struct net *net, const void __user *user, unsigned int len)
 {
@@ -1691,6 +1743,12 @@ do_ipt_set_ctl(struct sock *sk, int cmd, void __user *user, unsigned int len)
 	switch (cmd) {
 	case IPT_SO_SET_REPLACE:
 		ret = do_replace(sock_net(sk), user, len);
+#if IS_ENABLED(CONFIG_PPA_IPTABLE_EVENT_HANDLING)
+		call_iptable_notifiers();
+		/* invokes the ppa handler for flushing the sessions
+		programmed currently in the HW on any modifications
+		made on iptable rules. */
+#endif
 		break;
 
 	case IPT_SO_SET_ADD_COUNTERS:
diff --git a/net/netfilter/Kconfig b/net/netfilter/Kconfig
index 330613bebedc..79030e5eb2be 100644
--- a/net/netfilter/Kconfig
+++ b/net/netfilter/Kconfig
@@ -969,6 +969,13 @@ config NETFILTER_XT_TARGET_SECMARK
 
 	  To compile it as a module, choose M here.  If unsure, say N.
 
+config PPA_IPTABLE_EVENT_HANDLING
+	tristate 'PPA iptable event handling'
+	default y
+	help
+	  SDL Firewall Rule update for iptable with respect to PPA
+	  sessions programmed into the hardware
+
 config NETFILTER_XT_TARGET_TCPMSS
 	tristate '"TCPMSS" target support'
 	depends on IPV6 || IPV6=n
