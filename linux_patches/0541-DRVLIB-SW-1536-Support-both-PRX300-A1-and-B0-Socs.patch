From 62d20c0282b53ebb1c80674ce218ee541e785fac Mon Sep 17 00:00:00 2001
From: kavitha3 <k.subramanian@intel.com>
Date: Fri, 22 Mar 2019 18:11:16 +0800
Subject: [PATCH] DRVLIB_SW-1536: Support both PRX300 A1 and B0 Socs

---
 drivers/net/ethernet/lantiq/ltq_eth_drv_xrx500.c | 73 ++++++++++++------------
 1 file changed, 35 insertions(+), 38 deletions(-)

diff --git a/drivers/net/ethernet/lantiq/ltq_eth_drv_xrx500.c b/drivers/net/ethernet/lantiq/ltq_eth_drv_xrx500.c
index 26eec9d9fc3f..7e60946022ab 100644
--- a/drivers/net/ethernet/lantiq/ltq_eth_drv_xrx500.c
+++ b/drivers/net/ethernet/lantiq/ltq_eth_drv_xrx500.c
@@ -314,7 +314,7 @@ static int  ethtool_eee_set(struct net_device *dev,
 }
 
 int serdes_ethtool_get_link_ksettings(struct net_device *dev,
-				   struct ethtool_link_ksettings *cmd)
+				      struct ethtool_link_ksettings *cmd)
 {
 	struct ltq_eth_priv *priv = netdev_priv(dev);
 	struct platform_device *pdev;
@@ -323,21 +323,21 @@ int serdes_ethtool_get_link_ksettings(struct net_device *dev,
 	if (!priv->xpcs_node)
 		return -1;
 
-        pdev = of_find_device_by_node(priv->xpcs_node);
-        if (pdev) {
+	pdev = of_find_device_by_node(priv->xpcs_node);
+	if (pdev) {
 #ifdef CONFIG_INTEL_XPCS
-            /* Speed Get in Ethtool */
-            xpcs_ethtool_ksettings_get(&pdev->dev, cmd);
+		/* Speed Get in Ethtool */
+		xpcs_ethtool_ksettings_get(&pdev->dev, cmd);
 #endif
-        } else {
-            pr_err("Cannot get Xpcs pdev for %s\n",dev->name);
-            ret = -1;
-        }
-        return ret;
+	} else {
+		pr_err("Cannot get Xpcs pdev for %s\n", dev->name);
+		ret = -1;
+	}
+	return ret;
 }
 
 int serdes_ethtool_set_link_ksettings(struct net_device *dev,
-				   const struct ethtool_link_ksettings *cmd)
+				      const struct ethtool_link_ksettings *cmd)
 {
 	struct ltq_eth_priv *priv = netdev_priv(dev);
 	int ret = 0;
@@ -346,19 +346,19 @@ int serdes_ethtool_set_link_ksettings(struct net_device *dev,
 	if (!priv->xpcs_node)
 		return -1;
 
-        /* Speed Set in Ethtool */
-        pdev = of_find_device_by_node(priv->xpcs_node);
-        if (pdev) {
+	/* Speed Set in Ethtool */
+	pdev = of_find_device_by_node(priv->xpcs_node);
+	if (pdev) {
 #ifdef CONFIG_INTEL_XPCS
-            /* Speed Get in Ethtool */
-            ret = xpcs_ethtool_ksettings_set(&pdev->dev, cmd);
+		/* Speed Get in Ethtool */
+		ret = xpcs_ethtool_ksettings_set(&pdev->dev, cmd);
 #endif
-        } else {
-            pr_err("Cannot get Xpcs pdev for %s\n",dev->name);
-            ret = -1;
-        }
+	} else {
+		 pr_err("Cannot get Xpcs pdev for %s\n", dev->name);
+		ret = -1;
+	}
 
-        return ret;
+	return ret;
 }
 
 /* Structure of the ether tool operation in Phy case  */
@@ -1473,7 +1473,8 @@ static ssize_t show_advrt_min(struct device *dev, struct device_attribute *attr,
 	return sprintf(buf, "%d\n", advertising_min);
 }
 
-static ssize_t store_advrt_min(struct device *dev, struct device_attribute *attr,
+static ssize_t store_advrt_min(struct device *dev,
+			       struct device_attribute *attr,
 			       const char *buf, size_t count)
 {
 	int advrt_min;
@@ -1488,7 +1489,7 @@ static ssize_t store_advrt_min(struct device *dev, struct device_attribute *attr
 
 	return 0;
 }
-static DEVICE_ATTR(advrt_min, S_IWUSR | S_IRUSR, show_advrt_min, store_advrt_min);
+static DEVICE_ATTR(advrt_min, 0600, show_advrt_min, store_advrt_min);
 
 static int ltq_eth_thermal_init(struct device_node *np, struct xrx500_hw *hw)
 {
@@ -1568,7 +1569,7 @@ xrx500_of_port(struct net_device *dev, struct device_node *port)
 			netif_carrier_on(dev);
 		} else if (priv->xpcs_node) {
 			pr_debug("no PHY but connected to xpcs: %s\n",
-				of_node_full_name(priv->xpcs_node));
+				 of_node_full_name(priv->xpcs_node));
 		} else {
 			pr_info("no interface attached to this interface!\n");
 			return;
@@ -1758,7 +1759,7 @@ static int xrx500_of_iface(struct xrx500_hw *hw, struct device_node *iface,
 
 	priv->xgmac_id = -1;
 
-	mac_np = of_parse_phandle(iface, "mac", 0);	
+	mac_np = of_parse_phandle(iface, "mac", 0);
 	if (mac_np) {
 		ret = of_property_read_u32(mac_np, "mac_idx", &xgmac_id_param);
 		if (ret < 0) {
@@ -1768,11 +1769,11 @@ static int xrx500_of_iface(struct xrx500_hw *hw, struct device_node *iface,
 		}
 
 		priv->xgmac_id = xgmac_id_param;
-		
+
 		priv->xpcs_node = of_parse_phandle(mac_np, "xpcs", 0);
 		if (!priv->xpcs_node) {
 			pr_info("Cannot get xpcs node\n");
-			return -EINVAL;			
+			return -EINVAL;
 		}
 	}
 
@@ -2198,6 +2199,7 @@ static int ltq_eth_drv_init(struct platform_device *pdev)
 	struct device_node *node = pdev->dev.of_node;
 	struct device_node *mdio_np, *iface_np;
 	struct mii_bus *bus;
+	u32 mtu_limit = 0;
 
 	memset(g_ltq_eth_module, 0, sizeof(g_ltq_eth_module));
 
@@ -2229,6 +2231,10 @@ static int ltq_eth_drv_init(struct platform_device *pdev)
 		ret = 0;
 	}
 
+	of_property_read_u32(node, "lantiq,prx300-mtu-a1",
+			     &mtu_limit);
+	if (!ltq_get_soc_rev() && mtu_limit)
+		g_soc_data.mtu_limit = mtu_limit;
 	/* bring up the mdio bus */
 	mdio_np = of_find_compatible_node(node, NULL,
 					  "lantiq,xrx500-mdio");
@@ -2423,15 +2429,7 @@ static const struct ltq_net_soc_data xrx500_net_data = {
 	.phy_connect_func = &xrx500_mdio_probe,
 };
 
-static const struct ltq_net_soc_data prx300_net_data_a = {
-	.need_defer = false,
-	.hw_checksum = false,
-	.queue_num = 8,
-	.mtu_limit = 1600,
-	.phy_connect_func = &prx300_phy_connect,
-};
-
-static const struct ltq_net_soc_data prx300_net_data_b = {
+static const struct ltq_net_soc_data prx300_net_data = {
 	.need_defer = false,
 	.hw_checksum = false,
 	.queue_num = 8,
@@ -2440,8 +2438,7 @@ static const struct ltq_net_soc_data prx300_net_data_b = {
 
 static const struct of_device_id ltq_eth_drv_match[] = {
 	{ .compatible = "lantiq,xrx500-eth", .data = &xrx500_net_data},
-	{ .compatible = "lantiq,prx300-eth-a", .data = &prx300_net_data_a},
-	{ .compatible = "lantiq,prx300-eth-b", .data = &prx300_net_data_b},
+	{ .compatible = "lantiq,prx300-eth", .data = &prx300_net_data},
 	{},
 };
 MODULE_DEVICE_TABLE(of, ltq_eth_drv_match);
