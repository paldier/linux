From ef45a6dc6a1bb4a14ff2cfc26c185fdf83f1a746 Mon Sep 17 00:00:00 2001
From: Oren Bakshe <oren.bakshe@intel.com>
Date: Tue, 19 Feb 2019 17:43:37 +0200
Subject: [PATCH] PONRTSYS-3581: Fix wsp not working properly bug

---
 .../net/ethernet/lantiq/ppv4/qos/pp_qos_debugfs.c  | 105 +++++++++++---------
 drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_fw.c   | 108 +++++++++++++++++++--
 .../net/ethernet/lantiq/ppv4/qos/pp_qos_linux.c    |  18 ++++
 drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_main.c |  70 +++++++++++++
 .../net/ethernet/lantiq/ppv4/qos/pp_qos_uc_defs.h  |   8 +-
 .../net/ethernet/lantiq/ppv4/qos/pp_qos_utils.c    |  36 +++++++
 .../net/ethernet/lantiq/ppv4/qos/pp_qos_utils.h    |  25 +++++
 include/net/pp_qos_drv.h                           |   6 ++
 8 files changed, 317 insertions(+), 59 deletions(-)

diff --git a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_debugfs.c b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_debugfs.c
index 3f17deeeeeb3..7d8a1b863dd7 100644
--- a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_debugfs.c
+++ b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_debugfs.c
@@ -839,6 +839,40 @@ static const struct file_operations debug_node_fops = {
 	.release = single_release,
 };
 
+static void print_queue_stat(struct seq_file *s,
+			     struct pp_qos_queue_stat* qstat)
+{
+	seq_printf(s, "queue_packets_occupancy:%u\n",
+		qstat->queue_packets_occupancy);
+	seq_printf(s, "queue_bytes_occupancy:%u\n",
+		qstat->queue_bytes_occupancy);
+	seq_printf(s, "total_packets_accepted:%u\n",
+		qstat->total_packets_accepted);
+	seq_printf(s, "total_packets_dropped:%u\n",
+		qstat->total_packets_dropped);
+	seq_printf(s, "total_packets_red_dropped:%u\n",
+		qstat->total_packets_red_dropped);
+	seq_printf(s, "total_bytes_accepted:%llu\n",
+		qstat->total_bytes_accepted);
+	seq_printf(s, "total_bytes_dropped:%llu\n",
+		qstat->total_bytes_dropped);
+}
+
+static void print_port_stat(struct seq_file *s,
+			    struct pp_qos_port_stat* pstat)
+{
+	seq_printf(s, "total_green_bytes in port's queues:%u\n",
+		pstat->total_green_bytes);
+	seq_printf(s, "total_yellow_bytes in port's queues:%u\n",
+		pstat->total_yellow_bytes);
+	seq_printf(s, "back pressure status:%u\n",
+		pstat->debug_back_pressure_status);
+	seq_printf(s, "Actual packet credit:%u\n",
+		pstat->debug_actual_packet_credit);
+	seq_printf(s, "Actual byte credit:%u\n",
+		pstat->debug_actual_byte_credit);
+}
+
 static int pp_qos_dbg_stat_show(struct seq_file *s, void *unused)
 {
 	struct platform_device *pdev;
@@ -868,56 +902,33 @@ static int pp_qos_dbg_stat_show(struct seq_file *s, void *unused)
 		}
 
 		node = get_node_from_phy(qdev->nodes, phy);
-		if (node_used(node)) {
-			seq_printf(s, "%u(%u) - ", id, phy);
-			if (node_queue(node)) {
-				seq_puts(s, "Queue\n");
-				memset(&qstat, 0, sizeof(qstat));
-				if (pp_qos_queue_stat_get(qdev, id, &qstat)
-						== 0) {
-					seq_printf(s, "queue_packets_occupancy:%u\n",
-						qstat.queue_packets_occupancy);
-					seq_printf(s, "queue_bytes_occupancy:%u\n",
-						qstat.queue_bytes_occupancy);
-					seq_printf(s, "total_packets_accepted:%u\n",
-						qstat.total_packets_accepted);
-					seq_printf(s, "total_packets_dropped:%u\n",
-						qstat.total_packets_dropped);
-					seq_printf(
-						s,
-						"total_packets_red_dropped:%u\n",
-						qstat.total_packets_red_dropped
-						);
-					seq_printf(s, "total_bytes_accepted:%llu\n",
-						qstat.total_bytes_accepted);
-					seq_printf(s, "total_bytes_dropped:%llu\n",
-						qstat.total_bytes_dropped);
-				} else {
-					seq_puts(s, "Could not obtained statistics\n");
-				}
-			} else if (node_port(node)) {
-				seq_puts(s, "Port\n");
-				memset(&pstat, 0, sizeof(pstat));
-				if (pp_qos_port_stat_get(qdev, id, &pstat)
-						== 0) {
-					seq_printf(
-						s,
-						"total_green_bytes in port's queues:%u\n",
-						pstat.total_green_bytes);
-					seq_printf(
-						s,
-						"total_yellow_bytes in port's queues:%u\n",
-						pstat.total_yellow_bytes);
-				} else {
-					seq_puts(s, "Could not obtained statistics\n");
-				}
-			} else {
-					seq_puts(s, "Node is not a queue or port, no statistics\n");
-			}
-		} else {
+
+		if (!node_used(node)) {
 			seq_printf(s, "Node %u is unused\n", id);
+			return 0;
+		}
+
+		seq_printf(s, "%u(%u) - ", id, phy);
+
+		if (node_queue(node)) {
+			seq_puts(s, "Queue\n");
+			memset(&qstat, 0, sizeof(qstat));
+			if (pp_qos_queue_stat_get(qdev, id, &qstat) == 0)
+				print_queue_stat(s, &qstat);
+			else
+				seq_puts(s, "Could not obtained statistics\n");
+		} else if (node_port(node)) {
+			seq_puts(s, "Port\n");
+			memset(&pstat, 0, sizeof(pstat));
+			if (pp_qos_port_stat_get(qdev, id, &pstat) == 0)
+				print_port_stat(s, &pstat);
+			else
+				seq_puts(s, "Could not obtained statistics\n");
+		} else {
+			seq_puts(s, "Node is not a queue or port, no stats\n");
 		}
 	}
+
 	return 0;
 }
 
diff --git a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_fw.c b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_fw.c
index 962688e5fcbe..79e4e1cb704e 100644
--- a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_fw.c
+++ b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_fw.c
@@ -1884,6 +1884,50 @@ static uint32_t *fw_write_get_node_info(
 	*buf++ = qos_u32_to_uc(cmd->addr);
 	return buf;
 }
+
+static uint32_t *fw_update_tree_cmd(uint32_t* buf, u32 phy, u32 flags,
+				    const struct fw_set_common *common,
+				    struct fw_set_parent *parent,
+				    const struct fw_set_port *port,
+				    u32 max_allowed_ddr_phy_addr,
+				    u16 *queues, u32 num_queues,
+				    u16 max_queues)
+{
+	u32 *bitmap_word;
+	u16 queue_idx;
+	u32 word_idx;
+	u32 bit_in_word;
+	u32 bitmap_words = max_queues >> 5;
+
+	pr_debug("port %u. words %u\n", phy, bitmap_words);
+
+	bitmap_word = (u32 *)kzalloc(bitmap_words * sizeof(u32), GFP_ATOMIC);
+	if (unlikely(!bitmap_word)) {
+		pr_err("queue bitmap allocation failed\n");
+		return 0;
+	}
+
+	for (queue_idx = 0; queue_idx < num_queues; queue_idx++) {
+		word_idx = *queues / 32;
+		bit_in_word = *queues - (32 * word_idx);
+		bitmap_word[word_idx] |= BIT(bit_in_word);
+		queues++;
+	}
+
+	*buf++ = qos_u32_to_uc(UC_QOS_COMMAND_UPDATE_PORT_TREE);
+	*buf++ = qos_u32_to_uc(flags);
+	*buf++ = qos_u32_to_uc(2 + bitmap_words);
+	*buf++ = qos_u32_to_uc(phy);
+	*buf++ = qos_u32_to_uc(max_allowed_ddr_phy_addr);
+
+	for (word_idx = 0; word_idx < bitmap_words; word_idx++)
+		*buf++ = qos_u32_to_uc(bitmap_word[word_idx]);
+
+	kfree(bitmap_word);
+
+	return buf;
+}
+
 /******************************************************************************/
 /*                                FW wrappers                                 */
 /******************************************************************************/
@@ -2539,6 +2583,12 @@ static void post_process(struct pp_qos_dev *qdev, union driver_cmd *dcmd)
 		pstat = dcmd->port_stats.stat;
 		pstat->total_green_bytes = fw_pstat->total_green_bytes;
 		pstat->total_yellow_bytes = fw_pstat->total_yellow_bytes;
+		pstat->debug_back_pressure_status =
+				fw_pstat->debug_back_pressure_status;
+		pstat->debug_actual_packet_credit =
+				fw_pstat->debug_actual_packet_credit;
+		pstat->debug_actual_byte_credit =
+				fw_pstat->debug_actual_byte_credit;
 		break;
 
 	case CMD_TYPE_GET_SYSTEM_INFO:
@@ -2675,6 +2725,10 @@ void enqueue_cmds(struct pp_qos_dev *qdev)
 	struct fw_set_parent parent = {0};
 	struct fw_set_port port = {0};
 	unsigned int id;
+	u16 *rlms;
+	u16 *rlm_ids;
+	u32 num_queues = 0;
+	u32 max_allowed_addr_phy;
 
 	if (PP_QOS_DEVICE_IS_ASSERT(qdev))
 		return;
@@ -2950,16 +3004,54 @@ void enqueue_cmds(struct pp_qos_dev *qdev)
 				continue;
 
 			prev = cur;
-			QOS_LOG_DEBUG("CMD_INTERNAL_RESUME_PORT port: %u\n",
+			QOS_LOG_DEBUG("CMD_INTERNAL_UPDATE_PORT_TREE port:%u\n",
 					internals->suspend_ports[i]);
 
-			cur = fw_write_set_port_cmd(
-					prev,
-					internals->suspend_ports[i],
-					flags,
-					&common,
-					&parent,
-					&port);
+			rlms = (u16 *)kzalloc(NUM_OF_QUEUES * sizeof(u16),
+					      GFP_ATOMIC);
+			if (!rlms) {
+				pr_err("queue array memory alloc failed\n");
+				continue;
+			}
+
+			rlm_ids = (u16 *)kzalloc(NUM_OF_QUEUES * sizeof(u16),
+						 GFP_ATOMIC);
+			if (!rlm_ids) {
+				kfree(rlms);
+				pr_err("rlm_ids memory alloc failed\n");
+				continue;
+			}
+
+			rc = get_port_phy_queues(qdev, id, rlms, rlm_ids,
+						 NUM_OF_QUEUES, &num_queues);
+			if (rc) {
+				pr_err("Failed fetching port queues\n");
+				kfree(rlms);
+				kfree(rlm_ids);
+				continue;
+			}
+
+			rc = store_port_queue_max_allowed(qdev, id, rlms,
+							  rlm_ids, num_queues);
+			if (rc) {
+				pr_err("Failed to set q's max allowed buf\n");
+				kfree(rlms);
+				kfree(rlm_ids);
+				continue;
+			}
+
+			max_allowed_addr_phy =
+				(u32)qdev->hwconf.max_allowed_ddr_phys;
+
+			cur = fw_update_tree_cmd(prev,
+						 internals->suspend_ports[i],
+						 flags, &common,
+						 &parent, &port,
+						 max_allowed_addr_phy,
+						 rlms, num_queues,
+						 NUM_OF_QUEUES);
+			kfree(rlms);
+			kfree(rlm_ids);
 
 			if (cur != prev) {
 				cmd_internal.base.pos = prev;
diff --git a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_linux.c b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_linux.c
index c00b02c8427f..09953f974a05 100644
--- a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_linux.c
+++ b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_linux.c
@@ -381,6 +381,24 @@ static int pp_qos_config_from_of_node(
 		 pdata->fw_logger_start,
 		 pdrvdata->dbg.fw_logger_addr);
 
+	pdata->max_allowed_sz = PAGE_ALIGN(NUM_OF_QUEUES * sizeof(u32));
+	pdata->max_allowed_ddr_virt = dmam_alloc_coherent(
+			dev,
+			pdata->max_allowed_sz,
+			&pdata->max_allowed_ddr_phys,
+			GFP_KERNEL | __GFP_ZERO);
+
+	if (pdata->max_allowed_ddr_virt == NULL) {
+		dev_err(dev, "Couldn't alloc %u bytes for max allowed buffer\n",
+			pdata->max_allowed_sz);
+		return -ENOMEM;
+	}
+
+	dev_dbg(dev, "Dma allocated %u bytes for max allowed buffer, bus address is 0x%08X, virtual addr is %p\n",
+		 pdata->max_allowed_sz,
+		 pdata->max_allowed_ddr_phys,
+		 pdata->max_allowed_ddr_virt);
+
 	return 0;
 }
 
diff --git a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_main.c b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_main.c
index 474f39704bbf..e6bc3aa4e69e 100644
--- a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_main.c
+++ b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_main.c
@@ -488,6 +488,72 @@ int pp_qos_port_get_queues(
 	return rc;
 }
 
+int get_port_phy_queues(struct pp_qos_dev *qdev, u32 port_id,
+			u16 *rlms, u16 *ids, u32 size, u32 *queues_num)
+{
+	s32 rc = 0;
+	u32 phy;
+	const struct qos_node *node;
+
+	if (unlikely(!qos_device_ready(qdev))) {
+		rc = -EINVAL;
+		goto out;
+	}
+
+	node = get_conform_node(qdev, port_id, node_port);
+	if (!node) {
+		rc = -EINVAL;
+		goto out;
+	}
+
+	phy = get_phy_from_node(qdev->nodes, node);
+	get_port_rlms(qdev, phy, rlms, size, queues_num);
+	get_node_queues(qdev, phy, ids, size, queues_num);
+out:
+	return rc;
+}
+
+int store_port_queue_max_allowed(struct pp_qos_dev *qdev,
+				 u32 port_id, u16 *rlms, u16 *rlms_ids,
+				 u32 queues_num)
+{
+	s32 rc = 0;
+	u32 queue_idx;
+	const struct qos_node *node;
+	unsigned long addr;
+
+	if (!qos_device_ready(qdev)) {
+		rc = -EINVAL;
+		goto out;
+	}
+
+	node = get_conform_node(qdev, port_id, node_port);
+	if (!node) {
+		rc = -EINVAL;
+		goto out;
+	}
+
+	/* Store each queue max allowed value */
+	for (queue_idx = 0; queue_idx < queues_num; queue_idx++) {
+		node = get_conform_node(qdev, *rlms_ids, node_queue);
+		if (!node) {
+			rc = -EINVAL;
+			goto out;
+		}
+
+		addr = (unsigned long)qdev->hwconf.max_allowed_ddr_virt +
+			(*rlms * sizeof(u32));
+
+		*(volatile unsigned long*)(addr) = node->data.queue.max_allowed;
+
+		rlms++;
+		rlms_ids++;
+	}
+
+out:
+	return rc;
+}
+
 static int _pp_qos_port_set(
 		struct pp_qos_dev *qdev,
 		unsigned int id,
@@ -2129,6 +2195,10 @@ struct pp_qos_dev *create_qos_dev_desc(struct qos_dev_init_info *initinfo)
 			initinfo->pl_data.fw_logger_start;
 		qdev->hwconf.fw_stat = initinfo->pl_data.fw_stat;
 		qdev->hwconf.qos_clock = initinfo->pl_data.qos_clock;
+		qdev->hwconf.max_allowed_ddr_virt =
+			initinfo->pl_data.max_allowed_ddr_virt;
+		qdev->hwconf.max_allowed_ddr_phys =
+			initinfo->pl_data.max_allowed_ddr_phys;
 		memcpy(&qdev->fwcom, &initinfo->fwcom, sizeof(struct fw_com));
 		rc = init_fwdata_internals(qdev);
 		if (rc)
diff --git a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_uc_defs.h b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_uc_defs.h
index 2b74b0e2890f..985e9fadf4f8 100644
--- a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_uc_defs.h
+++ b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_uc_defs.h
@@ -37,7 +37,7 @@
 /* UC version */
 #define UC_VERSION_MAJOR	(1)
 #define UC_VERSION_MINOR	(0)
-#define UC_VERSION_BUILD	(9)
+#define UC_VERSION_BUILD	(13)
 
 /**************************************************************************
  *! @enum	UC_STATUS
@@ -306,6 +306,8 @@ struct port_stats_s {
 
 	/* Following stats can not be reset */
 	u32	debug_back_pressure_status;
+	u32	debug_actual_packet_credit;
+	u32	debug_actual_byte_credit;
 };
 
 /**************************************************************************
@@ -376,9 +378,6 @@ struct queue_stats_s {
 
 	/* Following stats can not be reset */
 	u32	qmgr_num_queue_entries;
-	u32	qmgr_null_pop_queue_counter;
-	u32	qmgr_empty_pop_queue_counter;
-	u32	qmgr_null_push_queue_counter;
 };
 
 /**************************************************************************
@@ -527,6 +526,7 @@ enum uc_qos_command {
 	UC_QOS_COMMAND_DEBUG_PUSH_DESC,
 	UC_QOS_COMMAND_DEBUG_ADD_CREDIT_TO_PORT,
 	UC_QOS_COMMAND_GET_ACTIVE_QUEUES_STATS,
+	UC_QOS_COMMAND_UPDATE_PORT_TREE,
 };
 
 /**************************************************************************
diff --git a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_utils.c b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_utils.c
index 0c307270764c..24afadad54cb 100644
--- a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_utils.c
+++ b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_utils.c
@@ -1658,6 +1658,29 @@ static int update_ids_container(struct pp_qos_dev *qdev,
 	return 1;
 }
 
+struct rlm_container_metadata {
+	u32 next;
+	u16 *rlm;
+	u32 size;
+};
+
+static int update_rlm_container(struct pp_qos_dev *qdev,
+				struct qos_node *node, void *data)
+{
+	struct rlm_container_metadata *rlms;
+	u16 rlm;
+
+	rlms = (struct rlm_container_metadata *)data;
+	rlm = node->data.queue.rlm;
+
+	if (rlms->next < rlms->size) {
+		rlms->rlm[rlms->next] = rlm;
+		rlms->next++;
+	}
+
+	return 1;
+}
+
 static int node_queue_wrapper(const struct pp_qos_dev *qdev,
 		const struct qos_node *node, void *data)
 {
@@ -1677,6 +1700,19 @@ void get_node_queues(struct pp_qos_dev *qdev,
 			update_ids_container, &data);
 }
 
+void get_port_rlms(struct pp_qos_dev *qdev, u32 phy,
+		   u16 *rlms, u32 size, u32 *queues_num)
+{
+	struct rlm_container_metadata data = {0, rlms, size};
+
+	if (!rlms)
+		data.size = 0;
+
+	*queues_num = post_order_travers_tree(qdev, phy,
+					      node_queue_wrapper, NULL,
+					      update_rlm_container, &data);
+}
+
 static int node_in_grp(const struct pp_qos_dev *qdev,
 		const struct qos_node *node, void *data)
 {
diff --git a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_utils.h b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_utils.h
index 9b394845ce22..3859207fa444 100644
--- a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_utils.h
+++ b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_utils.h
@@ -215,6 +215,8 @@ struct hw_conf {
 	unsigned int	fw_logger_start;
 	unsigned int	fw_stat;
 	unsigned int	qos_clock; /* In MHZ. */
+	void*		max_allowed_ddr_virt;
+	dma_addr_t	max_allowed_ddr_phys;
 };
 
 struct fw_ver {
@@ -260,6 +262,9 @@ struct ppv4_qos_platform_data  {
 	unsigned int	fw_logger_start;
 	unsigned int	fw_stat;
 	unsigned int	qos_clock; /* In MHZ. */
+	void*		max_allowed_ddr_virt;
+	dma_addr_t	max_allowed_ddr_phys;
+	size_t		max_allowed_sz;
 };
 
 /* Info needed to create descriptor */
@@ -556,6 +561,19 @@ void node_init(const struct pp_qos_dev *qdev,
 	       unsigned int common,
 	       unsigned int parent,
 	       unsigned int child);
+
+/**
+ * get_port_rlms() - Return all rlms on a subtree
+ * @qdev:
+ * @phy:       Phy of subtree's node
+ * @rlms:      Array to store the rlms - may be NULL
+ * @size:      Size of array - may be 0
+ * @queues_num: The number of queues on the subtree
+ */
+void get_port_rlms(struct pp_qos_dev *qdev, u32 phy,
+		   u16 *rlms,
+		   u32 size, u32 *queues_num);
+
 /**
  * get_node_queues() - Return all queues on a subtree
  * @qdev:
@@ -659,6 +677,13 @@ int allocate_ddr_for_qm(struct pp_qos_dev *qdev);
 int allocate_ddr_for_qm_on_platform(struct pp_qos_dev *qdev);
 int check_sync_with_fw(struct pp_qos_dev *qdev);
 
+int get_port_phy_queues(struct pp_qos_dev *qdev, u32 port_id,
+			u16 *rlms, u16 *ids, u32 size, u32 *queues_num);
+int store_port_queue_max_allowed(struct pp_qos_dev *qdev,
+				 u32 port_id, u16 *rlms,
+				 u16 *rlms_ids,
+				 u32 queues_num);
+
 #ifdef PP_QOS_TEST
 void test_cmd_queue(void);
 void basic_tests(void);
diff --git a/include/net/pp_qos_drv.h b/include/net/pp_qos_drv.h
index 6dce721fe251..bcb345914754 100644
--- a/include/net/pp_qos_drv.h
+++ b/include/net/pp_qos_drv.h
@@ -162,11 +162,17 @@ struct pp_qos_dev;
  *			feeding this port
  * @total_yellow_bytes - total yellow bytes currently in all queues
  *			 feeding this port
+ * @debug_back_pressure_status - Port back pressure status
+ * @debug_actual_packet_credit - Actual packet credit
+ * @debug_actual_byte_credit - Actual byte credit
  */
 struct pp_qos_port_stat {
 	int reset;
 	unsigned int total_green_bytes;
 	unsigned int total_yellow_bytes;
+	unsigned int debug_back_pressure_status;
+	unsigned int debug_actual_packet_credit;
+	unsigned int debug_actual_byte_credit;
 };
 
 /**
