From 02b898fc7111df0144c856ab70715b828baacfc9 Mon Sep 17 00:00:00 2001
From: Gu Chao <gux.chao@intel.com>
Date: Tue, 27 Aug 2019 17:01:37 +0800
Subject: [PATCH] DRV_DPM_SW-17: Add new API to free RX/TX buffer in case DC FW
 hang

---
 drivers/net/datapath/dpm/datapath_api.c       | 22 ++++++++++++++++++++
 drivers/net/ethernet/lantiq/cqm/cbm_wrapper.c |  6 ++++++
 include/net/datapath_api.h                    | 30 ++++++++++++---------------
 include/net/lantiq_cbm_api.h                  | 10 +++++++++
 4 files changed, 51 insertions(+), 17 deletions(-)

diff --git a/drivers/net/datapath/dpm/datapath_api.c b/drivers/net/datapath/dpm/datapath_api.c
index b3b9fa46a7cb..87b91dfd93f1 100644
--- a/drivers/net/datapath/dpm/datapath_api.c
+++ b/drivers/net/datapath/dpm/datapath_api.c
@@ -2346,6 +2346,28 @@ void test(void)
 }
 #endif				/* DP_TEST_EXAMPLE */
 
+int dp_free_buffer_by_policy(struct dp_buffer_info *info, u32 flag)
+{
+	struct cqm_bm_free data = {0};
+	int ret;
+
+	if (!info)
+		return DP_FAILURE;
+
+	data.flag = flag;
+	data.buf = (void *)info->addr;
+	data.policy_base = info->policy_base;
+	data.policy_num = info->policy_num;
+
+	ret = cqm_buffer_free_by_policy(&data);
+	if (ret != CBM_OK) {
+		DP_ERR("cqm_buffer_free_by_policy failed with %d\n", ret);
+		return DP_FAILURE;
+	}
+	return DP_SUCCESS;
+}
+EXPORT_SYMBOL(dp_free_buffer_by_policy);
+
 int dp_basic_proc(void)
 {
 	struct dentry *p_node;
diff --git a/drivers/net/ethernet/lantiq/cqm/cbm_wrapper.c b/drivers/net/ethernet/lantiq/cqm/cbm_wrapper.c
index 8a66f451d2bb..ea26f57b0e92 100644
--- a/drivers/net/ethernet/lantiq/cqm/cbm_wrapper.c
+++ b/drivers/net/ethernet/lantiq/cqm/cbm_wrapper.c
@@ -150,6 +150,12 @@ void *cqm_buffer_alloc_by_policy(u32 pid, u32 flag, u32 policy)
 }
 EXPORT_SYMBOL(cqm_buffer_alloc_by_policy);
 
+int cqm_buffer_free_by_policy(struct cqm_bm_free *free_info)
+{
+	return CBM_FAILURE;
+}
+EXPORT_SYMBOL(cqm_buffer_free_by_policy);
+
 struct sk_buff *cbm_copy_skb(const struct sk_buff *skb, gfp_t gfp_mask)
 {
 	if (g_cbm_ops->cbm_copy_skb)
diff --git a/include/net/datapath_api.h b/include/net/datapath_api.h
index 8599c26bff5e..f83446c1d7c4 100644
--- a/include/net/datapath_api.h
+++ b/include/net/datapath_api.h
@@ -439,11 +439,11 @@ typedef struct dp_drv_mib {
 	u64 tx_bytes; /*!< tx bytes */
 } dp_drv_mib_t;
 
-/*! @brief struct for dp_buffer */
-struct dp_buffer {
-	void *phy_addr; /*!< physical buffer address to free */
-	int policy; /*!< buffer's policy associated */
-	int pool; /*!< buffer's pood associated */
+/*! @brief struct for dp_buffer_info */
+struct dp_buffer_info {
+	phys_addr_t addr; /*!< [in] physical address of buffer to free */
+	u32 policy_base;  /*!< [in] associated policy base*/
+	int policy_num;   /*!< [in] associated policy number*/
 };
 
 /*! @brief struct for dp_buffer */
@@ -1698,18 +1698,6 @@ int dp_set_pmapper(struct net_device *dev, struct dp_pmapper *mapper, u32 flag);
 int dp_get_pmapper(struct net_device *dev, struct dp_pmapper *mapper, u32 flag);
 
 /*!
- *@brief Datapath Manager buffer free API
- *@param[in] inst: DP instance ID
- *@param[in] buffer: buffer information which needed for buffer free
- *@param[in] flag: reserve for future
- *@return Returns DP_SUCCESS on succeed and DP_FAILURE on failure
- *@Note: This API is mainly used for ACA 4 Ring case to free RXIN buffers
- *       Maybe DP can do it internally and no need to export it.
- *       Later it will be finalized for LGM case
- */
-int dp_free_buffer(int inst, struct dp_buffer *buffer, u32 flag);
-
-/*!
  *@brief Datapath Manager DMA RX IRQ enable/disable API
  *@param[in] inst: DP instance ID
  *@param[in] ch: DMA RX Channel information
@@ -1820,6 +1808,14 @@ void *dp_get_ops(int inst, enum DP_OPS_TYPE type);
 int dp_get_mtu_size(struct net_device *dev, u32 *mtu_size);
 
 /*!
+ *@brief free Rx/Tx buffer
+ *@param[in] info: buffer info
+ *@param[in] flag: reserved
+ *@return DP_SUCCESS on success and DP_FAILURE on failure
+ */
+int dp_free_buffer_by_policy(struct dp_buffer_info *info, u32 flag);
+
+/*!
  *@brief get UMT ops registration
  *@param[in] inst: DP instance ID
  *@return UMT ops pointer if registered, or NULL if not registered
diff --git a/include/net/lantiq_cbm_api.h b/include/net/lantiq_cbm_api.h
index 3d75a01ac29f..db3de7e750a4 100644
--- a/include/net/lantiq_cbm_api.h
+++ b/include/net/lantiq_cbm_api.h
@@ -1193,6 +1193,16 @@ cbm_cpu_port_config_set(
 void *cbm_buffer_alloc(u32 pid, u32 flag, u32 size);
 void *cqm_buffer_alloc_by_policy(u32 pid, u32 flag, u32 policy);
 
+struct cqm_bm_free {
+	int cbm_inst;
+	u32 flag;
+	void *buf;   /* Physical address */
+	u32 policy_base; /* base policy */
+	int policy_num;  /* number of policy */
+};
+
+int cqm_buffer_free_by_policy(struct cqm_bm_free *free_info);
+
 /*! \brief	Free a CBM Buffer to one of the CBM Free Buffer Pools
 	\param[in] vpe_id  CPU/VPE# (0-3) which requests the buffer ; if -1, current VPE Id is used
 	\param[in] buf  Pointer to CBM Buffer
