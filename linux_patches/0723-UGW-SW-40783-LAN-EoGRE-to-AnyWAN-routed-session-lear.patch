From 1d7d20ead1a69b075a3f8fe3bca9595c36ea5dd0 Mon Sep 17 00:00:00 2001
From: agaraix <anath.bandux.garai@intel.com>
Date: Tue, 30 Jul 2019 09:25:18 +0530
Subject: [PATCH] UGW_SW-40783 : LAN/EoGRE to AnyWAN routed session learning
 fix.

Use PPA_F_SESSION_LOCAL_OUT flag to distinguish from other pre-routed session segment.
Remove ppa_session_is_bridged_tunnel(), as same flag is used to identify any tunnel session generically.
---
 drivers/net/ethernet/lantiq/ppa/ppa_hook.c | 36 ++++++++++++++++++++++++++----
 include/net/ppa/ppa_stack_al.h             |  9 --------
 2 files changed, 32 insertions(+), 13 deletions(-)

diff --git a/drivers/net/ethernet/lantiq/ppa/ppa_hook.c b/drivers/net/ethernet/lantiq/ppa/ppa_hook.c
index 6f7785d53d24..bc4fe8bbaf1a 100644
--- a/drivers/net/ethernet/lantiq/ppa/ppa_hook.c
+++ b/drivers/net/ethernet/lantiq/ppa/ppa_hook.c
@@ -774,6 +774,34 @@ static unsigned int ppa_localin_hook_fn(void *priv,
  
 	return NF_ACCEPT;
 }
+
+static unsigned int ppa_localout_hook_fn(void *priv,
+					 struct sk_buff *skb,
+					 const struct nf_hook_state *state)
+{
+	struct nf_conn *ct = NULL;
+	enum ip_conntrack_info ctinfo;
+
+	u32 flags;
+
+	if (ppa_hook_session_add_fn) {
+		ct = nf_ct_get(skb, &ctinfo);
+
+		if (ct)
+			ct = nf_ct_is_confirmed(ct) ? ct : NULL;
+
+		flags = PPA_F_BEFORE_NAT_TRANSFORM;
+		flags |= PPA_F_SESSION_LOCAL_OUT;
+		flags |= (CTINFO2DIR(ctinfo) == IP_CT_DIR_ORIGINAL)
+				? PPA_F_SESSION_ORG_DIR
+				: PPA_F_SESSION_REPLY_DIR;
+
+		ppa_hook_session_add_fn(skb, ct, flags);
+	}
+
+	return NF_ACCEPT;
+}
+
 static struct nf_hook_ops ipt_hook_ops[] __read_mostly = {
 	/* hook for pre-routing ipv4 packets */
 	{
@@ -819,15 +847,15 @@ static struct nf_hook_ops ipt_hook_ops[] __read_mostly = {
 	},
 	/* hook for local-out ipv4 packets */
 	{
-		.hook 		= ppa_prert_hook_fn,
-		.hooknum 	= 3, /*NF_IP_LOCAL_OUT*/
+		.hook		= ppa_localout_hook_fn,
+		.hooknum	= 3, /*NF_IP_LOCAL_OUT*/
 		.pf		= PF_INET,
 		.priority	= NF_IP_PRI_LAST,
 	},
 	/* hook for local-out ipv6 packets */
 	{
-		.hook 		= ppa_prert_hook_fn,
-		.hooknum 	= 3, /*NF_IP_LOCAL_OUT*/
+		.hook		= ppa_localout_hook_fn,
+		.hooknum	= 3, /*NF_IP_LOCAL_OUT*/
 		.pf		= PF_INET6,
 		.priority	= NF_IP6_PRI_LAST,
 	}
diff --git a/include/net/ppa/ppa_stack_al.h b/include/net/ppa/ppa_stack_al.h
index c174325ca106..d02e256c7106 100644
--- a/include/net/ppa/ppa_stack_al.h
+++ b/include/net/ppa/ppa_stack_al.h
@@ -1729,15 +1729,6 @@ int32_t ppa_if_is_pppoa(PPA_NETIF *netif, PPA_IFNAME *ifname);
 	\note
  */
 uint32_t ppa_is_session_equal(PPA_SESSION *p_session1, PPA_SESSION *p_session2);
-/*! \brief Returns true if the session is bridged tunnel like EoGRE.
-	\param[in] ppp_buf Pointer to the PPA buffer.
-	\param[in] p_session Pointer to the PPA session.
-	\return This function returns the one of the following values: \n
-	- IFX_TRUE if the session is bridged tunnel like EoGRE. \n
-	- IFX_FALSE if the session is not a bridged tunnel. \n
-	\note
- */
-bool ppa_session_is_bridged_tunnel(PPA_BUF *ppa_buf, PPA_SESSION *p_session);
 /*! \brief Get the Stack session Helper function for connection tracking. Such helper functions exist when a Connection tracking / SPI logic for the application protocol of that session. Examples are FTP control session, SIP signalling session etc.
 	\param[in] p_session Pointer to the PPA Session.
 	\return This function returns the one of the following values: \n
