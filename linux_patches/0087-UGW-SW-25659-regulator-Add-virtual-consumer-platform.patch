From 5ce33f78bbfd29941d231a1036c95f8331032f06 Mon Sep 17 00:00:00 2001
From: Waldemar Rymarkiewicz <waldemarx.rymarkiewicz@intel.com>
Date: Tue, 12 Jun 2018 13:46:27 +0200
Subject: [PATCH] UGW_SW-25659: regulator: Add virtual consumer platform device
 drv

This commit introduces a platform device module to enable regulator
virtual consumer driver. This is considered to be used for test purposes only.

See Documentation/devicetree/bindings/regulator/virtual-consumer-platdev.txt

Example of usage:

reg-virt-consumer: {
       compatible = "intel,reg-virt-platdev";
       regulator = <$buck1_reg>;
};

reg-virt-consumer2: {
       compatible = "intel,reg-virt-platdev";
       regulator = <$buck2_reg>;
};

Signed-off-by: Waldemar Rymarkiewicz <waldemarx.rymarkiewicz@intel.com>
---
 .../regulator/virtual-consumer-platdev.txt         | 25 ++++++++++
 drivers/regulator/Kconfig                          | 10 ++++
 drivers/regulator/Makefile                         |  1 +
 drivers/regulator/virtual-platdev.c                | 54 ++++++++++++++++++++++
 4 files changed, 90 insertions(+)

diff --git a/Documentation/devicetree/bindings/regulator/virtual-consumer-platdev.txt b/Documentation/devicetree/bindings/regulator/virtual-consumer-platdev.txt
new file mode 100644
index 000000000000..9f6275616841
--- /dev/null
+++ b/Documentation/devicetree/bindings/regulator/virtual-consumer-platdev.txt
@@ -0,0 +1,25 @@
+Voltage/Current Regulator Virtual Consumer
+
+Virtual consumer driver is mainly supposed to be used for debug and test
+purposes. It gives a posibility to control a regulator voltage/current from
+userspace.
+
+The bindings below helps to define a dummy platform device in device tree and
+bind the virtual consumer with a regulator you want to test.
+
+Properties:
+  - compatible: must be "intel,reg-virt-platdev"
+  - regulator: a phandle to existing regulator node.
+
+
+Example:
+
+reg-virt-consumer: {
+	compatible = "intel,reg-virt-platdev";
+	regulator = <$buck1_reg>;
+};
+
+reg-virt-consumer2: {
+	compatible = "intel,reg-virt-platdev";
+	regulator = <$buck2_reg>;
+};
diff --git a/drivers/regulator/Kconfig b/drivers/regulator/Kconfig
index 468a764605c4..3c57dedfa345 100644
--- a/drivers/regulator/Kconfig
+++ b/drivers/regulator/Kconfig
@@ -45,6 +45,16 @@ config REGULATOR_VIRTUAL_CONSUMER
 
 	  If unsure, say no.
 
+if REGULATOR_VIRTUAL_CONSUMER
+
+config REGULATOR_VIRTUAL_CONSUMER_PLATDEV
+	tristate "Virtual regulator consumer platform device support"
+	help
+	  This driver provides a platform virtual device for virtual consumer
+	  driver. This is mainly useful for test purposes.
+
+endif
+
 config REGULATOR_USERSPACE_CONSUMER
 	tristate "Userspace regulator consumer support"
 	help
diff --git a/drivers/regulator/Makefile b/drivers/regulator/Makefile
index a0b23ba2a1be..b82f18aed605 100644
--- a/drivers/regulator/Makefile
+++ b/drivers/regulator/Makefile
@@ -7,6 +7,7 @@ obj-$(CONFIG_REGULATOR) += core.o dummy.o fixed-helper.o helpers.o devres.o
 obj-$(CONFIG_OF) += of_regulator.o
 obj-$(CONFIG_REGULATOR_FIXED_VOLTAGE) += fixed.o
 obj-$(CONFIG_REGULATOR_VIRTUAL_CONSUMER) += virtual.o
+obj-$(CONFIG_REGULATOR_VIRTUAL_CONSUMER_PLATDEV) += virtual-platdev.o
 obj-$(CONFIG_REGULATOR_USERSPACE_CONSUMER) += userspace-consumer.o
 
 obj-$(CONFIG_REGULATOR_88PM800) += 88pm800.o
diff --git a/drivers/regulator/virtual-platdev.c b/drivers/regulator/virtual-platdev.c
new file mode 100644
index 000000000000..539e26375f41
--- /dev/null
+++ b/drivers/regulator/virtual-platdev.c
@@ -0,0 +1,54 @@
+/*
+ * Copyright (c) 2018, Intel Corporation.
+ *
+ * Author: Waldemar Rymarkiewicz <waldemarx.rymarkiewicz@intel.com>
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms and conditions of the GNU General Public License,
+ * version 2, as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ *
+ */
+#include <linux/platform_device.h>
+#include <linux/err.h>
+#include <linux/of.h>
+#include <linux/platform_device.h>
+
+static int __init virtual_platdev_init(void)
+{
+	struct device_node *np;
+	int ret;
+
+	for_each_compatible_node(np, NULL, "intel,reg-virt-platdev") {
+		struct device_node *reg_np;
+		struct platform_device_info devinfo;
+
+		reg_np = of_parse_phandle(np, "regulator", 0);
+		if (!reg_np) {
+			pr_err("Looking up regulator property in node %s failed",
+				reg_np->full_name);
+			ret = -ENODEV;
+			goto err;
+		}
+
+		memset(&devinfo, 0, sizeof(devinfo));
+		devinfo.name = "reg-virt-consumer";
+		devinfo.data = of_get_property(reg_np, "regulator-name", NULL);
+		devinfo.size_data = strlen(devinfo.name) + 1;
+		devinfo.id = PLATFORM_DEVID_AUTO;
+
+		of_node_put(reg_np);
+		of_node_put(np);
+
+		platform_device_register_full(&devinfo);
+	}
+
+err:
+	of_node_put(np);
+	return ret;
+}
+late_initcall(virtual_platdev_init);
