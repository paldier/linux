From fc41bd6d2686046d72f24e49a951f3548f1ae412 Mon Sep 17 00:00:00 2001
From: thampan <joby.thampan@intel.com>
Date: Fri, 10 Aug 2018 12:07:17 +0800
Subject: [PATCH] Fcs Generation and Pad Insertion code corrected

---
 .../net/ethernet/lantiq/switch-api/gsw_defconf.c   |  4 ++--
 .../net/ethernet/lantiq/switch-api/gsw_flow_core.c |  7 ++++---
 .../ethernet/lantiq/switch-api/mac/gswss_mac_api.h |  1 +
 .../net/ethernet/lantiq/switch-api/mac/mac_cfg.c   | 23 +++++++++++-----------
 .../net/ethernet/lantiq/switch-api/mac/xgmac_ptp.c | 12 ++++++++---
 include/net/switch_api/lantiq_gsw.h                | 13 ++++++++++++
 6 files changed, 40 insertions(+), 20 deletions(-)

diff --git a/drivers/net/ethernet/lantiq/switch-api/gsw_defconf.c b/drivers/net/ethernet/lantiq/switch-api/gsw_defconf.c
index e9e03698af31..2cac03bf439d 100644
--- a/drivers/net/ethernet/lantiq/switch-api/gsw_defconf.c
+++ b/drivers/net/ethernet/lantiq/switch-api/gsw_defconf.c
@@ -441,7 +441,7 @@ static int pmac_eg_cfg(struct core_ops *ops, u8 pmacid, u8 dpu)
 					eg_cfg.bMpe2Flag	= ((j & 3) >> 1);
 					eg_cfg.bMpe1Flag	= (j & 1);
 					eg_cfg.nFlowIDMsb	= k;
-					eg_cfg.bFcsEna	= 1;
+					eg_cfg.bFcsEna		= 1;
 
 					/* All other fields set to 0. */
 					ops->gsw_pmac_ops.Pmac_Eg_CfgSet(ops,
@@ -507,7 +507,7 @@ int pmac_get_eg_cfg(struct core_ops *ops, u8 pmacid, u8 dst_port)
 				       eg_cfg.bMpe1Flag,
 				       eg_cfg.bMpe2Flag,
 				       eg_cfg.nFlowIDMsb,
-                                       eg_cfg.bFcsEna);
+				       eg_cfg.bFcsEna);
 				printk("\n");
 			}
 		}
diff --git a/drivers/net/ethernet/lantiq/switch-api/gsw_flow_core.c b/drivers/net/ethernet/lantiq/switch-api/gsw_flow_core.c
index 210a0fdcaf48..e5908fe75583 100644
--- a/drivers/net/ethernet/lantiq/switch-api/gsw_flow_core.c
+++ b/drivers/net/ethernet/lantiq/switch-api/gsw_flow_core.c
@@ -17135,7 +17135,7 @@ GSW_return_t GSW_CPU_PortCfgGet(void *cdev, GSW_CPU_PortCfg_t *parm)
 					goto UNLOCK_AND_RETURN;
 				}
 
-				parm->bFcsGenerate = ops->get_fcsgen(ops);
+				parm->bFcsTxOps = ops->get_fcsgen(ops);
 #endif
 			}
 		}
@@ -17183,6 +17183,7 @@ GSW_return_t GSW_CPU_PortCfgSet(void *cdev, GSW_CPU_PortCfg_t *parm)
 	u32 RST, AS, AST, RXSH;
 	u32 ret;
 
+
 	if (gswdev == NULL) {
 		pr_err("%s:%s:%d", __FILE__, __func__, __LINE__);
 		return GSW_statusErr;
@@ -17267,8 +17268,8 @@ GSW_return_t GSW_CPU_PortCfgSet(void *cdev, GSW_CPU_PortCfg_t *parm)
 					ret = GSW_statusErr;
 					goto UNLOCK_AND_RETURN;
 				}
-
-				ops->set_fcsgen(ops, 1);
+				
+				ops->set_fcsgen(ops, parm->bFcsTxOps);
 #endif
 			}
 		}
diff --git a/drivers/net/ethernet/lantiq/switch-api/mac/gswss_mac_api.h b/drivers/net/ethernet/lantiq/switch-api/mac/gswss_mac_api.h
index 1d2ffdfaf0a8..c97b5c2e9f82 100644
--- a/drivers/net/ethernet/lantiq/switch-api/mac/gswss_mac_api.h
+++ b/drivers/net/ethernet/lantiq/switch-api/mac/gswss_mac_api.h
@@ -255,6 +255,7 @@ int gswss_adap_reset(void *pdev, u32 reset);
 int gswss_set_xgmac_tx_disable(void *pdev, u32 val);
 int gswss_set_xgmac_rx_disable(void *pdev, u32 val);
 int gswss_set_xgmac_crc_ctrl(void *pdev, u32 val);
+int gswss_get_xgmac_crc_ctrl(void *pdev);
 
 int gswss_get_mtu(void *pdev);
 u32 gswss_get_flowctrl_tx(void *pdev);
diff --git a/drivers/net/ethernet/lantiq/switch-api/mac/mac_cfg.c b/drivers/net/ethernet/lantiq/switch-api/mac/mac_cfg.c
index 840a1b075b94..9ea163fe7570 100644
--- a/drivers/net/ethernet/lantiq/switch-api/mac/mac_cfg.c
+++ b/drivers/net/ethernet/lantiq/switch-api/mac/mac_cfg.c
@@ -723,14 +723,12 @@ int mac_set_fcs_gen(void *pdev, u32 val)
 	spin_lock_bh(&pdata->mac_lock);
 #endif
 
-	/* CRC Insertion enable, PAD insertion Disable */
-	if (val == 1)
-		gswss_set_xgmac_crc_ctrl(pdev, 1);
-	else
-		/* CRC and PAD Insertion Disable */
-		gswss_set_xgmac_crc_ctrl(pdev, 2);
+	gswss_set_xgmac_crc_ctrl(pdev, val);
 
-	lmac_set_txfcs(pdev, val);
+	if ((val == GSW_CRC_PAD_INS_EN) || (val == GSW_CRC_EN_PAD_DIS))
+		lmac_set_txfcs(pdev, 1);
+	else
+		lmac_set_txfcs(pdev, 0);
 
 #ifdef __KERNEL__
 	spin_unlock_bh(&pdata->mac_lock);
@@ -748,7 +746,7 @@ int mac_get_fcs_gen(void *pdev)
 	spin_lock_bh(&pdata->mac_lock);
 #endif
 
-	tx_fcs = lmac_get_txfcs(pdev);
+	tx_fcs = gswss_get_xgmac_crc_ctrl(pdev);
 
 #ifdef __KERNEL__
 	spin_unlock_bh(&pdata->mac_lock);
@@ -804,10 +802,8 @@ int mac_enable_ts(void *pdev)
 	/* Tell adaption layer to remove Special Tag in Tx Directon */
 	gswss_set_mac_txsptag_op(pdev, MODE3);
 
-	/* Tell adaption layer to remove FCS in Rx Direction */
-	gswss_set_mac_rxfcs_op(pdev, MODE3);
-	
-        mac_int_enable(pdev);
+	mac_int_enable(pdev);
+
 	xgmac_set_mac_int(pdev, XGMAC_TSTAMP_EVNT, 1);
 
 #ifdef __KERNEL__
@@ -1038,6 +1034,9 @@ int mac_init(void *pdev)
 	 */
 	gswss_set_eee_cap(pdev, EEE_CAP_OFF);
 
+	/* Tell adaption layer to remove FCS in Rx Direction */
+	gswss_set_mac_rxfcs_op(pdev, MODE3);
+
 	/* Set XGMAC Port to MDIO Clause 22 */
 	mdio_set_clause(pdev, 1, pdata->mac_idx);
 
diff --git a/drivers/net/ethernet/lantiq/switch-api/mac/xgmac_ptp.c b/drivers/net/ethernet/lantiq/switch-api/mac/xgmac_ptp.c
index 8f492948ed01..3ed26d747e63 100644
--- a/drivers/net/ethernet/lantiq/switch-api/mac/xgmac_ptp.c
+++ b/drivers/net/ethernet/lantiq/switch-api/mac/xgmac_ptp.c
@@ -460,6 +460,7 @@ static void xgmac_get_rx_tstamp(struct mac_prv_data *pdata,
 {
 	__le64 regval;
 	u32 ts_hdr_len = 8;
+	u32 copy_hdr_len = 8;
 	struct skb_shared_hwtstamps *shhwtstamp = NULL;
 	u64 ns;
 
@@ -468,13 +469,18 @@ static void xgmac_get_rx_tstamp(struct mac_prv_data *pdata,
 	 * (8 bytes tstamp + 2 bytes Year)
 	 * Get the register setting for clk src
 	 */
-	if (pdata->hw_feat.ts_src == 2)
+	if (pdata->hw_feat.ts_src == 2) {
 		ts_hdr_len = 8;
-	else if (pdata->hw_feat.ts_src == 1 || pdata->hw_feat.ts_src == 3)
+		copy_hdr_len = 8;
+	} else if (pdata->hw_feat.ts_src == 1 || pdata->hw_feat.ts_src == 3) {
+		/* Since 2 bytes is fixed as 0, copy only 8 bytes */
+		copy_hdr_len = 8;
+		/* Skb timestamp stripping should be still 10 bytes */
 		ts_hdr_len = 10;
+	}
 
 	/* copy the bits out of the skb, and then trim the skb length */
-	skb_copy_bits(skb, skb->len - 8, regval, 8);
+	skb_copy_bits(skb, skb->len - copy_hdr_len, &regval, copy_hdr_len);
 	__pskb_trim(skb, skb->len - ts_hdr_len);
 
 
diff --git a/include/net/switch_api/lantiq_gsw.h b/include/net/switch_api/lantiq_gsw.h
index c3975728b0c0..7c95549d36da 100644
--- a/include/net/switch_api/lantiq_gsw.h
+++ b/include/net/switch_api/lantiq_gsw.h
@@ -2099,6 +2099,17 @@ typedef enum {
 	GSW_CPU_PARSER_RESERVED = 3
 } GSW_CPU_ParserHeaderCfg_t;
 
+/** \brief FCS and Pad Insertion operations for GSWIP 3.1
+    Used by \ref GSW_CPU_PortCfgSet/Get. */
+typedef enum {
+	/** CRC Pad Insertion Enable */
+	GSW_CRC_PAD_INS_EN	= 0,
+	/** CRC Insertion Enable Pad Insertion Disable */
+	GSW_CRC_EN_PAD_DIS	= 1,
+	/** CRC Pad Insertion Disable */
+	GSW_CRC_PAD_INS_DIS	= 2
+} GSW_FCS_TxOps_t;
+
 /** \brief Defines one port that is directly connected to the CPU and its applicable settings.
     Used by \ref GSW_CPU_PORT_CFG_SET and \ref GSW_CPU_PORT_CFG_GET. */
 typedef struct {
@@ -2136,6 +2147,8 @@ typedef struct {
 	GSW_CPU_ParserHeaderCfg_t  eMPE2ParserCfg;
 	/** GSWIP-3.0 specific Parser Header Config for both MPE-1 and MPE-2 set flag (i.e. MPE1=1, MPE2=1). */
 	GSW_CPU_ParserHeaderCfg_t  eMPE1MPE2ParserCfg;
+	/** GSWIP-3.1 FCS tx Operations. */
+	GSW_FCS_TxOps_t bFcsTxOps;
 } GSW_CPU_PortCfg_t;
 
 /** \brief Ethernet layer-2 header selector, when adding or removing on
