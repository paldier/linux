From 68df3567e36f23b1da75ec7a7d7ae4cc628d3a0b Mon Sep 17 00:00:00 2001
From: Rekha Eswaran <rekha.eswaran@intel.com>
Date: Mon, 2 Jul 2018 11:59:25 +0800
Subject: [PATCH] DRVLIB_SW-807: Symmetric VLAN testing & bug fix

---
 .../lantiq/datapath/datapath_logical_dev.c         |  2 +-
 .../net/ethernet/lantiq/datapath/datapath_swdev.c  | 33 +++++++++++-
 .../net/ethernet/lantiq/datapath/datapath_swdev.h  |  1 +
 .../lantiq/datapath/gswip31/datapath_ext_vlan.c    | 27 +++++-----
 .../lantiq/datapath/gswip31/datapath_switchdev.c   | 58 +++++++++++-----------
 5 files changed, 78 insertions(+), 43 deletions(-)

diff --git a/drivers/net/ethernet/lantiq/datapath/datapath_logical_dev.c b/drivers/net/ethernet/lantiq/datapath/datapath_logical_dev.c
index 259d21b9a3be..d5d590e458e6 100644
--- a/drivers/net/ethernet/lantiq/datapath/datapath_logical_dev.c
+++ b/drivers/net/ethernet/lantiq/datapath/datapath_logical_dev.c
@@ -163,6 +163,7 @@ int add_logic_dev(int inst, int port_id, struct net_device *dev,
 	}
 	logic_dev_tmp->dev = dev;
 	logic_dev_tmp->ep = port_id;
+	logic_dev_tmp->ctp = subif.subif;
 	if (dp_port_prop[inst].info.subif_platform_set_unexplicit(inst,
 								  port_id,
 								  logic_dev_tmp,
@@ -170,7 +171,6 @@ int add_logic_dev(int inst, int port_id, struct net_device *dev,
 		DP_DEBUG(DP_DBG_FLAG_LOGIC, "dp_set_unexplicit fail\n");
 		return -1;
 	}
-	logic_dev_tmp->ctp = subif.subif;
 	DP_DEBUG(DP_DBG_FLAG_LOGIC, "add logic dev list\n");
 	list_add(&logic_dev_tmp->list,
 		 &port_info->subif_info[masked_subif].logic_dev);
diff --git a/drivers/net/ethernet/lantiq/datapath/datapath_swdev.c b/drivers/net/ethernet/lantiq/datapath/datapath_swdev.c
index 1c8391597e99..a8fadb8453ed 100644
--- a/drivers/net/ethernet/lantiq/datapath/datapath_swdev.c
+++ b/drivers/net/ethernet/lantiq/datapath/datapath_swdev.c
@@ -61,6 +61,37 @@ u16 dp_swdev_cal_hash(unsigned char *name)
 	return (u16)(hash & 0x3F);
 }
 
+int dp_swdev_chk_bport_in_br(struct net_device *bp_dev, int bport, int inst)
+{
+	struct net_device *br_dev;
+	struct bridge_member_port *temp_list = NULL;
+	struct br_info *br_info;
+	int found = 0;
+	bool f_unlock = false;
+
+	if (!rtnl_is_locked()) {
+		rtnl_lock();
+		f_unlock = true;
+	}
+	br_dev = netdev_master_upper_dev_get(bp_dev);
+	if (f_unlock)
+		rtnl_unlock();
+	if (!br_dev)
+		return -1;
+	br_info = dp_swdev_bridge_entry_lookup(br_dev->name, inst);
+	list_for_each_entry(temp_list, &br_info->bp_list, list) {
+		if (temp_list->portid == bport) {
+			found = 1;
+			DP_DEBUG(DP_DBG_FLAG_SWDEV, "bport(%s) in bridge\n",
+				 bp_dev->name ? bp_dev->name : "NULL");
+			return 0;
+		}
+	}
+	DP_DEBUG(DP_DBG_FLAG_SWDEV, "bport(%s) not in bridge\n",
+		 bp_dev->name ? bp_dev->name : "NULL");
+	return -1;
+}
+
 struct br_info *dp_swdev_bridge_entry_lookup(char *br_name,
 					     int inst)
 {
@@ -220,8 +251,6 @@ static int dp_swdev_clr_gswip_cfg(struct bridge_id_entry_item *br_item,
 			 br_item->portid);
 		return 0;
 	}
-	DP_DEBUG(DP_DBG_FLAG_SWDEV,
-		 "No configuration,Pls check!!\n");
 	return 0;
 }
 
diff --git a/drivers/net/ethernet/lantiq/datapath/datapath_swdev.h b/drivers/net/ethernet/lantiq/datapath/datapath_swdev.h
index 167cc9843d6b..f00399bac033 100644
--- a/drivers/net/ethernet/lantiq/datapath/datapath_swdev.h
+++ b/drivers/net/ethernet/lantiq/datapath/datapath_swdev.h
@@ -62,6 +62,7 @@ extern struct hlist_head
 int dp_swdev_bridge_id_entry_free(int instance);
 int dp_swdev_bridge_id_entry_init(void);
 struct br_info *dp_swdev_bridge_entry_lookup(char *br_name, int inst);
+int dp_swdev_chk_bport_in_br(struct net_device *bp_dev, int bport, int inst);
 u16 crc_cal(const u8 *data, u16 len);
 u16 dp_swdev_cal_hash(u8 *dev_name);
 void dp_switchdev_exit(void);
diff --git a/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_ext_vlan.c b/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_ext_vlan.c
index 85bc8fb92ef0..de27324018ce 100644
--- a/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_ext_vlan.c
+++ b/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_ext_vlan.c
@@ -537,6 +537,18 @@ static int bp_rm_vlan(struct core_ops *ops, u32 bp,
 		return 0;
 }
 
+static int bp_diff(u32 *bp0, u32 num_bp0, u32 *bp1)
+{
+	u32 i, j;
+
+	for (i = 0; i < num_bp0; i++) {
+		for (j = 0; j < num_bp0 && bp0[j] != bp1[i]; j++);
+		if (j >= num_bp0)
+			break;
+	}
+	return i;
+}
+
 /* Function for VLAN configure */
 int set_gswip_ext_vlan(struct core_ops *ops, struct ext_vlan_info *vlan,
 		       int flag)
@@ -577,9 +589,8 @@ int set_gswip_ext_vlan(struct core_ops *ops, struct ext_vlan_info *vlan,
 		return -ENOMEM;
 
 	new_priv->num_bp = (u32)(vlan->n_vlan1 + vlan->n_vlan2);
-	new_priv->bp[0] = vlan->bp;
 
-	for (i = 0, j = 1; i < vlan->n_vlan1; i++, j++)
+	for (i = j = 0; i < vlan->n_vlan1; i++, j++)
 		new_priv->bp[j] = vlan->vlan1_list[i].bp;
 
 	for (i = 0; i < vlan->n_vlan2; i++, j++)
@@ -593,20 +604,12 @@ int set_gswip_ext_vlan(struct core_ops *ops, struct ext_vlan_info *vlan,
 		ret = bp_add_vlan(ops, vlan, 0, &bpcfg);
 	} else if (old_priv->num_bp < new_priv->num_bp) {
 		/* vlan added */
-		for (i = 0;
-		     ((u32)i < old_priv->num_bp) &&
-		     (old_priv->bp[i] == new_priv->bp[i]);
-		     i++)
-			;
+		i = bp_diff(old_priv->bp, old_priv->num_bp, new_priv->bp);
 
 		ret = bp_add_vlan(ops, vlan, i, &bpcfg);
 	} else if (old_priv->num_bp > new_priv->num_bp) {
 		/* vlan removed */
-		for (i = 0;
-		     ((u32)i < new_priv->num_bp) &&
-		     (old_priv->bp[i] == new_priv->bp[i]);
-		     i++)
-			;
+		i = bp_diff(new_priv->bp, new_priv->num_bp, old_priv->bp);
 
 		bp_rm_vlan(ops, old_priv->bp[i], &bpcfg);
 		ret = 0;
diff --git a/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_switchdev.c b/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_switchdev.c
index a2073ba20b3e..24531dd457ff 100644
--- a/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_switchdev.c
+++ b/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_switchdev.c
@@ -137,7 +137,6 @@ int dp_swdev_bridge_port_cfg_set(struct br_info *br_item,
 			}
 		}
 	}
-	DP_DEBUG(DP_DBG_FLAG_SWDEV, "%s successfully set\n", __func__);
 	return 0;
 }
 
@@ -334,34 +333,37 @@ int dp_gswip_ext_vlan(int inst, int vap, int ep)
 			PR_ERR("tmp->dev is NULL\n");
 			goto EXIT;
 		}
-		get_vlan_via_dev(tmp->dev, &vlan_prop);
-		if (vlan_prop.num == 2) {
-			DP_DEBUG(DP_DBG_FLAG_SWDEV,
-				 "VLAN Inner proto=%x, vid=%d\n",
-				 vlan_prop.in_proto, vlan_prop.in_vid);
-			DP_DEBUG(DP_DBG_FLAG_SWDEV,
-				 "VLAN out proto=%x, vid=%d\n",
-				 vlan_prop.out_proto, vlan_prop.out_vid);
-			vlan->vlan2_list[v2].outer_vlan.vid = vlan_prop.out_vid;
-			vlan->vlan2_list[v2].outer_vlan.tpid =
-							vlan_prop.out_proto;
-			vlan->vlan2_list[v2].ether_type = 0;
-			vlan->vlan2_list[v2].inner_vlan.vid = vlan_prop.in_vid;
-			vlan->vlan2_list[v2].inner_vlan.tpid =
-							vlan_prop.in_proto;
-			vlan->vlan2_list[v2].bp = tmp->bp;
-			v2 += 1;
-		} else if (vlan_prop.num == 1) {
-			DP_DEBUG(DP_DBG_FLAG_SWDEV,
-				 "outer VLAN proto=%x, vid=%d\n",
-				 vlan_prop.out_proto, vlan_prop.out_vid);
-			vlan->vlan1_list[v1].outer_vlan.vid = vlan_prop.out_vid;
-			vlan->vlan1_list[v1].outer_vlan.tpid =
-							vlan_prop.out_proto;
-			vlan->vlan1_list[v1].bp = tmp->bp;
-			v1 += 1;
+		ret = dp_swdev_chk_bport_in_br(tmp->dev, tmp->bp, inst);
+		if (ret == 0) {
+			get_vlan_via_dev(tmp->dev, &vlan_prop);
+			if (vlan_prop.num == 2) {
+				DP_DEBUG(DP_DBG_FLAG_SWDEV,
+					 "VLAN Inner proto=%x, vid=%d\n",
+					 vlan_prop.in_proto, vlan_prop.in_vid);
+				DP_DEBUG(DP_DBG_FLAG_SWDEV,
+					 "VLAN out proto=%x, vid=%d\n",
+					 vlan_prop.out_proto, vlan_prop.out_vid);
+				vlan->vlan2_list[v2].outer_vlan.vid = vlan_prop.out_vid;
+				vlan->vlan2_list[v2].outer_vlan.tpid =
+								vlan_prop.out_proto;
+				vlan->vlan2_list[v2].ether_type = 0;
+				vlan->vlan2_list[v2].inner_vlan.vid = vlan_prop.in_vid;
+				vlan->vlan2_list[v2].inner_vlan.tpid =
+								vlan_prop.in_proto;
+				vlan->vlan2_list[v2].bp = tmp->bp;
+				v2 += 1;
+			} else if (vlan_prop.num == 1) {
+				DP_DEBUG(DP_DBG_FLAG_SWDEV,
+					 "outer VLAN proto=%x, vid=%d\n",
+					 vlan_prop.out_proto, vlan_prop.out_vid);
+				vlan->vlan1_list[v1].outer_vlan.vid = vlan_prop.out_vid;
+				vlan->vlan1_list[v1].outer_vlan.tpid =
+								vlan_prop.out_proto;
+				vlan->vlan1_list[v1].bp = tmp->bp;
+				v1 += 1;
+			}
+			i += 1;
 		}
-		i += 1;
 	}
 	DP_DEBUG(DP_DBG_FLAG_SWDEV, "vlan1=%d vlan2=%d total vlan int=%d\n",
 		 v1, v2, i);
