From 73cc814eb888d8a3277bcb6284269dccb5de74aa Mon Sep 17 00:00:00 2001
From: Deepansh Rastogi <deepansh.rastogi@intel.com>
Date: Mon, 10 Jun 2019 13:06:49 +0530
Subject: [PATCH] UGW_SW-39408: Adding structure definitions and prototypes
 required for meter configuration set

---
 drivers/net/ethernet/lantiq/ppa/ppa_hal_wrapper.c |  9 ++++++++
 include/net/ppa/ppa_api.h                         | 15 ++++++++++++
 include/net/ppa/ppa_hal_api.h                     |  1 +
 include/net/ppa/ppa_hal_wrapper.h                 |  2 ++
 include/uapi/net/ppa_api.h                        | 28 +++++++++++++++++++++++
 5 files changed, 55 insertions(+)

diff --git a/drivers/net/ethernet/lantiq/ppa/ppa_hal_wrapper.c b/drivers/net/ethernet/lantiq/ppa/ppa_hal_wrapper.c
index aed175f61046..ee9ab0bdbc7e 100644
--- a/drivers/net/ethernet/lantiq/ppa/ppa_hal_wrapper.c
+++ b/drivers/net/ethernet/lantiq/ppa/ppa_hal_wrapper.c
@@ -337,6 +337,15 @@ uint32_t ppa_hsel_set_qos_shaper_entry(QOS_RATE_SHAPING_CFG *entry, uint32_t fla
 	return ppa_drv_hal_hook[hal_id](PPA_GENERIC_HAL_SET_QOS_SHAPER_CFG, (void *)entry, flag);
 }
 
+uint32_t ppa_hsel_set_qos_meter_entry(PPA_QOS_METER_CFG *entry, uint32_t flag, uint32_t hal_id)
+{
+	if (!ppa_drv_hal_hook[hal_id])
+		return PPA_FAILURE;
+
+	return ppa_drv_hal_hook[hal_id](PPA_GENERIC_HAL_SET_QOS_METER_CFG,(void *)entry, flag);
+}
+EXPORT_SYMBOL(ppa_hsel_set_qos_meter_entry);
+
 uint32_t ppa_hsel_mod_subif_port_cfg(QOS_MOD_SUBIF_PORT_CFG *entry, uint32_t flag, uint32_t hal_id)
 {
 	if (!ppa_drv_hal_hook[hal_id])
diff --git a/include/net/ppa/ppa_api.h b/include/net/ppa/ppa_api.h
index 103dd2567e7a..20545dc6eac0 100644
--- a/include/net/ppa/ppa_api.h
+++ b/include/net/ppa/ppa_api.h
@@ -188,6 +188,7 @@ typedef enum {
 #if IS_ENABLED(CONFIG_INTEL_IPQOS_MPE_DS_ACCEL)
 	MPE_DS_QOS,
 #endif
+	QOS_METER,
 	MAX_CAPS
 } PPA_API_CAPS;
 
@@ -930,6 +931,19 @@ typedef struct{
 	uint32_t 	timeout;	/*!< PPA timeout*/
 	uint16_t 	session_uid[2];	/*!< PPA session id*/
 } ppa_lro_entry;
+/*!
+  \brief QoS Meter configuration structure
+ */
+typedef struct {
+	PPA_QOS_METER_TYPE	type; /*!< Mode of Meter*/
+	uint32_t		enable; /*!< Enable for meter */
+	uint32_t		cir; /*!< Committed Information Rate in bytes/s */
+	uint32_t		cbs; /*!< Committed Burst Size in bytes */
+	uint32_t		pir; /*!< Peak Information Rate in bytes/s */
+	uint32_t		pbs; /*!< Peak Burst Size */
+	uint32_t		meterid; /*!< Meter ID Configured on the system*/
+	uint32_t		flags; /*!< Flags define operations on meters enbled*/
+}PPA_QOS_METER_CFG;
 /*
  * ####################################
  * Declaration
@@ -990,6 +1004,7 @@ int32_t ppa_add_class_rule(PPA_CLASS_RULE *rule);
 int32_t ppa_mod_class_rule(PPA_CLASS_RULE *rule);
 int32_t ppa_del_class_rule(PPA_CLASS_RULE *rule);
 int32_t ppa_get_class_rule(PPA_CLASS_RULE *rule);
+int32_t ppa_set_qos_meter(PPA_QOS_METER_CFG *meter_cfg);
 #endif
 int32_t ppa_inactivity_status(PPA_U_SESSION *);
 int32_t ppa_set_session_inactivity(PPA_U_SESSION *, int32_t);
diff --git a/include/net/ppa/ppa_hal_api.h b/include/net/ppa/ppa_hal_api.h
index 48e74b9a169f..41ab70d0ff33 100644
--- a/include/net/ppa/ppa_hal_api.h
+++ b/include/net/ppa/ppa_hal_api.h
@@ -261,6 +261,7 @@ typedef enum {
 	PPA_GENERIC_DATAPATH_SET_WAN_SEPARATE_FLAG,
 	PPA_GENERIC_DATAPATH_GET_WAN_SEPARATE_FLAG,
 	PPA_GENERIC_HAL_MOD_SUBIF_PORT_CFG,
+	PPA_GENERIC_HAL_SET_QOS_METER_CFG,
 	/*make sure it is the last one */
 	PPA_GENERIC_HAL_MAX_FLAG
 } PPA_GENERIC_HOOK_CMD;
diff --git a/include/net/ppa/ppa_hal_wrapper.h b/include/net/ppa/ppa_hal_wrapper.h
index b4e3161c3350..2f9be2bf86ed 100644
--- a/include/net/ppa/ppa_hal_wrapper.h
+++ b/include/net/ppa/ppa_hal_wrapper.h
@@ -82,6 +82,8 @@ extern uint32_t ppa_hsel_add_class_rule(PPA_CLASS_RULE *rule, uint32_t flag, uin
 extern uint32_t ppa_hsel_mod_class_rule(PPA_CLASS_RULE *rule, uint32_t flag, uint32_t hal_id);
 extern uint32_t ppa_hsel_del_class_rule(PPA_CLASS_RULE *rule, uint32_t flag, uint32_t hal_id);
 extern uint32_t ppa_hsel_get_class_rule(PPA_CLASS_RULE *rule, uint32_t flag, uint32_t hal_id);
+extern uint32_t ppa_hsel_set_qos_meter_entry(PPA_QOS_METER_CFG *entry,
+			uint32_t flag, uint32_t hal_id);
 #endif
 #if defined(RTP_SAMPLING_ENABLE) && RTP_SAMPLING_ENABLE
 extern uint32_t ppa_hsel_set_wan_mc_rtp(PPA_MC_INFO *entry, uint32_t hal_id);
diff --git a/include/uapi/net/ppa_api.h b/include/uapi/net/ppa_api.h
index 3c6d0f30d261..1c98461736aa 100755
--- a/include/uapi/net/ppa_api.h
+++ b/include/uapi/net/ppa_api.h
@@ -1150,6 +1150,27 @@ typedef struct {
 	int32_t			phys_shaperid;
 } PPA_QOS_SHAPER_CFG;
 /*!
+	\brief QoS Meter Mode Configuration
+ */
+typedef enum {
+	PPA_QOS_METER_TOKEN_BUCKET = 1,/*!< Simple Token Bucket */
+	PPA_QOS_METER_SR_TCM = 2, /*!< Single Rate Three Color Marker */
+	PPA_QOS_METER_TR_TCM = 3 /*!< Two Rate Three Color Marker */
+}PPA_QOS_METER_TYPE;
+/*!
+  \brief QoS Meter configuration structure
+ */
+typedef struct {
+	PPA_QOS_METER_TYPE	type; /*!< Mode of Meter*/
+	uint32_t		enable; /*!< Enable for meter */
+	uint32_t		cir; /*!< Committed Information Rate in bytes/s */
+	uint32_t		cbs; /*!< Committed Burst Size in bytes */
+	uint32_t		pir; /*!< Peak Information Rate in bytes/s */
+	uint32_t		pbs; /*!< Peak Burst Size */
+	uint32_t		meterid; /*!< Meter ID Configured on the system*/
+	uint32_t		flags; /*!< Flags define operations on meters enbled*/
+}PPA_QOS_METER_INFO;
+/*!
 	\brief This is the data structure for PPA QOS Internal INFO
  */
 typedef struct {
@@ -1988,6 +2009,7 @@ typedef union {
 	PPA_CMD_SW_SESSION_ENABLE_INFO sw_session_enable_info; /*!< PPA SW session enable parameter */
 	PPA_CMD_VARIABLE_VALUE_INFO var_value_info; /*!< PPA VARABILE value. */
 	PPA_CMD_DEL_SESSION_INFO del_session; /*!< PPA session delete info. */
+	PPA_QOS_METER_INFO meter_info; /*!< PPA qos meter info. */
 } PPA_CMD_DATA;
 /*@}*/ /* PPA_IOCTL */
 /* -------------------------------------------------------------------------- */
@@ -2106,6 +2128,7 @@ typedef enum {
 	PPA_CMD_MANAGE_SESSIONS_NR,
 	PPA_CMD_GET_SESSIONS_NR,
 	PPA_CMD_GET_SESSIONS_COUNT_NR,
+	PPA_CMD_SET_QOS_METER_NR, /*!< NR for PPA_CMD_SET_QOS_METER */
 	/* PPA_IOC_MAXNR should be the last one in the enumberation */
 	PPA_IOC_MAXNR /*!< NR for PPA_IOC_MAXNR */
 } PPA_IOC_NR;
@@ -2525,6 +2548,11 @@ typedef enum {
 	\note portid, queueid and weight should be set accordingly.
  */
 #define PPA_CMD_GET_QOS_SHAPER _IOR(PPA_IOC_MAGIC, PPA_CMD_GET_QOS_SHAPER_NR, PPA_CMD_RATE_INFO)
+/** PPA Set QOS rate Meter. Value is manipulated by _IOW() macro for final value
+ *   \param[in] PPA_QOS_METER_CFG The parameter points to a
+ *     \ref PPA_QOS_METER_CFG structure
+ *      */
+#define PPA_CMD_SET_QOS_METER _IOW(PPA_IOC_MAGIC, PPA_CMD_SET_QOS_METER_NR, PPA_QOS_METER_INFO)
 /** PPA get all exported hook count. Value is manipulated by _IOR() macro for final value
 	\param PPA_CMD_COUNT_INFO The parameter points to a
 	\ref PPA_CMD_COUNT_INFO structure
