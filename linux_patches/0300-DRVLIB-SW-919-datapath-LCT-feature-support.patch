From 892daf30e1e7d376b98ea51ac7bb37faa937ebf5 Mon Sep 17 00:00:00 2001
From: Rekha Eswaran <rekha.eswaran@intel.com>
Date: Fri, 14 Sep 2018 16:51:47 +0800
Subject: [PATCH] DRVLIB_SW-919: datapath LCT feature support

---
 drivers/net/ethernet/lantiq/datapath/datapath.h    |  1 +
 .../net/ethernet/lantiq/datapath/datapath_api.c    | 64 +++++++++++++++++++++-
 .../net/ethernet/lantiq/datapath/datapath_proc.c   | 20 +++++--
 .../lantiq/datapath/gswip31/datapath_gswip.c       |  4 +-
 include/net/datapath_api.h                         |  1 +
 5 files changed, 80 insertions(+), 10 deletions(-)

diff --git a/drivers/net/ethernet/lantiq/datapath/datapath.h b/drivers/net/ethernet/lantiq/datapath/datapath.h
index 169d91ca5f65..0a88116ef60b 100644
--- a/drivers/net/ethernet/lantiq/datapath/datapath.h
+++ b/drivers/net/ethernet/lantiq/datapath/datapath.h
@@ -455,6 +455,7 @@ struct pmac_port_info {
 	u32 tx_ring_offset;  /*PP: next tx_ring_addr=
 			      *   current tx_ring_addr + tx_ring_offset
 			      */
+	u32 lct_idx; /* LCT port register flag */
 #if IS_ENABLED(CONFIG_LTQ_DATAPATH_PTP1588)
 	u32 f_ptp:1; /* PTP1588 support enablement */
 #endif
diff --git a/drivers/net/ethernet/lantiq/datapath/datapath_api.c b/drivers/net/ethernet/lantiq/datapath/datapath_api.c
index 405a375b274f..a52a9d2f10b4 100644
--- a/drivers/net/ethernet/lantiq/datapath/datapath_api.c
+++ b/drivers/net/ethernet/lantiq/datapath/datapath_api.c
@@ -563,6 +563,9 @@ int32_t dp_register_subif_private(int inst, struct module *owner,
 		port_info->status = PORT_SUBIF_REGISTERED;
 		subif_id->port_id = port_id;
 		subif_id->subif = port_info->subif_info[i].subif;
+		/* set port as LCT port */
+		if (data->flag_ops & DP_F_DATA_LCT_SUBIF)
+			port_info->lct_idx = i;
 		port_info->num_subif++;
 		if ((port_info->num_subif == 1) ||
 		    (platfrm_data.act & TRIGGER_CQE_DP_ENABLE)) {
@@ -663,6 +666,9 @@ int32_t dp_deregister_subif_private(int inst, struct module *owner,
 				    dev, flags);
 		return res;
 	}
+	/* reset LCT port */
+	if (data->flag_ops & DP_F_DATA_LCT_SUBIF)
+		port_info->lct_idx = 0;
 	if (!list_empty(&port_info->subif_info[i].logic_dev)) {
 		DP_DEBUG(DP_DBG_FLAG_REG,
 			 "Unregister fail: logic_dev of %s not empty yet!\n",
@@ -1850,6 +1856,54 @@ static void rx_dbg_zero_port(struct sk_buff *skb, struct dma_rx_desc_0 *desc0,
 			 "Recv Data");
 }
 
+/*This macro is for testing packet reception to LCT dev*/
+#define TEST_LCT 1
+/*clone skb to send one copy to lct dev for multicast/broadcast
+ * otherwise for unicast send only to lct device
+ */
+static int dp_handle_lct(struct pmac_port_info *dp_port,
+			 struct sk_buff *skb, dp_rx_fn_t rx_fn)
+{
+	struct sk_buff *lct_skb;
+	int subif, ret;
+
+	subif = dp_port->lct_idx;
+	skb->dev = dp_port->subif_info[subif].netif;
+	if (skb->data[PMAC_SIZE] & 0x1) {
+		/*multicast/broadcast*/
+		DP_DEBUG(DP_DBG_FLAG_PAE, "LCT mcast or broadcast\n");
+		lct_skb = skb_clone(skb, GFP_ATOMIC);
+		if (!lct_skb) {
+			PR_ERR("LCT mcast/bcast skb clone fail\n");
+			return -1;
+		}
+		lct_skb->dev = dp_port->subif_info[subif].netif;
+		UP_STATS(dp_port->subif_info[subif].mib.rx_fn_rxif_pkt);
+#if TEST_LCT
+		skb_pull(lct_skb, sizeof(struct pmac_rx_hdr));
+		ret = netif_rx(lct_skb);
+		DP_DEBUG(DP_DBG_FLAG_PAE, "pkt sent lct(%s) ret(%d)\n",
+			 lct_skb->dev->name ? lct_skb->dev->name : "NULL",
+			 ret);
+#else
+		rx_fn(lct_skb->dev, NULL, lct_skb, lct_skb->len);
+#endif
+		return 1;
+	} else if (memcmp(skb->data + PMAC_SIZE, skb->dev->dev_addr, 6) == 0) {
+		/*unicast*/
+		DP_DEBUG(DP_DBG_FLAG_PAE, "LCT unicast\n");
+#if TEST_LCT
+		skb_pull(skb, sizeof(struct pmac_rx_hdr));
+		ret = netif_rx(skb);
+#else
+		rx_fn(skb->dev, NULL, skb, skb->len);
+#endif
+		UP_STATS(dp_port->subif_info[subif].mib.rx_fn_rxif_pkt);
+		return 0;
+	}
+	return 1;
+}
+
 #define DP_TS_HDRLEN	10
 
 static inline int32_t dp_rx_one_skb(struct sk_buff *skb, uint32_t flags)
@@ -1872,6 +1926,7 @@ static inline int32_t dp_rx_one_skb(struct sk_buff *skb, uint32_t flags)
 	u8 inst = 0;
 	struct pmac_port_info *dp_port;
 	struct mac_ops *ops;
+	int ret_lct = 1;
 
 	dp_port = &dp_port_info[inst][0];
 	if (!skb) {
@@ -2002,8 +2057,13 @@ static inline int32_t dp_rx_one_skb(struct sk_buff *skb, uint32_t flags)
 				skb->offload_fwd_mark = 1;
 		#endif
 		if (rx_tx_flag == 0) {
-			rx_fn(dev, NULL, skb, skb->len);
-			UP_STATS(dp_port->subif_info[vap].mib.rx_fn_rxif_pkt);
+			if (dp_port->lct_idx > 0)
+				ret_lct = dp_handle_lct(dp_port, skb, rx_fn);
+			if (ret_lct) {
+				rx_fn(dev, NULL, skb, skb->len);
+				UP_STATS(dp_port->subif_info[vap].mib.
+								rx_fn_rxif_pkt);
+			}
 		} else {
 			rx_fn(NULL, dev, skb, skb->len);
 			UP_STATS(dp_port->subif_info[vap].mib.rx_fn_txif_pkt);
diff --git a/drivers/net/ethernet/lantiq/datapath/datapath_proc.c b/drivers/net/ethernet/lantiq/datapath/datapath_proc.c
index f981c1ce2532..e77017924edb 100644
--- a/drivers/net/ethernet/lantiq/datapath/datapath_proc.c
+++ b/drivers/net/ethernet/lantiq/datapath/datapath_proc.c
@@ -155,6 +155,7 @@ int proc_port_dump(struct seq_file *s, int pos)
 	}
 	seq_puts(s, "\n");
 	seq_printf(s, "    mode:              %d\n", port->cqe_lu_mode);
+	seq_printf(s, "    LCT:               %d\n", port->lct_idx);
 	seq_printf(s, "    cb->rx_fn:         0x%0x\n", (u32)port->cb.rx_fn);
 	seq_printf(s, "    cb->restart_fn:    0x%0x\n",
 		   (u32)port->cb.restart_fn);
@@ -1399,7 +1400,7 @@ int del_vap(char *param_list[], int num)
 	int inst = 0;
 	struct dp_subif_data data = {0};
 
-	if (num < 3) {
+	if (num < 4) {
 		PR_ERR("Not enough parameters\n");
 		return -1;
 	}
@@ -1444,6 +1445,9 @@ int del_vap(char *param_list[], int num)
 	/*de-register */
 	subif.inst = inst;
 	subif.port_id = dp_port;
+	if (dp_strncmpi(param_list[3], "lct", 3) == 0) {/*lct */
+		data.flag_ops |= DP_F_DATA_LCT_SUBIF;
+	}
 	if (dp_register_subif_ext(inst, port_info->owner, dev,
 				  dev->name, &subif, &data,
 				  DP_F_DEREGISTER)) {
@@ -1646,7 +1650,7 @@ int add_vap(char *param_list[], int num)
 	struct net_device *dev = NULL;
 	int inst = 0;
 
-	if (num < 5) {
+	if (num < 6) {
 		PR_ERR("Not enough parameters\n");
 		return -1;
 	}
@@ -1711,11 +1715,14 @@ int add_vap(char *param_list[], int num)
 			return -1;
 		}
 	}
+	if (dp_strncmpi(param_list[5], "lct", 3) == 0) {/*lct */
+		data.flag_ops |= DP_F_DATA_LCT_SUBIF;
+	}
 	/*ctp-dev*/
-	if (param_list[5]) {
+	if (param_list[6]) {
 		char ctp_name[IFNAMSIZ] = {0};
 		/* create ctp dev */
-		strncpy(name, param_list[5], sizeof(name) - 1);
+		strncpy(name, param_list[6], sizeof(name) - 1);
 		snprintf(ctp_name, sizeof(ctp_name), "ctp%d_%d", dp_port, vap);
 		data.ctp_dev = create_new_vap_dev(ctp_name);
 		if (!data.ctp_dev) {
@@ -1949,14 +1956,15 @@ ssize_t proc_logical_dev_write(struct file *file, const char *buf,
 	PR_INFO("Get dp_subif info:echo get dev_name > /proc/dp/%s\n",
 		PROC_LOGICAL_DEV);
 	PR_INFO("Add vap:echo add_v <dp_port> <vap> <tcont> <qid> %s\n",
-		"<ctp_parent_dev> > " DP_PROC_BASE PROC_LOGICAL_DEV);
+		"lct <ctp_parent_dev> > " DP_PROC_BASE PROC_LOGICAL_DEV);
 	PR_INFO("   Note of qid:\n");
 	PR_INFO("     default  : auto share queue(default handling)\n");
 	PR_INFO("     new_queue: auto alloc new queue\n");
 	PR_INFO("     value(>0): specified queue id by caller.\n");
 	PR_INFO("   Note of vap: 0, 1, 2, 3,....\n");
 	PR_INFO("   Note of ctp_dev: for PON pmapper case\n");
-	PR_INFO("Del vap:echo del_v <dp_port> <vap> %s/%s\n",
+	PR_INFO("   Note of lct: for LCT device registration\n");
+	PR_INFO("Del vap:echo del_v <dp_port> <vap> lct %s/%s\n",
 		DP_PROC_BASE, PROC_LOGICAL_DEV);
 	PR_INFO("echo alloc %s %s > /sys/kernel/debug/dp/%s\n",
 		PROC_ALLOC_PARAM, PROC_ALLOC_PARAM_FLAGS,
diff --git a/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_gswip.c b/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_gswip.c
index fd25e7d06d23..c079d23909a2 100644
--- a/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_gswip.c
+++ b/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_gswip.c
@@ -48,14 +48,14 @@ static struct ctp_assign ctp_assign_info[] = {
 	/*note: multiple flags must put first */
 	{DP_F_GPON, GSW_LOGICAL_PORT_GPON, 256, 0, 0xFF, CQE_LU_MODE1},
 	{DP_F_EPON, GSW_LOGICAL_PORT_EPON, 256, 0, 0xFF, CQE_LU_MODE1},
-	{DP_F_GINT, GSW_LOGICAL_PORT_GINT, 8, 0, 0xFF, CQE_LU_MODE1},
+	{DP_F_GINT, GSW_LOGICAL_PORT_GINT, 16, 0, 0xFF, CQE_LU_MODE1},
 /*#define DP_ETH_TEST*/
 #ifndef DP_ETH_TEST
 	{DP_F_FAST_ETH_WAN, GSW_LOGICAL_PORT_8BIT_WLAN, 8, 8, 0xF,
 		CQE_LU_MODE2},
 	{DP_F_FAST_ETH_LAN | DP_F_ALLOC_EXPLICIT_SUBIFID,
 		GSW_LOGICAL_PORT_8BIT_WLAN, 8, 8, 0xF, CQE_LU_MODE2},
-	{DP_F_FAST_ETH_LAN, GSW_LOGICAL_PORT_8BIT_WLAN, 2, 8, 0xF,
+	{DP_F_FAST_ETH_LAN, GSW_LOGICAL_PORT_8BIT_WLAN, 4, 8, 0xF,
 		CQE_LU_MODE2},
 #else /*testing only */
 	{DP_F_FAST_ETH_WAN, GSW_LOGICAL_PORT_OTHER, 1, 8, 0xF, CQE_LU_MODE2},
diff --git a/include/net/datapath_api.h b/include/net/datapath_api.h
index cd23cb631dd8..315177e2741d 100644
--- a/include/net/datapath_api.h
+++ b/include/net/datapath_api.h
@@ -640,6 +640,7 @@ enum DP_SUBIF_DATA_FLAG {
 				       *  be created by caller itself, or
 				       *  by last call of dp_register_subif_ext
 				       */
+	DP_F_DATA_LCT_SUBIF = BIT(2), /*!< Register as LCT port */
 };
 
 /*! @brief struct dp_subif_data */
