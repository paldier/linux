From 5d363c514ac0214ff94329239e32582c84064af8 Mon Sep 17 00:00:00 2001
From: Rekha Eswaran <rekha.eswaran@intel.com>
Date: Thu, 29 Nov 2018 14:56:30 +0800
Subject: [PATCH] PONRTSYS-2737: Switch default color mode table config

---
 .../lantiq/datapath/gswip31/datapath_misc.c        | 216 +++++++++++++++++++++
 1 file changed, 216 insertions(+)

diff --git a/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_misc.c b/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_misc.c
index 742650ac74b1..03a076c82d7d 100644
--- a/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_misc.c
+++ b/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_misc.c
@@ -535,6 +535,217 @@ int alloc_q_to_port(struct ppv4_q_sch_port *info, u32 flag)
 }
 #endif /*CONFIG_LTQ_DATAPATH_QOS_HAL*/
 
+#define PRIO0	0
+#define PRIO1	1
+#define PRIO2	2
+#define PRIO3	3
+#define PRIO4	4
+#define PRIO5	5
+#define PRIO6	6
+#define PRIO7	7
+
+static int dp_gswip_color_5P3D_set(int mode, int inst)
+{
+	struct core_ops *gsw_handle;
+	GSW_QoS_colorMarkingEntry_t color_mark = {0};
+
+	gsw_handle = dp_port_prop[inst].ops[0];
+	color_mark.eMode = mode;
+	color_mark.nPriority[0] = PRIO0;
+	color_mark.nPriority[1] = PRIO0;
+	color_mark.nPriority[2] = PRIO0;
+	color_mark.nPriority[3] = PRIO0;
+	color_mark.nPriority[4] = PRIO2;
+	color_mark.nPriority[5] = PRIO2;
+	color_mark.nPriority[6] = PRIO2;
+	color_mark.nPriority[7] = PRIO2;
+	color_mark.nPriority[8] = PRIO4;
+	color_mark.nPriority[9] = PRIO4;
+	color_mark.nPriority[10] = PRIO4;
+	color_mark.nPriority[11] = PRIO4;
+	color_mark.nPriority[12] = PRIO6;
+	color_mark.nPriority[13] = PRIO6;
+	color_mark.nPriority[14] = PRIO7;
+	color_mark.nPriority[15] = PRIO7;
+	color_mark.nColor[0] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[1] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[2] = GSW_DROP_PRECEDENCE_GREEN;
+	color_mark.nColor[3] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[4] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[5] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[6] = GSW_DROP_PRECEDENCE_GREEN;
+	color_mark.nColor[7] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[8] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[9] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[10] = GSW_DROP_PRECEDENCE_GREEN;
+	color_mark.nColor[11] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[12] = GSW_DROP_PRECEDENCE_GREEN;
+	color_mark.nColor[13] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[14] = GSW_DROP_PRECEDENCE_GREEN;
+	color_mark.nColor[15] = GSW_DROP_PRECEDENCE_YELLOW;
+	if (gsw_core_api((dp_gsw_cb)gsw_handle->gsw_qos_ops
+				.QOS_ColorMarkingTableSet,
+				gsw_handle, &color_mark)) {
+		PR_ERR("GSW_QOS_COLOR_MARKING_CFG_SET failed\n");
+		return -1;
+	}
+	return 0;
+}
+
+static int dp_gswip_color_6P2D_set(int mode, int inst)
+{
+	struct core_ops *gsw_handle;
+	GSW_QoS_colorMarkingEntry_t color_mark = {0};
+
+	gsw_handle = dp_port_prop[inst].ops[0];
+	color_mark.eMode = mode;
+	color_mark.nPriority[0] = PRIO0;
+	color_mark.nPriority[1] = PRIO0;
+	color_mark.nPriority[2] = PRIO1;
+	color_mark.nPriority[3] = PRIO1;
+	color_mark.nPriority[4] = PRIO2;
+	color_mark.nPriority[5] = PRIO2;
+	color_mark.nPriority[6] = PRIO2;
+	color_mark.nPriority[7] = PRIO2;
+	color_mark.nPriority[8] = PRIO4;
+	color_mark.nPriority[9] = PRIO4;
+	color_mark.nPriority[10] = PRIO4;
+	color_mark.nPriority[11] = PRIO4;
+	color_mark.nPriority[12] = PRIO6;
+	color_mark.nPriority[13] = PRIO6;
+	color_mark.nPriority[14] = PRIO7;
+	color_mark.nPriority[15] = PRIO7;
+	color_mark.nColor[0] = GSW_DROP_PRECEDENCE_GREEN;
+	color_mark.nColor[1] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[2] = GSW_DROP_PRECEDENCE_GREEN;
+	color_mark.nColor[3] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[4] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[5] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[6] = GSW_DROP_PRECEDENCE_GREEN;
+	color_mark.nColor[7] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[8] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[9] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[10] = GSW_DROP_PRECEDENCE_GREEN;
+	color_mark.nColor[11] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[12] = GSW_DROP_PRECEDENCE_GREEN;
+	color_mark.nColor[13] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[14] = GSW_DROP_PRECEDENCE_GREEN;
+	color_mark.nColor[15] = GSW_DROP_PRECEDENCE_YELLOW;
+	if (gsw_core_api((dp_gsw_cb)gsw_handle->gsw_qos_ops
+				.QOS_ColorMarkingTableSet,
+				gsw_handle, &color_mark)) {
+		PR_ERR("GSW_QOS_COLOR_MARKING_CFG_SET failed\n");
+		return -1;
+	}
+	return 0;
+}
+
+static int dp_gswip_color_7P1D_set(int mode, int inst)
+{
+	struct core_ops *gsw_handle;
+	GSW_QoS_colorMarkingEntry_t color_mark = {0};
+
+	gsw_handle = dp_port_prop[inst].ops[0];
+	color_mark.eMode = mode;
+	color_mark.nPriority[0] = PRIO0;
+	color_mark.nPriority[1] = PRIO0;
+	color_mark.nPriority[2] = PRIO1;
+	color_mark.nPriority[3] = PRIO1;
+	color_mark.nPriority[4] = PRIO2;
+	color_mark.nPriority[5] = PRIO2;
+	color_mark.nPriority[6] = PRIO3;
+	color_mark.nPriority[7] = PRIO3;
+	color_mark.nPriority[8] = PRIO4;
+	color_mark.nPriority[9] = PRIO4;
+	color_mark.nPriority[10] = PRIO4;
+	color_mark.nPriority[11] = PRIO4;
+	color_mark.nPriority[12] = PRIO6;
+	color_mark.nPriority[13] = PRIO6;
+	color_mark.nPriority[14] = PRIO7;
+	color_mark.nPriority[15] = PRIO7;
+	color_mark.nColor[0] = GSW_DROP_PRECEDENCE_GREEN;
+	color_mark.nColor[1] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[2] = GSW_DROP_PRECEDENCE_GREEN;
+	color_mark.nColor[3] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[4] = GSW_DROP_PRECEDENCE_GREEN;
+	color_mark.nColor[5] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[6] = GSW_DROP_PRECEDENCE_GREEN;
+	color_mark.nColor[7] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[8] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[9] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[10] = GSW_DROP_PRECEDENCE_GREEN;
+	color_mark.nColor[11] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[12] = GSW_DROP_PRECEDENCE_GREEN;
+	color_mark.nColor[13] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[14] = GSW_DROP_PRECEDENCE_GREEN;
+	color_mark.nColor[15] = GSW_DROP_PRECEDENCE_YELLOW;
+	if (gsw_core_api((dp_gsw_cb)gsw_handle->gsw_qos_ops
+				.QOS_ColorMarkingTableSet,
+				gsw_handle, &color_mark)) {
+		PR_ERR("GSW_QOS_COLOR_MARKING_CFG_SET failed\n");
+		return -1;
+	}
+	return 0;
+}
+
+static int dp_gswip_color_8P0D_set(int mode, int inst)
+{
+	struct core_ops *gsw_handle;
+	GSW_QoS_colorMarkingEntry_t color_mark = {0};
+
+	gsw_handle = dp_port_prop[inst].ops[0];
+	color_mark.eMode = mode;
+	color_mark.nPriority[0] = PRIO0;
+	color_mark.nPriority[1] = PRIO0;
+	color_mark.nPriority[2] = PRIO1;
+	color_mark.nPriority[3] = PRIO1;
+	color_mark.nPriority[4] = PRIO2;
+	color_mark.nPriority[5] = PRIO2;
+	color_mark.nPriority[6] = PRIO3;
+	color_mark.nPriority[7] = PRIO3;
+	color_mark.nPriority[8] = PRIO4;
+	color_mark.nPriority[9] = PRIO4;
+	color_mark.nPriority[10] = PRIO5;
+	color_mark.nPriority[11] = PRIO5;
+	color_mark.nPriority[12] = PRIO6;
+	color_mark.nPriority[13] = PRIO6;
+	color_mark.nPriority[14] = PRIO7;
+	color_mark.nPriority[15] = PRIO7;
+	color_mark.nColor[0] = GSW_DROP_PRECEDENCE_GREEN;
+	color_mark.nColor[1] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[2] = GSW_DROP_PRECEDENCE_GREEN;
+	color_mark.nColor[3] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[4] = GSW_DROP_PRECEDENCE_GREEN;
+	color_mark.nColor[5] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[6] = GSW_DROP_PRECEDENCE_GREEN;
+	color_mark.nColor[7] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[8] = GSW_DROP_PRECEDENCE_GREEN;
+	color_mark.nColor[9] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[10] = GSW_DROP_PRECEDENCE_GREEN;
+	color_mark.nColor[11] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[12] = GSW_DROP_PRECEDENCE_GREEN;
+	color_mark.nColor[13] = GSW_DROP_PRECEDENCE_YELLOW;
+	color_mark.nColor[14] = GSW_DROP_PRECEDENCE_GREEN;
+	color_mark.nColor[15] = GSW_DROP_PRECEDENCE_YELLOW;
+	if (gsw_core_api((dp_gsw_cb)gsw_handle->gsw_qos_ops
+				.QOS_ColorMarkingTableSet,
+				gsw_handle, &color_mark)) {
+		PR_ERR("GSW_QOS_COLOR_MARKING_CFG_SET failed\n");
+		return -1;
+	}
+	return 0;
+}
+
+static int dp_platform_color_table_set(int inst)
+{
+	dp_gswip_color_8P0D_set(GSW_MARKING_PCP_8P0D, inst);
+	dp_gswip_color_7P1D_set(GSW_MARKING_PCP_7P1D, inst);
+	dp_gswip_color_6P2D_set(GSW_MARKING_PCP_6P2D, inst);
+	dp_gswip_color_5P3D_set(GSW_MARKING_PCP_5P3D, inst);
+
+	return 0;
+}
+
 int dp_platform_queue_set(int inst, u32 flag)
 {
 	int ret, i;
@@ -751,6 +962,11 @@ static int dp_platform_set(int inst, u32 flag)
 
 			return -1;
 		}
+		if (dp_platform_color_table_set(inst)) {
+			PR_ERR("dp_platform_color_table_set fail\n");
+
+			return -1;
+		}
 		if (cpu_vlan_mod_dis(inst)) {
 			PR_ERR("cpu_vlan_mod_dis fail\n");
 			return -1;
