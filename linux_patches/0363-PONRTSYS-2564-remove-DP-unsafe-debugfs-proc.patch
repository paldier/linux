From 590b7931cea2aee47ab9731cb64cdfd8e18b28af Mon Sep 17 00:00:00 2001
From: Rekha Eswaran <rekha.eswaran@intel.com>
Date: Tue, 13 Nov 2018 10:07:44 +0800
Subject: [PATCH] PONRTSYS-2564 remove DP unsafe debugfs proc

---
 .../net/ethernet/lantiq/datapath/datapath_proc.c   | 2191 +---------------
 .../lantiq/datapath/gswip30/datapath_proc.c        | 2632 --------------------
 .../lantiq/datapath/gswip31/datapath_proc.c        | 2155 ----------------
 3 files changed, 9 insertions(+), 6969 deletions(-)

diff --git a/drivers/net/ethernet/lantiq/datapath/datapath_proc.c b/drivers/net/ethernet/lantiq/datapath/datapath_proc.c
index db0cb986e709..644460c6979b 100644
--- a/drivers/net/ethernet/lantiq/datapath/datapath_proc.c
+++ b/drivers/net/ethernet/lantiq/datapath/datapath_proc.c
@@ -34,49 +34,20 @@
 
 #define PROC_DBG   "dbg"
 #define PROC_PORT   "port"
-#define PROC_MEM "mem"
-#define DP_PROC_PRINT_MODE "print_mode"
-#define PROC_DT  "dt"
-#define PROC_LOGICAL_DEV "logic"
 #define PROC_INST_DEV "inst_dev"
 #define PROC_INST_MOD "inst_mod"
 #define PROC_INST_HAL "inst_hal"
 #define PROC_INST "inst"
-#define PROC_TX_PKT "tx"
 #define PROC_QOS  "qos"
-#define PROC_ASYM_VLAN  "asym_vlan"
-#define PROC_METER "meter"
-#define PROC_ALLOC_PARAM "-p <port-id> -t <inst> -o <owner>"
-#define PROC_ALLOC_PARAM_FLAGS "-f <flags/(ETH_LAN/ETH_WAN/" \
-			       "FAST_WLAN/DSL/Tunne_loop/" \
-			       "DirectPath/GPON/EPON/GINT/.. >"
-#define PROC_FREE_PARAM "-p <port-id> -t <inst>"
 
 static int tmp_inst;
 static ssize_t proc_port_write(struct file *file, const char *buf,
 			       size_t count, loff_t *ppos);
-static struct module owner[DP_MAX_INST][MAX_DP_PORTS] = {0};
 #if defined(CONFIG_LTQ_DATAPATH_DBG) && CONFIG_LTQ_DATAPATH_DBG
 static void proc_dbg_read(struct seq_file *s);
 static ssize_t proc_dbg_write(struct file *, const char *, size_t, loff_t *);
 #endif
 static int proc_port_dump(struct seq_file *s, int pos);
-static int proc_write_mem(struct file *, const char *, size_t, loff_t *);
-static int proc_asym_vlan(struct file *, const char *, size_t, loff_t *);
-static void print_device_tree_node(struct device_node *node, int depth);
-static ssize_t proc_dt_write(struct file *file, const char *buf,
-			     size_t count, loff_t *ppos);
-static ssize_t proc_logical_dev_write(struct file *file, const char *buf,
-				      size_t count, loff_t *ppos);
-static ssize_t proc_meter_write(struct file *file, const char *buf,
-				size_t count, loff_t *ppos);
-static void meter_create_help(void);
-
-static int alloc_port(char *param_list[], int num);
-static int free_port(char *param_list[], int num);
-static int32_t dp_cb_rx(struct net_device *rxif,
-			struct net_device *txif,
-			struct sk_buff *skb, int32_t len);
 static int proc_port_init(void);
 
 int proc_port_init(void)
@@ -95,6 +66,8 @@ int proc_port_dump(struct seq_file *s, int pos)
 	struct pmac_port_info *port = get_port_info(tmp_inst, pos);
 	u16 start = 0;
 
+	if (!capable(CAP_SYS_PACCT))
+		return -1;
 	if (!port) {
 		PR_ERR("Why port is NULL\n");
 		return -1;
@@ -371,6 +344,8 @@ ssize_t proc_port_write(struct file *file, const char *buf, size_t count,
 	char *param_list[10];
 	int inst;
 
+	if (!capable(CAP_SYS_PACCT))
+		return count;
 	len = (sizeof(str) > count) ? count : sizeof(str) - 1;
 	len -= copy_from_user(str, buf, len);
 	str[len] = 0;
@@ -425,6 +400,8 @@ void proc_dbg_read(struct seq_file *s)
 {
 	int i;
 
+	if (!capable(CAP_SYS_ADMIN))
+		return;
 	seq_printf(s, "dp_dbg_flag=0x%08x\n", dp_dbg_flag);
 
 	seq_printf(s, "Supported Flags =%d\n", get_dp_dbg_flag_str_size());
@@ -461,6 +438,9 @@ ssize_t proc_dbg_write(struct file *file, const char *buf, size_t count,
 	char *tmp_buf;
 	#define BUF_SIZE_TMP 2000
 
+	if (!capable(CAP_SYS_ADMIN))
+		return count;
+
 	len = (sizeof(str) > count) ? count : sizeof(str) - 1;
 	len -= copy_from_user(str, buf, len);
 	str[len] = 0;
@@ -511,2170 +491,17 @@ ssize_t proc_dbg_write(struct file *file, const char *buf, size_t count,
 }
 #endif
 
-/**
- * \brief directly read memory address with 4 bytes alignment.
- * \param  reg_addr memory address (it must be 4 bytes alignment)
- * \param  shift to the expected bits (its value is from 0 ~ 31)
- * \param  size the bits number (its value is from 1 ~ 32).
- *  Note: shift + size <= 32
- * \param  buffer destionation
- * \return on Success return 0
- */
-int32_t dp_mem_read(u32 reg_addr, u32 shift, u32 size,
-		    u32 *buffer, u32 base)
-{
-	u32 v;
-	u32 mask = 0;
-	int i;
-
-	/*generate mask */
-	for (i = 0; i < size; i++)
-		mask |= 1 << i;
-
-	mask = mask << shift;
-
-	/*read data from specified address */
-	if (base == 4)
-		v = *(u32 *)reg_addr;
-	else if (base == 2)
-		v = *(u16 *)reg_addr;
-	else
-		v = *(u8 *)reg_addr;
-
-	v = dp_get_val(v, mask, shift);
-
-	*buffer = v;
-	return 0;
-}
-
-/**
- * \brief directly write memory address with
- * \param  reg_addr memory address (it must be 4 bytes alignment)
- * \param  shift to the expected bits (its value is from 0 ~ 31)
- * \param  size the bits number (its value is from 1 ~ 32)
- * \param  value value writen to
- * \return on Success return 0
- */
-int32_t dp_mem_write(u32 reg_addr, u32 shift, u32 size,
-		     u32 value, u32 base)
-{
-	u32 tmp = 0;
-	u32 mask = 0;
-	int i;
-
-	/*generate mask */
-	for (i = 0; i < size; i++)
-		mask |= 1 << i;
-
-	mask = mask << shift;
-
-	/*read data from specified address */
-	if (base == 4) {
-		tmp = *(u32 *)reg_addr;
-	} else if (base == 2) {
-		tmp = *(u16 *)reg_addr;
-	} else if (base == 1) {
-		tmp = *(u8 *)reg_addr;
-	} else {
-		PR_ERR("wrong base in dp_mem_write\n");
-		return 0;
-	}
-
-	dp_set_val(tmp, value, mask, shift);
-
-	if (base == 4)
-		*(u32 *)reg_addr = tmp;
-	else if (base == 2)
-		*(u16 *)reg_addr = tmp;
-	else
-		*(u8 *)reg_addr = tmp;
-
-	return 0;
-}
-
-#define MODE_ACCESS_BYTE  1
-#define MODE_ACCESS_SHORT 2
-#define MODE_ACCESS_DWORD 4
-
-#define ACT_READ   1
-#define ACT_WRITE  2
-static int proc_write_mem(struct file *file, const char *buf, size_t count,
-			  loff_t *ppos)
-{
-	char str[100];
-	int num;
-	char *param_list[20] = { NULL };
-	int i, k, len;
-	u32 line_max_num = 32;	/* per line number printed */
-	u32 addr = 0;
-	u32 v = 0;
-	u32 act = ACT_READ;
-	u32 bit_offset = 0;
-	u32 bit_num = 32;
-	u32 repeat = 1;
-	u32 mode = MODE_ACCESS_DWORD;
-	int v_flag = 0;
-	char *tmp_buf;
-
-	len = sizeof(str) < count ? sizeof(str) - 1 : count;
-	len = len - copy_from_user(str, buf, len);
-	str[len] = 0;
-	num = dp_split_buffer(str, param_list, ARRAY_SIZE(param_list));
-
-	if (num < 2)
-		goto proc_help;
-
-	if (dp_strncmpi(param_list[0], "w", 1) == 0)
-		act = ACT_WRITE;
-	else if (dp_strncmpi(param_list[0], "r", 1) == 0)
-		act = ACT_READ;
-	else
-		goto proc_help;
-
-	if (num < 3)
-		goto proc_help;
-
-	k = 1;
-
-	while (k < num) {
-		if (dp_strncmpi(param_list[k], "-s", strlen("-s")) == 0) {
-			addr = dp_atoi(param_list[k + 1]);
-			k += 2;
-		} else if (dp_strncmpi(param_list[k], "-o", strlen("-o")) == 0) {
-			bit_offset = dp_atoi(param_list[k + 1]);
-			k += 2;
-		} else if (dp_strncmpi(param_list[k], "-n", strlen("-n")) == 0) {
-			bit_num = dp_atoi(param_list[k + 1]);
-			k += 2;
-		} else if (dp_strncmpi(param_list[k], "-r", strlen("-r")) == 0) {
-			repeat = dp_atoi(param_list[k + 1]);
-			k += 2;
-		} else if (dp_strncmpi(param_list[k], "-v", strlen("-v")) == 0) {
-			v = dp_atoi(param_list[k + 1]);
-			k += 2;
-			v_flag = 1;
-		} else if (dp_strncmpi(param_list[k], "-b", strlen("-b")) == 0) {
-			mode = MODE_ACCESS_BYTE;
-			k += 1;
-		} else if (dp_strncmpi(param_list[k], "-w", strlen("-w")) == 0) {
-			mode = MODE_ACCESS_SHORT;
-			k += 1;
-		} else if (dp_strncmpi(param_list[k], "-d", strlen("-d")) == 0) {
-			mode = MODE_ACCESS_DWORD;
-			k += 1;
-		} else {
-			PR_INFO("unknown command option: %s\n",
-				param_list[k]);
-			break;
-		}
-	}
-
-	if (bit_num > mode * 8)
-		bit_num = mode * 8;
-
-	if (repeat == 0)
-		repeat = 1;
-
-	if (!addr) {
-		PR_ERR("addr cannot be zero\n");
-		goto EXIT;
-	}
-
-	if ((mode != MODE_ACCESS_DWORD) && (mode != MODE_ACCESS_SHORT) &&
-	    (mode != MODE_ACCESS_BYTE)) {
-		PR_ERR("wrong access mode: %d bytes\n", mode);
-		goto EXIT;
-	}
-
-	if ((act == ACT_WRITE) && !v_flag) {
-		PR_ERR("For write command it needs to provide -v\n");
-		goto EXIT;
-	}
-
-	if (bit_offset > mode * 8 - 1) {
-		PR_ERR("valid bit_offset range:0 ~ %d\n", mode * 8 - 1);
-		goto EXIT;
-	}
-
-	if ((bit_num > mode * 8) || (bit_num < 1)) {
-		PR_ERR("valid bit_num range:0 ~ %d. Current bit_num=%d\n",
-		       mode * 8, bit_num);
-		goto EXIT;
-	}
-
-	if ((bit_offset + bit_num) > mode * 8) {
-		PR_ERR("valid bit_offset+bit_num range:0 ~ %d\n", mode * 8);
-		goto EXIT;
-	}
-
-	if ((addr % mode) != 0) {	/*access alignment */
-		PR_ERR("Cannot access 0x%08x in %d bytes\n", addr, mode);
-		goto EXIT;
-	}
-
-	line_max_num /= mode;
-
-	if (act == ACT_WRITE)
-		PR_INFO
-		    ("act=%s addr=0x%08x mode=%s %s=%d %s=%d v=0x%08x\n",
-		     "write", addr,
-		     (mode ==
-		      MODE_ACCESS_DWORD) ? "dword" : ((mode ==
-						       MODE_ACCESS_SHORT) ?
-						      "short" : "DWORD"),
-		     "bit_offset",
-		     bit_offset,
-		     "bit_num",
-		     bit_num,
-		     v);
-	else if (act == ACT_READ)
-		PR_INFO
-		    ("act=%s addr=0x%08x mode=%s bit_offset=%d bit_num=%d\n",
-		     "Read", addr,
-		     (mode ==
-		      MODE_ACCESS_DWORD) ? "dword" : ((mode ==
-						       MODE_ACCESS_SHORT) ?
-						      "short" : "DWORD"),
-		     bit_offset, bit_num);
-
-	if (act == ACT_WRITE)
-		for (i = 0; i < repeat; i++)
-			dp_mem_write(addr + mode * i, bit_offset, bit_num, v,
-				     mode);
-	else {
-		#define CH_PER_NUM  11 /*like 0X12345678*/
-		int offset = 0;
-
-		tmp_buf = kmalloc((line_max_num + 1) * CH_PER_NUM, GFP_KERNEL);
-		if (!tmp_buf)
-			return count;
-		for (i = 0; i < repeat; i++) {
-			v = 0;
-			dp_mem_read(addr + mode * i, bit_offset, bit_num, &v,
-				    mode);
-
-			/*print format control */
-			if ((i % line_max_num) == 0)
-				offset += sprintf(tmp_buf + offset,
-						  "0x%08x: ", addr + mode * i);
-
-			if (mode == MODE_ACCESS_DWORD)
-				offset += sprintf(tmp_buf + offset, "0x%08x ",
-						  v);
-			else if (mode == MODE_ACCESS_SHORT)
-				offset += sprintf(tmp_buf + offset, "0x%04x ",
-						  v);
-			else
-				offset += sprintf(tmp_buf + offset, "0x%02x ",
-						  v);
-
-			if ((i % line_max_num) == (line_max_num - 1)) {
-				offset += sprintf(tmp_buf + offset, "\n");
-				PR_INFO("%s", tmp_buf);
-				offset = 0;
-				}
-		}
-		if (offset) {
-			offset += sprintf(tmp_buf + offset, "\n");
-			PR_INFO("%s", tmp_buf);
-		}
-		kfree(tmp_buf);
-	}
-	PR_INFO("\n");
-EXIT:
-	return count;
-
-proc_help:
-	PR_INFO("echo <write/w> %s -s %s [-r %s]-v <value> [-o %s] [-n %s]\n",
-		"[-d/w/b]",
-		"<start_v_addr>",
-		"<repeat_times>",
-		"<bit_offset>",
-		"<bit_num>");
-	PR_INFO("echo <read/r>  %s -s %s [-r %s] [-o %s] [-n %s]\n",
-		"[-d/w/b]",
-		"<start_v_addr>",
-		"<repeat_times>",
-		"<bit_offset>",
-		"<bit_num>");
-	PR_INFO("\t -d: default read/write in dwords, ie 4 bytes\n");
-	PR_INFO("\t -w: read/write in short, ie 2 bytes\n");
-	PR_INFO("\t -b: read/write in bytes, ie 1 bytes\n");
-
-	return count;
-}
-
-static void set_dev(struct dp_tc_vlan *vlan, struct net_device *dev, int
-		    def_apply, int dir, int n_vlan0, int n_vlan1, int n_vlan2,
-		    int mcast)
-{
-	vlan->dev = dev;
-	vlan->def_apply = def_apply;
-	vlan->mcast_flag = mcast;
-	vlan->dir = dir;
-	vlan->n_vlan0 = n_vlan0;
-	vlan->n_vlan1 = n_vlan1;
-	vlan->n_vlan2 = n_vlan2;
-}
-
-static void set_pattern(struct dp_pattern_vlan *patt,
-			int prio, int vid, int tpid,
-			int dei, int proto)
-{
-	patt->prio = prio;
-	patt->vid = vid;
-	patt->tpid = tpid;
-	patt->dei = dei;
-	patt->proto = proto;
-}
-
-static void set_action(struct dp_act_vlan *act, int action, int pop_n, int
-		       push_n)
-{
-	act->act = action;
-	act->pop_n = pop_n;
-	act->push_n = push_n;
-}
-
-static void set_tag(struct dp_act_vlan *act, int copy,  int index, int prio,
-		    int vid, int tpid, int dei)
-{
-	if ((copy == CP_FROM_INNER) || (copy == CP_FROM_OUTER)) {
-		act->prio[index] = copy;
-		act->vid[index] = copy;
-		act->tpid[index] = copy;
-		act->dei[index] = copy;
-	} else {
-		act->prio[index] = prio;
-		act->vid[index] = vid;
-		act->tpid[index] = tpid;
-		act->dei[index] = dei;
-	}
-}
-
-static int proc_asym_vlan(struct file *file, const char *buf, size_t count,
-			  loff_t *ppos)
-{
-	char str[256];
-	int num;
-	char *param_list[20] = { NULL };
-	int  k, len;
-	char dev_name[16];
-	int test_num = 0;
-	int ctp = 0;
-	int mcast = 0;
-	int dir = 0;
-	struct dp_tc_vlan vlan = {0};
-	struct dp_vlan0 vlan0_list[1] = {0};
-	struct dp_vlan1 vlan1_list[4] = {0};
-	struct dp_vlan2 vlan2_list[3] = {0};
-	struct net_device *dev;
-
-#define TEST_VID 10
-	len = sizeof(str) < count ? sizeof(str) - 1 : count;
-	len = len - copy_from_user(str, buf, len);
-	str[len] = 0;
-	num = dp_split_buffer(str, param_list, ARRAY_SIZE(param_list));
-
-	if (num < 2)
-		goto proc_help;
-
-	k = 0;
-
-	while (k < num) {
-		if (dp_strncmpi(param_list[k], "dev", strlen("dev")) == 0) {
-			dev_name[0] = '\0';
-			strlcat(dev_name,  param_list[k + 1], 16);
-			k += 2;
-		} else if (dp_strncmpi(param_list[k], "-tnum", strlen("-tnum")) == 0) {
-			test_num = dp_atoi(param_list[k + 1]);
-			k += 2;
-		} else if (dp_strncmpi(param_list[k], "CTP", strlen("CTP")) == 0) {
-			ctp = dp_atoi(param_list[k + 1]);
-			k += 2;
-		} else if (dp_strncmpi(param_list[k], "mcast", strlen("mcast")) == 0) {
-			mcast = dp_atoi(param_list[k + 1]);
-			k += 2;
-		} else if (dp_strncmpi(param_list[k], "dir", strlen("dir")) == 0) {
-			dir = dp_atoi(param_list[k + 1]);
-			k += 2;
-		} else {
-			PR_INFO("unknown command option: %s\n",
-				param_list[k]);
-			break;
-		}
-	}
-	dev = dev_get_by_name(&init_net, dev_name);
-	if (!dev) {
-		PR_INFO("unknown device");
-		return -1;
-	}
-
-	switch (test_num) {
-	case 1:
-		PR_INFO("Input:IP packet with VID 10\n");
-		PR_INFO("Desc:pattern match = FALSE\n");
-		PR_INFO("Output:Enqueued packet is received without change\n");
-		set_dev(&vlan, dev, ctp, dir, 0, 1, 0, mcast);
-		vlan.vlan1_list = vlan1_list;
-		/*random proto for failing the pattern match*/
-		set_pattern(&vlan1_list[0].outer, DP_VLAN_PATTERN_NOT_CARE,
-			    DP_VLAN_PATTERN_NOT_CARE, DP_VLAN_PATTERN_NOT_CARE,
-			    DP_VLAN_PATTERN_NOT_CARE, 0x100);
-		vlan1_list[0].act.act = DP_VLAN_ACT_DROP;
-		dp_vlan_set(&vlan, 0);
-
-	break;
-	case 2:
-		PR_INFO("Input:IP packet without VLAN tag\n");
-		PR_INFO("Desc:pattern match = FALSE\n");
-		PR_INFO("Output:Enqueued packet is received without change\n");
-		set_dev(&vlan, dev, ctp, dir, 1, 0, 0, mcast);
-		vlan.vlan0_list = vlan0_list;
-		/*random proto for failing the pattern match*/
-		set_pattern(&vlan0_list[0].outer, DP_VLAN_PATTERN_NOT_CARE,
-			    DP_VLAN_PATTERN_NOT_CARE, DP_VLAN_PATTERN_NOT_CARE,
-			    DP_VLAN_PATTERN_NOT_CARE, 0x100);
-		vlan0_list[0].act.act = DP_VLAN_ACT_DROP;
-		dp_vlan_set(&vlan, 0);
-
-	break;
-	case 3:
-		PR_INFO("Input:IP packet without VLAN tag\n");
-		PR_INFO("Desc:pattern match = TRUE\n");
-		PR_INFO("Output:Enqueued packet is not received\n");
-		set_dev(&vlan, dev, ctp, dir, 1, 0, 0, mcast);
-		vlan.vlan0_list = vlan0_list;
-		/*random proto for failing the pattern match*/
-		set_pattern(&vlan0_list[0].outer, DP_VLAN_PATTERN_NOT_CARE,
-			    DP_VLAN_PATTERN_NOT_CARE, DP_VLAN_PATTERN_NOT_CARE,
-			    DP_VLAN_PATTERN_NOT_CARE, DP_PROTO_IP4);
-		vlan0_list[0].act.act = DP_VLAN_ACT_DROP;
-		dp_vlan_set(&vlan, 0);
-
-	break;
-	case 4:
-		PR_INFO("This test is same as testnum 1, so skipping\n");
-	break;
-	case 5:
-		PR_INFO("Input:IP packet with VID 10\n");
-		PR_INFO("Desc:pattern match = TRUE and POP action\n");
-		PR_INFO("Output:Enqueued packet is received without vlantag\n");
-		set_dev(&vlan, dev, ctp, dir, 0, 1, 0, mcast);
-		vlan.vlan1_list = vlan1_list;
-		set_pattern(&vlan1_list[0].outer, DP_VLAN_PATTERN_NOT_CARE,
-			    TEST_VID, DP_VLAN_PATTERN_NOT_CARE,
-			    DP_VLAN_PATTERN_NOT_CARE, DP_VLAN_PATTERN_NOT_CARE);
-		vlan1_list[0].act.act = DP_VLAN_ACT_POP;
-		vlan1_list[0].act.pop_n = 1;
-		dp_vlan_set(&vlan, 0);
-
-	break;
-	case 6:
-		PR_INFO("Input:IP packet with double tag VID 10 and vid	100\n");
-		PR_INFO("Desc:pattern match = TRUE and POP action\n");
-		PR_INFO("Output:Enqueued packet is received without vlantag\n");
-		set_dev(&vlan, dev, ctp, dir, 0, 0, 1, mcast);
-		vlan.vlan2_list = vlan2_list;
-		set_pattern(&vlan2_list[0].outer, DP_VLAN_PATTERN_NOT_CARE,
-			    TEST_VID, DP_VLAN_PATTERN_NOT_CARE,
-			    DP_VLAN_PATTERN_NOT_CARE, DP_VLAN_PATTERN_NOT_CARE);
-		set_pattern(&vlan2_list[0].inner, DP_VLAN_PATTERN_NOT_CARE,
-			    DP_VLAN_PATTERN_NOT_CARE, DP_VLAN_PATTERN_NOT_CARE,
-			    DP_VLAN_PATTERN_NOT_CARE, DP_VLAN_PATTERN_NOT_CARE);
-		vlan2_list[0].act.act = DP_VLAN_ACT_POP;
-		vlan2_list[0].act.pop_n = 2;
-		dp_vlan_set(&vlan, 0);
-
-	break;
-	case 7:
-		PR_INFO("Input:IP packet without vlan tag\n");
-		PR_INFO("Desc:pattern match = TRUE and PUSH action\n");
-		PR_INFO("Output:Enqueued packet is received with vlan tag");
-		PR_INFO("that is pushed\n");
-		set_dev(&vlan, dev, ctp, dir, 1, 0, 0, mcast);
-		vlan.vlan0_list = vlan0_list;
-		set_pattern(&vlan0_list[0].outer, DP_VLAN_PATTERN_NOT_CARE,
-			    DP_VLAN_PATTERN_NOT_CARE, DP_VLAN_PATTERN_NOT_CARE,
-			    DP_VLAN_PATTERN_NOT_CARE, DP_PROTO_IP4);
-		set_action(&vlan0_list[0].act, DP_VLAN_ACT_PUSH, 0, 1);
-		set_tag(&vlan0_list[0].act, 0, 0, 0, 10, 0x8100, 0);
-		dp_vlan_set(&vlan, 0);
-
-	break;
-	case 8:
-		PR_INFO("Input:IP packet without vlan tag\n");
-		PR_INFO("Desc:pattern match = TRUE and PUSH action\n");
-		PR_INFO("Output:Enqueued packet is received with 2 vlan tags");
-		PR_INFO("that are pushed\n");
-		set_dev(&vlan, dev, ctp, 0, 1, 0, 0, mcast);
-		vlan.vlan0_list = vlan0_list;
-		set_pattern(&vlan0_list[0].outer, DP_VLAN_PATTERN_NOT_CARE,
-			    DP_VLAN_PATTERN_NOT_CARE, DP_VLAN_PATTERN_NOT_CARE,
-			    DP_VLAN_PATTERN_NOT_CARE, DP_PROTO_IP4);
-		set_action(&vlan0_list[0].act, DP_VLAN_ACT_PUSH, 0, 2);
-		set_tag(&vlan0_list[0].act, 0, 0, 0, 10, 0x8100, 0);
-		set_tag(&vlan0_list[0].act, 0, 1, 1, 100, 0x8100, 0);
-		dp_vlan_set(&vlan, 0);
-
-	break;
-	case 9:
-		PR_INFO("Input:IP packet without vlan tag\n");
-		PR_INFO("Desc:pattern match = TRUE and PUSH action\n");
-		PR_INFO("Output:Enqueued packet is received with vlan tag");
-		PR_INFO("that is pushed\n");
-		set_dev(&vlan, dev, ctp, dir, 1, 0, 0, mcast);
-		vlan.vlan0_list = vlan0_list;
-		set_pattern(&vlan0_list[0].outer, DP_VLAN_PATTERN_NOT_CARE,
-			    DP_VLAN_PATTERN_NOT_CARE, DP_VLAN_PATTERN_NOT_CARE,
-			    DP_VLAN_PATTERN_NOT_CARE, DP_PROTO_IP4);
-		set_action(&vlan0_list[0].act, DP_VLAN_ACT_PUSH, 0, 1);
-		set_tag(&vlan0_list[0].act, 0, 0, 0, 10, 0x8100, 0);
-		dp_vlan_set(&vlan, 0);
-
-	break;
-	case 10:
-		PR_INFO("Input:IP packet without vlan tag\n");
-		PR_INFO("Desc:pattern match = TRUE and PUSH action\n");
-		PR_INFO("Output:Enqueued packet is received with 2 vlan tags");
-		PR_INFO("that are pushed\n");
-		set_dev(&vlan, dev, ctp, dir, 1, 0, 0, mcast);
-		vlan.vlan0_list = vlan0_list;
-		set_pattern(&vlan0_list[0].outer, DP_VLAN_PATTERN_NOT_CARE,
-			    DP_VLAN_PATTERN_NOT_CARE, DP_VLAN_PATTERN_NOT_CARE,
-			    DP_VLAN_PATTERN_NOT_CARE, DP_PROTO_IP4);
-		set_action(&vlan0_list[0].act, DP_VLAN_ACT_PUSH, 0, 2);
-		set_tag(&vlan0_list[0].act, 0, 0, 0, 10, 0x8100, 0);
-		set_tag(&vlan0_list[0].act, 0, 1, 1, 100, 0x8100, 0);
-		dp_vlan_set(&vlan, 0);
-	break;
-	case 11:
-		PR_INFO("Input:IP packet single vlan tag\n");
-		PR_INFO("Desc:pattern match = TRUE and PUSH action\n");
-		PR_INFO("Output:Enqueued packet is received with 2 vlan tags,");
-		PR_INFO("the original and the pushed one\n");
-		set_dev(&vlan, dev, ctp, dir, 0, 1, 0, mcast);
-		vlan.vlan1_list = vlan1_list;
-		set_pattern(&vlan1_list[0].outer, DP_VLAN_PATTERN_NOT_CARE,
-			    DP_VLAN_PATTERN_NOT_CARE, DP_VLAN_PATTERN_NOT_CARE,
-			    DP_VLAN_PATTERN_NOT_CARE, DP_PROTO_IP4);
-		set_action(&vlan1_list[0].act, DP_VLAN_ACT_PUSH, 0, 1);
-		set_tag(&vlan1_list[0].act, CP_FROM_OUTER, 0, 0, 0, 0, 0);
-		dp_vlan_set(&vlan, 0);
-
-	break;
-	case 12:
-		PR_INFO("Input:IP packet single vlan tag\n");
-		PR_INFO("Desc:pattern match = TRUE and PUSH action\n");
-		PR_INFO("Output:Enqueued packet is received with 3 vlan tags,");
-		PR_INFO("the original and 2 pushed ones\n");
-		set_dev(&vlan, dev, ctp, dir, 0, 1, 0, mcast);
-		vlan.vlan1_list = vlan1_list;
-		set_pattern(&vlan1_list[0].outer, DP_VLAN_PATTERN_NOT_CARE,
-			    DP_VLAN_PATTERN_NOT_CARE, DP_VLAN_PATTERN_NOT_CARE,
-			    DP_VLAN_PATTERN_NOT_CARE, DP_PROTO_IP4);
-		set_action(&vlan1_list[0].act, DP_VLAN_ACT_PUSH, 0, 2);
-		set_tag(&vlan1_list[0].act, CP_FROM_OUTER, 0, 0, 0, 0, 0);
-		set_tag(&vlan1_list[0].act, CP_FROM_OUTER, 1, 0, 0, 0, 0);
-		dp_vlan_set(&vlan, 0);
-
-	break;
-	case 13:
-		PR_INFO("Input:IP packet single vlan tag\n");
-		PR_INFO("Desc:pattern match = TRUE and PUSH action\n");
-		PR_INFO("Output:Enqueued packet is received with 2 vlan tags,");
-		PR_INFO("the original and the pushed one\n");
-		set_dev(&vlan, dev, ctp, dir, 0, 1, 0, mcast);
-		vlan.vlan1_list = vlan1_list;
-		set_pattern(&vlan1_list[0].outer, DP_VLAN_PATTERN_NOT_CARE,
-			    DP_VLAN_PATTERN_NOT_CARE, DP_VLAN_PATTERN_NOT_CARE,
-			    DP_VLAN_PATTERN_NOT_CARE, DP_PROTO_IP4);
-		set_action(&vlan1_list[0].act, DP_VLAN_ACT_PUSH, 0, 1);
-		set_tag(&vlan1_list[0].act, CP_FROM_OUTER, 0, 0, 0, 0, 0);
-		dp_vlan_set(&vlan, 0);
-
-	break;
-	case 14:
-		PR_INFO("Input:IP packet single vlan tag\n");
-		PR_INFO("Desc:pattern match = TRUE and PUSH action\n");
-		PR_INFO("Output:Enqueued packet is received with 3 vlan tags");
-		PR_INFO("the original and 2 pushed ones\n");
-		set_dev(&vlan, dev, ctp, dir, 0, 1, 0, mcast);
-		vlan.vlan1_list = vlan1_list;
-		set_pattern(&vlan1_list[0].outer, DP_VLAN_PATTERN_NOT_CARE,
-			    DP_VLAN_PATTERN_NOT_CARE, DP_VLAN_PATTERN_NOT_CARE,
-			    DP_VLAN_PATTERN_NOT_CARE, DP_PROTO_IP4);
-		set_action(&vlan1_list[0].act, DP_VLAN_ACT_PUSH, 0, 2);
-		set_tag(&vlan1_list[0].act, CP_FROM_OUTER, 0, 0, 0, 0, 0);
-		set_tag(&vlan1_list[0].act, CP_FROM_OUTER, 1, 0, 0, 0, 0);
-		dp_vlan_set(&vlan, 0);
-	break;
-	case 15:
-		PR_INFO("Input:IP packet single vlan tag and vid 10\n");
-		PR_INFO("Desc:pattern match = FALSE and DROP action\n");
-		PR_INFO("Output:Enqueued packet is received unaltered\n");
-		set_dev(&vlan, dev, ctp, dir, 0, 1, 0, mcast);
-		vlan.vlan1_list = vlan1_list;
-		set_pattern(&vlan1_list[0].outer, DP_VLAN_PATTERN_NOT_CARE,
-			    100, DP_VLAN_PATTERN_NOT_CARE,
-			    DP_VLAN_PATTERN_NOT_CARE, DP_PROTO_IP4);
-		set_action(&vlan1_list[0].act, DP_VLAN_ACT_DROP, 0, 0);
-		dp_vlan_set(&vlan, 0);
-
-	break;
-	case 16:
-		PR_INFO("Input:IP packet single vlan tag and vid 10\n");
-		PR_INFO("Desc:pattern match = TRUE and DROP action\n");
-		PR_INFO("Output:Enqueued packet is dropped\n");
-		set_dev(&vlan, dev, ctp, dir, 0, 1, 0, mcast);
-		vlan.vlan1_list = vlan1_list;
-		set_pattern(&vlan1_list[0].outer, DP_VLAN_PATTERN_NOT_CARE,
-			    10, DP_VLAN_PATTERN_NOT_CARE,
-			    DP_VLAN_PATTERN_NOT_CARE, DP_PROTO_IP4);
-		set_action(&vlan1_list[0].act, DP_VLAN_ACT_DROP, 0, 0);
-		dp_vlan_set(&vlan, 0);
-
-	break;
-	case 17:
-		PR_INFO("Input:IP packet double vlan tag, vid 10 and vid 20\n");
-		PR_INFO("Desc:pattern match = FALSE and DROP action\n");
-		PR_INFO("Output:Enqueued packet is received unaltered\n");
-		set_dev(&vlan, dev, ctp, dir, 0, 0, 1, mcast);
-		vlan.vlan2_list = vlan2_list;
-		set_pattern(&vlan2_list[0].outer, DP_VLAN_PATTERN_NOT_CARE,
-			    100, DP_VLAN_PATTERN_NOT_CARE,
-			    DP_VLAN_PATTERN_NOT_CARE, DP_PROTO_IP4);
-		set_pattern(&vlan2_list[0].inner, DP_VLAN_PATTERN_NOT_CARE,
-			    200, DP_VLAN_PATTERN_NOT_CARE,
-			    DP_VLAN_PATTERN_NOT_CARE, DP_PROTO_IP4);
-		set_action(&vlan2_list[0].act, DP_VLAN_ACT_DROP, 0, 0);
-		dp_vlan_set(&vlan, 0);
-
-	break;
-	case 18:
-		PR_INFO("Input:IP packet double vlan tag, vid 10 and vid 20\n");
-		PR_INFO("Desc:pattern match = TRUE and DROP action\n");
-		PR_INFO("Output:Enqueued packet is not received\n");
-		set_dev(&vlan, dev, ctp, dir, 0, 0, 1, mcast);
-		vlan.vlan2_list = vlan2_list;
-		set_pattern(&vlan2_list[0].outer, DP_VLAN_PATTERN_NOT_CARE,
-			    10, DP_VLAN_PATTERN_NOT_CARE,
-			    DP_VLAN_PATTERN_NOT_CARE, DP_PROTO_IP4);
-		set_pattern(&vlan2_list[0].inner, DP_VLAN_PATTERN_NOT_CARE,
-			    20, DP_VLAN_PATTERN_NOT_CARE,
-			    DP_VLAN_PATTERN_NOT_CARE, DP_PROTO_IP4);
-		set_action(&vlan2_list[0].act, DP_VLAN_ACT_DROP, 0, 0);
-		dp_vlan_set(&vlan, 0);
-
-	break;
-
-	case 19:
-	{
-		struct dp_vlan1 vlan1_list[4] = {0};
-
-		PR_INFO("Input:IP packet multiple streams single vlan tag,");
-		PR_INFO("with vid 5,6,7,8\n");
-		PR_INFO("Desc:pattern match = TRUE (vid match) , with action");
-		PR_INFO("PUSH for vid 5,6 POP for vid 7 and forward vid 8\n");
-		PR_INFO("Output:Enqueued packet received\n");
-		set_dev(&vlan, dev, ctp, dir, 0, 4, 0, mcast);
-		vlan1_list[0].def = 0;
-		vlan1_list[1].def = 0;
-		vlan1_list[2].def = 0;
-		vlan1_list[3].def = 0;
-		vlan.vlan1_list = vlan1_list;
-		set_pattern(&vlan1_list[0].outer, DP_VLAN_PATTERN_NOT_CARE,
-			    5, DP_VLAN_PATTERN_NOT_CARE,
-			    DP_VLAN_PATTERN_NOT_CARE, DP_PROTO_IP4);
-		set_pattern(&vlan1_list[1].outer, DP_VLAN_PATTERN_NOT_CARE,
-			    6, DP_VLAN_PATTERN_NOT_CARE,
-			    DP_VLAN_PATTERN_NOT_CARE, DP_PROTO_IP4);
-		set_pattern(&vlan1_list[2].outer, DP_VLAN_PATTERN_NOT_CARE,
-			    7, DP_VLAN_PATTERN_NOT_CARE,
-			    DP_VLAN_PATTERN_NOT_CARE, DP_PROTO_IP4);
-		set_pattern(&vlan1_list[3].outer, DP_VLAN_PATTERN_NOT_CARE,
-			    8, DP_VLAN_PATTERN_NOT_CARE,
-			    DP_VLAN_PATTERN_NOT_CARE, DP_PROTO_IP4);
-		set_action(&vlan1_list[0].act, DP_VLAN_ACT_PUSH, 0, 1);
-		set_tag(&vlan1_list[0].act, 0, 0, 0, 0, 0x8100, 0);
-
-		set_action(&vlan1_list[1].act, DP_VLAN_ACT_PUSH, 0, 2);
-		set_tag(&vlan1_list[1].act, CP_FROM_OUTER, 0, 0, 0, 0x8100, 0);
-		set_tag(&vlan1_list[1].act, CP_FROM_OUTER, 1, 0, 0, 0x8100, 0);
-
-		set_action(&vlan1_list[2].act, DP_VLAN_ACT_POP, 1, 0);
-		set_action(&vlan1_list[3].act, DP_VLAN_ACT_FWD, 0, 0);
-
-		dp_vlan_set(&vlan, 0);
-	}
-	break;
-
-	case 20:
-		PR_INFO("This test to del rule\n");
-		set_dev(&vlan, dev, ctp, dir, 0, 0, 0, mcast);
-		vlan.vlan0_list = NULL;
-		vlan.vlan1_list = NULL;
-		vlan.vlan2_list = NULL;
-		dp_vlan_set(&vlan, 0);
-	break;
-	case 21:
-	{
-		PR_INFO("Input:IP packet single or double vlan tag,");
-		PR_INFO("with outer vid 74\n");
-		PR_INFO("Desc:pattern match = TRUE (vid match) , with action");
-		PR_INFO("forward vid 74 and drop other VLAN tag\n");
-		PR_INFO("Output:Enqueued pkt recv for vid 74 other vid drop\n");
-		set_dev(&vlan, dev, ctp, dir, 0, 2, 2, mcast);
-		vlan1_list[0].def = 1; /* default rule */
-		vlan1_list[1].def = 0;
-		vlan.vlan1_list = vlan1_list;
-		set_pattern(&vlan1_list[0].outer, DP_VLAN_PATTERN_NOT_CARE,
-			    DP_VLAN_PATTERN_NOT_CARE, DP_VLAN_PATTERN_NOT_CARE,
-			    DP_VLAN_PATTERN_NOT_CARE, DP_VLAN_PATTERN_NOT_CARE);
-		set_action(&vlan1_list[0].act, DP_VLAN_ACT_DROP, 0, 0);
-		set_pattern(&vlan1_list[1].outer, DP_VLAN_PATTERN_NOT_CARE,
-			    74, DP_VLAN_PATTERN_NOT_CARE,
-			    DP_VLAN_PATTERN_NOT_CARE, DP_VLAN_PATTERN_NOT_CARE);
-		set_action(&vlan1_list[1].act, DP_VLAN_ACT_FWD, 0, 0);
-		vlan2_list[0].def = 1;
-		vlan2_list[1].def = 0;
-		vlan.vlan2_list = vlan2_list;
-		set_pattern(&vlan2_list[0].outer, DP_VLAN_PATTERN_NOT_CARE,
-			    DP_VLAN_PATTERN_NOT_CARE, DP_VLAN_PATTERN_NOT_CARE,
-			    DP_VLAN_PATTERN_NOT_CARE, DP_VLAN_PATTERN_NOT_CARE);
-		set_pattern(&vlan2_list[0].inner, DP_VLAN_PATTERN_NOT_CARE,
-			    DP_VLAN_PATTERN_NOT_CARE, DP_VLAN_PATTERN_NOT_CARE,
-			    DP_VLAN_PATTERN_NOT_CARE, DP_VLAN_PATTERN_NOT_CARE);
-		set_action(&vlan2_list[0].act, DP_VLAN_ACT_DROP, 0, 0);
-		set_pattern(&vlan2_list[1].outer, DP_VLAN_PATTERN_NOT_CARE,
-			    74, DP_VLAN_PATTERN_NOT_CARE,
-			    DP_VLAN_PATTERN_NOT_CARE, DP_VLAN_PATTERN_NOT_CARE);
-		set_pattern(&vlan2_list[1].inner, DP_VLAN_PATTERN_NOT_CARE,
-			    DP_VLAN_PATTERN_NOT_CARE, DP_VLAN_PATTERN_NOT_CARE,
-			    DP_VLAN_PATTERN_NOT_CARE, DP_VLAN_PATTERN_NOT_CARE);
-		set_action(&vlan2_list[1].act, DP_VLAN_ACT_FWD, 0, 0);
-		dp_vlan_set(&vlan, 0);
-	}
-	break;
-	case 22:
-	{
-		PR_INFO("Input:IP packet single or double vlan tag,");
-		PR_INFO("with outer vid 100 or 200\n");
-		PR_INFO("Desc:pattern match = TRUE (vid match) , with action");
-		PR_INFO("forward vid 100,200 and drop other VLAN tag\n");
-		PR_INFO("Output:Enq pkt recv for vid 100,200 other vid drop\n");
-		set_dev(&vlan, dev, ctp, dir, 0, 3, 2, mcast);
-		vlan1_list[0].def = 1; /* default rule */
-		vlan1_list[1].def = 0;
-		vlan1_list[2].def = 0;
-		vlan.vlan1_list = vlan1_list;
-		set_pattern(&vlan1_list[0].outer, DP_VLAN_PATTERN_NOT_CARE,
-			    DP_VLAN_PATTERN_NOT_CARE, DP_VLAN_PATTERN_NOT_CARE,
-			    DP_VLAN_PATTERN_NOT_CARE, DP_VLAN_PATTERN_NOT_CARE);
-		set_action(&vlan1_list[0].act, DP_VLAN_ACT_DROP, 0, 0);
-		set_pattern(&vlan1_list[1].outer, 1,
-			    100, DP_VLAN_PATTERN_NOT_CARE,
-			    DP_VLAN_PATTERN_NOT_CARE, DP_VLAN_PATTERN_NOT_CARE);
-		set_action(&vlan1_list[1].act, DP_VLAN_ACT_FWD, 0, 0);
-		set_pattern(&vlan1_list[2].outer, 2,
-			    300, DP_VLAN_PATTERN_NOT_CARE,
-			    DP_VLAN_PATTERN_NOT_CARE, DP_VLAN_PATTERN_NOT_CARE);
-		set_action(&vlan1_list[2].act, DP_VLAN_ACT_DROP, 0, 0);
-		vlan2_list[0].def = 1;
-		vlan2_list[1].def = 0;
-		vlan.vlan2_list = vlan2_list;
-		set_pattern(&vlan2_list[0].outer, DP_VLAN_PATTERN_NOT_CARE,
-			    DP_VLAN_PATTERN_NOT_CARE, DP_VLAN_PATTERN_NOT_CARE,
-			    DP_VLAN_PATTERN_NOT_CARE, DP_VLAN_PATTERN_NOT_CARE);
-		set_pattern(&vlan2_list[0].inner, DP_VLAN_PATTERN_NOT_CARE,
-			    DP_VLAN_PATTERN_NOT_CARE, DP_VLAN_PATTERN_NOT_CARE,
-			    DP_VLAN_PATTERN_NOT_CARE, DP_VLAN_PATTERN_NOT_CARE);
-		set_action(&vlan2_list[0].act, DP_VLAN_ACT_DROP, 0, 0);
-		set_pattern(&vlan2_list[1].outer, 2,
-			    200, DP_VLAN_PATTERN_NOT_CARE,
-			    DP_VLAN_PATTERN_NOT_CARE, DP_VLAN_PATTERN_NOT_CARE);
-		set_pattern(&vlan2_list[1].inner, DP_VLAN_PATTERN_NOT_CARE,
-			    DP_VLAN_PATTERN_NOT_CARE, DP_VLAN_PATTERN_NOT_CARE,
-			    DP_VLAN_PATTERN_NOT_CARE, DP_VLAN_PATTERN_NOT_CARE);
-		set_action(&vlan2_list[1].act, DP_VLAN_ACT_FWD, 0, 0);
-		dp_vlan_set(&vlan, 0);
-	}
-	break;
-
-	default:
-		PR_INFO("unknown test case\n");
-	break;
-	}
-
-	PR_INFO("\n");
-	return count;
-
-proc_help:
-	PR_INFO("echo <dev> %s [-tnum %s] %s\n", "<device name>", "test_number",
-		"CTP <0/1> mcast <0/1> dir <0/1>");
-	return count;
-}
-
-ssize_t proc_dt_write(struct file *file, const char *buf,
-		      size_t count, loff_t *ppos)
-{
-	u16 len;
-	char str[64];
-	char *param_list[20 * 2];
-	unsigned int num;
-	struct device_node *node;
-
-	len = (sizeof(str) > count) ? count : sizeof(str) - 1;
-	len -= copy_from_user(str, buf, len);
-	str[len] = 0;
-	num = dp_split_buffer(str, param_list, ARRAY_SIZE(param_list));
-	if (!param_list[0] || (strlen(param_list[0]) <= 1))
-		param_list[0] = "/";
-	node = of_find_node_by_path(param_list[0]);
-	if (!node)
-		node = of_find_node_by_name(NULL, param_list[0]);
-	if (!node) {
-		PR_INFO("Cannot find node for %s\n", param_list[0]);
-		return count;
-	}
-	print_device_tree_node(node, 0);
-	return count;
-}
-
-struct proc_vap_test {
-	struct net_device *dev;
-};
-
-struct vdev_priv {
-	int vap;
-	struct rtnl_link_stats64 stats;
-};
-
-static int vdev_open(struct net_device *dev)
-{
-	netif_start_queue(dev);
-	return 0;
-}
-
-static int vdev_close(struct net_device *dev)
-{
-	netif_stop_queue(dev);
-	return 0;
-}
-
-static int vdev_xmit(struct sk_buff *skb, struct net_device *dev)
-{
-	dev_kfree_skb(skb);
-	return 0;
-}
-
-static int vdev_ioctl(struct net_device *dev,
-		      struct ifreq *ifr, int cmd)
-{
-	return -EOPNOTSUPP;
-}
-
-static int vdev_dev_init(struct net_device *dev)
-{
-	return 0;
-}
-
-static int vdev_set_mac_address(struct net_device *dev,
-				void *p)
-{
-	struct sockaddr *addr = p;
-
-	if (netif_running(dev))
-		return -EBUSY;
-
-	if (!is_valid_ether_addr(addr->sa_data))
-		return -EINVAL;
-
-	memcpy(dev->dev_addr, addr->sa_data, dev->addr_len);
-
-	return 0;
-}
-
-static int vdev_change_mtu(struct net_device *dev,
-			   int new_mtu)
-{
-	dev->mtu = new_mtu;
-	return 0;
-}
-
-static struct rtnl_link_stats64 *vdev_get_stats(
-		struct net_device *dev,
-		struct rtnl_link_stats64 *storage)
-{
-	struct vdev_priv *priv = netdev_priv(dev);
-	*storage = priv->stats;
-	return storage;
-}
-
-static struct net_device_ops vdev_ops = {
-	.ndo_init         = vdev_dev_init,
-	.ndo_open         = vdev_open,
-	.ndo_stop         = vdev_close,
-	.ndo_start_xmit   = vdev_xmit,
-	.ndo_do_ioctl     = vdev_ioctl,
-	.ndo_set_mac_address = vdev_set_mac_address,
-	.ndo_change_mtu   = vdev_change_mtu,
-	.ndo_get_stats64	  = vdev_get_stats,
-};
-
-static void vdev_setup(struct net_device *dev)
-{
-	ether_setup(dev);
-	dev->netdev_ops = &vdev_ops;
-}
-
-#define PROC_DP_MAX_VAP 256
-static struct proc_vap_test vaps[PROC_DP_MAX_VAP];
-int free_new_vap_dev(struct net_device *dev)
-{
-	int i;
-	dp_subif_t subif = {0};
-
-	if (!dev)
-		return 0;
-
-	/* Don't free it and DP may still using it for pmapper case */
-	if (dp_get_port_subitf_via_dev(dev, &subif) == DP_SUCCESS) {
-		PR_INFO("Don't free dev %s yet\n", dev->name);
-		return 0;
-	}
-	PR_INFO("Free dev %s\n", dev->name);
-	for (i = 0; i < ARRAY_SIZE(vaps); i++) {
-		if (vaps[i].dev != dev)
-			continue;
-		unregister_netdev(vaps[i].dev);
-		free_netdev(vaps[i].dev);
-		vaps[i].dev = NULL;
-		return i;
-	}
-	return -1;
-}
-
-struct net_device *create_new_vap_dev(char *name)
-{
-	int i;
-
-	if (!name)
-		return NULL;
-	for (i = 0; i < ARRAY_SIZE(vaps); i++) {
-		if (vaps[i].dev)
-			continue;
-		vaps[i].dev = alloc_netdev(sizeof(struct vdev_priv),
-					   name,
-					   NET_NAME_ENUM,
-					   vdev_setup);
-		strncpy(vaps[i].dev->name, name, sizeof(vaps[i].dev->name) - 1);
-		memset(vaps[i].dev->dev_addr, 0, sizeof(vaps[i].dev->dev_addr));
-		vaps[i].dev->dev_addr[5] = (u8)(i + 1);
-		if (register_netdev(vaps[i].dev)) {
-			free_netdev(vaps[i].dev);
-			vaps[i].dev = NULL;
-			PR_ERR("register device fail:%s?\n", name);
-		}
-		return vaps[i].dev;
-	}
-
-	return NULL;
-}
-
-int del_vap(char *param_list[], int num)
-{
-	u8 vap;
-	int dp_port;
-	dp_subif_t subif = {0};
-	struct pmac_port_info *port_info;
-	struct net_device *dev = NULL, *ctp_dev = NULL;
-	int inst = 0;
-	struct dp_subif_data data = {0};
-
-	if (num < 4) {
-		PR_ERR("Not enough parameters\n");
-		return -1;
-	}
-	/*dp_port */
-	dp_port = dp_atoi(param_list[1]);
-	if ((dp_port < 0) && (dp_port >= MAX_DP_PORTS)) {
-		PR_ERR("Wrong dp_port=%d\n", dp_port);
-		return -1;
-	}
-	if (!dp_port_info[inst][dp_port].status) {
-		PR_ERR("dp_port status=%d: expect non-zero\n",
-		       dp_port_info[0][dp_port].status);
-		return -1;
-	}
-	if (!dp_port_info[inst][dp_port].num_subif) {
-		PR_ERR("dp_port num_subif=%d: expect non-zero\n",
-		       dp_port_info[0][dp_port].num_subif);
-		return -1;
-	}
-	port_info = get_port_info_via_dp_port(inst, dp_port);
-	if (!port_info) {
-		PR_ERR("port_info NULL\n");
-		return -1;
-	}
-	/*vap */
-	vap = dp_atoi(param_list[2]);
-	if ((vap < 0) ||
-	    (vap >= port_info->ctp_max)) {
-		PR_ERR("Wrong vap=%d: expect 0 ~ %d\n",
-		       vap, port_info->ctp_max - 1);
-		return -1;
-	}
-	if (port_info->subif_info[vap].flags == 0) {
-		PR_ERR("VAP=%d not registered yet\n", vap);
-		return -1;
-	}
-	subif.subif = SET_VAP(vap,
-			      port_info->vap_offset,
-			      port_info->vap_mask);
-	dev = port_info->subif_info[vap].netif;
-	ctp_dev = port_info->subif_info[vap].ctp_dev;
-	/*de-register */
-	subif.inst = inst;
-	subif.port_id = dp_port;
-	if (dp_strncmpi(param_list[3], "lct", 3) == 0) {/*lct */
-		data.flag_ops |= DP_F_DATA_LCT_SUBIF;
-	}
-	if (dp_register_subif_ext(inst, port_info->owner, dev,
-				  dev->name, &subif, &data,
-				  DP_F_DEREGISTER)) {
-		PR_INFO("de-register_subif fail: %s\n", dev->name);
-		return -1;
-	}
-	if (ctp_dev && ctp_dev->name)
-		PR_INFO("\nDe-Register subif for %s ok: subif=0x%x(%d) %s:%s\n",
-			dev->name, subif.subif, vap,
-			"ctp_dev:", ctp_dev->name);
-	else
-		PR_INFO("\nDe-Register subif for %s ok: subif=0x%x(%d)\n",
-			dev->name, subif.subif, vap);
-
-	free_new_vap_dev(dev);
-	free_new_vap_dev(ctp_dev);
-	return 0;
-}
-
-static int32_t dp_cb_rx(struct net_device *rxif, struct net_device *txif,
-			struct sk_buff *skb, int32_t len)
-{
-	if (skb)
-		skb_pull(skb, sizeof(struct pmac_rx_hdr));
-	else
-		return -1;
-
-	if (rxif) {
-		if (netif_running(rxif)) {
-			skb->dev = rxif;
-			return netif_rx(skb);
-		}
-	} else {
-		PR_ERR("Tx fails\n");
-		dev_kfree_skb_any(skb);
-	}
-	return 0;
-}
-
-int free_port(char *param_list[], int num)
-{
-	int inst = 0, res, port_id = 1, c;
-	int opt_offset = 1;
-	char *optstring = "p:t:";
-	char *optarg = 0;
-	dp_cb_t cb = {0};
-
-	if (num < 2) {
-		PR_ERR("Not enough parameters\n");
-		goto help;
-	}
-	while ((c = dp_getopt(param_list, num, &opt_offset,
-			      &optarg, optstring)) > 0) {
-		if (optstring)
-			PR_INFO("opt_offset=%d optarg=%s.\n",
-				opt_offset, optarg);
-		switch (c) {
-		case 'p':
-			port_id = dp_atoi(optarg);
-			PR_INFO("port_id=%d\n", port_id);
-			if (port_id < 1 || port_id > MAX_DP_PORTS) {
-				PR_ERR("Invalid Port_id\n");
-				return -1;
-			}
-			break;
-		case 't':
-			inst = dp_atoi(optarg);
-			PR_INFO("inst=%d\n", inst);
-			if (inst < 0) {
-				PR_ERR("wrong inst for  with ep=%d\n",
-				       port_id);
-				return -1;
-			}
-			break;
-		default:
-			PR_INFO("wrong command");
-			goto help;
-		}
-	}
-	if (c < 0) {
-		PR_INFO("Wrong command\n");
-		goto help;
-	}
-	cb.rx_fn = (dp_rx_fn_t)dp_cb_rx;
-	res = dp_register_dev_ext(inst, &owner[inst][port_id], port_id,
-				  &cb, NULL, DP_F_DEREGISTER);
-	if (res < 0) {
-		PR_ERR("dp_register_dev_ext failed\n");
-		return -1;
-	}
-	res = dp_alloc_port_ext(inst, &owner[inst][port_id], NULL, 0,
-				port_id, NULL, NULL, DP_F_DEREGISTER);
-	if (res < 0) {
-		PR_ERR("dp_alloc_port_ext de-reg failed\n");
-		return -1;
-	}
-	PR_INFO("DP port free successfully\n");
-	return 0;
-help:
-	PR_INFO("echo free %s > /sys/kernel/debug/dp/%s\n",
-		PROC_FREE_PARAM, PROC_LOGICAL_DEV);
-	return 0;
-}
-
-int alloc_port(char *param_list[], int num)
-{
-	int inst = 0, res, port_id = 1, flags = 0, c, j;
-	int opt_offset = 1;
-	char *optstring = "p:t:o:f:";
-	char *optarg = 0;
-	dp_cb_t cb = {0};
-
-	if (num < 2) {
-		PR_ERR("Not enough parameters\n");
-		goto help;
-	}
-	while ((c = dp_getopt(param_list, num, &opt_offset,
-			      &optarg, optstring)) > 0) {
-		if (optstring)
-			PR_INFO("opt_offset=%d optarg=%s.\n",
-				opt_offset, optarg);
-		PR_INFO("\ndp_getopt :%c\n", c);
-		switch (c) {
-		case 'p':
-			PR_INFO("port_id=%s\n", optarg);
-			port_id = dp_atoi(optarg);
-			if (port_id < 1 || port_id > MAX_DP_PORTS) {
-				PR_ERR("Invalid Port_id\n");
-				return -1;
-			}
-			break;
-		case 't':
-			inst = dp_atoi(optarg);
-			PR_INFO("inst=%d\n", inst);
-			break;
-		case 'o':
-			if (!optarg)
-				return -1;
-			strncpy(owner[inst][port_id].name, optarg,
-				sizeof(owner[inst][port_id].name) - 1);
-			PR_INFO("owner name=%s\n", optarg);
-			break;
-		case 'f':
-			for (j = 0; j < get_dp_port_type_str_size(); j++) {
-				if (dp_strncmpi(optarg,
-						dp_port_type_str[j],
-						strlen(dp_port_type_str[j]))
-						== 0) {
-					flags |= dp_port_flag[j];
-					PR_INFO("flag =%d\n", flags);
-					break;
-				}
-			}
-			break;
-		default:
-			PR_INFO("wrong command");
-			goto help;
-		}
-	}
-	if (c < 0) {
-		PR_INFO("Wrong command\n");
-		goto help;
-	}
-	res = dp_alloc_port_ext(inst, &owner[inst][port_id], NULL, 0,
-				port_id, NULL, NULL, flags);
-	if (res < 0) {
-		PR_ERR("dp_alloc_port_ext failed\n");
-		return -1;
-	}
-	cb.rx_fn = (dp_rx_fn_t)dp_cb_rx;
-	res = dp_register_dev_ext(inst, &owner[inst][port_id], port_id,
-				  &cb, NULL, flags);
-	if (res < 0) {
-		dp_alloc_port_ext(inst, &owner[inst][port_id], NULL, 0,
-				  port_id, NULL, NULL, DP_F_DEREGISTER);
-		PR_ERR("dp_register_dev_ext failed\n");
-		return -1;
-	}
-	PR_INFO("DP port allocated successfully\n");
-	return 0;
-
-help:
-	PR_INFO("echo alloc %s %s > /sys/kernel/debug/dp/%s\n",
-		PROC_ALLOC_PARAM, PROC_ALLOC_PARAM_FLAGS,
-		PROC_LOGICAL_DEV);
-	return 0;
-}
-
-#define DP_PROC_Q_AUTO_SHARE 0
-#define DP_PROC_Q_NEW_QUEUE  -1
-/* param_list[]: parameter list
- * num: parameter list size
- */
-int add_vap(char *param_list[], int num)
-{
-	struct dp_subif_data data = {0};
-	u8 vap;
-	int dp_port;
-	dp_subif_t subif = {0};
-	struct pmac_port_info *port_info;
-	char name[IFNAMSIZ] = {0};
-	struct net_device *dev = NULL;
-	int inst = 0;
-
-	if (num < 6) {
-		PR_ERR("Not enough parameters\n");
-		return -1;
-	}
-	/*dp_port */
-	dp_port = dp_atoi(param_list[1]);
-	if ((dp_port < 0) && (dp_port >= MAX_DP_PORTS)) {
-		PR_ERR("Wrong dp_port=%d\n", dp_port);
-		return -1;
-	}
-	if (!dp_port_info[inst][dp_port].status) {
-		PR_ERR("dp_port status=%d: expect non-zero\n",
-		       dp_port_info[0][dp_port].status);
-		return -1;
-	}
-	if (!dp_port_info[inst][dp_port].num_subif) {
-		PR_ERR("dp_port num_subif=%d: expect non-zero\n",
-		       dp_port_info[0][dp_port].num_subif);
-		return -1;
-	}
-	port_info = get_port_info_via_dp_port(inst, dp_port);
-	if (!port_info) {
-		PR_ERR("port_info NULL\n");
-		return -1;
-	}
-
-	/*vap */
-	vap = dp_atoi(param_list[2]);
-	if ((vap < 0) ||
-	    (vap >= port_info->ctp_max)) {
-		PR_ERR("Wrong vap=%d: expect 0 ~ %d\n",
-		       vap, port_info->ctp_max - 1);
-		return -1;
-	}
-	if (port_info->subif_info[vap].flags != 0) {
-		PR_ERR("VAP=%d already exist\n", vap);
-		return -1;
-	}
-	subif.subif = SET_VAP(vap,
-			      port_info->vap_offset,
-			      port_info->vap_mask);
-
-	/*tcont*/
-	data.deq_port_idx = dp_atoi(param_list[3]);
-	if ((data.deq_port_idx < 0) ||
-	    (data.deq_port_idx >= port_info->deq_port_num)) {
-		PR_ERR("Wrong tcont=%d: expect 0 ~ %d\n",
-		       data.deq_port_idx, port_info->deq_port_num - 1);
-		return -1;
-	}
-
-	/*qid */
-	if (dp_strncmpi(param_list[4], "def", 3) == 0) {/*sharing queue*/
-		data.flag_ops = 0;
-	} else if (dp_strncmpi(param_list[4], "new", 3) == 0) {
-		data.flag_ops = DP_SUBIF_AUTO_NEW_Q; /*alloc new queue */
-	} else {
-		data.q_id = dp_atoi(param_list[4]);
-		if (data.q_id > 0)
-			data.flag_ops = DP_SUBIF_SPECIFIC_Q; /*specify queue*/
-		else {
-			PR_ERR("Wrong Queue ID:%d\n", data.q_id);
-			return -1;
-		}
-	}
-	if (dp_strncmpi(param_list[5], "lct", 3) == 0) {/*lct */
-		data.flag_ops |= DP_F_DATA_LCT_SUBIF;
-	}
-	/*ctp-dev*/
-	if (param_list[6]) {
-		char ctp_name[IFNAMSIZ] = {0};
-		/* create ctp dev */
-		strncpy(name, param_list[6], sizeof(name) - 1);
-		snprintf(ctp_name, sizeof(ctp_name), "ctp%d_%d", dp_port, vap);
-		data.ctp_dev = create_new_vap_dev(ctp_name);
-		if (!data.ctp_dev) {
-			PR_ERR("failed to create dev %s\n", ctp_name);
-			goto ERR_EXIT;
-		}
-		/* parent dev */
-		rtnl_lock();
-		dev = dev_get_by_name(&init_net, param_list[5]);
-		if (!dev) {
-			rtnl_unlock();
-			snprintf(name, sizeof(name), "%s", param_list[5]);
-			/* need to create ctp parent later */
-			goto CREATE_DEV;
-		}
-		rtnl_unlock();
-		dev_put(dev);
-	}
-CREATE_DEV:
-	if (!dev) {
-		if (!name[0])
-			snprintf(name, sizeof(name), "vap%d_%x", dp_port, vap);
-		dev = create_new_vap_dev(name);
-		if (!dev) {
-			PR_ERR("failed to create dev %s\n", name);
-			goto ERR_EXIT;
-		}
-	}
-	/*register */
-	subif.inst = inst;
-	subif.port_id = dp_port;
-	if (dp_register_subif_ext(inst, port_info->owner, dev,
-				  dev->name, &subif, &data, 0)) {
-		PR_INFO("register_subif fail: %s 0x%x(vap=%d)\n",
-			dev->name, subif.subif, vap);
-		goto ERR_EXIT;
-	}
-	PR_INFO("\nRegister subif for %s ok: subif=0x%x(%d) %s\n",
-		dev->name,
-		subif.subif, vap,
-		data.ctp_dev ? data.ctp_dev->name : "");
-	return 0;
-ERR_EXIT:
-	if (dev) {
-		free_new_vap_dev(dev);
-		dev = NULL;
-	}
-	if (data.ctp_dev) {
-		free_new_vap_dev(data.ctp_dev);
-		data.ctp_dev = NULL;
-	}
-	return -1;
-}
-
-ssize_t proc_logical_dev_write(struct file *file, const char *buf,
-			       size_t count, loff_t *ppos)
-{
-	u16 len;
-	char str[64];
-	static char *param_list[20 * 4];
-	unsigned int num;
-	struct net_device *dev = NULL, *base = NULL;
-	dp_subif_t *subif = NULL;
-
-	struct pmac_port_info *port_info;
-	static struct vlan_prop vlan_prop;
-
-	memset(param_list, 0, sizeof(*param_list));
-	memset(&vlan_prop, 0, sizeof(vlan_prop));
-	len = (sizeof(str) > count) ? count : sizeof(str) - 1;
-	len -= copy_from_user(str, buf, len);
-	str[len] = 0;
-	num = dp_split_buffer(str, param_list, ARRAY_SIZE(param_list));
-	if (num <= 1)
-		goto HELP;
-	subif = kmalloc(sizeof(*subif), GFP_KERNEL);
-	if (!subif) {
-		PR_INFO("kmalloc failed for %d bytes\n", sizeof(*subif));
-		goto EXIT1;
-	}
-	if (dp_strncmpi(param_list[0], "check", strlen("check")) == 0) {
-		if (num != 2)
-			goto HELP;
-		dev = dev_get_by_name(&init_net, param_list[1]);
-		if (!dev) {
-			PR_INFO("No such device:%s\n", param_list[1]);
-			goto EXIT1;
-		}
-		get_vlan_via_dev(dev, &vlan_prop);
-		if (!vlan_prop.num) {
-			PR_INFO("No VLAN interface %s\n", param_list[1]);
-			goto EXIT1;
-		}
-		if (!vlan_prop.base) {
-			PR_INFO("No base found for %s\n", param_list[1]);
-			goto EXIT1;
-		}
-		if (vlan_prop.num > 0)
-			PR_INFO("outer VLAN proto=%x, vid=%d\n",
-				vlan_prop.out_proto, vlan_prop.out_vid);
-		if (vlan_prop.num == 2)
-			PR_INFO("Inner VLAN proto=%x, vid=%d\n",
-				vlan_prop.in_proto, vlan_prop.in_vid);
-		PR_INFO("base of %s: %s\n",
-			param_list[0], vlan_prop.base->name);
-		goto EXIT1;
-	} else if (dp_strncmpi(param_list[0], "set", strlen("set")) == 0) {
-		u32 flag = DP_F_SUBIF_LOGICAL;
-
-		if ((num != 2) && (num != 3))
-			goto HELP;
-		dev = dev_get_by_name(&init_net, param_list[1]);
-		if (!dev) {
-			PR_INFO("No such device:%s\n", param_list[1]);
-			goto EXIT1;
-		}
-		if (dp_strncmpi(param_list[2], "explicit", strlen("explicit")) == 0)
-			flag |= DP_F_ALLOC_EXPLICIT_SUBIFID;
-		base = get_base_dev(dev, -1);
-		if (!base) { /*not logical dev */
-			base = dev;
-			flag = 0;
-		}
-		if (dp_get_netif_subifid(base, NULL, NULL, NULL, subif, 0)) {
-			PR_INFO("dp_get_netif_subifid fail:%s\n", base->name);
-			goto EXIT1;
-		}
-		port_info = get_port_info_via_dp_port(0, subif->port_id);
-		if (!port_info) {
-			PR_INFO("get_port_info_via_dp_port fail: port_id:%d\n",
-				subif->port_id);
-			goto EXIT1;
-		}
-		subif->subif = -1;
-		if (dp_register_subif(port_info->owner, dev,
-				      dev->name, subif, flag)) {
-			PR_INFO("dp_register_subif fail: %s\n",
-				dev->name);
-			goto EXIT1;
-		}
-		PR_INFO("\nRegister subif for %s ok with %s\n",
-			param_list[1],
-			flag & DP_F_ALLOC_EXPLICIT_SUBIFID ?
-			"explicit" : "its base's subif/ctp");
-	} else if (dp_strncmpi(param_list[0], "unset", strlen("unset")) == 0) {
-		u32 flag = DP_F_DEREGISTER;
-
-		if (num != 2)
-			goto HELP;
-		dev = dev_get_by_name(&init_net, param_list[1]);
-		if (!dev) {
-			PR_INFO("No such device:%s\n", param_list[1]);
-			goto EXIT1;
-		}
-		if (dp_get_netif_subifid(dev, NULL, NULL, NULL, subif, 0)) {
-			PR_INFO("dp_get_netif_subifid fail:%s\n", dev->name);
-			goto EXIT1;
-		}
-		port_info = get_port_info_via_dp_port(0, subif->port_id);
-		if (!port_info) {
-			PR_INFO("get_port_info_via_dp_port fail: port_id:%d\n",
-				subif->port_id);
-			goto EXIT1;
-		}
-		if (dp_register_subif(port_info->owner, dev,
-				      dev->name, subif, flag)) {
-			PR_INFO("dp_deregister_subif fail: %s\n",
-				dev->name);
-			goto EXIT1;
-		}
-		PR_INFO("Deregister subif for %s ok with subif=%d\n",
-			param_list[1],
-			subif->subif);
-	} else if (dp_strncmpi(param_list[0], "get", strlen("get")) == 0) {
-		u32 flag = 0;
-		int i;
-
-		if (num < 2)
-			goto HELP;
-		dev = dev_get_by_name(&init_net, param_list[1]);
-		if (!dev) {
-			PR_INFO("No such device:%s\n", param_list[1]);
-			goto EXIT1;
-		}
-		subif->port_id = -1;
-		if (dp_get_netif_subifid(dev, NULL, NULL, NULL, subif,
-					 flag)) {
-			PR_INFO("dp_get_netif_subifid fail: %s\n",
-				dev->name);
-			goto EXIT1;
-		}
-		PR_INFO("dev %s subif info:\n", dev->name);
-		PR_INFO("  inst=%d ep=%d bp=%d flag_bp=%u\n",
-			subif->inst, subif->port_id, subif->bport,
-			subif->flag_bp);
-		for (i = 0; i < subif->subif_num; i++)
-			PR_INFO("  subif[%d]=%d\n",
-				i, subif->subif_list[i]);
-		PR_INFO("\n");
-		goto EXIT1;
-	} else if (dp_strncmpi(param_list[0], "add_v", strlen("add_v")) == 0) {
-		add_vap(param_list, num);
-		goto EXIT1;
-	} else if (dp_strncmpi(param_list[0], "del_v", strlen("del_v")) == 0) {
-		del_vap(param_list, num);
-		goto EXIT1;
-	} else if (dp_strncmpi(param_list[0], "alloc",
-		   strlen("alloc") + 1) == 0) {
-		alloc_port(param_list, num);
-	} else if (dp_strncmpi(param_list[0], "free",
-		   strlen("free") + 1) == 0) {
-		free_port(param_list, num);
-	} else {
-		PR_ERR("Wrong cmd:%s\n", param_list[0]);
-		goto EXIT1;
-	}
-EXIT1:
-	if (dev)
-		dev_put(dev);
-
-	kfree(subif);
-	return count;
-
-HELP:
-	PR_INFO("Check Base Dev:echo check logic_dev_name > /proc/dp/%s\n",
-		PROC_LOGICAL_DEV);
-	PR_INFO("Register Logical dev:echo set logic_dev [explicit] > %s/%s\n",
-		DP_PROC_BASE, PROC_LOGICAL_DEV);
-	PR_INFO("DeRegister Logical dev:echo unset logic_dev_name > %s/%s\n",
-		DP_PROC_BASE, PROC_LOGICAL_DEV);
-	PR_INFO("Get dp_subif info:echo get dev_name > /proc/dp/%s\n",
-		PROC_LOGICAL_DEV);
-	PR_INFO("Add vap:echo add_v <dp_port> <vap> <tcont> <qid> %s\n",
-		"lct <ctp_parent_dev> > " DP_PROC_BASE PROC_LOGICAL_DEV);
-	PR_INFO("   Note of qid:\n");
-	PR_INFO("     default  : auto share queue(default handling)\n");
-	PR_INFO("     new_queue: auto alloc new queue\n");
-	PR_INFO("     value(>0): specified queue id by caller.\n");
-	PR_INFO("   Note of vap: 0, 1, 2, 3,....\n");
-	PR_INFO("   Note of ctp_dev: for PON pmapper case\n");
-	PR_INFO("   Note of lct: for LCT device registration\n");
-	PR_INFO("Del vap:echo del_v <dp_port> <vap> lct %s/%s\n",
-		DP_PROC_BASE, PROC_LOGICAL_DEV);
-	PR_INFO("echo alloc %s %s > /sys/kernel/debug/dp/%s\n",
-		PROC_ALLOC_PARAM, PROC_ALLOC_PARAM_FLAGS,
-		PROC_LOGICAL_DEV);
-	PR_INFO("echo free %s > /sys/kernel/debug/dp/%s\n",
-		PROC_FREE_PARAM, PROC_LOGICAL_DEV);
-	if (dev)
-		dev_put(dev);
-
-	kfree(subif);
-	return count;
-}
-
-struct property_info {
-	char *name;
-	int type;
-};
-
-enum PROPERTY_TYPE {
-	PROP_UNKNOWN = 0,
-	PROP_STRING,
-	PROP_REG,
-	PROP_RANGER,
-	PROP_U32_OCT,
-	PROP_U32_HEX,
-	PROP_HANDLE,
-	PROP_REFERENCE
-};
-
-struct property_info prop_info[] = {
-	{"compatible", PROP_STRING},
-	{"status", PROP_STRING},
-	{"name", PROP_STRING},
-	{"label", PROP_STRING},
-	{"model", PROP_STRING},
-	{"reg-names", PROP_STRING},
-	{"reg", PROP_REG},
-	{"interrupts", PROP_U32_OCT},
-	{"ranges", PROP_RANGER},
-	{"dma-ranges", PROP_RANGER},
-	{"phandle", PROP_HANDLE},
-	{"interrupt-parent", PROP_HANDLE}
-
-};
-
-int get_property_info(char *name)
-{
-	int i;
-
-	if (!name)
-		return PROP_UNKNOWN;
-	for (i = 0; i < ARRAY_SIZE(prop_info); i++) {
-		if (dp_strncmpi(name, prop_info[i].name, strlen(prop_info[i].name)) == 0)
-			return prop_info[i].type;
-	}
-
-	return PROP_UNKNOWN;
-}
-
-/*0--not string
- *1--is string
- */
-/*#define LOCAL_STRING_PARSE*/
-int is_print_string(char *p, int len)
-{
-	int i;
-
-	if (!p || !len)
-		return 0;
-	if (p[len - 1] != 0)
-		return 0;
-	for (i = 0; i < len - 1; i++) {
-#ifdef LOCAL_STRING_PARSE
-		if (!(((p[i] >= 'a') && (p[i] <= 'z')) ||
-		      ((p[i] >= 'A') && (p[i] <= 'Z')) ||
-		      ((p[i] >= '0') && (p[i] <= '9')) ||
-		      (p[i] == '.') ||
-		      (p[i] == '/')))
-#else
-		if (!isprint(p[i]) && p[i] != 0) /*string list */
-#endif
-			return 0;
-	}
-	if (p[0] == 0)
-		return 0;
-
-	return 1;
-}
-
-#define INDENT_BASE 3 /*3 Space */
-void print_property(struct device_node *node, struct property *p, char *indent)
-{
-	int type;
-	int k, times, i;
-
-	if (!p || !node)
-		return;
-	type = get_property_info(p->name);
-	if (type == PROP_UNKNOWN) {
-		if (is_print_string(p->value, p->length))
-			type = PROP_STRING;
-		else if ((p->length % 4) == 0)
-			type = PROP_U32_OCT;
-	}
-	if (type == PROP_STRING) {
-		char *s = (char *)p->value;
-		int k = 0;
-
-		PR_INFO("%s  %s=", indent, p->name);
-		do {
-			PR_INFO("\"%s\"", s);
-			k += strlen(s) + 1;
-			if (k < p->length) {
-				s += strlen(s) + 1;
-				PR_INFO(",");
-				continue;
-			}
-			PR_INFO("\n");
-			break;
-		} while (1);
-	} else if (type == PROP_U32_OCT) { /*each item is 4 bytes*/
-		PR_INFO("%s  %s=<", indent, p->name);
-		times = p->length / 4;
-		if (times) {
-			for (k = 0; k < times; k++)
-				PR_INFO("%d ", *(int *)(p->value + k * 4));
-		}
-		PR_INFO(">\n");
-	} else if (type == PROP_U32_HEX) { /*each item is 4 bytes*/
-		PR_INFO("%s  %s=<", indent, p->name);
-		times = p->length / 4;
-		if (times) {
-			for (k = 0; k < times; k++)
-				PR_INFO("0x%x ", *(int *)(p->value + k * 4));
-		}
-		PR_INFO(">\n");
-	} else if (type == PROP_REG) {/*two tuple: address and size */
-		int n = (of_n_addr_cells(node) + of_n_size_cells(node));
-		int j;
-
-		PR_INFO("%s  %s=<", indent, p->name);
-		times = p->length / (4 * n);
-		if (times) {
-			for (k = 0; k < times; k++) {
-				if (k)
-					PR_INFO("%s    ", indent);
-				for (j = 0; j < n; j++)
-					PR_INFO("0x%x ",
-						*(int *)(p->value + k * 8 +
-						4 * j));
-				if (k != (times - 1))
-					PR_INFO("\n");
-			}
-		}
-		PR_INFO(">\n");
-	} else if (type == PROP_RANGER) {
-		/*triple: child-bus-address, parent-bus-address, length */
-		PR_INFO("%s  %s=<", indent, p->name);
-		times = p->length / (4 * 3);
-		if (times) {
-			for (k = 0; k < times; k++) {
-				if (!k)
-					PR_INFO("0x%x 0x%x 0x%x",
-						*(int *)(p->value + k * 8),
-						*(int *)(p->value + k * 8 + 4),
-						*(int *)(p->value + k * 8 + 8));
-				else
-					PR_INFO("%s    0x%x 0x%x 0x%x", indent,
-						*(int *)(p->value + k * 8),
-						*(int *)(p->value + k * 8 + 4),
-						*(int *)(p->value + k * 8 + 8));
-				if (k != (times - 1))
-					PR_INFO("\n");
-			}
-		}
-		PR_INFO(">\n");
-	} else if (type == PROP_HANDLE) {
-		struct device_node *tmp = of_find_node_by_phandle(
-			be32_to_cpup((u32 *)p->value));
-		int offset = 0;
-
-		if (tmp) {
-			PR_INFO("%s  %s=<&%s", indent, p->name, tmp->name);
-			offset = 1;
-		} else {
-			PR_INFO("%s  %s=<", indent, p->name);
-		}
-		if (p->length >= 4) {
-			int times = p->length / 4;
-
-			if (times) {
-				for (k = offset; k < times; k++)
-					PR_INFO("%d ",
-						*(int *)(p->value + k * 4));
-			}
-		}
-		PR_INFO(">\n");
-	} else {
-		PR_INFO("%s  %s length=%d\n", indent, p->name, p->length);
-		if (p->length) {
-			char *s = (unsigned char *)p->value;
-
-			PR_INFO("%s   ", indent);
-			for (i = 0; i < p->length; i++)
-				PR_INFO("0x%02x ", s[i]);
-			PR_INFO("\n");
-		}
-	}
-}
-
-void print_device_tree_node(struct device_node *node, int depth)
-{
-	int i = 0, len;
-	struct device_node *child;
-	struct property *p;
-	char *indent;
-
-	if (!node)
-		return;
-	len = (depth + 1) * 3;
-	indent = kmalloc(len, GFP_KERNEL);
-	if (!indent)
-		return;
-	for (i = 0; i < depth * 3; i++)
-		indent[i] = ' ';
-	indent[i] = '\0';
-	++depth;
-	PR_INFO("%s{%s(%s)_cell addr/size=%d/%d\n",
-		indent, node->name, node->full_name,
-		of_n_addr_cells(node), of_n_size_cells(node));
-	for_each_property_of_node(node, p)
-		print_property(node, p, indent);
-	for_each_child_of_node(node, child)
-		print_device_tree_node(child, depth);
-
-	PR_INFO("%s}\n", indent);
-	kfree(indent);
-}
-
-static u8 ipv4_plain_udp[] = {
-	0x00, 0x01, 0x01, 0x01, 0x01, 0x01, /*mac */
-	0x00, 0x10, 0x94, 0x00, 0x00, 0x02,
-	0x08, 0x00,	/*type */
-	0x45, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x11, /*ip hdr*/
-	0x3A, 0x56, 0xC0, 0x55, 0x01, 0x02, 0xC0, 0x00, 0x00, 0x01,
-	0x04, 0x00, 0x00, 0x00, 0x00, 0x2A, 0x7A, 0x41, 0x00, 0x00, /*udp hdr*/
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00
-};
-
-static u8 ipv4_plain_tcp[1514] = {
-	0x00, 0x01, 0x01, 0x01, 0x01, 0x01, /*mac */
-	0x00, 0x10, 0x94, 0x00, 0x00, 0x02,
-	0x08, 0x00,	/*type */
-	0x45, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x06, /*ip hdr*/
-	0x3A, 0x61, 0xC0, 0x55, 0x01, 0x02, 0xC0, 0x00, 0x00, 0x01,
-	0x04, 0x00, 0x04, 0x00, 0x00, 0x01, 0xE2, 0x40, 0x00, 0x03, /*tcp hdr*/
-	0x94, 0x47, 0x50, 0x10, 0x10, 0x00, 0x9F, 0xD9, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /*data */
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00
-};
-
-/*flag: for dp_xmit
- *pool: 1-CPU
- *discard: discard bit in DMA descriptor, CQM HW will drop the packet
- *priority: for skb->priority
- */
-static int dp_send_packet(u8 *pdata, int len, char *devname, u32 flag,
-			  u32 pool, u32 discard, int priority, int color)
-{
-	struct sk_buff *skb;
-	dp_subif_t subif = { 0 };
-	#define PAD  32
-
-	if (pool == 1) {
-		len += PAD;
-		if (len < ETH_ZLEN)
-			len = ETH_ZLEN;
-		skb = alloc_skb(len, GFP_ATOMIC);
-		if (skb)
-			skb_reserve(skb, PAD);
-		PR_INFO_ONCE("Allocate CPU buffer\n");
-	} else {
-		skb = cbm_alloc_skb(len + 8, GFP_ATOMIC);
-		PR_INFO_ONCE("Allocate bm buffer\n");
-	}
-
-	if (unlikely(!skb)) {
-		PR_ERR("allocate cbm buffer fail\n");
-		return -1;
-	}
-
-	skb->DW0 = 0;
-	skb->DW1 = 0;
-	skb->DW2 = 0;
-	skb->DW3 = 0;
-	if (discard) {
-		((struct dma_tx_desc_3 *)&skb->DW3)->field.dic = 1;
-		PR_INFO_ONCE("discard bit set in DW3\n");
-	}
-	((struct dma_tx_desc_1 *)&skb->DW1)->field.color = color;
-	memcpy(skb->data, pdata, len);
-	skb->data[5] = (char)priority;
-	skb->len = 0;
-	skb_put(skb, len);
-	skb->dev = dev_get_by_name(&init_net, devname);
-	skb->priority = priority;
-
-	if (dp_get_netif_subifid(skb->dev, skb, NULL, skb->data, &subif, 0)) {
-		PR_ERR("dp_get_netif_subifid failed for %s\n",
-		       skb->dev->name);
-		dev_kfree_skb_any(skb);
-		return -1;
-	}
-
-	((struct dma_tx_desc_1 *)&skb->DW1)->field.ep = subif.port_id;
-	((struct dma_tx_desc_0 *)&skb->DW0)->field.dest_sub_if_id =
-		subif.subif;
-
-	if (dp_xmit(skb->dev, &subif, skb, skb->len, flag))
-		return -1;
-
-	return 0;
-}
-
-#define OPT_TX_DEV "[-i <dev_name>]"
-#define OPT_TX_NUM "[-n <pkt_num>]"
-#define OPT_TX_PROT "[-t <types: udp/tcp/raw>]"
-#define OPT_TX_POOL "[-p <pool:cpu/bm>]"
-#define OPT_TX_F_DISC "[-d]"
-#define OPT_TX_PRIO "[-c <class/prio range>]"
-#define OPT_TX_COLOR "[-o <color>]"
-#define OPT_TX1 (OPT_TX_DEV OPT_TX_NUM OPT_TX_PROT)
-#define OPT_TX2 (OPT_TX_POOL OPT_TX_F_DISC OPT_TX_PRIO OPT_TX_COLOR)
-#define OPT_TX (OPT_TX1 OPT_TX2)
-char l2_hdr[] = {0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
-		 0x01, 0x01, 0x01, 0x01, 0x01, 0x11,
-		 0x12, 0x34};
-ssize_t proc_tx_pkt(struct file *file, const char *buf,
-		    size_t count, loff_t *ppos)
-{
-	int len = 0, c;
-	char data[100];
-	char *param_list[10];
-	int num, pkt_num = 1, times, pool = 0, disc = 0;
-	char *p = ipv4_plain_udp;
-	int size = sizeof(ipv4_plain_udp);
-	short prio_range = 1, color = 0;
-	int opt_offset;
-	char *optstring = "i:n:t:p:dc:o:";
-	char *optarg = 0;
-	char *dev_name = "eth1";
-
-	len = (count >= sizeof(data)) ? (sizeof(data) - 1) : count;
-	DP_DEBUG(DP_DBG_FLAG_DBG, "len=%d\n", len);
-
-	if (len <= 0) {
-		PR_ERR("Wrong len value (%d)\n", len);
-		return count;
-	}
-	if (copy_from_user(data, buf, len)) {
-		PR_ERR("copy_from_user fail");
-		return count;
-	}
-	data[len - 1] = 0; /* Make string */
-	num = dp_split_buffer(data, param_list, ARRAY_SIZE(param_list));
-	if (num <= 1)
-		goto help;
-	opt_offset = 0;
-	while ((c = dp_getopt(param_list, num,
-			      &opt_offset, &optarg, optstring)) > 0) {
-		if (optstring)
-			DP_DEBUG(DP_DBG_FLAG_DBG, "opt_offset=%d optarg=%s.\n",
-				 opt_offset, optarg);
-		switch (c) {
-		case 'i':
-			dev_name = optarg;
-			DP_DEBUG(DP_DBG_FLAG_DBG, "dev_name=%s\n", dev_name);
-			break;
-		case 'n':
-			pkt_num = dp_atoi(optarg);
-			PR_INFO("pkt_num=%d\n", pkt_num);
-			break;
-		case 't':
-			if (dp_strncmpi(optarg, "tcp", strlen("tcp")) == 0) {
-				p = ipv4_plain_tcp;
-				size = sizeof(ipv4_plain_tcp);
-			} else if (dp_strncmpi(optarg, "udp", strlen("udp")) == 0) {
-				p = ipv4_plain_udp;
-				size = sizeof(ipv4_plain_udp);
-			} else  {
-				PR_INFO("Wrong procol selected\n");
-				return count;
-			}
-			break;
-		case 'p':
-			if (dp_strncmpi(optarg, "cpu", strlen("cpu")) == 0) {
-				pool = 1;
-			} else if (dp_strncmpi(optarg, "bm", strlen("bm")) == 0) {
-				pool = 0;
-			} else  {
-				PR_INFO("Wrong procol selected\n");
-				return count;
-			}
-			break;
-		case 'd':
-			disc = 1;
-			break;
-		case 'c':
-			prio_range = dp_atoi(optarg);
-			if (prio_range <= 0)
-				prio_range = 1;
-			PR_INFO("prio_range=%d\n", prio_range);
-			break;
-		case 'o':
-			color = dp_atoi(optarg);
-			if (color < 0)
-				color = 0;
-			else if (color > 3)
-				color = 3;
-			PR_INFO("color=%d\n", color);
-			break;
-		default:
-			PR_INFO("Wrong command\n");
-			goto help;
-		}
-	}
-	if (c < 0) { /*c == 0 means reach end of list */
-		PR_INFO("Wrong command\n");
-		goto help;
-	}
-
-	if (!dev_name) { /*c == 0 means reach end of list */
-		PR_INFO("Must provide dev_name\n");
-		return count;
-	}
-
-	times = 0;
-	while (pkt_num--) {
-		if (dp_send_packet(p, size, dev_name, 0, pool, disc,
-				   times % prio_range, color))
-			break;
-		times++;
-	}
-	PR_INFO("sent %d packet already\n", times);
-	return count;
-help:   /*                        [0]         [1]         [2]     [3] [4]*/
-	PR_INFO("tx packet: echo %s\n", OPT_TX1);
-	PR_INFO("                %s\n", OPT_TX2);
-	return count;
-}
-
-void meter_create_help(void)
-{
-	PR_INFO("METER ADD/DELETE: echo meter <dev> %s",
-		"<alloc/dealloc/add/delete>\n");
-	PR_INFO("<port_flag> <trfic_dir> <trfic_type> <cir> <pir> <cbs> %s",
-		"<pbs> <type> > /sys/kernel/debug/dp/qos");
-	PR_INFO("     dev: CTP/BP/Bridge device name\n");
-	PR_INFO("     alloc/deallc/add/del: meter operation\n");
-	PR_INFO("     port_flag: opt flag for CTP/BP/br/clrMrk/CPUtrfic\n");
-	PR_INFO("     trfic_dir: opt ingress or egress data\n");
-	PR_INFO("     trfic_type: traffic flow type(unicast,multicast,..\n");
-	PR_INFO("     cir: opt committed information rate in bit/s\n");
-	PR_INFO("     pir: opt Peak information rate in bit/s\n");
-	PR_INFO("     cbs: opt committed burst size in bytes\n");
-	PR_INFO("     pbs: opt peak burst size in bytes\n");
-	PR_INFO("     type:opt type single/dual rate(strTCM,trTCM\n");
-}
-
-ssize_t proc_meter_write(struct file *file, const char *buf, size_t count,
-			 loff_t *ppos)
-{
-	int len;
-	char str[100];
-	char *param_list[16] = { 0 };
-	unsigned int level = 0, num = 0;
-
-	len = (sizeof(str) > count) ? count : sizeof(str) - 1;
-	len -= copy_from_user(str, buf, len);
-	str[len] = 0;
-
-	if (!len)
-		return count;
-
-	num = dp_split_buffer(str, param_list, ARRAY_SIZE(param_list));
-	level = num - 3;
-
-	if ((num <= 1 || num > ARRAY_SIZE(param_list)) ||
-	    (dp_strncmpi(param_list[0], "help", strlen("help")) == 0))
-		meter_create_help();
-	else if (dp_strncmpi(param_list[0], "meter",
-			     strlen("meter")) == 0) {
-		int inst = 0;
-		struct dp_meter_cfg meter = {
-			.type = srTCM,
-			.cir = 5000000,
-			.pir = 5000000,
-			.cbs = 1023,
-			.pbs = 1023,
-			.col_mode = 0,
-			.dir = DP_DIR_EGRESS,
-			.mode = DP_PCP_8P0D,
-			.dp_pce.flow = DP_UKNOWN_UNICAST,
-			.dp_pce.pce_idx = 0
-		};
-		struct net_device *dev;
-		int ret;
-		int meter_flag = DP_METER_ATTACH_CTP, meterid = -1;
-		struct dp_meter_subif mtr_subif = {0};
-		
-		mtr_subif.inst = inst;
-		dev = dev_get_by_name(&init_net, param_list[1]);
-		if (!dev) {
-			PR_ERR(" dev NULL\n");
-			return count;
-		}
-		ret = dp_get_netif_subifid(dev, NULL, NULL, NULL,
-					   &mtr_subif.subif, 0);
-		if (ret < 0) {
-			PR_ERR("subif fails\n");
-			return count;
-		}
-		if (dp_strncmpi(param_list[2], "dealloc",
-				strlen("dealloc") + 1) == 0) {
-			meterid = dp_atoi(param_list[3]);
-			ret = DP_METER_ALLOC(inst, meterid, DP_F_DEREGISTER);
-			if (ret < 0) {
-				PR_ERR("Fail to get meter dealloc\n");
-				return count;
-			}
-		PR_INFO("Meter dealloc succes, MeterId:=%d\n",
-			meterid);
-		} else if (dp_strncmpi(param_list[2], "alloc",
-				       strlen("alloc") + 1) == 0) {
-			ret = DP_METER_ALLOC(inst, meterid, 0);
-			if (ret < 0) {
-				PR_ERR("Fail to get meter alloc\n");
-				return count;
-			}
-			PR_INFO("Meter alloc succes, MeterId:=%d\n", meterid);
-		} else if ((dp_strncmpi(param_list[2], "del",
-					strlen("del") + 1) == 0) ||
-					(dp_strncmpi(param_list[2], "add",
-					strlen("add")+ 1) == 0)) {
-			int param_val;
-
-			if (!param_list[3]) {
-				PR_ERR("meterid NULLL\n");
-				return count;
-			}
-			param_val = dp_atoi(param_list[3]);
-			if (param_val < 0) {
-				PR_ERR("meterid less then 0");
-				return count;
-			}
-			meter.meter_id = param_val;
-			if (param_list[4])
-				meter_flag = dp_atoi(param_list[4]);
-			if (param_list[5])
-				meter.dir = dp_atoi(param_list[5]);
-			if (param_list[6])
-				meter.dp_pce.flow = dp_atoi(param_list[6]);
-			if (param_list[7])
-				meter.cir = dp_atoi(param_list[7]);
-			if (param_list[8])
-				meter.pir = dp_atoi(param_list[8]);
-			if (param_list[9])
-				meter.cbs = dp_atoi(param_list[9]);
-			if (param_list[10])
-				meter.pbs = dp_atoi(param_list[10]);
-			if (param_list[11])
-				meter.type = dp_atoi(param_list[11]);
-			meter.mode = DP_PCP_8P0D;
-			if (dp_strncmpi(param_list[2], "add",
-					strlen("add")) == 0)
-				ret = DP_METER_CFGAPI(inst, dp_meter_add, dev,
-						      meter, meter_flag, &mtr_subif);
-			else
-				ret = DP_METER_CFGAPI(inst, dp_meter_del, dev,
-						      meter, meter_flag, &mtr_subif);
-			if (ret < 0) {
-				PR_ERR("meter %s failed\n",
-				       param_list[2]);
-				return count;
-			}
-			PR_INFO("meterid:=%d %s success\n",
-				meter.meter_id, param_list[2]);
-		}
-	} else {
-		PR_INFO("Wrong Paramters\n");
-		meter_create_help();
-	}
-	return count;
-}
-
 static struct dp_proc_entry dp_proc_entries[] = {
 	/*name single_callback_t multi_callback_t/_start write_callback_t */
 #if defined(CONFIG_LTQ_DATAPATH_DBG) && CONFIG_LTQ_DATAPATH_DBG
 	{PROC_DBG, proc_dbg_read, NULL, NULL, proc_dbg_write},
 #endif
 	{PROC_PORT, NULL, proc_port_dump, proc_port_init, proc_port_write},
-	{PROC_MEM, NULL, NULL, NULL, proc_write_mem},
-	{PROC_DT, NULL, NULL, NULL, proc_dt_write},
-	{PROC_LOGICAL_DEV, NULL, NULL, NULL, proc_logical_dev_write},
 	{PROC_INST_DEV, NULL, proc_inst_dev_dump, proc_inst_dev_start, NULL},
 	{PROC_INST_MOD, NULL, proc_inst_mod_dump, proc_inst_mod_start, NULL},
 	{PROC_INST_HAL, NULL, proc_inst_hal_dump, NULL, NULL},
 	{PROC_INST, NULL, proc_inst_dump, NULL, NULL},
-	{PROC_TX_PKT, NULL, NULL, NULL, proc_tx_pkt},
 	{PROC_QOS, NULL, qos_dump, qos_dump_start, proc_qos_write},
-	{PROC_ASYM_VLAN, NULL, NULL, NULL, proc_asym_vlan},
-	{PROC_METER, NULL, NULL, NULL, proc_meter_write},
 
 	/*the last place holder */
 	{NULL, NULL, NULL, NULL, NULL}
diff --git a/drivers/net/ethernet/lantiq/datapath/gswip30/datapath_proc.c b/drivers/net/ethernet/lantiq/datapath/gswip30/datapath_proc.c
index 2173e2c26c2e..4db76a960c16 100644
--- a/drivers/net/ethernet/lantiq/datapath/gswip30/datapath_proc.c
+++ b/drivers/net/ethernet/lantiq/datapath/gswip30/datapath_proc.c
@@ -21,26 +21,10 @@
 
 #define PROC_PARSER "parser"
 #define PROC_RMON_PORTS  "rmon"
-#define PROC_MIB_TIMER "mib_timer"
-#define PROC_MIB_INSIDE "mib_inside"
-#define PROC_MIBPORT "mib_port"
-#define PROC_CHECKSUM "checksum"
-#define PROC_MIBVAP "mib_vap"
-#define PROC_COMMON_CMD "cmd"
-#define PROC_COC "coc"
-#define PROC_CBM_BUF_TEST   "cbm_buf"
-#define PROC_PCE  "pce"
-#define PROC_ROUTE  "route"
-#define PROC_PMAC  "pmac"
 #define PROC_EP "ep"	/*EP/port ID info */
 #define PROC_DPORT "dport"	/*TMU dequeue port info */
 #define DP_PROC_CBMLOOKUP "lookup"
 
-#define MAX_GSW_L_PMAC_PORT  7
-#define MAX_GSW_R_PMAC_PORT  16
-static GSW_RMON_Port_cnt_t gsw_l_rmon_mib[MAX_GSW_L_PMAC_PORT];
-static GSW_RMON_Port_cnt_t gsw_r_rmon_mib[MAX_GSW_R_PMAC_PORT];
-static GSW_RMON_Redirect_cnt_t gswr_rmon_redirect;
 
 enum RMON_MIB_TYPE {
 	RX_GOOD_PKTS = 0,
@@ -98,25 +82,12 @@ static void print_dash_line(struct seq_file *s)
 	print_dash_line(s); \
 } while (0)
 
-static void proc_checksum_read(struct seq_file *s);
 static void proc_parser_read(struct seq_file *s);
 static ssize_t proc_parser_write(struct file *, const char *, size_t,
 				 loff_t *);
-static ssize_t proc_checksum_write(struct file *file, const char *buf,
-				   size_t count, loff_t *ppos);
-static ssize_t proc_cbm_buf_write(struct file *file, const char *buf,
-				  size_t count, loff_t *ppos);
-static void proc_cbm_buf_read(struct seq_file *s);
-static int proc_gsw_pce_dump(struct seq_file *s, int pos);
-static int proc_gsw_pce_start(void);
-static ssize_t proc_gsw_route_write(struct file *file, const char *buf,
-				    size_t count, loff_t *ppos);
-static ssize_t proc_gsw_pmac_write(struct file *file, const char *buf,
-				   size_t count, loff_t *ppos);
 static int proc_ep_dump(struct seq_file *s, int pos);
 static ssize_t ep_port_write(struct file *, const char *, size_t, loff_t *);
 static int proc_dport_dump(struct seq_file *s, int pos);
-static int proc_gsw_route_dump(struct seq_file *seq, int pos);
 static int rmon_display_tmu_mib = 1;
 static int rmon_display_port_full;
 
@@ -424,276 +395,6 @@ static ssize_t proc_parser_write(struct file *file, const char *buf,
 	print_dash_line(s); \
 	} while (0)
 
-typedef int (*ingress_pmac_set_callback_t) (dp_pmac_cfg_t *pmac_cfg,
-					    u32 value);
-typedef int (*egress_pmac_set_callback_t) (dp_pmac_cfg_t *pmac_cfg,
-					   u32 value);
-struct ingress_pmac_entry {
-	char *name;
-	ingress_pmac_set_callback_t ingress_callback;
-};
-
-struct egress_pmac_entry {
-	char *name;
-	egress_pmac_set_callback_t egress_callback;
-};
-
-static int ingress_err_disc_set(dp_pmac_cfg_t *pmac_cfg, u32 value)
-{
-	pmac_cfg->ig_pmac.err_disc = value;
-	pmac_cfg->ig_pmac_flags = IG_PMAC_F_ERR_DISC;
-	return 0;
-}
-
-static int ingress_pmac_set(dp_pmac_cfg_t *pmac_cfg, u32 value)
-{
-	pmac_cfg->ig_pmac.pmac = value;
-	pmac_cfg->ig_pmac_flags = IG_PMAC_F_PRESENT;
-	return 0;
-}
-
-static int ingress_pmac_pmap_set(dp_pmac_cfg_t *pmac_cfg, u32 value)
-{
-	pmac_cfg->ig_pmac.def_pmac_pmap = value;
-	pmac_cfg->ig_pmac_flags = IG_PMAC_F_PMAP;
-	return 0;
-}
-
-static int ingress_pmac_en_pmap_set(dp_pmac_cfg_t *pmac_cfg, u32 value)
-{
-	pmac_cfg->ig_pmac.def_pmac_en_pmap = value;
-	pmac_cfg->ig_pmac_flags = IG_PMAC_F_PMAPENA;
-	return 0;
-}
-
-static int ingress_pmac_tc_set(dp_pmac_cfg_t *pmac_cfg, u32 value)
-{
-	pmac_cfg->ig_pmac.def_pmac_tc = value;
-	pmac_cfg->ig_pmac_flags = IG_PMAC_F_CLASS;
-	return 0;
-}
-
-static int ingress_pmac_en_tc_set(dp_pmac_cfg_t *pmac_cfg, u32 value)
-{
-	pmac_cfg->ig_pmac.def_pmac_en_tc = value;
-	pmac_cfg->ig_pmac_flags = IG_PMAC_F_CLASSENA;
-	return 0;
-}
-
-static int ingress_pmac_subifid_set(dp_pmac_cfg_t *pmac_cfg, u32 value)
-{
-	pmac_cfg->ig_pmac.def_pmac_subifid = value;
-	pmac_cfg->ig_pmac_flags = IG_PMAC_F_SUBIF;
-	return 0;
-}
-
-static int ingress_pmac_srcport_set(dp_pmac_cfg_t *pmac_cfg, u32 value)
-{
-	pmac_cfg->ig_pmac.def_pmac_src_port = value;
-	pmac_cfg->ig_pmac_flags = IG_PMAC_F_SPID;
-	return 0;
-}
-
-static int ingress_pmac_hdr1_set(dp_pmac_cfg_t *pmac_cfg, u32 value)
-{
-	u8 hdr;
-
-	hdr = (u8)value;
-	pmac_cfg->ig_pmac.def_pmac_hdr[0] = hdr;
-	pmac_cfg->ig_pmac_flags = IG_PMAC_F_PMACHDR1;
-	return 0;
-}
-
-static int ingress_pmac_hdr2_set(dp_pmac_cfg_t *pmac_cfg, u32 value)
-{
-	u8 hdr;
-
-	hdr = (u8)value;
-	pmac_cfg->ig_pmac.def_pmac_hdr[1] = hdr;
-	pmac_cfg->ig_pmac_flags = IG_PMAC_F_PMACHDR2;
-	return 0;
-}
-
-static int ingress_pmac_hdr3_set(dp_pmac_cfg_t *pmac_cfg, u32 value)
-{
-	u8 hdr;
-
-	hdr = (u8)value;
-	pmac_cfg->ig_pmac.def_pmac_hdr[2] = hdr;
-	pmac_cfg->ig_pmac_flags = IG_PMAC_F_PMACHDR3;
-	return 0;
-}
-
-static int ingress_pmac_hdr4_set(dp_pmac_cfg_t *pmac_cfg, u32 value)
-{
-	u8 hdr;
-
-	hdr = (u8)value;
-	pmac_cfg->ig_pmac.def_pmac_hdr[3] = hdr;
-	pmac_cfg->ig_pmac_flags = IG_PMAC_F_PMACHDR4;
-	return 0;
-}
-
-static int ingress_pmac_hdr5_set(dp_pmac_cfg_t *pmac_cfg, u32 value)
-{
-	u8 hdr;
-
-	hdr = (u8)value;
-	pmac_cfg->ig_pmac.def_pmac_hdr[4] = hdr;
-	pmac_cfg->ig_pmac_flags = IG_PMAC_F_PMACHDR5;
-	return 0;
-}
-
-static int ingress_pmac_hdr6_set(dp_pmac_cfg_t *pmac_cfg, u32 value)
-{
-	u8 hdr;
-
-	hdr = (u8)value;
-	pmac_cfg->ig_pmac.def_pmac_hdr[5] = hdr;
-	pmac_cfg->ig_pmac_flags = IG_PMAC_F_PMACHDR6;
-	return 0;
-}
-
-static int ingress_pmac_hdr7_set(dp_pmac_cfg_t *pmac_cfg, u32 value)
-{
-	u8 hdr;
-
-	hdr = (u8)value;
-	pmac_cfg->ig_pmac.def_pmac_hdr[6] = hdr;
-	pmac_cfg->ig_pmac_flags = IG_PMAC_F_PMACHDR7;
-	return 0;
-}
-
-static int ingress_pmac_hdr8_set(dp_pmac_cfg_t *pmac_cfg, u32 value)
-{
-	u8 hdr;
-
-	hdr = (u8)value;
-	pmac_cfg->ig_pmac.def_pmac_hdr[7] = hdr;
-	pmac_cfg->ig_pmac_flags = IG_PMAC_F_PMACHDR8;
-	return 0;
-}
-
-static int egress_fcs_set(dp_pmac_cfg_t *pmac_cfg, u32 value)
-{
-	pmac_cfg->eg_pmac.fcs = value;
-	pmac_cfg->eg_pmac_flags = EG_PMAC_F_FCS;
-	return 0;
-}
-
-static int egress_l2hdr_bytes_set(dp_pmac_cfg_t *pmac_cfg, u32 value)
-{
-	pmac_cfg->eg_pmac.num_l2hdr_bytes_rm = value;
-	pmac_cfg->eg_pmac_flags = EG_PMAC_F_L2HDR_RM;
-	return 0;
-}
-
-static int egress_rx_dma_set(dp_pmac_cfg_t *pmac_cfg, u32 value)
-{
-	pmac_cfg->eg_pmac.rx_dma_chan = value;
-	pmac_cfg->eg_pmac_flags = EG_PMAC_F_RXID;
-	return 0;
-}
-
-static int egress_pmac_set(dp_pmac_cfg_t *pmac_cfg, u32 value)
-{
-	pmac_cfg->eg_pmac.pmac = value;
-	pmac_cfg->eg_pmac_flags = EG_PMAC_F_PMAC;
-	return 0;
-}
-
-static int egress_res_dw_set(dp_pmac_cfg_t *pmac_cfg, u32 value)
-{
-	pmac_cfg->eg_pmac.res_dw1 = value;
-	pmac_cfg->eg_pmac_flags = EG_PMAC_F_RESDW1;
-	return 0;
-}
-
-static int egress_res1_dw_set(dp_pmac_cfg_t *pmac_cfg, u32 value)
-{
-	pmac_cfg->eg_pmac.res1_dw0 = value;
-	pmac_cfg->eg_pmac_flags = EG_PMAC_F_RES1DW0;
-	return 0;
-}
-
-static int egress_res2_dw_set(dp_pmac_cfg_t *pmac_cfg, u32 value)
-{
-	pmac_cfg->eg_pmac.res2_dw0 = value;
-	pmac_cfg->eg_pmac_flags = EG_PMAC_F_RES2DW0;
-	return 0;
-}
-
-static int egress_tc_ena_set(dp_pmac_cfg_t *pmac_cfg, u32 value)
-{
-	pmac_cfg->eg_pmac.tc_enable = value;
-	pmac_cfg->eg_pmac_flags = EG_PMAC_F_TCENA;
-	return 0;
-}
-
-static int egress_dec_flag_set(dp_pmac_cfg_t *pmac_cfg, u32 value)
-{
-	pmac_cfg->eg_pmac.dec_flag = value;
-	pmac_cfg->eg_pmac_flags = EG_PMAC_F_DECFLG;
-	return 0;
-}
-
-static int egress_enc_flag_set(dp_pmac_cfg_t *pmac_cfg, u32 value)
-{
-	pmac_cfg->eg_pmac.enc_flag = value;
-	pmac_cfg->eg_pmac_flags = EG_PMAC_F_ENCFLG;
-	return 0;
-}
-
-static int egress_mpe1_flag_set(dp_pmac_cfg_t *pmac_cfg, u32 value)
-{
-	pmac_cfg->eg_pmac.mpe1_flag = value;
-	pmac_cfg->eg_pmac_flags = EG_PMAC_F_MPE1FLG;
-	return 0;
-}
-
-static int egress_mpe2_flag_set(dp_pmac_cfg_t *pmac_cfg, u32 value)
-{
-	pmac_cfg->eg_pmac.mpe2_flag = value;
-	pmac_cfg->eg_pmac_flags = EG_PMAC_F_MPE2FLG;
-	return 0;
-}
-
-static struct ingress_pmac_entry ingress_entries[] = {
-	{"errdisc", ingress_err_disc_set},
-	{"pmac", ingress_pmac_set},
-	{"pmac_pmap", ingress_pmac_pmap_set},
-	{"pmac_en_pmap", ingress_pmac_en_pmap_set},
-	{"pmac_tc", ingress_pmac_tc_set},
-	{"pmac_en_tc", ingress_pmac_en_tc_set},
-	{"pmac_subifid", ingress_pmac_subifid_set},
-	{"pmac_srcport", ingress_pmac_srcport_set},
-	{"pmac_hdr1", ingress_pmac_hdr1_set},
-	{"pmac_hdr2", ingress_pmac_hdr2_set},
-	{"pmac_hdr3", ingress_pmac_hdr3_set},
-	{"pmac_hdr4", ingress_pmac_hdr4_set},
-	{"pmac_hdr5", ingress_pmac_hdr5_set},
-	{"pmac_hdr6", ingress_pmac_hdr6_set},
-	{"pmac_hdr7", ingress_pmac_hdr7_set},
-	{"pmac_hdr8", ingress_pmac_hdr8_set},
-	{NULL, NULL}
-};
-
-static struct egress_pmac_entry egress_entries[] = {
-	{"rx_dmachan", egress_rx_dma_set},
-	{"rm_l2hdr", egress_l2hdr_bytes_set},
-	{"fcs", egress_fcs_set},
-	{"pmac", egress_pmac_set},
-	{"res_dw1", egress_res_dw_set},
-	{"res1_dw0", egress_res1_dw_set},
-	{"res2_dw0", egress_res2_dw_set},
-	{"tc_enable", egress_tc_ena_set},
-	{"dec_flag", egress_dec_flag_set},
-	{"enc_flag", egress_enc_flag_set},
-	{"mpe1_flag", egress_mpe1_flag_set},
-	{"mpe2_flag", egress_mpe2_flag_set},
-	{NULL, NULL}
-};
-
 static int proc_gsw_port_rmon_dump(struct seq_file *s, int pos)
 {
 	int i;
@@ -1031,358 +732,6 @@ static ssize_t proc_gsw_rmon_write(struct file *file, const char *buf,
 	return count;
 }
 
-static void dp_send_packet(u8 *pdata, int len, char *devname, u32 flag)
-{
-	struct sk_buff *skb;
-	dp_subif_t subif = { 0 };
-
-	skb = cbm_alloc_skb(len + 8, GFP_ATOMIC);
-
-	if (unlikely(!skb)) {
-		PR_ERR("allocate cbm buffer fail\n");
-		return;
-	}
-
-	skb->DW0 = 0;
-	skb->DW1 = 0;
-	skb->DW2 = 0;
-	skb->DW3 = 0;
-	memcpy(skb->data, pdata, len);
-	skb->len = 0;
-	skb_put(skb, len);
-	skb->dev = dev_get_by_name(&init_net, devname);
-
-	if (dp_get_netif_subifid(skb->dev, skb, NULL, skb->data, &subif, 0)) {
-		PR_ERR("dp_get_netif_subifid failed for %s\n",
-		       skb->dev->name);
-		dev_kfree_skb_any(skb);
-		return;
-	}
-
-	((struct dma_tx_desc_1 *)&skb->DW1)->field.ep = subif.port_id;
-	((struct dma_tx_desc_0 *)&skb->DW0)->field.dest_sub_if_id =
-		subif.subif;
-
-	dp_xmit(skb->dev, &subif, skb, skb->len, flag);
-}
-
-static u8 ipv4_plain_udp[] = {
-	0x00, 0x00, 0x01, 0x00, 0x00, 0x01,	/*mac */
-	0x00, 0x10, 0x94, 0x00, 0x00, 0x02,
-	0x08, 0x00,		/*type */
-	0x45, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x11, /*ip hdr*/
-	0x3A, 0x56, 0xC0, 0x55, 0x01, 0x02, 0xC0, 0x00, 0x00, 0x01,
-	0x04, 0x00, 0x00, 0x00, 0x00, 0x2A, 0x7A, 0x41, 0x00, 0x00, /*udp hdr*/
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00
-};
-
-static u8 ipv4_plain_tcp[1514] = {
-	0x00, 0x01, 0x01, 0x01, 0x01, 0x01,	/*mac */
-	0x00, 0x10, 0x94, 0x00, 0x00, 0x02,
-	0x08, 0x00,		/*type */
-	0x45, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x06, /*ip hdr*/
-	0x3A, 0x61, 0xC0, 0x55, 0x01, 0x02, 0xC0, 0x00, 0x00, 0x01,
-	0x04, 0x00, 0x04, 0x00, 0x00, 0x01, 0xE2, 0x40, 0x00, 0x03, /*tcp hdr*/
-	0x94, 0x47, 0x50, 0x10, 0x10, 0x00, 0x9F, 0xD9, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /*data */
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00
-};
-
-static u8 ipv6_plain_udp[] = {
-	0x00, 0x00, 0x01, 0x00, 0x00, 0x01,	/*mac */
-	0x00, 0x10, 0x94, 0x00, 0x00, 0x02,
-	0x86, 0xDD,		/*type */
-	0x60, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x11, 0xFF, 0x20, 0x00, /*ip hdr*/
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x02, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
-	0x04, 0x00, 0x00, 0x00, 0x00, 0x3E, 0xBB, 0x6F, 0x00, 0x00, /*udp hdr*/
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00
-};
-
-static u8 ipv6_plain_tcp[] = {
-	0x00, 0x00, 0x01, 0x00, 0x00, 0x01,	/*mac */
-	0x00, 0x10, 0x94, 0x00, 0x00, 0x02,
-	0x86, 0xDD,		/*type */
-	0x60, 0x00, 0x00, 0x00, 0x00, 0x46, 0x06, 0xFF, 0x20, 0x00, /*ip hdr*/
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x02, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
-	0x04, 0x00, 0x04, 0x00, 0x00, 0x01, 0xE2, 0x40, 0x00, 0x03, /*tcp hdr*/
-	0x94, 0x47, 0x50, 0x10, 0x10, 0x00, 0xE1, 0x13, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /*data */
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
-};
-
-static u8 ipv6_extensions_udp[] = {
-	0x00, 0x00, 0x01, 0x00, 0x00, 0x01,	/*mac */
-	0x00, 0x10, 0x94, 0x00, 0x00, 0x02,
-	0x86, 0xDD,		/*type */
-	0x60, 0x00, 0x00, 0x00, 0x00, 0x8E, 0x00, 0xFF, 0x20, 0x00, /*ip hdr*/
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x02, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
-	0x3C, 0x00, 0x01, 0x04, 0x00, 0x00, 0x00, 0x00,	/*next extension:hop */
-	0x2B, 0x00, 0x01, 0x04, 0x00, 0x00, 0x00, 0x00,	/*next extension:Dst */
-	0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	/*next extension:Rout*/
-	0x04, 0x00, 0x00, 0x00, 0x00, 0x76, 0xBA, 0xFF, 0x00, 0x00,/*udp hdr*/
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
-};
-
-static u8 ipv6_extensions_tcp[] = {
-	0x00, 0x00, 0x01, 0x00, 0x00, 0x01,	/*mac */
-	0x00, 0x10, 0x94, 0x00, 0x00, 0x02,
-	0x86, 0xDD,		/*type */
-	0x60, 0x00, 0x00, 0x00, 0x00, 0x8E, 0x00, 0xFF, 0x20, 0x00,/*ip hdr*/
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x02, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
-	0x3C, 0x00, 0x01, 0x04, 0x00, 0x00, 0x00, 0x00, /*next extension:hop */
-	0x2B, 0x00, 0x01, 0x04, 0x00, 0x00, 0x00, 0x00, /*next extension:dst*/
-	0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /*next extension:Rout*/
-	0x04, 0x00, 0x04, 0x00, 0x00, 0x01, 0xE2, 0x40, 0x00, 0x03,/*tcp hdr*/
-	0x94, 0x47, 0x50, 0x10, 0x10, 0x00, 0xE0, 0xE3, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
-};
-
-static u8 rd6_ip4_ip6_udp[] = {
-	0x00, 0x00, 0x01, 0x00, 0x00, 0x01,	/*mac */
-	0x00, 0x10, 0x94, 0x00, 0x00, 0x02,
-	0x08, 0x00,		/*type */
-	0x45, 0x00, 0x00, 0x6E, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x29,/*ip4 hdr */
-	0x3A, 0x0E, 0xC0, 0x55, 0x01, 0x02, 0xC0, 0x00, 0x00, 0x01,
-	0x60, 0x00, 0x00, 0x00, 0x00, 0x32, 0x11, 0xFF, 0x20, 0x00,/*ip6 hdr*/
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x02, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
-	0x04, 0x00, 0x00, 0x00, 0x00, 0x32, 0xBB, 0x87, 0x00, 0x00,/*udp hdr*/
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
-};
-
-static u8 rd6_ip4_ip6_tcp[] = {
-	0x00, 0x00, 0x01, 0x00, 0x00, 0x01,	/*mac */
-	0x00, 0x10, 0x94, 0x00, 0x00, 0x02,
-	0x08, 0x00,		/*type */
-	0x45, 0x00, 0x00, 0x6E, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x29, /*ip4 hdr*/
-	0x3A, 0x0E, 0xC0, 0x55, 0x01, 0x02, 0xC0, 0x00, 0x00, 0x01,
-	0x60, 0x00, 0x00, 0x00, 0x00, 0x32, 0x06, 0xFF, 0x20, 0x00, /*ip6 hdr*/
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x02, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
-	0x04, 0x00, 0x04, 0x00, 0x00, 0x01, 0xE2, 0x40, 0x00, 0x03, /*tcp hdr*/
-	0x94, 0x47, 0x50, 0x10, 0x10, 0x00, 0xE1, 0x27, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
-};
-
-static u8 dslite_ip6_ip4_udp[] = {
-	0x00, 0x00, 0x01, 0x00, 0x00, 0x01,	/*mac */
-	0x00, 0x10, 0x94, 0x00, 0x00, 0x02,
-	0x86, 0xDD,		/*type */
-	0x60, 0x00, 0x00, 0x00, 0x00, 0x46, 0x04, 0xFF, 0x20, 0x00, /*ip6 hdr*/
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x02, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
-	0x45, 0x00, 0x00, 0x46, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x11, /*ip4 hdr*/
-	0x3A, 0x4E, 0xC0, 0x55, 0x01, 0x02, 0xC0, 0x00, 0x00, 0x01,
-	0x04, 0x00, 0x00, 0x00, 0x00, 0x32, 0x7A, 0x31, 0x00, 0x00, /*udp hdr*/
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
-};
-
-static u8 dslite_ip6_ip4_tcp[] = {
-	0x00, 0x00, 0x01, 0x00, 0x00, 0x01,	/*mac */
-	0x00, 0x10, 0x94, 0x00, 0x00, 0x02,
-	0x86, 0xDD,		/*type */
-	0x60, 0x00, 0x00, 0x00, 0x00, 0x46, 0x04, 0xFF, 0x20, 0x00,/*ip6 hdr*/
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x02, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
-	0x45, 0x00, 0x00, 0x46, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x06,/*ip4 hdr*/
-	0x3A, 0x59, 0xC0, 0x55, 0x01, 0x02, 0xC0, 0x00, 0x00, 0x01,
-	0x04, 0x00, 0x04, 0x00, 0x00, 0x01, 0xE2, 0x40, 0x00, 0x03,/*tcp hdr*/
-	0x94, 0x47, 0x50, 0x10, 0x10, 0x00, 0x9F, 0xD1, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
-};
-
-static int checksm_mode = 2;
-void proc_checksum_read(struct seq_file *s)
-{
-	char *devname = "eth0_4";
-
-	if (!checksm_mode) {
-		seq_printf(s,
-			   "\nsend pmac checksum ipv4_plain_udp new via %s\n",
-			   devname);
-		dp_send_packet(ipv4_plain_udp, sizeof(ipv4_plain_udp),
-			       devname, DP_TX_CAL_CHKSUM);
-
-		seq_printf(s,
-			   "\nsend pmac checksum ipv4_plain_tcp new via %s\n",
-			   devname);
-		dp_send_packet(ipv4_plain_tcp, sizeof(ipv4_plain_tcp),
-			       devname, DP_TX_CAL_CHKSUM);
-
-		seq_printf(s,
-			   "\nsend pmac checksum ipv6_plain_udp new via %s\n",
-			   devname);
-		dp_send_packet(ipv6_plain_udp, sizeof(ipv6_plain_udp),
-			       devname, DP_TX_CAL_CHKSUM);
-
-		seq_printf(s,
-			   "\nsend pmac checksum ipv6_plain_tcp new via %s\n",
-			   devname);
-		dp_send_packet(ipv6_plain_tcp, sizeof(ipv6_plain_tcp),
-			       devname, DP_TX_CAL_CHKSUM);
-
-		seq_printf(s,
-			   "\nsend pmac checksum ipv6_extensions_udp new via %s\n",
-			   devname);
-		dp_send_packet(ipv6_extensions_udp,
-			       sizeof(ipv6_extensions_udp), devname,
-			       DP_TX_CAL_CHKSUM);
-
-		seq_printf(s,
-			   "\nsend pmac checksum ipv6_extensions_tcp via %s\n",
-			   devname);
-		dp_send_packet(ipv6_extensions_tcp,
-			       sizeof(ipv6_extensions_tcp), devname,
-			       DP_TX_CAL_CHKSUM);
-
-		seq_printf(s, "\nsend pmac checksum rd6_ip4_ip6_udp via %s\n",
-			   devname);
-		dp_send_packet(rd6_ip4_ip6_udp, sizeof(rd6_ip4_ip6_udp),
-			       devname, DP_TX_CAL_CHKSUM);
-
-		seq_printf(s, "\nsend pmac checksum rd6_ip4_ip6_tcp via %s\n",
-			   devname);
-		dp_send_packet(rd6_ip4_ip6_tcp, sizeof(rd6_ip4_ip6_tcp),
-			       devname, DP_TX_CAL_CHKSUM);
-
-		seq_printf(s,
-			   "\nsend pmac checksum dslite_ip6_ip4_udp via %s\n",
-			   devname);
-		dp_send_packet(dslite_ip6_ip4_udp, sizeof(dslite_ip6_ip4_udp),
-			       devname, DP_TX_CAL_CHKSUM);
-
-		seq_printf(s,
-			   "\nsend pmac checksum dslite_ip6_ip4_tcp via %s\n",
-			   devname);
-		dp_send_packet(dslite_ip6_ip4_tcp, sizeof(dslite_ip6_ip4_tcp),
-			       devname, DP_TX_CAL_CHKSUM);
-	} else if (checksm_mode == 1) {
-#define MOD_V  32
-		int offset = 14 /*mac */ + 20 /*ip */ + 20 /*tcp */;
-#define IP_LEN_OFFSET 16
-		int i;
-		int numbytes = jiffies % 1515;
-
-		if (numbytes < 64)
-			numbytes = 64;
-		else if (numbytes >= 1514)
-			numbytes = 1514;
-
-		for (i = 0; i < sizeof(ipv4_plain_tcp) - offset; i++) {
-			if (i < (numbytes - offset))
-				ipv4_plain_tcp[offset + i] = (i % MOD_V) + 1;
-			else
-				ipv4_plain_tcp[offset + i] = 0;
-		}
-		*(unsigned short *)&ipv4_plain_tcp[IP_LEN_OFFSET] =
-		    numbytes - 14 /*MAC HDR */;
-
-		dp_send_packet(ipv4_plain_tcp, numbytes, devname,
-			       DP_TX_CAL_CHKSUM);
-	} else if (checksm_mode == 2) {
-#define MOD_V  32
-		int offset = 14 /*mac */  + 20 /*ip */  + 20 /*tcp */;
-		int i;
-		int numbytes = offset + 2 /*2 bytes payload */;
-
-		for (i = 0; i < sizeof(ipv4_plain_tcp) - offset; i++) {
-			if (i < (numbytes - offset))
-				ipv4_plain_tcp[offset + i] = (i % MOD_V) + 1;
-			else
-				ipv4_plain_tcp[offset + i] = 0;
-		}
-		*(unsigned short *)&ipv4_plain_tcp[IP_LEN_OFFSET] =
-		    numbytes - 14 /*MAC HDR */;
-		dp_send_packet(ipv4_plain_tcp, numbytes, devname,
-			       DP_TX_CAL_CHKSUM);
-	}
-}
-
-static ssize_t proc_checksum_write(struct file *file, const char *buf,
-				   size_t count, loff_t *ppos)
-{
-	int len;
-	char str[64];
-	int num;
-	char *param_list[2];
-
-	len = (sizeof(str) > count) ? count : sizeof(str) - 1;
-	len -= copy_from_user(str, buf, len);
-	str[len] = 0;
-	num = dp_split_buffer(str, param_list, ARRAY_SIZE(param_list));
-	if ((dp_strncmpi(param_list[0], "help", strlen("help")) == 0) ||
-	    (dp_strncmpi(param_list[0], "h", 1) == 0)) {
-		goto help;
-	} else {
-		checksm_mode = dp_atoi(param_list[0]);
-	}
-
-	PR_INFO("new checksm_mode=%d\n", checksm_mode);
-	return count;
-
-help:
-	PR_INFO("checksm_mode usage: current value=%d\n", checksm_mode);
-	PR_INFO(" 0: common protocol test with HW checksum\n");
-	PR_INFO(" 1: TCP random size with HW checksum\n");
-	PR_INFO(" 2: 2 Bytes TCP packet with HW checksum\n");
-	PR_INFO(" others: not supported value\n");
-
-	return count;
-}
-
 static int proc_dport_dump(struct seq_file *s, int pos)
 {
 	int i;
@@ -1414,1966 +763,6 @@ static int proc_dport_dump(struct seq_file *s, int pos)
 	return pos;
 }
 
-struct dp_skb_info {
-	struct list_head list;
-	struct sk_buff *skb;
-};
-
-static int cbm_skb_num;	/* for cbm buffer testing purpose */
-static struct dp_skb_info skb_list;
-#define get_val(val, mask, offset) (((val) & (mask)) >> (offset))
-static int cbm_get_free_buf(int fsqm_index, u32 *free_num, u32 *head,
-			    u32 *tail)
-{
-	unsigned char *base;
-
-	if (!fsqm_index)
-		base = (unsigned char *)(FSQM0_MODULE_BASE + 0xa0000000);
-	else
-		base = (unsigned char *)(FSQM1_MODULE_BASE + 0xa0000000);
-	if (free_num)
-		*free_num =
-		    get_val(*(u32 *)(base + OFSC), OFSC_FSC_MASK,
-			    OFSC_FSC_POS);
-	if (head)
-		*head =
-		    get_val(*(u32 *)(base + OFSQ), OFSQ_HEAD_MASK,
-			    OFSQ_HEAD_POS);
-	if (tail)
-		*tail =
-		    get_val(*(u32 *)(base + OFSQ), OFSQ_TAIL_MASK,
-			    OFSQ_TAIL_POS);
-
-	return 0;
-}
-
-static void proc_cbm_buf_read(struct seq_file *s)
-{
-	u32 free_fsqm_num[2], fsqm_head[2], fsqm_tail[2];
-	int i;
-
-	for (i = 0; i < 2; i++)
-		cbm_get_free_buf(i, &free_fsqm_num[i], &fsqm_head[i],
-				 &fsqm_tail[i]);
-	for (i = 0; i < 2; i++)
-		seq_printf(s,
-			   "FSQM%d: free buffer-%04d, head-%04d, tail-%04d\n",
-			   i, free_fsqm_num[i], fsqm_head[i], fsqm_tail[i]);
-	if (cbm_skb_num)
-		seq_printf(s,
-			   "Overall %d CBM buffer allocated for test only!\n",
-			   cbm_skb_num);
-	seq_printf(s,
-		   "Note: %s: echo help > /proc/dp/%s\n",
-		   "use echo to display other commands",
-		   PROC_CBM_BUF_TEST);
-}
-
-static ssize_t proc_cbm_buf_write(struct file *file, const char *buf,
-				  size_t count, loff_t *ppos)
-{
-	int len;
-	char str[64];
-	char *param_list[2] = { 0 };
-	unsigned int num;
-	struct dp_skb_info *tmp = NULL;
-	u32 free_fsqm_num[2], fsqm_head[2], fsqm_tail[2], *check_list;
-	int i;
-	u32 idx, buf_ptr, val, head, tail, bits;
-	const u32 fsqm_buf_len[] = {9216, 1024};
-	void __iomem *base;
-
-	len = (sizeof(str) > count) ? count : sizeof(str) - 1;
-	len -= copy_from_user(str, buf, len);
-	str[len] = 0;
-
-	if (dp_split_buffer(str, param_list, ARRAY_SIZE(param_list)) < 2)
-		goto help;
-	if (!cbm_skb_num)
-		INIT_LIST_HEAD(&skb_list.list);
-	if (list_empty(&skb_list.list) && (cbm_skb_num != 0)) {
-		PR_ERR("%s but recorded value of cbm_skb_num=%d\n",
-		       "Why skb_list is empty",
-		       cbm_skb_num);
-		goto exit;
-	}
-	if (cbm_skb_num < 0) {
-		PR_ERR("Why cbm_skb_num(%d) less than zero\n", cbm_skb_num);
-		goto exit;
-	}
-	num = dp_atoi(param_list[1]);
-	if (dp_strncmpi(param_list[0], "alloc", strlen("alloc")) == 0) {
-		if (num == 0)
-			goto exit;
-			do {
-				tmp = kmalloc(sizeof(*tmp),
-					      GFP_KERNEL);
-				if (!tmp)
-					goto exit;
-				INIT_LIST_HEAD(&tmp->list);
-				tmp->skb = cbm_alloc_skb(1000, 0);
-				if (!tmp->skb) {
-					kfree(tmp);
-					goto exit;
-				}
-				DP_DEBUG(DP_DBG_FLAG_CBM_BUF,
-					 "%s: %p (node=%p buffer=%p)\n",
-					 "cbm_alloc_skb ok",
-					 tmp->skb, &tmp->list, tmp);
-				list_add(&tmp->list, &skb_list.list);
-				num--;
-				cbm_skb_num++;
-			} while (num);
-	} else if (dp_strncmpi(param_list[0], "free", strlen("free")) == 0) {
-		struct list_head *pos, *n;
-		struct dp_skb_info *p;
-
-		if (cbm_skb_num == 0 || num == 0)
-			goto exit;
-		list_for_each_safe(pos, n, &skb_list.list) {
-			p = list_entry(pos, struct dp_skb_info, list);
-			if (p->skb) {
-				if (!check_ptr_validation
-				    ((uint32_t)p->skb->data))
-					PR_ERR("%s %p(node=%p buffer=%p) %s\n",
-					       "Wrong Free skb",
-					       p->skb, pos, p,
-					       "not CBM bffer");
-				else
-					DP_DEBUG(DP_DBG_FLAG_CBM_BUF,
-						 "%s %p(node=%p buffer=%p)\n",
-						 "Free skb",
-						 p->skb, pos, p);
-				dev_kfree_skb(p->skb);
-
-				p->skb = NULL;
-			} else {
-				PR_ERR("why p->skb NULL ???\n");
-			}
-			list_del(pos);
-			kfree(p);
-			num--;
-			cbm_skb_num--;
-			if (!num)
-				break;
-		}
-	} else if (dp_strncmpi(param_list[0], "check", strlen("check")) == 0) {
-		int good = 1;
-
-		idx = dp_atoi(param_list[1]);
-		if (idx >= 2) {
-			PR_INFO("FSQM idx must be 0 or 1\n");
-			return count;
-		}
-		num = idx;
-		PR_INFO("\%s!\n",
-			"nCBM link list check can only work with NO traffic");
-		check_list = kmalloc(fsqm_buf_len[idx] >> 3, GFP_KERNEL);
-		if (!check_list) {
-			PR_ERR("Failed to allocate check list buffer\n");
-			return count;
-		}
-		memset(check_list, 0, fsqm_buf_len[idx] >> 3);
-		if (idx == 0) /* Fixme: Hardcoded mapping address */
-			base = (void __iomem *)FSQM0_MODULE_BASE + 0xa0000000;
-		else
-			base = (void __iomem *)FSQM1_MODULE_BASE + 0xa0000000;
-		val = readl(base + OFSQ);
-		head = val & 0x7FFF;
-		tail = (val >> 16) & 0x7FFF;
-		PR_INFO("FSQM Head: 0x%x, Tail: 0x%x\n", head, tail);
-		for (i = 0, buf_ptr = head;
-			i < fsqm_buf_len[num] && buf_ptr != tail;
-			i++) {
-			idx = buf_ptr / 32;
-			bits = buf_ptr % 32;
-			if (!(check_list[idx] & BIT(bits))) {
-				check_list[idx] |= BIT(bits);
-			} else {
-				PR_INFO("FSQM[%d] ERROR: PTR:[0x%4x] dupcate\n",
-					num, buf_ptr);
-				good = 0;
-			}
-			buf_ptr = readl(base + RAM + (buf_ptr << 2));
-		}
-		PR_INFO("%s: 0x%x, free buffer cnt in CBM OFSC REG: 0x%x--%s\n",
-			"Total freed buffers in link list",
-			i + 1, readl(base + OFSC),
-			good ? "In Good State" : "In Wrong State");
-		kfree(check_list);
-		return count;
-	}
-
-	goto help;
-exit:
-	for (i = 0; i < 2; i++)
-		cbm_get_free_buf(i, &free_fsqm_num[i], &fsqm_head[i],
-				 &fsqm_tail[i]);
-	if (cbm_skb_num)
-		PR_INFO("Overall %d CBM buffer allocated for testing purpose\n",
-			cbm_skb_num);
-	else
-		PR_INFO("All buffer already returned to CBM\n");
-	for (i = 0; i < 2; i++)
-		PR_INFO("FSQM%d: free buffer-%04d, head-%04d, tail-%04d\n", i,
-			free_fsqm_num[i], fsqm_head[i], fsqm_tail[i]);
-	return count;
-
-help:
-	PR_INFO("usage: echo alloc [cbm buffer num] > /proc/dp/%s\n",
-		PROC_CBM_BUF_TEST);
-	PR_INFO("usage: echo free  [cbm buffer num] > /proc/dp/%s\n",
-		PROC_CBM_BUF_TEST);
-	PR_INFO("Check CBM buffer list:echo check <fqsm_idx> > /proc/dp/%s\n",
-		PROC_CBM_BUF_TEST);
-	return count;
-}
-
-static int proc_gsw_pce_dump(struct seq_file *s, int pos)
-{
-	struct core_ops *gsw_handle;
-	GSW_PCE_rule_t *rule;
-	int i;
-	GSW_return_t ret;
-
-	rule = kmalloc(sizeof(GSW_PCE_rule_t) + 1,
-		       GFP_KERNEL);
-	if (!rule) {
-		pos = -1;
-		return pos;
-	}
-
-	/*read gswip-r rmon counter */
-	gsw_handle = dp_port_prop[0].ops[1];
-	rule->pattern.nIndex = pos;
-	ret = gsw_core_api((dp_gsw_cb)gsw_handle->gsw_tflow_ops
-			   .TFLOW_PceRuleRead, gsw_handle, rule);
-	if (ret != GSW_statusOk) {
-		pos = -1;
-		return pos;
-	}
-	if (!rule->pattern.bEnable)
-		goto EXIT;
-
-	seq_printf(s, "Pattern[%d]:-----\n", rule->pattern.nIndex);
-	if (rule->pattern.bPortIdEnable) {
-		seq_printf(s, "  bPortIdEnable           =   %d\n",
-			   rule->pattern.bPortIdEnable);
-		seq_printf(s, "  nPortId                 =   %d\n",
-			   rule->pattern.nPortId);
-		seq_printf(s, "  bPortId_Exclude         =   %d\n",
-			   rule->pattern.bPortId_Exclude);
-	}
-	if (rule->pattern.bSubIfIdEnable) {
-		seq_printf(s, "  bSubIfIdEnable          =   %d\n",
-			   rule->pattern.bSubIfIdEnable);
-		seq_printf(s, "  nSubIfId                =   %d\n",
-			   rule->pattern.nSubIfId);
-		seq_printf(s, "  bSubIfId_Exclude        =   %d\n",
-			   rule->pattern.bSubIfId_Exclude);
-	}
-	if (rule->pattern.bDSCP_Enable) {
-		seq_printf(s, "  bDSCP_Enable            =   %d\n",
-			   rule->pattern.bDSCP_Enable);
-		seq_printf(s, "  nDSCP                   =   %d\n",
-			   rule->pattern.nDSCP);
-		seq_printf(s, "  bDSCP_Exclude           =   %d\n",
-			   rule->pattern.bDSCP_Exclude);
-	}
-	if (rule->pattern.bInner_DSCP_Enable) {
-		seq_printf(s, "  bInner_DSCP_Enable      =   %d\n",
-			   rule->pattern.bInner_DSCP_Enable);
-		seq_printf(s, "  nInnerDSCP              =   %d\n",
-			   rule->pattern.nInnerDSCP);
-		seq_printf(s, "  bInnerDSCP_Exclude      =   %d\n",
-			   rule->pattern.bInnerDSCP_Exclude);
-	}
-	if (rule->pattern.bPCP_Enable) {
-		seq_printf(s, "  bPCP_Enable             =   %d\n",
-			   rule->pattern.bPCP_Enable);
-		seq_printf(s, "  nPCP                    =   %d\n",
-			   rule->pattern.nPCP);
-		seq_printf(s, "  bCTAG_PCP_DEI_Exclude   =   %d\n",
-			   rule->pattern.bCTAG_PCP_DEI_Exclude);
-	}
-	if (rule->pattern.bSTAG_PCP_DEI_Enable) {
-		seq_printf(s, "  bSTAG_PCP_DEI_Enable    =   %d\n",
-			   rule->pattern.bSTAG_PCP_DEI_Enable);
-		seq_printf(s, "  nSTAG_PCP_DEI           =   %d\n",
-			   rule->pattern.nSTAG_PCP_DEI);
-		seq_printf(s, "  bSTAG_PCP_DEI_Exclude   =   %d\n",
-			   rule->pattern.bSTAG_PCP_DEI_Exclude);
-	}
-	if (rule->pattern.bPktLngEnable) {
-		seq_printf(s, "  bPktLngEnable           =   %d\n",
-			   rule->pattern.bPktLngEnable);
-		seq_printf(s, "  nPktLng                 =   %d\n",
-			   rule->pattern.nPktLng);
-		seq_printf(s, "  nPktLngRange            =   %d\n",
-			   rule->pattern.nPktLngRange);
-		seq_printf(s, "  bPktLng_Exclude         =   %d\n",
-			   rule->pattern.bPktLng_Exclude);
-	}
-	if (rule->pattern.bMAC_DstEnable) {
-		seq_printf(s, "  bMAC_DstEnable          =   %d\n",
-			   rule->pattern.bMAC_DstEnable);
-		seq_printf(s,
-			   "  nMAC_Dst                =   %02x:%2x:%2x:%2x:%2x:%2x\n",
-			   rule->pattern.nMAC_Dst[0],
-			   rule->pattern.nMAC_Dst[1],
-			   rule->pattern.nMAC_Dst[2],
-			   rule->pattern.nMAC_Dst[3],
-			   rule->pattern.nMAC_Dst[4],
-			   rule->pattern.nMAC_Dst[5]);
-		seq_printf(s, "  nMAC_DstMask            =   %x\n",
-			   rule->pattern.nMAC_DstMask);
-		seq_printf(s, "  bDstMAC_Exclude         =   %d\n",
-			   rule->pattern.bDstMAC_Exclude);
-	}
-	if (rule->pattern.bMAC_SrcEnable) {
-		seq_printf(s, "  bMAC_SrcEnable          =   %d\n",
-			   rule->pattern.bMAC_SrcEnable);
-		seq_printf(s,
-			   "  nMAC_Src                =   %02x:%2x:%2x:%2x:%2x:%2x\n",
-			   rule->pattern.nMAC_Src[0],
-			   rule->pattern.nMAC_Src[1],
-			   rule->pattern.nMAC_Src[2],
-			   rule->pattern.nMAC_Src[3],
-			   rule->pattern.nMAC_Src[4],
-			   rule->pattern.nMAC_Src[5]);
-		seq_printf(s, "  nMAC_SrcMask            =   %x\n",
-			   rule->pattern.nMAC_SrcMask);
-		seq_printf(s, "  bSrcMAC_Exclude         =   %d\n",
-			   rule->pattern.bSrcMAC_Exclude);
-	}
-	if (rule->pattern.bAppDataMSB_Enable) {
-		seq_printf(s, "  bAppDataMSB_Enable      =   %d\n",
-			   rule->pattern.bAppDataMSB_Enable);
-		seq_printf(s, "  nAppDataMSB             =   %x\n",
-			   rule->pattern.nAppDataMSB);
-		seq_printf(s, "  bAppMaskRangeMSB_Select =   %d\n",
-			   rule->pattern.bAppMaskRangeMSB_Select);
-		seq_printf(s, "  nAppMaskRangeMSB        =   %x\n",
-			   rule->pattern.nAppMaskRangeMSB);
-		seq_printf(s, "  bAppMSB_Exclude         =   %d\n",
-			   rule->pattern.bAppMSB_Exclude);
-	}
-	if (rule->pattern.bAppDataLSB_Enable) {
-		seq_printf(s, "  bAppDataLSB_Enable      =   %d\n",
-			   rule->pattern.bAppDataLSB_Enable);
-		seq_printf(s, "  nAppDataLSB             =   %x\n",
-			   rule->pattern.nAppDataLSB);
-		seq_printf(s, "  bAppMaskRangeLSB_Select =   %d\n",
-			   rule->pattern.bAppMaskRangeLSB_Select);
-		seq_printf(s, "  nAppMaskRangeLSB        =   %x\n",
-			   rule->pattern.nAppMaskRangeLSB);
-		seq_printf(s, "  bAppLSB_Exclude         =   %d\n",
-			   rule->pattern.bAppLSB_Exclude);
-	}
-	if (rule->pattern.eDstIP_Select) {
-		seq_printf(s, "  eDstIP_Select           =   %d\n",
-			   rule->pattern.eDstIP_Select);
-		seq_printf(s, "  nDstIP                  =   %08x ",
-			   rule->pattern.nDstIP.nIPv4);
-		if (rule->pattern.eDstIP_Select == 2)
-			for (i = 2; i < 8; i++)
-				seq_printf(s, "%04x ",
-					   rule->pattern.nDstIP.nIPv6[i]);
-		seq_puts(s, "\n");
-		seq_printf(s, "  nDstIP_Mask             =   %x\n",
-			   rule->pattern.nDstIP_Mask);
-		seq_printf(s, "  bDstIP_Exclude          =   %d\n",
-			   rule->pattern.bDstIP_Exclude);
-	}
-	if (rule->pattern.eInnerDstIP_Select) {
-		seq_printf(s, "  eInnerDstIP_Select      =   %d\n",
-			   rule->pattern.eInnerDstIP_Select);
-		seq_printf(s, "  nInnerDstIP             =   %x\n",
-			   rule->pattern.nInnerDstIP.nIPv4);
-		seq_printf(s, "  nInnerDstIP_Mask        =   %x\n",
-			   rule->pattern.nInnerDstIP_Mask);
-		seq_printf(s, "  bInnerDstIP_Exclude     =   %d\n",
-			   rule->pattern.bInnerDstIP_Exclude);
-	}
-	if (rule->pattern.eSrcIP_Select) {
-		seq_printf(s, "  eSrcIP_Select           =   %d\n",
-			   rule->pattern.eSrcIP_Select);
-		seq_printf(s, "  nSrcIP                  =   %x\n",
-			   rule->pattern.nSrcIP.nIPv4);
-		seq_printf(s, "  nSrcIP_Mask             =   %x\n",
-			   rule->pattern.nSrcIP_Mask);
-		seq_printf(s, "  bSrcIP_Exclude          =   %d\n",
-			   rule->pattern.bSrcIP_Exclude);
-	}
-	if (rule->pattern.eInnerSrcIP_Select) {
-		seq_printf(s, "  eInnerSrcIP_Select      =   %d\n",
-			   rule->pattern.eInnerSrcIP_Select);
-		seq_printf(s, "  nInnerSrcIP             =   %x\n",
-			   rule->pattern.nInnerSrcIP.nIPv4);
-		seq_printf(s, "  nInnerSrcIP_Mask        =   %x\n",
-			   rule->pattern.nInnerSrcIP_Mask);
-		seq_printf(s, "  bInnerSrcIP_Exclude     =   %d\n",
-			   rule->pattern.bInnerSrcIP_Exclude);
-	}
-	if (rule->pattern.bEtherTypeEnable) {
-		seq_printf(s, "  bEtherTypeEnable        =   %d\n",
-			   rule->pattern.bEtherTypeEnable);
-		seq_printf(s, "  nEtherType              =   %x\n",
-			   rule->pattern.nEtherType);
-		seq_printf(s, "  nEtherTypeMask          =   %x\n",
-			   rule->pattern.nEtherTypeMask);
-		seq_printf(s, "  bEtherType_Exclude      =   %d\n",
-			   rule->pattern.bEtherType_Exclude);
-	}
-	if (rule->pattern.bProtocolEnable) {
-		seq_printf(s, "  bProtocolEnable         =   %d\n",
-			   rule->pattern.bProtocolEnable);
-		seq_printf(s, "  nProtocol               =   %x\n",
-			   rule->pattern.nProtocol);
-		seq_printf(s, "  nProtocolMask           =   %x\n",
-			   rule->pattern.nProtocolMask);
-		seq_printf(s, "  bProtocol_Exclude       =   %d\n",
-			   rule->pattern.bProtocol_Exclude);
-	}
-	if (rule->pattern.bInnerProtocolEnable) {
-		seq_printf(s, "  bInnerProtocolEnable    =   %d\n",
-			   rule->pattern.bInnerProtocolEnable);
-		seq_printf(s, "  nInnerProtocol          =   %x\n",
-			   rule->pattern.nInnerProtocol);
-		seq_printf(s, "  nInnerProtocolMask      =   %x\n",
-			   rule->pattern.nInnerProtocolMask);
-		seq_printf(s, "  bInnerProtocol_Exclude  =   %d\n",
-			   rule->pattern.bInnerProtocol_Exclude);
-	}
-	if (rule->pattern.bSessionIdEnable) {
-		seq_printf(s, "  bSessionIdEnable        =   %d\n",
-			   rule->pattern.bSessionIdEnable);
-		seq_printf(s, "  nSessionId              =   %x\n",
-			   rule->pattern.nSessionId);
-		seq_printf(s, "  bSessionId_Exclude      =   %d\n",
-			   rule->pattern.bSessionId_Exclude);
-	}
-	if (rule->pattern.bPPP_ProtocolEnable) {
-		seq_printf(s, "  bPPP_ProtocolEnable     =   %d\n",
-			   rule->pattern.bPPP_ProtocolEnable);
-		seq_printf(s, "  nPPP_Protocol           =   %x\n",
-			   rule->pattern.nPPP_Protocol);
-		seq_printf(s, "  nPPP_ProtocolMask       =   %x\n",
-			   rule->pattern.nPPP_ProtocolMask);
-		seq_printf(s, "  bPPP_Protocol_Exclude   =   %d\n",
-			   rule->pattern.bPPP_Protocol_Exclude);
-	}
-	if (rule->pattern.bVid) {
-		seq_printf(s, "  bVid                    =   %d\n",
-			   rule->pattern.bVid);
-		seq_printf(s, "  nVid                    =   %d\n",
-			   rule->pattern.nVid);
-		seq_printf(s, "  bVid_Exclude            =   %d\n",
-			   rule->pattern.bVid_Exclude);
-	}
-	if (rule->pattern.bSLAN_Vid) {
-		seq_printf(s, "  bSLAN_Vid               =    %d\n",
-			   rule->pattern.bSLAN_Vid);
-		seq_printf(s, "  nSLAN_Vid               =    %d\n",
-			   rule->pattern.nSLAN_Vid);
-		seq_printf(s, "  bSLANVid_Exclude        =    %d\n",
-			   rule->pattern.bSLANVid_Exclude);
-	}
-	if (rule->pattern.bPayload1_SrcEnable) {
-		seq_printf(s, "  bPayload1_SrcEnable     =   %d\n",
-			   rule->pattern.bPayload1_SrcEnable);
-		seq_printf(s, "  nPayload1               =   %x\n",
-			   rule->pattern.nPayload1);
-		seq_printf(s, "  nPayload1_Mask          =   %x\n",
-			   rule->pattern.nPayload1_Mask);
-		seq_printf(s, "  bPayload1_Exclude       =   %d\n",
-			   rule->pattern.bPayload1_Exclude);
-	}
-	if (rule->pattern.bPayload2_SrcEnable) {
-		seq_printf(s, "  bPayload2_SrcEnable     =   %d\n",
-			   rule->pattern.bPayload2_SrcEnable);
-		seq_printf(s, "  nPayload2               =   %x\n",
-			   rule->pattern.nPayload2);
-		seq_printf(s, "  nPayload2_Mask          =   %x\n",
-			   rule->pattern.nPayload2_Mask);
-		seq_printf(s, "  bPayload2_Exclude       =   %d\n",
-			   rule->pattern.bPayload2_Exclude);
-	}
-	if (rule->pattern.bParserFlagLSB_Enable) {
-		seq_printf(s, "  bParserFlagLSB_Enable   =   %d\n",
-			   rule->pattern.bParserFlagLSB_Enable);
-		seq_printf(s, "  nParserFlagLSB          =   %x\n",
-			   rule->pattern.nParserFlagLSB);
-		seq_printf(s, "  nParserFlagLSB_Mask     =   %x\n",
-			   rule->pattern.nParserFlagLSB_Mask);
-		seq_printf(s, "  bParserFlagLSB_Exclude  =   %d\n",
-			   rule->pattern.bParserFlagLSB_Exclude);
-	}
-	if (rule->pattern.bParserFlagMSB_Enable) {
-		seq_printf(s, "  bParserFlagMSB_Enable   =   %d\n",
-			   rule->pattern.bParserFlagMSB_Enable);
-		seq_printf(s, "  nParserFlagMSB          =   %x\n",
-			   rule->pattern.nParserFlagMSB);
-		seq_printf(s, "  nParserFlagMSB_Mask     =   %x\n",
-			   rule->pattern.nParserFlagMSB_Mask);
-		seq_printf(s, "  bParserFlagMSB_Exclude  =   %d\n",
-			   rule->pattern.bParserFlagMSB_Exclude);
-	}
-
-	seq_puts(s, "Action:\n");
-	if (rule->action.eTrafficClassAction) {
-		seq_printf(s, "  eTrafficClassAction      =   %d\n",
-			   rule->action.eTrafficClassAction);
-		seq_printf(s, "  nTrafficClassAlternate   =   %d\n",
-			   rule->action.nTrafficClassAlternate);
-	}
-	if (rule->action.eSnoopingTypeAction)
-		seq_printf(s, "  eSnoopingTypeAction      =   %d\n",
-			   rule->action.eSnoopingTypeAction);
-	if (rule->action.eLearningAction)
-		seq_printf(s, "  eLearningAction          =   %d\n",
-			   rule->action.eLearningAction);
-	if (rule->action.eIrqAction)
-		seq_printf(s, "  eIrqAction               =   %d\n",
-			   rule->action.eIrqAction);
-	if (rule->action.eCrossStateAction)
-		seq_printf(s, "  eCrossStateAction        =   %d\n",
-			   rule->action.eCrossStateAction);
-	if (rule->action.eCritFrameAction)
-		seq_printf(s, "  eCritFrameAction         =   %d\n",
-			   rule->action.eCritFrameAction);
-	if (rule->action.eTimestampAction) {
-		seq_printf(s, "  eTimestampAction         =   %d\n",
-			   rule->action.eTimestampAction);
-	}
-	if (rule->action.ePortMapAction) {
-		seq_printf(s, "  ePortMapAction           =   %d\n",
-			   rule->action.ePortMapAction);
-		seq_printf(s, "  nForwardSubIfId          =   %d\n",
-			   rule->action.nForwardSubIfId);
-	}
-	if (rule->action.bRemarkAction)
-		seq_printf(s, "  bRemarkAction            =   %d\n",
-			   rule->action.bRemarkAction);
-	if (rule->action.bRemarkPCP)
-		seq_printf(s, "  bRemarkPCP               =   %d\n",
-			   rule->action.bRemarkPCP);
-	if (rule->action.bRemarkSTAG_PCP)
-		seq_printf(s, "  bRemarkSTAG_PCP          =   %d\n",
-			   rule->action.bRemarkSTAG_PCP);
-	if (rule->action.bRemarkSTAG_DEI)
-		seq_printf(s, "  bRemarkSTAG_DEI          =   %d\n",
-			   rule->action.bRemarkSTAG_DEI);
-	if (rule->action.bRemarkDSCP)
-		seq_printf(s, "  bRemarkDSCP              =   %d\n",
-			   rule->action.bRemarkDSCP);
-	if (rule->action.bRemarkClass) {
-		seq_printf(s, "  bRemarkClass             =   %d\n",
-			   rule->action.bRemarkClass);
-	}
-	if (rule->action.eMeterAction) {
-		seq_printf(s, "  eMeterAction             =   %d\n",
-			   rule->action.eMeterAction);
-		seq_printf(s, "  nMeterId                 =   %d\n",
-			   rule->action.nMeterId);
-	}
-	if (rule->action.bRMON_Action) {
-		seq_printf(s, "  bRMON_Action             =   %d\n",
-			   rule->action.bRMON_Action);
-		seq_printf(s, "  nRMON_Id                 =   %d\n",
-			   rule->action.nRMON_Id);
-	}
-	if (rule->action.eVLAN_Action) {
-		seq_printf(s, "  eVLAN_Action             =   %d\n",
-			   rule->action.eVLAN_Action);
-		seq_printf(s, "  nVLAN_Id                 =   %d\n",
-			   rule->action.nVLAN_Id);
-	}
-	if (rule->action.eSVLAN_Action) {
-		seq_printf(s, "  eSVLAN_Action            =   %d\n",
-			   rule->action.eSVLAN_Action);
-		seq_printf(s, "  nSVLAN_Id                =   %d\n",
-			   rule->action.nSVLAN_Id);
-	}
-	if (rule->action.eVLAN_CrossAction)
-		seq_printf(s, "  eVLAN_CrossAction        =   %d\n",
-			   rule->action.eVLAN_CrossAction);
-	if (rule->action.nFId)
-		seq_printf(s, "  nFId                     =   %d\n",
-			   rule->action.nFId);
-	if (rule->action.bPortBitMapMuxControl)
-		seq_printf(s, "  bPortBitMapMuxControl    =   %d\n",
-			   rule->action.bPortBitMapMuxControl);
-	if (rule->action.bPortTrunkAction)
-		seq_printf(s, "  bPortTrunkAction         =   %d\n",
-			   rule->action.bPortTrunkAction);
-	if (rule->action.bPortLinkSelection)
-		seq_printf(s, "  bPortLinkSelection       =   %d\n",
-			   rule->action.bPortLinkSelection);
-	if (rule->action.bCVLAN_Ignore_Control)
-		seq_printf(s, "  bCVLAN_Ignore_Control    =   %d\n",
-			   rule->action.bCVLAN_Ignore_Control);
-	if (rule->action.bFlowID_Action) {
-		seq_printf(s, "  bFlowID_Action           =   %d\n",
-			   rule->action.bFlowID_Action);
-		seq_printf(s, "  nFlowID                  =   %d\n",
-			   rule->action.nFlowID);
-	}
-	if (rule->action.bRoutExtId_Action) {
-		seq_printf(s, "  bRoutExtId_Action        =   %d\n",
-			   rule->action.bRoutExtId_Action);
-		seq_printf(s, "  nRoutExtId               =   %d\n",
-			   rule->action.nRoutExtId);
-	}
-	if (rule->action.bRtDstPortMaskCmp_Action)
-		seq_printf(s, "  bRtDstPortMaskCmp_Action =   %d\n",
-			   rule->action.bRtDstPortMaskCmp_Action);
-	if (rule->action.bRtSrcPortMaskCmp_Action)
-		seq_printf(s, "  bRtSrcPortMaskCmp_Action =   %d\n",
-			   rule->action.bRtSrcPortMaskCmp_Action);
-	if (rule->action.bRtDstIpMaskCmp_Action)
-		seq_printf(s, "  bRtDstIpMaskCmp_Action   =   %d\n",
-			   rule->action.bRtDstIpMaskCmp_Action);
-	if (rule->action.bRtSrcIpMaskCmp_Action)
-		seq_printf(s, "  bRtSrcIpMaskCmp_Action   =   %d\n",
-			   rule->action.bRtSrcIpMaskCmp_Action);
-	if (rule->action.bRtInnerIPasKey_Action)
-		seq_printf(s, "  bRtInnerIPasKey_Action   =   %d\n",
-			   rule->action.bRtInnerIPasKey_Action);
-	if (rule->action.bRtAccelEna_Action)
-		seq_printf(s, "  bRtAccelEna_Action       =   %d\n",
-			   rule->action.bRtAccelEna_Action);
-	if (rule->action.bRtCtrlEna_Action)
-		seq_printf(s, "  bRtCtrlEna_Action        =   %d\n",
-			   rule->action.bRtCtrlEna_Action);
-	if (rule->action.eProcessPath_Action)
-		seq_printf(s, "  eProcessPath_Action      =   %d\n",
-			   rule->action.eProcessPath_Action);
-	if (rule->action.ePortFilterType_Action)
-		seq_printf(s, "  ePortFilterType_Action   =   %d\n",
-			   rule->action.ePortFilterType_Action);
-	seq_puts(s, "\n");
- EXIT:
-	kfree(rule);
-	pos++;
-
-	return pos;
-}
-
-static int proc_gsw_pce_start(void)
-{
-	return 0;
-}
-
-static char *get_pae_ip_type(int type)
-{
-	if (type == GSW_RT_IP_V4)
-		return "IPV4";
-	if (type == GSW_RT_IP_V6)
-		return "IPV6";
-	return "Unknown";
-}
-
-static char *get_pae_tunnel_type(int type)
-{
-	if (type == GSW_ROUTE_TUNL_NULL)
-		return "NULL";
-	if (type == GSW_ROUTE_TUNL_6RD)
-		return "6RD";
-	if (type == GSW_ROUTE_TUNL_DSLITE)
-		return "Dslite";
-	if (type == GSW_ROUTE_TUNL_L2TP)
-		return "L2TP";
-	if (type == GSW_ROUTE_TUNL_IPSEC)
-		return "IPSEC";
-	return "Unknown";
-}
-
-static char *get_pae_ext_type(int type)
-{
-	if (type == 100)
-		return "UDP";
-	if (type == 0)
-		return "TCP";
-	return "Unknown";
-}
-
-static char *get_pae_dir_type(int type)
-{
-	if (type == GSW_ROUTE_DIRECTION_DNSTREAM)
-		return "DownStream";
-	if (type == GSW_ROUTE_DIRECTION_UPSTREAM)
-		return "UpStream";
-	return "Unknown";
-}
-
-static char *pae_pppoe_mode_s(int type)
-{
-	if (type == 0)
-		return "Transparent";
-	if (type == GSW_ROUTE_DIRECTION_UPSTREAM)
-		return "Termination";
-	return "Unknown";
-}
-
-static char *pae_rout_mode_s(int type)
-{
-	if (type == GSW_ROUTE_MODE_NULL)
-		return "NULL";
-	if (type == GSW_ROUTE_MODE_ROUTING)
-		return "Basic Routing";
-	if (type == GSW_ROUTE_MODE_NAT)
-		return "NAT";
-	if (type == GSW_ROUTE_MODE_NAPT)
-		return "NAPT";
-	return "Unknown";
-}
-
-static char *get_pae_out_dscp_type(int type)
-{
-	if (type == GSW_ROUTE_OUT_DSCP_NULL)
-		return "No Outer DSCP Marking";
-	if (type == GSW_ROUTE_OUT_DSCP_INNER)
-		return "Outer DSCP from Inner IP header";
-	if (type == GSW_ROUTE_OUT_DSCP_SESSION)
-		return "Outer DSCP from Session action";
-	return "Unknown";
-}
-
-/* For proc only, no protection */
-
-static char *get_pae_port_list(u32 port)
-{
-	int i, k;
-	static char list[PMAC_MAX_NUM * 2 + 1];
-
-	k = 0;
-	list[0] = 0;
-	for (i = 0; i < PMAC_MAX_NUM; i++) {
-		if (port & (1 << i)) {
-			if (k)
-				sprintf(list + strlen(list), "/");
-			sprintf(list + strlen(list), "%d", i);
-			k++;
-		}
-	}
-	return list;
-}
-
-/* return 0 -- ok */
-static int dp_route_dump_seq(struct seq_file *seq, GSW_ROUTE_Entry_t *rt_entry)
-{
-	seq_printf(seq, "Index[%04d] Hash=%u: %s(%u)\n",
-		   rt_entry->nRtIndex, rt_entry->nHashVal,
-		   (rt_entry->routeEntry.pattern.bValid ==
-			   LTQ_TRUE) ? "Valid" : "Not Valid",
-		   rt_entry->routeEntry.pattern.bValid);
-	seq_puts(seq, " Compare:\n");
-	seq_printf(seq, "   IP Type         = %d (%s)\n",
-		   rt_entry->routeEntry.pattern.eIpType,
-		   get_pae_ip_type(rt_entry->routeEntry.pattern.eIpType));
-	if (rt_entry->routeEntry.action.eIpType == GSW_RT_IP_V6)
-		seq_printf(seq, "   Src IP          = %pI6\n",
-			   rt_entry->routeEntry.pattern.nSrcIP.nIPv6);
-	else
-		seq_printf(seq, "   Src IP          = %pI4\n",
-			   &rt_entry->routeEntry.pattern.nSrcIP.nIPv4);
-
-	if (rt_entry->routeEntry.pattern.eIpType == GSW_RT_IP_V6)
-		seq_printf(seq, "   Dest IP         = %pI6\n",
-			   rt_entry->routeEntry.pattern.nDstIP.nIPv6);
-	else
-		seq_printf(seq, "   Dest IP         = %pI4\n",
-			   &rt_entry->routeEntry.pattern.nDstIP.nIPv4);
-
-	seq_printf(seq, "   Src Port        = %d\n",
-		   rt_entry->routeEntry.pattern.nSrcPort);
-	seq_printf(seq, "   Dest Port       = %d\n",
-		   rt_entry->routeEntry.pattern.nDstPort);
-	seq_printf(seq, "   Extn Id         = %d (%s)\n",
-		   rt_entry->routeEntry.pattern.nRoutExtId,
-		   get_pae_ext_type(rt_entry->routeEntry.pattern.
-					   nRoutExtId));
-	seq_puts(seq, " Action:\n");
-	seq_printf(seq, "   Dst PMAC List   = 0x%0x (%s)\n",
-		   rt_entry->routeEntry.action.nDstPortMap,
-		   get_pae_port_list(rt_entry->routeEntry.action.
-					    nDstPortMap));
-	seq_printf(seq, "   Subif           = 0x%0x\n",
-		   rt_entry->routeEntry.action.nDstSubIfId);
-	seq_printf(seq, "   IP Type         = %d (%s)\n",
-		   rt_entry->routeEntry.action.eIpType,
-		   get_pae_ip_type(rt_entry->routeEntry.action.eIpType));
-	if (rt_entry->routeEntry.action.eIpType == GSW_RT_IP_V6)
-		seq_printf(seq, "   NAT IP          = %pI6\n",
-			   rt_entry->routeEntry.action.nNATIPaddr.
-				  nIPv6);
-	else
-		seq_printf(seq, "   NAT IP          = %pI4\n",
-			   &rt_entry->routeEntry.action.nNATIPaddr.
-				  nIPv4);
-	seq_printf(seq, "   NAT Port        = %d\n",
-		   rt_entry->routeEntry.action.nTcpUdpPort);
-	seq_printf(seq, "   MTU             = %d\n",
-		   rt_entry->routeEntry.action.nMTUvalue);
-	seq_printf(seq, "   Src MAC         = %pM (%s)\n",
-		   rt_entry->routeEntry.action.nSrcMAC,
-		   rt_entry->routeEntry.action.
-			  bMAC_SrcEnable ? "Enabled" : "Disabled");
-	seq_printf(seq, "   Dst MAC         = %pM (%s)\n",
-		   rt_entry->routeEntry.action.nDstMAC,
-		   rt_entry->routeEntry.action.
-			  bMAC_DstEnable ? "Enabled" : "Disabled");
-	seq_printf(seq, "   PPPoE Mode      = %u (%s)\n",
-		   rt_entry->routeEntry.action.bPPPoEmode,
-		   pae_pppoe_mode_s(rt_entry->routeEntry.action.
-						  bPPPoEmode));
-	seq_printf(seq, "   PPPoE SessID    = %u\n",
-		   rt_entry->routeEntry.action.nPPPoESessId);
-	seq_printf(seq, "   Dir             = %u (%s)\n",
-		   rt_entry->routeEntry.action.eSessDirection,
-		   get_pae_dir_type(rt_entry->routeEntry.action.
-					   eSessDirection));
-	seq_printf(seq, "   Class           = %u (%s)\n",
-		   rt_entry->routeEntry.action.nTrafficClass,
-		   rt_entry->routeEntry.action.
-			  bTCremarking ? "Enabled" : "Disabled");
-	seq_printf(seq, "   Routing Mode    = %u (%s)\n",
-		   rt_entry->routeEntry.action.eSessRoutingMode,
-		   pae_rout_mode_s(rt_entry->routeEntry.action.
-			  eSessRoutingMode));
-	seq_printf(seq, "   Tunnel Type     = %u (%s: %s\n",
-		   rt_entry->routeEntry.action.eTunType,
-		   get_pae_tunnel_type(rt_entry->routeEntry.action.
-					      eTunType),
-		   rt_entry->routeEntry.action.
-			  bTunnel_Enable ? "Enabled" : "Disabled");
-	seq_printf(seq, "   Tunnel Index    = %u\n",
-		   rt_entry->routeEntry.action.nTunnelIndex);
-	seq_printf(seq, "   MeterID         = %u (%s)\n",
-		   rt_entry->routeEntry.action.nMeterId,
-		   rt_entry->routeEntry.action.
-			  bMeterAssign ? "Enabled" : "Disabled");
-	seq_printf(seq, "   TTL  Decrease   = %u (%s)\n",
-		   rt_entry->routeEntry.action.bTTLDecrement,
-		   rt_entry->routeEntry.action.
-			  bTTLDecrement ? "Enabled" : "Disabled");
-	seq_printf(seq, "   OutDSCP         = %u (%s)\n",
-		   rt_entry->routeEntry.action.eOutDSCPAction,
-		   get_pae_out_dscp_type(rt_entry->routeEntry.
-			action.eOutDSCPAction));
-	seq_printf(seq, "   InDSCP          = %u (%s)\n",
-		   rt_entry->routeEntry.action.bInnerDSCPRemark,
-		   rt_entry->routeEntry.action.
-		   bInnerDSCPRemark ? "Enabled" : "Disabled");
-	seq_printf(seq, "   DSCP            = %u\n",
-		   rt_entry->routeEntry.action.nDSCP);
-	seq_printf(seq, "   RTP             = %s (seq=%u roll=%u)\n",
-		   rt_entry->routeEntry.action.
-			  bRTPMeasEna ? "Enabled" : "Disabled",
-		   rt_entry->routeEntry.action.nRTPSeqNumber,
-		   rt_entry->routeEntry.action.nRTPSessionPktCnt);
-	seq_printf(seq, "   FID             = %u\n",
-		   rt_entry->routeEntry.action.nFID);
-	seq_printf(seq, "   Flow ID         = %u\n",
-		   rt_entry->routeEntry.action.nFlowId);
-	seq_printf(seq, "   Hit Status      = %u\n",
-		   rt_entry->routeEntry.action.bHitStatus);
-	seq_printf(seq, "   Session Counters= %u\n",
-		   rt_entry->routeEntry.action.nSessionCtrs);
-	seq_puts(seq, "\n");
-	return 0;
-}
-
-static int dp_route_dump_pr(GSW_ROUTE_Entry_t *rt_entry)
-{
-	PR_INFO("Index[%04d] Hash=%u: %s(%u)\n",
-		rt_entry->nRtIndex, rt_entry->nHashVal,
-		(rt_entry->routeEntry.pattern.bValid == LTQ_TRUE) ?
-		"Valid" : "Not Valid",
-		rt_entry->routeEntry.pattern.bValid);
-	PR_INFO(" Compare:\n");
-	PR_INFO("   IP Type         = %d (%s)\n",
-		rt_entry->routeEntry.pattern.eIpType,
-		get_pae_ip_type(rt_entry->routeEntry.pattern.eIpType));
-	if (rt_entry->routeEntry.action.eIpType == GSW_RT_IP_V6)
-		PR_INFO("   Src IP          = %pI6\n",
-			rt_entry->routeEntry.pattern.nSrcIP.nIPv6);
-	else
-		PR_INFO("   Src IP          = %pI4\n",
-			&rt_entry->routeEntry.pattern.nSrcIP.nIPv4);
-
-	if (rt_entry->routeEntry.pattern.eIpType == GSW_RT_IP_V6)
-		PR_INFO("   Dest IP         = %pI6\n",
-			rt_entry->routeEntry.pattern.nDstIP.nIPv6);
-	else
-		PR_INFO("   Dest IP         = %pI4\n",
-			&rt_entry->routeEntry.pattern.nDstIP.nIPv4);
-
-	PR_INFO("   Src Port        = %d\n",
-		rt_entry->routeEntry.pattern.nSrcPort);
-	PR_INFO("   Dest Port       = %d\n",
-		rt_entry->routeEntry.pattern.nDstPort);
-	PR_INFO("   Extn Id         = %d (%s)\n",
-		rt_entry->routeEntry.pattern.nRoutExtId,
-		get_pae_ext_type(rt_entry->routeEntry.pattern.nRoutExtId));
-	PR_INFO(" Action:\n");
-	PR_INFO("   Dst PMAC List   = 0x%0x (%s)\n",
-		rt_entry->routeEntry.action.nDstPortMap,
-		get_pae_port_list(rt_entry->routeEntry.action.nDstPortMap));
-	PR_INFO("   Subif           = 0x%0x\n",
-		rt_entry->routeEntry.action.nDstSubIfId);
-	PR_INFO("   IP Type         = %d (%s)\n",
-		rt_entry->routeEntry.action.eIpType,
-		get_pae_ip_type(rt_entry->routeEntry.action.eIpType));
-	if (rt_entry->routeEntry.action.eIpType == GSW_RT_IP_V6)
-		PR_INFO("   NAT IP          = %pI6\n",
-			rt_entry->routeEntry.action.nNATIPaddr.nIPv6);
-	else
-		PR_INFO("   NAT IP          = %pI4\n",
-			&rt_entry->routeEntry.action.nNATIPaddr.nIPv4);
-	PR_INFO("   NAT Port        = %d\n",
-		rt_entry->routeEntry.action.nTcpUdpPort);
-	PR_INFO("   MTU             = %d\n",
-		rt_entry->routeEntry.action.nMTUvalue);
-	PR_INFO("   Src MAC         = %pM (%s)\n",
-		rt_entry->routeEntry.action.nSrcMAC,
-		rt_entry->routeEntry.action.bMAC_SrcEnable ?
-		"Enabled" : "Disabled");
-	PR_INFO("   Dst MAC         = %pM (%s)\n",
-		rt_entry->routeEntry.action.nDstMAC,
-		rt_entry->routeEntry.action.bMAC_DstEnable ?
-		"Enabled" : "Disabled");
-	PR_INFO("   PPPoE Mode      = %u (%s)\n",
-		rt_entry->routeEntry.action.bPPPoEmode,
-		pae_pppoe_mode_s(rt_entry->routeEntry.action.bPPPoEmode));
-	PR_INFO("   PPPoE SessID    = %u\n",
-		rt_entry->routeEntry.action.nPPPoESessId);
-	PR_INFO("   Dir             = %u (%s)\n",
-		rt_entry->routeEntry.action.eSessDirection,
-		get_pae_dir_type(rt_entry->routeEntry.action.eSessDirection));
-	PR_INFO("   Class           = %u (%s)\n",
-		rt_entry->routeEntry.action.nTrafficClass,
-		rt_entry->routeEntry.action.bTCremarking ?
-		"Enabled" : "Disabled");
-	PR_INFO("   Routing Mode    = %u (%s)\n",
-		rt_entry->routeEntry.action.eSessRoutingMode,
-		pae_rout_mode_s(rt_entry->routeEntry.action.eSessRoutingMode));
-	PR_INFO("   Tunnel Type     = %u (%s: %s\n",
-		rt_entry->routeEntry.action.eTunType,
-		get_pae_tunnel_type(rt_entry->routeEntry.action.eTunType),
-		rt_entry->routeEntry.action.bTunnel_Enable ?
-		"Enabled" : "Disabled");
-	PR_INFO("   Tunnel Index    = %u\n",
-		rt_entry->routeEntry.action.nTunnelIndex);
-	PR_INFO("   MeterID         = %u (%s)\n",
-		rt_entry->routeEntry.action.nMeterId,
-		rt_entry->routeEntry.action.
-		bMeterAssign ? "Enabled" : "Disabled");
-	PR_INFO("   TTL  Decrease   = %u (%s)\n",
-		rt_entry->routeEntry.action.bTTLDecrement,
-		rt_entry->routeEntry.action.
-		bTTLDecrement ? "Enabled" : "Disabled");
-	PR_INFO("   OutDSCP         = %u (%s)\n",
-		rt_entry->routeEntry.action.eOutDSCPAction,
-		get_pae_out_dscp_type(rt_entry->routeEntry.
-	       action.eOutDSCPAction));
-	PR_INFO("   InDSCP          = %u (%s)\n",
-		rt_entry->routeEntry.action.bInnerDSCPRemark,
-		rt_entry->routeEntry.action.
-	       bInnerDSCPRemark ? "Enabled" : "Disabled");
-	PR_INFO("   DSCP            = %u\n",
-		rt_entry->routeEntry.action.nDSCP);
-	PR_INFO("   RTP             = %s (seq=%u roll=%u)\n",
-		rt_entry->routeEntry.action.bRTPMeasEna ? "Enable" : "Disable",
-		rt_entry->routeEntry.action.nRTPSeqNumber,
-		rt_entry->routeEntry.action.nRTPSessionPktCnt);
-	PR_INFO("   FID             = %u\n",
-		rt_entry->routeEntry.action.nFID);
-	PR_INFO("   Flow ID         = %u\n",
-		rt_entry->routeEntry.action.nFlowId);
-	PR_INFO("   Hit Status      = %u\n",
-		rt_entry->routeEntry.action.bHitStatus);
-	PR_INFO("   Session Counters= %u\n",
-		rt_entry->routeEntry.action.nSessionCtrs);
-	PR_INFO("\n");
-	return 0;
-}
-
-ssize_t proc_gsw_route_write(struct file *file, const char *buf,
-			     size_t count, loff_t *ppos)
-{
-	u16 len, i, tmp, start_param;
-	GSW_return_t ret = 0;
-	char *str = NULL;
-	char *param_list[30 * 2];
-	unsigned int num;
-	GSW_ROUTE_Entry_t *rt_entry;
-	struct core_ops *gsw_handle;
-	u8 dscp_f = 0;
-
-	gsw_handle = dp_port_prop[0].ops[1];
-	str = kmalloc(count + 1, GFP_KERNEL);
-	if (!str)
-		return count;
-	rt_entry = kmalloc(sizeof(GSW_ROUTE_Entry_t) + 1,
-			   GFP_KERNEL);
-	if (!rt_entry) {
-		kfree(str);
-		return count;
-	}
-
-	len = count;
-	len -= copy_from_user(str, buf, len);
-	str[len] = 0;
-
-	num = dp_split_buffer(str, param_list, ARRAY_SIZE(param_list));
-	if (num < 2) {
-		PR_INFO("parameter %d not enough. count=%d\n", num, count);
-		goto help;
-	}
-	if (dp_strncmpi(param_list[0],
-			"help", strlen("help")) == 0)	/* help */
-		goto help;
-
-	/* delete an entry */
-	if (dp_strncmpi(param_list[0], "del", strlen("del")) == 0) {
-		rt_entry->nRtIndex = dp_atoi(param_list[1]);
-		DP_DEBUG(DP_DBG_FLAG_PAE, "Delete pae entry %d\n",
-			 rt_entry->nRtIndex);
-		ret = gsw_core_api((dp_gsw_cb)gsw_handle->gsw_pae_ops
-				   .ROUTE_SessionEntryDel, gsw_handle,
-				   rt_entry);
-		if (ret != GSW_statusOk) {
-			PR_ERR("GSW_ROUTE_ENTRY_DELETE returned failure\n");
-			goto exit;
-		}
-		kfree(str);
-		kfree(rt_entry);
-		return count;
-	}
-
-	/* dump an entry */
-	if (dp_strncmpi(param_list[0], "dump", strlen("dump")) == 0) {
-		rt_entry->nRtIndex = dp_atoi(param_list[1]);
-		DP_DEBUG(DP_DBG_FLAG_PAE, "Dump pae entry %d\n",
-			 rt_entry->nRtIndex);
-		ret = gsw_core_api((dp_gsw_cb)gsw_handle->gsw_pae_ops
-				   .ROUTE_SessionEntryRead, gsw_handle,
-				   rt_entry);
-		if (ret != GSW_statusOk) {
-			PR_ERR("GSW_ROUTE_ENTRY_DELETE returned failure\n");
-			goto exit;
-		}
-		dp_route_dump_pr(rt_entry);
-		kfree(str);
-		kfree(rt_entry);
-		return count;
-	}
-
-	/* Modify an entry */
-	if (dp_strncmpi(param_list[0], "modify", strlen("modify")) == 0) {
-		rt_entry->nRtIndex = dp_atoi(param_list[1]);
-		/*read back before delete and add it new */
-		DP_DEBUG(DP_DBG_FLAG_PAE, "Dump pae entry %d\n",
-			 rt_entry->nRtIndex);
-		ret = gsw_core_api((dp_gsw_cb)gsw_handle->gsw_pae_ops
-				   .ROUTE_SessionEntryRead, gsw_handle,
-				   rt_entry);
-		if (ret != GSW_statusOk) {
-			PR_ERR("GSW_ROUTE_ENTRY_DELETE returned failure\n");
-			goto exit;
-		}
-		ret = gsw_core_api((dp_gsw_cb)gsw_handle->gsw_pae_ops
-				   .ROUTE_SessionEntryDel, gsw_handle,
-				   rt_entry);
-		if (ret != GSW_statusOk) {
-			PR_ERR("GSW_ROUTE_ENTRY_DELETE returned failure\n");
-			goto exit;
-		}
-		rt_entry->nHashVal = -1; /*since GSWAPI no modify support,
-					  *here switch to add command
-					  */
-		start_param = 2;
-		goto ADD_MODIFY_BOTH;
-	}
-
-	/* add a new entry */
-	if (dp_strncmpi(param_list[0], "add", strlen("add")) != 0) {
-		PR_INFO("wrong command: %s\n", param_list[0]);
-		goto help;
-	}
-	memset(rt_entry, 0, sizeof(*rt_entry));
-	rt_entry->nHashVal = -1;
-	rt_entry->bPrio = 1;
-	rt_entry->routeEntry.action.nMTUvalue = 1501;
-	rt_entry->routeEntry.pattern.bValid = LTQ_TRUE;
-	start_param = 1;
- ADD_MODIFY_BOTH:
-	for (i = start_param; i < num; i += 2) {
-		/*compare table */
-		if (dp_strncmpi(param_list[i], "SrcIP", strlen("SrcIP")) == 0) {
-			tmp =
-			    pton(param_list[i + 1],
-				 &rt_entry->routeEntry.pattern.nSrcIP);
-			if (tmp == 4)
-				rt_entry->routeEntry.pattern.eIpType =
-				    GSW_RT_IP_V4;
-			else if (tmp == 6)
-				rt_entry->routeEntry.pattern.eIpType =
-				    GSW_RT_IP_V6;
-			else {
-				PR_INFO("Wong IP format for SrcIP\n");
-				goto exit;
-			}
-		} else if (dp_strncmpi(param_list[i],
-				     "DstIP",
-					 strlen("DstIP"))
-					 == 0) {
-			tmp =
-			    pton(param_list[i + 1],
-				 &rt_entry->routeEntry.pattern.nDstIP);
-			if (tmp == 4)
-				rt_entry->routeEntry.pattern.eIpType =
-				    GSW_RT_IP_V4;
-			else if (tmp == 6)
-				rt_entry->routeEntry.pattern.eIpType =
-				    GSW_RT_IP_V6;
-			else {
-				PR_INFO("Wong IP format for DstIP\n");
-				goto exit;
-			}
-		} else if (dp_strncmpi(param_list[i],
-				     "SrcPort",
-					 strlen("SrcPort"))
-					 == 0)
-			rt_entry->routeEntry.pattern.nSrcPort =
-			    dp_atoi(param_list[i + 1]);
-		else if (dp_strncmpi(param_list[i],
-				     "DstPort",
-					 strlen("DstPort"))
-					 == 0)
-			rt_entry->routeEntry.pattern.nDstPort =
-			    dp_atoi(param_list[i + 1]);
-		else if (dp_strncmpi(param_list[i],
-				     "ExtId",
-					 strlen("ExtId"))
-					 == 0)
-			rt_entry->routeEntry.pattern.nRoutExtId =
-			    dp_atoi(param_list[i + 1]);
-		else if (dp_strncmpi(param_list[i],
-				     "SrcMac",
-					 strlen("SrcMac"))
-					 == 0) {
-			rt_entry->routeEntry.action.bMAC_SrcEnable = 1;
-			mac_stob(param_list[i + 1],
-				 rt_entry->routeEntry.action.nSrcMAC);
-
-			if (rt_entry->routeEntry.action.eSessRoutingMode <
-			    GSW_ROUTE_MODE_ROUTING) /*normally only
-						     *routing mode will
-						     *change mac
-						     */
-				rt_entry->routeEntry.action.eSessRoutingMode =
-				    GSW_ROUTE_MODE_ROUTING;
-		} /*below is all actions */
-		else if (dp_strncmpi(param_list[i],
-				     "DstMac",
-					 strlen("DstMac"))
-					 == 0) {
-			rt_entry->routeEntry.action.bMAC_DstEnable = 1;
-			mac_stob(param_list[i + 1],
-				 rt_entry->routeEntry.action.nDstMAC);
-
-			if (rt_entry->routeEntry.action.eSessRoutingMode <
-			    GSW_ROUTE_MODE_ROUTING) /*normally only routing
-						     *mode will change mac
-						     */
-				rt_entry->routeEntry.action.eSessRoutingMode =
-				    GSW_ROUTE_MODE_ROUTING;
-		} else if (dp_strncmpi(param_list[i],
-				     "NatIP",
-					 strlen("NatIP"))
-					 == 0) {
-			tmp =
-			    pton(param_list[i + 1],
-				 &rt_entry->routeEntry.action.nNATIPaddr);
-			if (tmp == 4)
-				rt_entry->routeEntry.action.eIpType =
-				    GSW_RT_IP_V4;
-			else if (tmp == 6)
-				rt_entry->routeEntry.action.eIpType =
-				    GSW_RT_IP_V6;
-			else {
-				PR_INFO("Wong IP format for NatIP\n");
-				goto exit;
-			}
-			if (rt_entry->routeEntry.action.eSessRoutingMode <
-			    GSW_ROUTE_MODE_NAT)
-				rt_entry->routeEntry.action.eSessRoutingMode =
-				GSW_ROUTE_MODE_NAT;	/* NAT */
-		} else if (dp_strncmpi(param_list[i],
-				     "NatPort",
-					 strlen("NatPort"))
-					 == 0) {
-			rt_entry->routeEntry.action.nTcpUdpPort =
-			    dp_atoi(param_list[i + 1]);
-			if (rt_entry->routeEntry.action.eSessRoutingMode <
-			    GSW_ROUTE_MODE_NAPT)
-				rt_entry->routeEntry.action.eSessRoutingMode =
-				GSW_ROUTE_MODE_NAPT;/* NAPT */
-		} else if (dp_strncmpi(param_list[i],
-				     "MTU",
-					 strlen("MTU"))
-					 == 0)
-			rt_entry->routeEntry.action.nMTUvalue =
-			    dp_atoi(param_list[i + 1]);
-		else if (dp_strncmpi(param_list[i],
-				     "PPPoEmode",
-					 strlen("PPPoEmode"))
-					 == 0)
-			rt_entry->routeEntry.action.bPPPoEmode =
-			    dp_atoi(param_list[i + 1]);
-		else if (dp_strncmpi(param_list[i],
-				     "PPPoEId",
-					 strlen("PPPoEId"))
-					 == 0)
-			rt_entry->routeEntry.action.nPPPoESessId =
-			    dp_atoi(param_list[i + 1]);
-		else if (dp_strncmpi(param_list[i],
-				     "TunType",
-					 strlen("TunType"))
-					 == 0) {
-			rt_entry->routeEntry.action.bTunnel_Enable = 1;
-			rt_entry->routeEntry.action.eTunType =
-			    dp_atoi(param_list[i + 1]);
-		} else if (dp_strncmpi(param_list[i],
-				     "TunIndex",
-					 strlen("TunIndex"))
-					 == 0) {
-			rt_entry->routeEntry.action.bTunnel_Enable = 1;
-			rt_entry->routeEntry.action.eTunType =
-			    dp_atoi(param_list[i + 1]);
-
-		} else if (dp_strncmpi(param_list[i],
-				     "MeterId",
-					 strlen("MeterId"))
-					 == 0) {
-			rt_entry->routeEntry.action.bMeterAssign = 1;
-			rt_entry->routeEntry.action.nMeterId =
-			    dp_atoi(param_list[i + 1]);
-
-		} else if (dp_strncmpi(param_list[i],
-				     "FID",
-					 strlen("FID"))
-					 == 0)
-			rt_entry->routeEntry.action.nFID =
-			    dp_atoi(param_list[i + 1]);
-		else if (dp_strncmpi(param_list[i],
-				     "FlowId",
-					 strlen("FlowId"))
-					 == 0)
-			rt_entry->routeEntry.action.nFlowId =
-			    dp_atoi(param_list[i + 1]);
-		else if (dp_strncmpi(param_list[i],
-				     "OutDscp",
-					 strlen("OutDscp"))
-					 == 0)
-			rt_entry->routeEntry.action.eOutDSCPAction =
-			    dp_atoi(param_list[i + 1]);
-		else if (dp_strncmpi(param_list[i],
-				     "InDscp",
-					 strlen("InDscp"))
-					 == 0)
-			rt_entry->routeEntry.action.bInnerDSCPRemark =
-			    dp_atoi(param_list[i + 1]);
-		else if (dp_strncmpi(param_list[i],
-				     "Dscp",
-					 strlen("Dscp"))
-					 == 0) {
-			rt_entry->routeEntry.action.nDSCP =
-			    dp_atoi(param_list[i + 1]);
-			dscp_f = 1;
-		} else if (dp_strncmpi(param_list[i],
-				     "class",
-					 strlen("class"))
-					 == 0) {
-			rt_entry->routeEntry.action.bTCremarking = 1;
-			rt_entry->routeEntry.action.nTrafficClass =
-			    dp_atoi(param_list[i + 1]);
-		} else if (dp_strncmpi(param_list[i],
-				     "ttl",
-					 strlen("ttl"))
-					 == 0)
-			rt_entry->routeEntry.action.bTTLDecrement =
-			    dp_atoi(param_list[i + 1]);
-		else if (dp_strncmpi(param_list[i],
-				     "dir",
-					 strlen("dir"))
-					 == 0)
-			rt_entry->routeEntry.action.eSessDirection =
-			    dp_atoi(param_list[i + 1]);
-		else if (dp_strncmpi(param_list[i],
-				     "DstPmac",
-					 strlen("DstPmac"))
-					 == 0)
-			rt_entry->routeEntry.action.nDstPortMap =
-			    dp_atoi(param_list[i + 1]);
-		else if (dp_strncmpi(param_list[i],
-				     "Subif",
-					 strlen("Subif"))
-					 == 0)
-			rt_entry->routeEntry.action.nDstSubIfId =
-			    dp_atoi(param_list[i + 1]);
-		else {
-			PR_INFO("wrong parameter[%d]: %s\n", i, param_list[i]);
-			goto exit;
-		}
-
-		if (!rt_entry->routeEntry.action.bTTLDecrement &&
-		    (rt_entry->routeEntry.action.eSessRoutingMode >
-		     GSW_ROUTE_MODE_NULL))
-			rt_entry->routeEntry.action.bTTLDecrement = 1;
-
-		/* if key in dscp but no inner/outer dscp action enabled,
-		 * then auto enable indscp action
-		 */
-		if (dscp_f &&
-		    !rt_entry->routeEntry.action.eOutDSCPAction &&
-		    !rt_entry->routeEntry.action.bInnerDSCPRemark)
-			rt_entry->routeEntry.action.bInnerDSCPRemark = 1;
-		/*nSessionCtrs ??*/
-	}
-	ret = gsw_core_api((dp_gsw_cb)gsw_handle->gsw_pae_ops
-				   .ROUTE_SessionEntryAdd, gsw_handle,
-				   rt_entry);
-	if (ret < GSW_statusOk) {
-		PR_ERR("GSW_ROUTE_ENTRY_ADD returned failure\n");
-		goto exit;
-	}
-	DP_DEBUG(DP_DBG_FLAG_PAE, "pae entry %d updated\n",
-		 rt_entry->nRtIndex);
-
-	dp_route_dump_pr(rt_entry);
-
- exit:
-	kfree(str);
-	kfree(rt_entry);
-	return count;
-
- help:
-	PR_INFO("usage:\n");
-	PR_INFO("  echo del	<entry-index> > /prooc/dp/%s\n",
-		PROC_ROUTE);
-	PR_INFO("  echo show <entry-index> > /prooc/dp/%s\n",
-		PROC_ROUTE);
-	PR_INFO("  echo add %s %s\n",
-		"[SrcIP] [IP-value] [DstIP] [IP-value] [SrcPort] [Port-value]",
-		"[DstPort] [Port-value] [ExtId] [ExtId-value]");
-	PR_INFO("           %s [NatIP] [IP-value] [NatPort] [Port-value]\n",
-		"[dir] [dir-value] [SrcMAC] [MAC-value] [DstMAC] [MAC-value]");
-	PR_INFO("           %s [PPPoEId-value] [TunType] [Tunnel-value]\n",
-		"[MTU] [MTU-value] [PPPoEmode] [PPPoEmode-value] [PPPoEId]");
-	PR_INFO("           %s [FID] [FID-value] [FlowId] [FlowId-value]\n",
-		"[TunIndex] [Tunnel-index-value] [MeterId] [MeterId-value]");
-	PR_INFO("           %s [OutDscp-value] [class] [class-value]\n",
-		"[InDscp] [InDscp-value] [Dscp] [Dscp-value] [OutDscp]");
-	PR_INFO("           [DstPmac] [DstPmac-value] [Subif] [Subif-value]\n");
-	PR_INFO("		> /prooc/dp/%s\n", PROC_ROUTE);
-	PR_INFO("  echo modify <entry-index> %s > /prooc/dp/%s\n",
-		"[followed by paramers as add command]",
-		PROC_ROUTE);
-
-	PR_INFO(" Take note:\n");
-	PR_INFO("     Only MAC address learned session is accelerated by HW\n");
-	PR_INFO("     After modify entry, its entry index maybe changed\n");
-	PR_INFO("     ExtId: %d(%s)/%d(%s)\n", 0, get_pae_ext_type(0), 100,
-		get_pae_ext_type(100));
-	PR_INFO("     Dir: %d(%s)/%d(%s)\n", GSW_ROUTE_DIRECTION_DNSTREAM,
-		get_pae_dir_type(GSW_ROUTE_DIRECTION_DNSTREAM),
-		GSW_ROUTE_DIRECTION_UPSTREAM,
-		get_pae_dir_type(GSW_ROUTE_DIRECTION_UPSTREAM));
-	PR_INFO("     OutDscp: %d(%s)/%d(%s)/%d(%s)\n",
-		GSW_ROUTE_OUT_DSCP_NULL,
-		get_pae_dir_type(GSW_ROUTE_OUT_DSCP_NULL),
-		GSW_ROUTE_OUT_DSCP_INNER,
-		get_pae_out_dscp_type(GSW_ROUTE_OUT_DSCP_INNER),
-		GSW_ROUTE_OUT_DSCP_SESSION,
-		get_pae_out_dscp_type(GSW_ROUTE_OUT_DSCP_SESSION));
-	PR_INFO("     Tunnel: %d(%s)/%d(%s)/%d(%s)/%d(%s)/%d(%s)\n",
-		GSW_ROUTE_TUNL_NULL, get_pae_tunnel_type(GSW_ROUTE_TUNL_NULL),
-		GSW_ROUTE_TUNL_6RD, get_pae_tunnel_type(GSW_ROUTE_TUNL_6RD),
-		GSW_ROUTE_TUNL_DSLITE,
-		get_pae_tunnel_type(GSW_ROUTE_TUNL_DSLITE),
-		GSW_ROUTE_TUNL_L2TP, get_pae_tunnel_type(GSW_ROUTE_TUNL_L2TP),
-		GSW_ROUTE_TUNL_IPSEC,
-		get_pae_tunnel_type(GSW_ROUTE_TUNL_IPSEC));
-	PR_INFO("     PPPoEmode: %d(%s)/%d(%s)\n", 0,
-		pae_pppoe_mode_s(0), 1, pae_pppoe_mode_s(1));
-	PR_INFO("     TTL/Route Mode/IPV4/6 auto handled inside the proc\n");
-	PR_INFO("     DstPmac:bit 0 for pmac port 0, 1 for pmac port 1....\n");
-	PR_INFO("     Subif(ATM bit format): %s\n",
-		"ATM-QID[6:3] Mpoa_pt[2] Mpoa_mode[1:0]");
-	PR_INFO("     ext(up)  : echo add %s %s %s %s %s > /proc/dp/%s\n",
-		"SrcIP 192.168.1.100 DstIP 192.168.0.100",
-		"SrcPort 1024 DstPort 1024 ExtId 100",
-		"SrcMac 11:11:11:11:11:11 DstMac 11:11:11:11:11:22",
-		"NatIP 192.168.0.1   NatPort 3000 MTU 1500",
-		"DstPmac 0x8000 subif 0 dir 1",
-		PROC_ROUTE);
-	PR_INFO("     ext(down): echo add %s %s %s %s %s > /proc/dp/%s\n",
-		"SrcIP 192.168.0.100 DstIP 192.168.0.1",
-		"SrcPort 1024 DstPort 3000 ExtId 100",
-		"SrcMac 11:11:11:11:11:33 DstMac 11:11:11:11:11:44",
-		"NatIP 192.168.1.100",
-		"NatPort 1024 MTU 1500 DstPmac 0x2 subif 0 dir 0",
-		PROC_ROUTE);
-
-	goto exit;
-}
-
-int proc_gsw_route_dump(struct seq_file *seq, int pos)
-{
-	struct core_ops *gsw_handle;
-	GSW_ROUTE_Entry_t *rt_entry;
-	GSW_return_t  ret = 0;
-
-	rt_entry = kmalloc(sizeof(GSW_ROUTE_Entry_t) + 1,
-			   GFP_KERNEL);
-	if (!rt_entry)
-		return -1;
-	/* read gswip-r rmon counter */
-	gsw_handle = dp_port_prop[0].ops[1];
-	memset(rt_entry, 0, sizeof(*rt_entry));
-	rt_entry->nRtIndex = pos;
-	ret = gsw_core_api((dp_gsw_cb)gsw_handle->gsw_pae_ops
-			   .ROUTE_SessionEntryRead, gsw_handle, rt_entry);
-	if (ret != GSW_statusOk) {
-		PR_ERR("GSW_ROUTE_ENTRY_READ returned Failure for index=%d\n",
-		       rt_entry->nRtIndex);
-		pos = -1;
-		kfree(rt_entry);
-		return pos;
-	}
-	if (rt_entry->routeEntry.pattern.bValid != LTQ_TRUE)
-		goto EXIT;
-
-	if (dp_route_dump_seq(seq, rt_entry))
-		return pos;	/*need report*/
-
- EXIT:
-	pos++;
-	kfree(rt_entry);
-	if (pos >= 4096) /*GSWIP API does not check the maximum
-			  *entry and it will hang
-			  */
-		pos = -1;
-	return pos;
-}
-
-#define PMAC_EG_SET(x, y) (pmac.eg.x = dp_atoi(y))
-#define PMAC_IG_SET(x, y) (pmac.ig.x = dp_atoi(y))
-
-static int set_pmac_ig_v(char *p, char *tail, GSW_PMAC_Ig_Cfg_t *ig)
-{
-	char *tmp;
-	int k;
-
-	for (k = 0; k < 8; k++) {
-		if (k < (8 - 1)) {
-			tmp = strstr(p, ":");
-			if (!tmp ||
-			    ((u32)tmp >= (u32)tail)) {
-				PR_INFO("%s: should be like %s\n",
-					"Wrong format",
-					"xx:xx:xx:xx:xx:xx:xx:xx");
-				return -1;
-			}
-			*tmp = 0; /*replace:with zero*/
-		}
-		ig->defPmacHdr[k] = dp_atoi(p);
-
-		p = tmp + 1; /* move to next value */
-	}
-	return 0;
-}
-
-static ssize_t proc_gsw_pmac_write(struct file *file, const char *buf,
-				   size_t count, loff_t *ppos)
-{
-	u16 len, i, k, start_param;
-	GSW_return_t ret = 0;
-	char *str = NULL;
-	char *param_list[20 * 2];
-	unsigned int num;
-	union {
-		GSW_PMAC_Eg_Cfg_t eg;
-		GSW_PMAC_Ig_Cfg_t ig;
-	} pmac;
-	#define MAX_GSWIP_CALSS 15
-	#define MAX_GSWIP_FLOW  3
-	struct core_ops *gsw_handle;
-	int class_s = 0, class_e = MAX_GSWIP_CALSS;
-	int flow_s = 0, flow_e = MAX_GSWIP_FLOW;
-
-	str = kmalloc(count + 1, GFP_KERNEL);
-	if (!str)
-		return count;
-	len = count;
-	len -= copy_from_user(str, buf, len);
-	str[len] = 0;
-
-	num = dp_split_buffer(str, param_list, ARRAY_SIZE(param_list));
-	if ((num < 2) || (num >= ARRAY_SIZE(param_list))) {
-		PR_INFO("parameter %d not enough/more. count=%d\n", num, count);
-		goto help;
-	}
-	if (dp_strncmpi(param_list[0],
-			"help", strlen("help")) == 0)	/* help */
-		goto help;
-	/* set pmac */
-	if (dp_strncmpi(param_list[0],
-			"set",
-			strlen("set")) != 0) {
-		PR_INFO("wrong command: %s\n", param_list[0]);
-		goto help;
-	}
-	if (dp_strncmpi(param_list[1], "L", 1) == 0) {
-		gsw_handle = dp_port_prop[0].ops[GSWIP_L];
-	} else if (dp_strncmpi(param_list[1], "R", 1) == 0) {
-		gsw_handle = dp_port_prop[0].ops[GSWIP_R];
-	} else {
-		PR_INFO("wrong param:should provide L/R\n");
-		goto exit;
-	}
-	memset(&pmac, 0, sizeof(pmac));
-	start_param = 3;
-
-	if (dp_strncmpi(param_list[start_param - 1], "EG", 2) == 0) {
-		/*ingress pmac */
-		ret = gsw_core_api((dp_gsw_cb)gsw_handle->gsw_pmac_ops
-				   .Pmac_Eg_CfgGet, gsw_handle, &pmac);
-		for (i = start_param; i < num; i += 2) {
-			if (dp_strncmpi(param_list[i],
-					"Class", strlen("Class")) == 0) {
-				char *p = param_list[i + 1];
-
-				char *tail = p + strlen(p);
-				char *tmp;
-
-				tmp = strstr(p, ":");
-				if (!tmp || (tmp >= tail)) {
-					PR_INFO("%s: should be like xx:xx\n",
-						"Wrong format for Class");
-					goto exit;
-				}
-				*tmp = 0;
-				class_s = dp_atoi(p);
-				class_e = dp_atoi(tmp + 1);
-			} else if (dp_strncmpi(param_list[i],
-					     "FlowID",
-						 strlen("FlowID"))
-						 == 0) {
-				char *p = param_list[i + 1];
-				char *tail = p + strlen(p);
-				char *tmp;
-
-				tmp = strstr(p, ":");
-				if (!tmp || (tmp >= tail)) {
-					PR_INFO("%s:should be like xx:xx\n",
-						"Wrong format for FlowID");
-					goto exit;
-				}
-				*tmp = 0;
-				flow_s = dp_atoi(p);
-				flow_e = dp_atoi(tmp + 1);
-			} else if (dp_strncmpi(param_list[i],
-					     "DestPort",
-						 strlen("DestPort"))
-						 == 0) {
-				PMAC_EG_SET(nDestPortId, param_list[i + 1]);
-			} else if (dp_strncmpi(param_list[i],
-					     "RxDmaCH",
-						 strlen("RxDmaCH"))
-						 == 0) {
-				PMAC_EG_SET(nRxDmaChanId, param_list[i + 1]);
-			}
-#ifdef xxxxx
-			/*below global flag cannot be editted here*/
-			else if (dp_strncmpi(param_list[i],
-					     "MPE1",
-						 strlen("MPE1"))
-						 == 0)
-				PMAC_EG_SET(bMpe1Flag, param_list[i + 1]);
-			else if (dp_strncmpi(param_list[i],
-					     "MPE2",
-						 strlen("MPE2"))
-						 == 0)
-				PMAC_EG_SET(bMpe2Flag, param_list[i + 1]);
-			else if (dp_strncmpi(param_list[i],
-					     "DEC",
-						 strlen("DEC"))
-						 == 0)
-				PMAC_EG_SET(bDecFlag, param_list[i + 1]);
-			else if (dp_strncmpi(param_list[i],
-					     "ENC",
-						 strlen("ENC"))
-						 == 0)
-				PMAC_EG_SET(bEncFlag, param_list[i + 1]);
-			else if (dp_strncmpi(param_list[i],
-					     "ProcFlag",
-						 strlen("ProcFlag"))
-						 == 0)
-				PMAC_EG_SET(bProcFlagsSelect,
-					    param_list[i + 1]);
-#endif
-			else if (dp_strncmpi(param_list[i],
-					     "RemL2Hdr",
-						 strlen("RemL2Hdr"))
-						 == 0)
-				PMAC_EG_SET(bRemL2Hdr, param_list[i + 1]);
-			else if (dp_strncmpi(param_list[i],
-					     "RemNum",
-						 strlen("RemNum"))
-						 == 0)
-				PMAC_EG_SET(numBytesRem, param_list[i + 1]);
-			else if (dp_strncmpi(param_list[i],
-					     "FCS",
-						 strlen("FCS"))
-						 == 0)
-				PMAC_EG_SET(bFcsEna, param_list[i + 1]);
-			else if (dp_strncmpi(param_list[i],
-					     "PmacEna",
-						 strlen("PmacEna"))
-						 == 0)
-				PMAC_EG_SET(bPmacEna, param_list[i + 1]);
-			else if (dp_strncmpi(param_list[i],
-					     "TcEnable",
-						 strlen("TcEnable"))
-						 == 0)
-				PMAC_EG_SET(bTCEnable, param_list[i + 1]);
-			else {
-				PR_INFO("wrong parameter[%d]: %s\n",
-					i, param_list[i]);
-				goto exit;
-			}
-		}
-		if (class_e > MAX_GSWIP_CALSS)
-			class_e = MAX_GSWIP_CALSS;
-		if (flow_e > MAX_GSWIP_FLOW)
-			flow_e = MAX_GSWIP_FLOW;
-		if (class_s > class_e) {
-			PR_INFO("wrong param:class_s=%d should < class_e=%d\n",
-				class_s, class_e);
-			goto exit;
-		}
-		if (flow_s > flow_e) {
-			PR_INFO("wrong param:flow_s=%d should < flow_e=%d\n",
-				flow_s, flow_e);
-			goto exit;
-		}
-		PR_INFO("Set EG PMAC for class %d:%d flow %d:%d\n",
-			class_s, class_e, flow_s, flow_e);
-		for (i = class_s; i <= class_e; i++) {
-			for (k = flow_s; k <= flow_e; k++) {
-				pmac.eg.nTrafficClass = i;
-				pmac.eg.nFlowIDMsb = k;
-				ret = gsw_core_api(DP_PMAC_OPS(gsw_handle,
-							       Pmac_Eg_CfgGet),
-						   gsw_handle, &pmac);
-				/*Note: bProcFlagsSelect zero,
-				 *just nTrafficClass,
-				 *else use MPE1/2/ENC/DEC flag instead
-				 */
-				pmac.eg.bMpe1Flag = (pmac.eg.nTrafficClass >>
-					0) & 1;
-				pmac.eg.bMpe2Flag = (pmac.eg.nTrafficClass >>
-					1) & 1;
-				pmac.eg.bEncFlag = (pmac.eg.nTrafficClass >>
-					2) & 1;
-				pmac.eg.bDecFlag = (pmac.eg.nTrafficClass >>
-					3) & 1;
-				pmac.eg.nFlowIDMsb = k;
-				ret = gsw_core_api(DP_PMAC_OPS(gsw_handle,
-							       Pmac_Eg_CfgSet),
-						   gsw_handle, &pmac);
-			}
-		}
-		if (ret < GSW_statusOk) {
-			PR_ERR("GSW_PMAC_EG_CFG_SET returned failure\n");
-			goto exit;
-		}
-	} else if (dp_strncmpi(param_list[start_param - 1], "IG", 2) == 0) {
-		/*ingress pmac1 */
-		ret = gsw_core_api((dp_gsw_cb)gsw_handle->gsw_pmac_ops
-				   .Pmac_Ig_CfgGet, gsw_handle, &pmac);
-		for (i = start_param; i < num; i += 2) {
-			if (dp_strncmpi(param_list[i],
-					"TxDmaCH",
-					strlen("TxDmaCH"))
-					== 0) {
-				PMAC_IG_SET(nTxDmaChanId, param_list[i + 1]);
-			} else if (dp_strncmpi(param_list[i],
-						"ErrDrop",
-						strlen("ErrDrop"))
-						== 0) {
-				PMAC_IG_SET(bErrPktsDisc, param_list[i + 1]);
-			} else if (dp_strncmpi(param_list[i],
-						"ClassEna",
-						strlen("ClassEna"))
-						== 0) {
-				PMAC_IG_SET(bClassEna, param_list[i + 1]);
-			} else if (dp_strncmpi(param_list[i],
-						"ClassDefault",
-						strlen("ClassDefault"))
-						== 0) {
-				PMAC_IG_SET(bClassDefault, param_list[i + 1]);
-			} else if (dp_strncmpi(param_list[i],
-						"PmacEna",
-						strlen("PmacEna"))
-						== 0) {
-				PMAC_IG_SET(bPmapEna, param_list[i + 1]);
-			} else if (dp_strncmpi(param_list[i],
-						"PmacDefault",
-						strlen("PmacDefault"))
-						== 0) {
-				PMAC_IG_SET(bPmapDefault, param_list[i + 1]);
-			} else if (dp_strncmpi(param_list[i],
-						"SubIdDefault",
-						strlen("SubIdDefault"))
-						== 0) {
-				 /*changed from bSubIdDefault in GSWIP3.1 */
-				//PMAC_IG_SET(bSubIdDefault, param_list[i + 1]);
-				PMAC_IG_SET(eSubId, param_list[i + 1]);
-			} else if (dp_strncmpi(param_list[i],
-						"SpIdDefault",
-						strlen("SpIdDefault"))
-						== 0) {
-				PMAC_IG_SET(bSpIdDefault, param_list[i + 1]);
-			} else if (dp_strncmpi(param_list[i],
-						"PmacPresent",
-						strlen("PmacPresent"))
-						== 0) {
-				PMAC_IG_SET(bPmacPresent, param_list[i + 1]);
-			} else if (dp_strncmpi(param_list[i],
-						"DefaultPmacHdr",
-						strlen("DefaultPmacHdr"))
-						== 0) {
-				char *p = param_list[i + 1];
-				char *tail = p + strlen(p);
-
-				if (set_pmac_ig_v(p, tail, &pmac.ig))
-					goto exit;
-			} else {
-				PR_INFO("wrong parameter[%d]: %s\n", i,
-					param_list[i]);
-				goto exit;
-			}
-		}
-		ret = gsw_core_api((dp_gsw_cb)gsw_handle->gsw_pmac_ops
-				   .Pmac_Ig_CfgSet, gsw_handle, &pmac);
-		if (ret < GSW_statusOk) {
-			PR_ERR("GSW_PMAC_IG_CFG_SET returned failure\n");
-			goto exit;
-		}
-	} else if (dp_strncmpi(param_list[start_param - 1],
-				"reset",
-				strlen("reset")) == 0) {
-		GSW_reset_t reset;
-
-		gsw_core_api((dp_gsw_cb)gsw_handle->gsw_common_ops.Reset,
-			     gsw_handle, &reset);
-	} else {
-		PR_INFO("wrong parameter not supported: %s\n",
-			param_list[start_param - 1]);
-		goto exit;
-	}
-exit:
-	kfree(str);
-	return count;
-
-help:
-	PR_INFO("usage:\n");
-	PR_INFO("  echo set <L/R> EG\n");
-	PR_INFO("    [DestPort] [Dst-PMAC-Port-value]\n");
-	PR_INFO("    [Class] [Class-start:end](0~15)\n");
-	PR_INFO("    [FlowID] [FlowID-start:end](0~3)\n");
-	PR_INFO("\n");
-	PR_INFO("    [PmacEna] [Enable PMAC HDR (1) or not(0)]\n");
-	PR_INFO("    [RxDmaCH] [RxDmaCH-value]\n");
-	PR_INFO("    [TcEnable] [TcEnable-value(0/1)] [FCS] [FCS-value(0/1]\n");
-	PR_INFO("    %s [RemL2Hdr-value(0/1)] [RemNum] [RemNum-value]\n",
-		"[RemL2Hdr]");
-	PR_INFO("     > /prooc/dp/%s\n", PROC_PMAC);
-	PR_INFO("  echo set <L/R> IG [TxDmaCH] [TX-DMA-CH-value]\n");
-	PR_INFO("\n");
-	PR_INFO("    [ErrDrop] [Error-Drop-value(0/1)]\n");
-	PR_INFO("    %s PMAC header(1) or incoming PMAC header(0)]\n",
-		"[ClassEna] [Class Enable info from default");
-	PR_INFO("    %s %s %s\n",
-		"[ClassDefault]",
-		"[Class Default info from default PMAC header(1)",
-		"or incoming PMAC header(0)]");
-	PR_INFO("    %s %s %s\n",
-		"[PmacEna]",
-		"[Port Map Enable info from default PMAC header(1)",
-		"or incoming PMAC header(0)]");
-	PR_INFO("    %s %s or incoming PMAC header(0)]\n",
-		"[PmacDefault]",
-		"[Port Map info from default PMAC header(1)");
-	PR_INFO("    %s %s or in packet descriptor (0)]\n",
-		"[SubIdDefault]",
-		"[Sub_Interface Id Info from default PMAC header(1)");
-	PR_INFO("    %s %s or incoming PMAC header (False)]\n",
-		"[SpIdDefault]",
-		"[Source port id from default PMAC header(1)");
-	PR_INFO("    %s %s or not (0)]\n",
-		"[PmacPresent]",
-		"[Packet PMAC header is present (1)");
-	PR_INFO("    %s [Default PMAC HDR(8 bytes: xx:xx:xx:xx:xx:xx:xx:xx]\n",
-		"[DefaultPmacHdr]");
-	PR_INFO("     > /prooc/dp/%s\n", PROC_PMAC);
-	PR_INFO("  echo set <0/1> reset\n");
-	PR_INFO("  ext1: echo %s %s %s %s > /proc/dp/pmac\n",
-		"set R IG TxDmaCH 1 ErrDrop 0 PmacDefault 0 PmacEna 0",
-		"ClassEna 1 ClassDefault 1 SubIdDefault 1 SpIdDefault 1",
-		"PmacPresent 0",
-		"DefaultPmacHdr 0x11:0x22:0x33:0x44:0x55:0x66:0x77:0x88");
-	PR_INFO("  ext2: %s %s > /proc/dp/pmac\n",
-		"echo set R EG DestPort 15 class 0:15 FlowID 0:3",
-		"RxDmaCH 4 TcEnable 1 RemL2Hdr 1 RemNum 8 PmacEna 0 FCS 1");
-	goto exit;
-}
-
-static int proc_gsw_pmac_start(void)
-{
-	return 0;
-}
-
-static int proc_gsw_pmac_dump(struct seq_file *s, int pos)
-{
-	GSW_PMAC_Ig_Cfg_t igCfg;
-	GSW_PMAC_Eg_Cfg_t egCfg;
-	struct core_ops *gsw_handle;
-	u8 i = 0, j = 0;
-
-	/* Do the GSW-L configuration */
-	gsw_handle = dp_port_prop[0].ops[0];
-	seq_puts(s, "\nGSWIP PMAC0 Ingress PMAC Configure\n");
-	seq_printf(s, "%15s %15s %15s %15s %15s %15s %15s %15s %15s %15s\n",
-		   "nTxDmaChanId", "bErrPktsDisc", "bPmapDefault", "bPmapEna",
-		   "bClassDefault", "bClassEna", "bSubIdDefault",
-		   "bSpIdDefault", "bPmacPresent", "defPmacHdr");
-	for (i = 0; i <= 15; i++) {
-		memset(&igCfg, 0x00, sizeof(igCfg));
-		igCfg.nPmacId = 0;
-		igCfg.nTxDmaChanId = i;
-		gsw_core_api((dp_gsw_cb)gsw_handle->gsw_pmac_ops.Pmac_Ig_CfgGet,
-			     gsw_handle, &igCfg);
-		seq_printf(s, "%15d %15d %15d %15d %15d %15d %15d %15d %15d ",
-			   igCfg.nTxDmaChanId, igCfg.bErrPktsDisc,
-			   igCfg.bPmapDefault, igCfg.bPmapEna,
-			   igCfg.bClassDefault, igCfg.bClassEna,
-			   igCfg.eSubId, igCfg.bSpIdDefault,
-			   igCfg.bPmacPresent);
-		for (j = 0; j < 8; j++)
-			seq_printf(s, "%02x", igCfg.defPmacHdr[j]);
-		seq_puts(s, "\n");
-	}
-
-	seq_puts(s, "GSWIP PMAC0 Egress PMAC Configure\n");
-	for (i = 0; i <= 3; i++) {
-		memset(&egCfg, 0x00, sizeof(egCfg));
-		egCfg.nPmacId = 0;
-		egCfg.nDestPortId	= i;
-		egCfg.nTrafficClass	= 0;
-		egCfg.nFlowIDMsb	= 0;
-		egCfg.bDecFlag		= 0;
-		egCfg.bEncFlag		= 0;
-		egCfg.bMpe1Flag		= 0;
-		egCfg.bMpe2Flag		= 0;
-		gsw_core_api((dp_gsw_cb)gsw_handle->gsw_pmac_ops.Pmac_Eg_CfgGet,
-			     gsw_handle, &egCfg);
-		seq_printf(s, " nRxDmaChanId  = %d\n", egCfg.nRxDmaChanId);
-		seq_printf(s, " bRemL2Hdr     = %d\n", egCfg.bRemL2Hdr);
-		seq_printf(s, " numBytesRem   = %d\n", egCfg.numBytesRem);
-		seq_printf(s, " bFcsEna       = %d\n", egCfg.bFcsEna);
-		seq_printf(s, " bPmacEna      = %d\n", egCfg.bPmacEna);
-		seq_printf(s, " nResDW1       = %d\n", egCfg.nResDW1);
-		seq_printf(s, " nRes1DW0      = %d\n", egCfg.nRes1DW0);
-		seq_printf(s, " nRes2DW0      = %d\n", egCfg.nRes2DW0);
-		seq_printf(s, " nDestPortId   = %d\n", egCfg.nDestPortId);
-		seq_printf(s, " nTrafficClass = %d\n", egCfg.nTrafficClass);
-		seq_printf(s, " nFlowIDMsb    = %d\n", egCfg.nFlowIDMsb);
-		seq_printf(s, " bDecFlag      = %d\n", egCfg.bDecFlag);
-		seq_printf(s, " bEncFlag      = %d\n", egCfg.bEncFlag);
-		seq_printf(s, " bMpe1Flag     = %d\n", egCfg.bMpe1Flag);
-		seq_printf(s, " bMpe2Flag     = %d\n", egCfg.bMpe2Flag);
-		seq_puts(s, "\n");
-	}
-
-	seq_puts(s, "\n\nGSWIP PMAC Ingress PMAC Configure\n");
-		seq_printf(s, "\n%15s %15s %15s %15s %15s %15s %15s %15s %15s %15s\n",
-			   "nTxDmaChanId", "bErrPktsDisc", "bPmapDefault",
-			   "bPmapEna", "bClassDefault", "bClassEna",
-			   "bSubIdDefault", "bSpIdDefault", "bPmacPresent",
-			   "defPmacHdr");
-	for (i = 0; i <= 15; i++) {
-		memset(&igCfg, 0x00, sizeof(igCfg));
-		igCfg.nPmacId = 1;
-		igCfg.nTxDmaChanId = i;
-		gsw_core_api((dp_gsw_cb)gsw_handle->gsw_pmac_ops.Pmac_Ig_CfgGet,
-			     gsw_handle, &igCfg);
-		seq_printf(s, "%15d %15d %15d %15d %15d %15d %15d %15d %15d ",
-			   igCfg.nTxDmaChanId, igCfg.bErrPktsDisc,
-			   igCfg.bPmapDefault, igCfg.bPmapEna,
-			   igCfg.bClassDefault, igCfg.bClassEna,
-			   igCfg.eSubId, igCfg.bSpIdDefault,
-			   igCfg.bPmacPresent);
-		for (j = 0; j < 8; j++)
-			seq_printf(s, "%02x", igCfg.defPmacHdr[j]);
-		seq_puts(s, "\n");
-	}
-	seq_puts(s, "\n\n\nGSWIP-R Egress PMAC Configure\n");
-	for (i = 0; i <= 15; i++) {
-		memset(&egCfg, 0x00, sizeof(egCfg));
-		egCfg.nPmacId = 1;
-		egCfg.nDestPortId	= i;
-		egCfg.nTrafficClass	= 0;
-		egCfg.nFlowIDMsb	= 0;
-		egCfg.bDecFlag		= 0;
-		egCfg.bEncFlag		= 0;
-		egCfg.bMpe1Flag		= 0;
-		egCfg.bMpe2Flag		= 0;
-
-		gsw_core_api((dp_gsw_cb)gsw_handle->gsw_pmac_ops.Pmac_Eg_CfgGet,
-			     gsw_handle, &egCfg);
-
-		seq_printf(s, " nRxDmaChanId  = %d\n", egCfg.nRxDmaChanId);
-		seq_printf(s, " bRemL2Hdr     = %d\n", egCfg.bRemL2Hdr);
-		seq_printf(s, " numBytesRem   = %d\n", egCfg.numBytesRem);
-		seq_printf(s, " bFcsEna       = %d\n", egCfg.bFcsEna);
-		seq_printf(s, " bPmacEna      = %d\n", egCfg.bPmacEna);
-		seq_printf(s, " nResDW1       = %d\n", egCfg.nResDW1);
-		seq_printf(s, " nRes1DW0      = %d\n", egCfg.nRes1DW0);
-		seq_printf(s, " nRes2DW0      = %d\n", egCfg.nRes2DW0);
-		seq_printf(s, " nDestPortId   = %d\n", egCfg.nDestPortId);
-		seq_printf(s, " nTrafficClass = %d\n", egCfg.nTrafficClass);
-		seq_printf(s, " nFlowIDMsb    = %d\n", egCfg.nFlowIDMsb);
-		seq_printf(s, " bDecFlag      = %d\n", egCfg.bDecFlag);
-		seq_printf(s, " bEncFlag      = %d\n", egCfg.bEncFlag);
-		seq_printf(s, " bMpe1Flag     = %d\n", egCfg.bMpe1Flag);
-		seq_printf(s, " bMpe2Flag     = %d\n", egCfg.bMpe2Flag);
-		seq_puts(s, "\n");
-	}
-	if (!seq_has_overflowed(s))
-		pos++;
-	if (pos == 1)
-		return -1;
-
-	return pos;
-}
-
 int proc_ep_dump(struct seq_file *s, int pos)
 {
 #if defined(NEW_CBM_API) && NEW_CBM_API
@@ -3523,29 +912,8 @@ static struct dp_proc_entry dp_proc_entries[] = {
 	{PROC_PARSER, proc_parser_read, NULL, NULL, proc_parser_write},
 	{PROC_RMON_PORTS, NULL, proc_gsw_port_rmon_dump,
 	 proc_gsw_rmon_port_start, proc_gsw_rmon_write},
-	{PROC_CHECKSUM, proc_checksum_read, NULL, NULL,
-		proc_checksum_write},
-#ifdef CONFIG_LTQ_DATAPATH_MIB
-	{PROC_MIB_TIMER, proc_mib_timer_read, NULL, NULL,
-		proc_mib_timer_write},
-	{PROC_MIB_INSIDE, NULL, proc_mib_inside_dump,
-		proc_mib_inside_start, proc_mib_inside_write},
-	{PROC_MIBPORT, NULL, proc_mib_port_dump,
-		proc_mib_port_start, proc_mib_port_write},
-	{PROC_MIBVAP, NULL, proc_mib_vap_dump, proc_mib_vap_start,
-		proc_mib_vap_write},
-#endif
-#ifdef CONFIG_LTQ_DATAPATH_CPUFREQ
-	{PROC_COC, proc_coc_read, NULL, NULL, proc_coc_write},
-#endif
-	{PROC_CBM_BUF_TEST, proc_cbm_buf_read, NULL, NULL,
-	 proc_cbm_buf_write},
 	{PROC_EP, NULL, proc_ep_dump, NULL, ep_port_write},
-	{PROC_PCE, NULL, proc_gsw_pce_dump, proc_gsw_pce_start, NULL},
-	{PROC_ROUTE, NULL, proc_gsw_route_dump, NULL, proc_gsw_route_write},
 	{PROC_DPORT, NULL, proc_dport_dump, NULL, NULL},
-	{PROC_PMAC, NULL, proc_gsw_pmac_dump, proc_gsw_pmac_start,
-	 proc_gsw_pmac_write},
 	{DP_PROC_CBMLOOKUP, NULL, lookup_dump30, lookup_start30,
 	 proc_get_qid_via_index30},
 	/*the last place holder */
diff --git a/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_proc.c b/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_proc.c
index 7fe934e48ee0..ca1c29fdd5e9 100644
--- a/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_proc.c
+++ b/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_proc.c
@@ -17,110 +17,14 @@
 
 #include "../datapath_swdev.h"
 
-#define DP_PROC_FILE_GSWIP_BP "bp"
-#define DP_PROC_FILE_SWDEV_BR "brctl"
-#define DP_PROC_SWDEV_FDB "fdb"
-#define DP_PROC_SWDEV_MAC "sw_mac"
 #define PROC_PARSER "parser"
-#define PROC_RMON_PORTS  "rmon"
-#define PROC_MIB_TIMER "mib_timer"
-#define PROC_MIB_INSIDE "mib_inside"
-#define PROC_MIBPORT "mib_port"
-#define PROC_MIBVAP "mib_vap"
-#define PROC_COMMON_CMD "cmd"
-#define PROC_COC "coc"
-#define PROC_PCE  "pce"
-#define PROC_PMAC  "pmac"
-#define PROC_EP "ep" /*EP/port ID info */
 #define DP_PROC_CBMLOOKUP "lookup"
 
 struct list_head fdb_tbl_list;
 
-static int proc_gsw_bp_dump(struct seq_file *s, int pos);
-static int proc_common_start(void);
-#if IS_ENABLED(CONFIG_LTQ_DATAPATH_SWITCHDEV)
-static int proc_swdev_brctl_dump(struct seq_file *s, int pos);
-static int proc_swdev_brctl_start(void);
-static ssize_t proc_swdev_brctl_write(struct file *,
-				      const char *, size_t, loff_t *);
-static int print_bridge(int fid, int inst);
-static ssize_t proc_swdev_fdb_write(struct file *,
-				    const char *, size_t, loff_t *);
-static void proc_swdev_fdb_read(struct seq_file *s);
-#endif
-static int proc_gsw_pce_dump(struct seq_file *s, int pos);
-static int proc_gsw_pce_start(void);
-
-#define MAX_GSW_L_PMAC_PORT  7
-#define MAX_GSW_R_PMAC_PORT  16
-static GSW_RMON_Port_cnt_t gsw_l_rmon_mib[MAX_GSW_L_PMAC_PORT];
-static GSW_RMON_Port_cnt_t gsw_r_rmon_mib[MAX_GSW_R_PMAC_PORT];
-static GSW_RMON_Redirect_cnt_t gswr_rmon_redirect;
-
-enum RMON_MIB_TYPE {
-	RX_GOOD_PKTS = 0,
-	RX_FILTER_PKTS,
-	RX_DROP_PKTS,
-	RX_OTHERS,
-
-	TX_GOOD_PKTS,
-	TX_ACM_PKTS,
-	TX_DROP_PKTS,
-	TX_OTHERS,
-
-	REDIRECT_MIB,
-	DP_DRV_MIB,
-
-	/*last entry */
-	RMON_MAX
-};
-
-static char f_q_mib_title_proc;
-static int tmp_inst;
-
-#define RMON_DASH_LINE 130
-void print_dash_line(struct seq_file *s)
-{
-	char buf[RMON_DASH_LINE + 4];
-
-	memset(buf, '-', RMON_DASH_LINE);
-	sprintf(buf + RMON_DASH_LINE, "\n");
-	seq_puts(s, buf);
-}
-
-#define GSW_PORT_RMON_PRINT(title, var)  do { \
-	seq_printf(s, \
-		   "%-14s%10s %12u %12u %12u %12u %12u %12u %12u\n", \
-		   title, "L(0-6)", \
-		   gsw_l_rmon_mib[0].var, gsw_l_rmon_mib[1].var, \
-		   gsw_l_rmon_mib[2].var, gsw_l_rmon_mib[3].var, \
-		   gsw_l_rmon_mib[4].var, gsw_l_rmon_mib[5].var, \
-		   gsw_l_rmon_mib[6].var); \
-	seq_printf(s, \
-		   "%-14s%10s %12u %12u %12u %12u %12u %12u %12u %12u\n", \
-		   title, "R(0-6,15)", \
-		   gsw_r_rmon_mib[0].var, gsw_r_rmon_mib[1].var, \
-		   gsw_r_rmon_mib[2].var, gsw_r_rmon_mib[3].var, \
-		   gsw_r_rmon_mib[4].var, gsw_r_rmon_mib[5].var, \
-		   gsw_r_rmon_mib[6].var, gsw_r_rmon_mib[15].var); \
-	seq_printf(s, \
-		   "%-14s%10s %12u %12u %12u %12u %12u %12u %12u %12u\n", \
-		   title, "R(7-14)", \
-		   gsw_r_rmon_mib[7].var, gsw_r_rmon_mib[8].var, \
-		   gsw_r_rmon_mib[9].var, gsw_r_rmon_mib[10].var, \
-		   gsw_r_rmon_mib[11].var, gsw_r_rmon_mib[12].var, \
-		   gsw_r_rmon_mib[13].var, gsw_r_rmon_mib[14].var); \
-	print_dash_line(s); \
-	} while (0)
-
 static void proc_parser_read(struct seq_file *s);
 static ssize_t proc_parser_write(struct file *, const char *, size_t,
 				 loff_t *);
-static int proc_gsw_pce_dump(struct seq_file *s, int pos);
-static int proc_gsw_pce_start(void);
-static ssize_t proc_gsw_pmac_write(struct file *file, const char *buf,
-				   size_t count, loff_t *ppos);
-static int rmon_display_port_full;
 
 static void proc_parser_read(struct seq_file *s)
 {
@@ -327,1596 +231,6 @@ ssize_t proc_parser_write(struct file *file, const char *buf,
 	return count;
 }
 
-#define GSW_PORT_RMON64_PRINT(title, var)  do { \
-	seq_printf(s, "%-14s%10s %12u %12u %12u %12u %12u %12u %12u\n", \
-		   title "(H)", "L(0-6)", \
-		   high_10dec(gsw_l_rmon_mib[0].var), \
-		   high_10dec(gsw_l_rmon_mib[1].var), \
-		   high_10dec(gsw_l_rmon_mib[2].var),  \
-		   high_10dec(gsw_l_rmon_mib[3].var), \
-		   high_10dec(gsw_l_rmon_mib[4].var),  \
-		   high_10dec(gsw_l_rmon_mib[5].var), \
-		   high_10dec(gsw_l_rmon_mib[6].var)); \
-	seq_printf(s, "%-14s%10s %12u %12u %12u %12u %12u %12u %12u\n", \
-		   title "(L)", "L(0-6)", \
-		   low_10dec(gsw_l_rmon_mib[0].var), \
-		   low_10dec(gsw_l_rmon_mib[1].var), \
-		   low_10dec(gsw_l_rmon_mib[2].var), \
-		   low_10dec(gsw_l_rmon_mib[3].var), \
-		   low_10dec(gsw_l_rmon_mib[4].var), \
-		   low_10dec(gsw_l_rmon_mib[5].var), \
-		   low_10dec(gsw_l_rmon_mib[6].var)); \
-	seq_printf(s, "%-14s%10s %12u %12u %12u %12u %12u %12u %12u %12u\n", \
-		   title "(H)", "R(0-6,15)", \
-		   high_10dec(gsw_r_rmon_mib[0].var), \
-		   high_10dec(gsw_r_rmon_mib[1].var), \
-		   high_10dec(gsw_r_rmon_mib[2].var), \
-		   high_10dec(gsw_r_rmon_mib[3].var), \
-		   high_10dec(gsw_r_rmon_mib[4].var), \
-		   high_10dec(gsw_r_rmon_mib[5].var), \
-		   high_10dec(gsw_r_rmon_mib[6].var), \
-		   high_10dec(gsw_r_rmon_mib[15].var)); \
-	seq_printf(s, "%-14s%10s %12u %12u %12u %12u %12u %12u %12u %12u\n", \
-		   title "(L)", "R(0-6,15)", \
-		   low_10dec(gsw_r_rmon_mib[0].var), \
-		   low_10dec(gsw_r_rmon_mib[1].var), \
-		   low_10dec(gsw_r_rmon_mib[2].var), \
-		   low_10dec(gsw_r_rmon_mib[3].var), \
-		   low_10dec(gsw_r_rmon_mib[4].var), \
-		   low_10dec(gsw_r_rmon_mib[5].var), \
-		   low_10dec(gsw_r_rmon_mib[6].var), \
-		   low_10dec(gsw_r_rmon_mib[15].var)); \
-	seq_printf(s, "%-14s%10s %12u %12u %12u %12u %12u %12u %12u %12u\n", \
-		   title "(H)", "R(7-14)", \
-		   high_10dec(gsw_r_rmon_mib[7].var), \
-		   high_10dec(gsw_r_rmon_mib[8].var), \
-		   high_10dec(gsw_r_rmon_mib[9].var),  \
-		   high_10dec(gsw_r_rmon_mib[10].var), \
-		   high_10dec(gsw_r_rmon_mib[11].var), \
-		   high_10dec(gsw_r_rmon_mib[12].var), \
-		   high_10dec(gsw_r_rmon_mib[13].var), \
-		   high_10dec(gsw_r_rmon_mib[14].var)); \
-	seq_printf(s, \
-		   "%-14s%10s %12u %12u %12u %12u %12u %12u %12u %12u\n", \
-		   title "(L)", "R(7-14)", \
-		   low_10dec(gsw_r_rmon_mib[7].var), \
-		   low_10dec(gsw_r_rmon_mib[8].var), \
-		   low_10dec(gsw_r_rmon_mib[9].var), \
-		   low_10dec(gsw_r_rmon_mib[10].var), \
-		   low_10dec(gsw_r_rmon_mib[11].var), \
-		   low_10dec(gsw_r_rmon_mib[12].var), \
-		   low_10dec(gsw_r_rmon_mib[13].var), \
-		   low_10dec(gsw_r_rmon_mib[14].var)); \
-	print_dash_line(s); \
-	} while (0)
-
-typedef int (*ingress_pmac_set_callback_t) (dp_pmac_cfg_t *pmac_cfg,
-					    u32 value);
-typedef int (*egress_pmac_set_callback_t) (dp_pmac_cfg_t *pmac_cfg,
-					   u32 value);
-struct ingress_pmac_entry {
-	char *name;
-	ingress_pmac_set_callback_t ingress_callback;
-};
-
-struct egress_pmac_entry {
-	char *name;
-	egress_pmac_set_callback_t egress_callback;
-};
-
-static int ingress_err_disc_set(dp_pmac_cfg_t *pmac_cfg, u32 value)
-{
-	pmac_cfg->ig_pmac.err_disc = value;
-	pmac_cfg->ig_pmac_flags = IG_PMAC_F_ERR_DISC;
-	return 0;
-}
-
-static int ingress_pmac_set(dp_pmac_cfg_t *pmac_cfg, u32 value)
-{
-	pmac_cfg->ig_pmac.pmac = value;
-	pmac_cfg->ig_pmac_flags = IG_PMAC_F_PRESENT;
-	return 0;
-}
-
-static int ingress_pmac_pmap_set(dp_pmac_cfg_t *pmac_cfg, u32 value)
-{
-	pmac_cfg->ig_pmac.def_pmac_pmap = value;
-	pmac_cfg->ig_pmac_flags = IG_PMAC_F_PMAP;
-	return 0;
-}
-
-static int ingress_pmac_en_pmap_set(dp_pmac_cfg_t *pmac_cfg, u32 value)
-{
-	pmac_cfg->ig_pmac.def_pmac_en_pmap = value;
-	pmac_cfg->ig_pmac_flags = IG_PMAC_F_PMAPENA;
-	return 0;
-}
-
-static int ingress_pmac_tc_set(dp_pmac_cfg_t *pmac_cfg, u32 value)
-{
-	pmac_cfg->ig_pmac.def_pmac_tc = value;
-	pmac_cfg->ig_pmac_flags = IG_PMAC_F_CLASS;
-	return 0;
-}
-
-static int ingress_pmac_en_tc_set(dp_pmac_cfg_t *pmac_cfg, u32 value)
-{
-	pmac_cfg->ig_pmac.def_pmac_en_tc = value;
-	pmac_cfg->ig_pmac_flags = IG_PMAC_F_CLASSENA;
-	return 0;
-}
-
-static int ingress_pmac_subifid_set(dp_pmac_cfg_t *pmac_cfg, u32 value)
-{
-	pmac_cfg->ig_pmac.def_pmac_subifid = value;
-	pmac_cfg->ig_pmac_flags = IG_PMAC_F_SUBIF;
-	return 0;
-}
-
-static int ingress_pmac_srcport_set(dp_pmac_cfg_t *pmac_cfg, u32 value)
-{
-	pmac_cfg->ig_pmac.def_pmac_src_port = value;
-	pmac_cfg->ig_pmac_flags = IG_PMAC_F_SPID;
-	return 0;
-}
-
-static int ingress_pmac_hdr1_set(dp_pmac_cfg_t *pmac_cfg, u32 value)
-{
-	u8 hdr;
-
-	hdr = (u8)value;
-	pmac_cfg->ig_pmac.def_pmac_hdr[0] = hdr;
-	pmac_cfg->ig_pmac_flags = IG_PMAC_F_PMACHDR1;
-	return 0;
-}
-
-static int ingress_pmac_hdr2_set(dp_pmac_cfg_t *pmac_cfg, u32 value)
-{
-	u8 hdr;
-
-	hdr = (u8)value;
-	pmac_cfg->ig_pmac.def_pmac_hdr[1] = hdr;
-	pmac_cfg->ig_pmac_flags = IG_PMAC_F_PMACHDR2;
-	return 0;
-}
-
-static int ingress_pmac_hdr3_set(dp_pmac_cfg_t *pmac_cfg, u32 value)
-{
-	u8 hdr;
-
-	hdr = (u8)value;
-	pmac_cfg->ig_pmac.def_pmac_hdr[2] = hdr;
-	pmac_cfg->ig_pmac_flags = IG_PMAC_F_PMACHDR3;
-	return 0;
-}
-
-static int ingress_pmac_hdr4_set(dp_pmac_cfg_t *pmac_cfg, u32 value)
-{
-	u8 hdr;
-
-	hdr = (u8)value;
-	pmac_cfg->ig_pmac.def_pmac_hdr[3] = hdr;
-	pmac_cfg->ig_pmac_flags = IG_PMAC_F_PMACHDR4;
-	return 0;
-}
-
-static int ingress_pmac_hdr5_set(dp_pmac_cfg_t *pmac_cfg, u32 value)
-{
-	u8 hdr;
-
-	hdr = (u8)value;
-	pmac_cfg->ig_pmac.def_pmac_hdr[4] = hdr;
-	pmac_cfg->ig_pmac_flags = IG_PMAC_F_PMACHDR5;
-	return 0;
-}
-
-static int ingress_pmac_hdr6_set(dp_pmac_cfg_t *pmac_cfg, u32 value)
-{
-	u8 hdr;
-
-	hdr = (u8)value;
-	pmac_cfg->ig_pmac.def_pmac_hdr[5] = hdr;
-	pmac_cfg->ig_pmac_flags = IG_PMAC_F_PMACHDR6;
-	return 0;
-}
-
-static int ingress_pmac_hdr7_set(dp_pmac_cfg_t *pmac_cfg, u32 value)
-{
-	u8 hdr;
-
-	hdr = (u8)value;
-	pmac_cfg->ig_pmac.def_pmac_hdr[6] = hdr;
-	pmac_cfg->ig_pmac_flags = IG_PMAC_F_PMACHDR7;
-	return 0;
-}
-
-static int ingress_pmac_hdr8_set(dp_pmac_cfg_t *pmac_cfg, u32 value)
-{
-	u8 hdr;
-
-	hdr = (u8)value;
-	pmac_cfg->ig_pmac.def_pmac_hdr[7] = hdr;
-	pmac_cfg->ig_pmac_flags = IG_PMAC_F_PMACHDR8;
-	return 0;
-}
-
-static int egress_fcs_set(dp_pmac_cfg_t *pmac_cfg, u32 value)
-{
-	pmac_cfg->eg_pmac.fcs = value;
-	pmac_cfg->eg_pmac_flags = EG_PMAC_F_FCS;
-	return 0;
-}
-
-static int egress_l2hdr_bytes_set(dp_pmac_cfg_t *pmac_cfg, u32 value)
-{
-	pmac_cfg->eg_pmac.num_l2hdr_bytes_rm = value;
-	pmac_cfg->eg_pmac_flags = EG_PMAC_F_L2HDR_RM;
-	return 0;
-}
-
-static int egress_rx_dma_set(dp_pmac_cfg_t *pmac_cfg, u32 value)
-{
-	pmac_cfg->eg_pmac.rx_dma_chan = value;
-	pmac_cfg->eg_pmac_flags = EG_PMAC_F_RXID;
-	return 0;
-}
-
-static int egress_pmac_set(dp_pmac_cfg_t *pmac_cfg, u32 value)
-{
-	pmac_cfg->eg_pmac.pmac = value;
-	pmac_cfg->eg_pmac_flags = EG_PMAC_F_PMAC;
-	return 0;
-}
-
-static int egress_res_dw_set(dp_pmac_cfg_t *pmac_cfg, u32 value)
-{
-	pmac_cfg->eg_pmac.res_dw1 = value;
-	pmac_cfg->eg_pmac_flags = EG_PMAC_F_RESDW1;
-	return 0;
-}
-
-static int egress_res1_dw_set(dp_pmac_cfg_t *pmac_cfg, u32 value)
-{
-	pmac_cfg->eg_pmac.res1_dw0 = value;
-	pmac_cfg->eg_pmac_flags = EG_PMAC_F_RES1DW0;
-	return 0;
-}
-
-static int egress_res2_dw_set(dp_pmac_cfg_t *pmac_cfg, u32 value)
-{
-	pmac_cfg->eg_pmac.res2_dw0 = value;
-	pmac_cfg->eg_pmac_flags = EG_PMAC_F_RES2DW0;
-	return 0;
-}
-
-static int egress_tc_ena_set(dp_pmac_cfg_t *pmac_cfg, u32 value)
-{
-	pmac_cfg->eg_pmac.tc_enable = value;
-	pmac_cfg->eg_pmac_flags = EG_PMAC_F_TCENA;
-	return 0;
-}
-
-static int egress_dec_flag_set(dp_pmac_cfg_t *pmac_cfg, u32 value)
-{
-	pmac_cfg->eg_pmac.dec_flag = value;
-	pmac_cfg->eg_pmac_flags = EG_PMAC_F_DECFLG;
-	return 0;
-}
-
-static int egress_enc_flag_set(dp_pmac_cfg_t *pmac_cfg, u32 value)
-{
-	pmac_cfg->eg_pmac.enc_flag = value;
-	pmac_cfg->eg_pmac_flags = EG_PMAC_F_ENCFLG;
-	return 0;
-}
-
-static int egress_mpe1_flag_set(dp_pmac_cfg_t *pmac_cfg, u32 value)
-{
-	pmac_cfg->eg_pmac.mpe1_flag = value;
-	pmac_cfg->eg_pmac_flags = EG_PMAC_F_MPE1FLG;
-	return 0;
-}
-
-static int egress_mpe2_flag_set(dp_pmac_cfg_t *pmac_cfg, u32 value)
-{
-	pmac_cfg->eg_pmac.mpe2_flag = value;
-	pmac_cfg->eg_pmac_flags = EG_PMAC_F_MPE2FLG;
-	return 0;
-}
-
-static struct ingress_pmac_entry ingress_entries[] = {
-	{"errdisc", ingress_err_disc_set},
-	{"pmac", ingress_pmac_set},
-	{"pmac_pmap", ingress_pmac_pmap_set},
-	{"pmac_en_pmap", ingress_pmac_en_pmap_set},
-	{"pmac_tc", ingress_pmac_tc_set},
-	{"pmac_en_tc", ingress_pmac_en_tc_set},
-	{"pmac_subifid", ingress_pmac_subifid_set},
-	{"pmac_srcport", ingress_pmac_srcport_set},
-	{"pmac_hdr1", ingress_pmac_hdr1_set},
-	{"pmac_hdr2", ingress_pmac_hdr2_set},
-	{"pmac_hdr3", ingress_pmac_hdr3_set},
-	{"pmac_hdr4", ingress_pmac_hdr4_set},
-	{"pmac_hdr5", ingress_pmac_hdr5_set},
-	{"pmac_hdr6", ingress_pmac_hdr6_set},
-	{"pmac_hdr7", ingress_pmac_hdr7_set},
-	{"pmac_hdr8", ingress_pmac_hdr8_set},
-	{NULL, NULL}
-};
-
-static struct egress_pmac_entry egress_entries[] = {
-	{"rx_dmachan", egress_rx_dma_set},
-	{"rm_l2hdr", egress_l2hdr_bytes_set},
-	{"fcs", egress_fcs_set},
-	{"pmac", egress_pmac_set},
-	{"res_dw1", egress_res_dw_set},
-	{"res1_dw0", egress_res1_dw_set},
-	{"res2_dw0", egress_res2_dw_set},
-	{"tc_enable", egress_tc_ena_set},
-	{"dec_flag", egress_dec_flag_set},
-	{"enc_flag", egress_enc_flag_set},
-	{"mpe1_flag", egress_mpe1_flag_set},
-	{"mpe2_flag", egress_mpe2_flag_set},
-	{NULL, NULL}
-};
-
-static int proc_gsw_port_rmon_dump(struct seq_file *s, int pos)
-{
-	int i;
-	GSW_return_t ret = 0;
-	struct core_ops *gsw_handle;
-	//char flag_buf[20];
-
-	if (pos == 0) {
-		memset(gsw_r_rmon_mib, 0, sizeof(gsw_r_rmon_mib));
-		memset(gsw_l_rmon_mib, 0, sizeof(gsw_l_rmon_mib));
-
-		/*read gswip-r rmon counter */
-		gsw_handle = dp_port_prop[0].ops[GSWIP_R];
-
-		for (i = 0; i < ARRAY_SIZE(gsw_r_rmon_mib); i++) {
-			gsw_r_rmon_mib[i].nPortId = i;
-			ret = gsw_core_api((dp_gsw_cb)gsw_handle
-					   ->gsw_rmon_ops.RMON_Port_Get,
-					   gsw_handle, &gsw_r_rmon_mib[i]);
-
-			if (ret != GSW_statusOk) {
-				PR_ERR("RMON_PORT_GET fail for Port %d\n", i);
-				return -1;
-			}
-		}
-
-		/*read pmac rmon redirect mib */
-		memset(&gswr_rmon_redirect, 0, sizeof(gswr_rmon_redirect));
-		ret = gsw_core_api((dp_gsw_cb)gsw_handle
-				   ->gsw_rmon_ops.RMON_Redirect_Get, gsw_handle,
-				   &gswr_rmon_redirect);
-
-		if (ret != GSW_statusOk) {
-			PR_ERR("GSW_RMON_REDIRECT_GET fail for Port %d\n", i);
-			return -1;
-		}
-
-		/*read gswip-l rmon counter */
-		gsw_handle = dp_port_prop[0].ops[GSWIP_L];
-		for (i = 0; i < ARRAY_SIZE(gsw_l_rmon_mib); i++) {
-			gsw_l_rmon_mib[i].nPortId = i;
-			ret = gsw_core_api((dp_gsw_cb)gsw_handle
-					   ->gsw_rmon_ops.RMON_Port_Get,
-					   gsw_handle,
-					   &gsw_l_rmon_mib[i]);
-
-			if (ret != GSW_statusOk) {
-				PR_ERR("RMON_PORT_GET fail for Port %d\n", i);
-				return -1;
-			}
-		}
-
-		seq_printf(s, "%-24s %12u %12u %12u %12u %12u %12u %12u\n",
-			   "GSWIP-L", 0, 1, 2, 3, 4, 5, 6);
-		seq_printf(s, "%-24s %12u %12u %12u %12u %12u %12u %12u %12u\n",
-			   "GSWIP-R(Fixed)", 0, 1, 2, 3, 4, 5, 6, 15);
-		seq_printf(s, "%-24s %12u %12u %12u %12u %12u %12u %12u %12u\n",
-			   "GSWIP-R(Dynamic)", 7, 8, 9, 10, 11, 12, 13, 14);
-		print_dash_line(s);
-	}
-
-	if (pos == RX_GOOD_PKTS) {
-		GSW_PORT_RMON_PRINT("RX_Good", nRxGoodPkts);
-	} else if (pos == RX_FILTER_PKTS) {
-		GSW_PORT_RMON_PRINT("RX_FILTER", nRxFilteredPkts);
-	} else if (pos == RX_DROP_PKTS) {
-		GSW_PORT_RMON_PRINT("RX_DROP", nRxDroppedPkts);
-	} else if (pos == RX_OTHERS) {
-		if (!rmon_display_port_full)
-			goto NEXT;
-
-		GSW_PORT_RMON_PRINT("RX_UNICAST", nRxUnicastPkts);
-		GSW_PORT_RMON_PRINT("RX_BROADCAST", nRxBroadcastPkts);
-		GSW_PORT_RMON_PRINT("RX_MULTICAST", nRxMulticastPkts);
-		GSW_PORT_RMON_PRINT("RX_FCS_ERR", nRxFCSErrorPkts);
-		GSW_PORT_RMON_PRINT("RX_UNDER_GOOD",
-				    nRxUnderSizeGoodPkts);
-		GSW_PORT_RMON_PRINT("RX_OVER_GOOD", nRxOversizeGoodPkts);
-		GSW_PORT_RMON_PRINT("RX_UNDER_ERR",
-				    nRxUnderSizeErrorPkts);
-		GSW_PORT_RMON_PRINT("RX_OVER_ERR", nRxOversizeErrorPkts);
-		GSW_PORT_RMON_PRINT("RX_ALIGN_ERR", nRxAlignErrorPkts);
-		GSW_PORT_RMON_PRINT("RX_64B", nRx64BytePkts);
-		GSW_PORT_RMON_PRINT("RX_127B", nRx127BytePkts);
-		GSW_PORT_RMON_PRINT("RX_255B", nRx255BytePkts);
-		GSW_PORT_RMON_PRINT("RX_511B", nRx511BytePkts);
-		GSW_PORT_RMON_PRINT("RX_1023B", nRx1023BytePkts);
-		GSW_PORT_RMON_PRINT("RX_MAXB", nRxMaxBytePkts);
-		GSW_PORT_RMON64_PRINT("RX_BAD_b", nRxBadBytes);
-	} else if (pos == TX_GOOD_PKTS) {
-		GSW_PORT_RMON_PRINT("TX_Good", nTxGoodPkts);
-	} else if (pos == TX_ACM_PKTS) {
-		GSW_PORT_RMON_PRINT("TX_ACM_DROP", nTxAcmDroppedPkts);
-	} else if (pos == TX_DROP_PKTS) {
-		GSW_PORT_RMON_PRINT("TX_Drop", nTxDroppedPkts);
-	} else if (pos == TX_OTHERS) {
-		if (!rmon_display_port_full)
-			goto NEXT;
-
-		GSW_PORT_RMON_PRINT("TX_UNICAST", nTxUnicastPkts);
-		GSW_PORT_RMON_PRINT("TX_BROADAST", nTxBroadcastPkts);
-		GSW_PORT_RMON_PRINT("TX_MULTICAST", nTxMulticastPkts);
-		GSW_PORT_RMON_PRINT("TX_SINGLE_COLL",
-				    nTxSingleCollCount);
-		GSW_PORT_RMON_PRINT("TX_MULT_COLL", nTxMultCollCount);
-		GSW_PORT_RMON_PRINT("TX_LATE_COLL", nTxLateCollCount);
-		GSW_PORT_RMON_PRINT("TX_EXCESS_COLL",
-				    nTxExcessCollCount);
-		GSW_PORT_RMON_PRINT("TX_COLL", nTxCollCount);
-		GSW_PORT_RMON_PRINT("TX_PAUSET", nTxPauseCount);
-		GSW_PORT_RMON_PRINT("TX_64B", nTx64BytePkts);
-		GSW_PORT_RMON_PRINT("TX_127B", nTx127BytePkts);
-		GSW_PORT_RMON_PRINT("TX_255B", nTx255BytePkts);
-		GSW_PORT_RMON_PRINT("TX_511B", nTx511BytePkts);
-		GSW_PORT_RMON_PRINT("TX_1023B", nTx1023BytePkts);
-		GSW_PORT_RMON_PRINT("TX_MAX_B", nTxMaxBytePkts);
-		GSW_PORT_RMON_PRINT("TX_UNICAST", nTxUnicastPkts);
-		GSW_PORT_RMON_PRINT("TX_UNICAST", nTxUnicastPkts);
-		GSW_PORT_RMON_PRINT("TX_UNICAST", nTxUnicastPkts);
-		GSW_PORT_RMON64_PRINT("TX_GOOD_b", nTxGoodBytes);
-
-	} else if (pos == REDIRECT_MIB) {
-		/*GSWIP-R PMAC Redirect conter */
-		seq_printf(s, "%-24s %12s %12s %12s %12s\n",
-			   "GSW-R Redirect", "Rx_Pkts", "Tx_Pkts",
-			   "Rx_DropsPkts", "Tx_DropsPkts");
-
-		seq_printf(s, "%-24s %12d %12d %12d %12d\n", "",
-			   gswr_rmon_redirect.nRxPktsCount,
-			   gswr_rmon_redirect.nTxPktsCount,
-			   gswr_rmon_redirect.nRxDiscPktsCount,
-			   gswr_rmon_redirect.nTxDiscPktsCount);
-		print_dash_line(s);
-	} else if (pos == DP_DRV_MIB) {
-		u64 eth0_rx = 0, eth0_tx = 0;
-		u64 eth1_rx = 0, eth1_tx = 0;
-		u64 dsl_rx = 0, dsl_tx = 0;
-		u64 other_rx = 0, other_tx = 0;
-		int i, j;
-		struct pmac_port_info *port;
-
-		for (i = 1; i < PMAC_MAX_NUM; i++) {
-			port = get_port_info(tmp_inst, i);
-
-			if (!port)
-				continue;
-
-			if (i < 6) {
-				for (j = 0; j < 16; j++) {
-					eth0_rx +=
-					    STATS_GET(port->subif_info[j].mib.
-					    rx_fn_rxif_pkt);
-					eth0_rx +=
-					    STATS_GET(port->subif_info[j].mib.
-					    rx_fn_txif_pkt);
-					eth0_tx +=
-					    STATS_GET(port->subif_info[j].mib.
-					    tx_cbm_pkt);
-					eth0_tx +=
-					    STATS_GET(port->subif_info[j].mib.
-					    tx_tso_pkt);
-				}
-			} else if (i == 15) {
-				for (j = 0; j < 16; j++) {
-					eth1_rx +=
-					    STATS_GET(port->subif_info[j].mib.
-					    rx_fn_rxif_pkt);
-					eth1_rx +=
-					    STATS_GET(port->subif_info[j].mib.
-					    rx_fn_txif_pkt);
-					eth1_tx +=
-					    STATS_GET(port->subif_info[j].mib.
-					    tx_cbm_pkt);
-					eth1_tx +=
-					    STATS_GET(port->subif_info[j].mib.
-					    tx_tso_pkt);
-				}
-			} else if (port->alloc_flags & DP_F_FAST_DSL) {
-				for (j = 0; j < 16; j++) {
-					dsl_rx +=
-					    STATS_GET(port->subif_info[j].mib.
-					    rx_fn_rxif_pkt);
-					dsl_rx +=
-					    STATS_GET(port->subif_info[j].mib.
-					    rx_fn_txif_pkt);
-					dsl_tx +=
-					    STATS_GET(port->subif_info[j].mib.
-					    tx_cbm_pkt);
-					dsl_tx +=
-					    STATS_GET(port->subif_info[j].mib.
-					    tx_tso_pkt);
-				}
-			} else {
-				for (j = 0; j < 16; j++) {
-					other_rx +=
-					    STATS_GET(port->subif_info[j].mib.
-					    rx_fn_rxif_pkt);
-					other_rx +=
-					    STATS_GET(port->subif_info[j].mib.
-					    rx_fn_txif_pkt);
-					other_tx +=
-					    STATS_GET(port->subif_info[j].mib.
-					    tx_cbm_pkt);
-					other_tx +=
-					    STATS_GET(port->subif_info[j].mib.
-					    tx_tso_pkt);
-				}
-			}
-		}
-
-		seq_printf(s, "%-15s %22s %22s %22s %22s\n", "DP Drv Mib",
-			   "ETH_LAN", "ETH_WAN", "DSL", "Others");
-
-		seq_printf(s, "%15s %22llu %22llu %22llu %22llu\n",
-			   "Rx_Pkts", eth0_rx, eth1_rx, dsl_rx, other_rx);
-		seq_printf(s, "%15s %22llu %22llu %22llu %22llu\n",
-			   "Tx_Pkts", eth0_tx, eth1_tx, dsl_tx, other_tx);
-		print_dash_line(s);
-	} else {
-		goto NEXT;
-	}
- NEXT:
-	pos++;
-
-	if (pos >= RMON_MAX)
-		return -1;
-
-	return pos;
-}
-
-static int proc_gsw_rmon_port_start(void)
-{
-	f_q_mib_title_proc = 0;
-	tmp_inst = 0;
-	return 0;
-}
-
-static ssize_t proc_gsw_rmon_write(struct file *file, const char *buf,
-				   size_t count, loff_t *ppos)
-{
-	int len;
-	char str[64];
-	int num;
-	char *param_list[10];
-
-	len = (sizeof(str) > count) ? count : sizeof(str) - 1;
-	len -= copy_from_user(str, buf, len);
-	str[len] = 0;
-	num = dp_split_buffer(str, param_list, ARRAY_SIZE(param_list));
-
-	if (num < 1)
-		goto help;
-
-	if (dp_strncmpi(param_list[0], "clear", 5) == 0 ||
-	    dp_strncmpi(param_list[0], "c", 1) == 0 ||
-	    dp_strncmpi(param_list[0], "rest", 4) == 0 ||
-	    dp_strncmpi(param_list[0], "r", 1) == 0) {
-		dp_sys_mib_reset_31(0);
-		goto EXIT_OK;
-	}
-	if (dp_strncmpi(param_list[0], "RMON", 4) == 0) {
-		if (dp_strncmpi(param_list[1], "Full", 4) == 0) {
-			rmon_display_port_full = 1;
-			goto EXIT_OK;
-		} else if (dp_strncmpi(param_list[1], "Basic", 5) == 0) {
-			rmon_display_port_full = 0;
-			goto EXIT_OK;
-		}
-	}
-
-	/*unknown command */
-	goto help;
-
-EXIT_OK:
-	return count;
-
-help:
-	PR_INFO("usage: echo clear > /proc/dp/rmon\n");
-	PR_INFO("usage: echo RMON Full > /proc/dp/rmon\n");
-	PR_INFO("usage: echo RMON Basic > /proc/dp/rmon\n");
-	return count;
-}
-
-/*in bytes*/
-int get_q_qocc(int inst, int qid, u32 *c)
-{
-	if (c)
-		*c = readl((void *)(0xb8820E00 + qid * 4));
-	return 0;
-}
-
-/*in packet
- *total accept(green/yellow ?)
- */
-int get_q_mib(int inst, int qid,
-	      u32 *total_accept,
-	      u32 *total_drop,
-	      u32 *red_drop)
-{
-	/*indirect access */
-	while (readl((void *)(0xb88200c4)) & 1)/*busy and wait*/
-		;
-	writel(qid, (void *)0xb88200bc);
-
-	while (readl((void *)(0xb88200c4)) & 1) /*busy wait*/
-		;
-	writel(0, (void *)0xb88200c0);
-
-	while (readl((void *)(0xb88200c4)) & 1) /*busy wait*/
-		;
-	if (total_accept)
-		*total_accept = readl((void *)(0xb88200ec));
-	if (total_drop)
-		*total_drop = readl((void *)(0xb88200ec + 4));
-	if (red_drop)
-		*red_drop = readl((void *)(0xb88200ec + 8));
-	return 0;
-}
-
-/*in bytes*/
-int get_p_mib(int inst, int pid,
-	      u32 *green /*green bytes*/,
-	      u32 *yellow/*yellow bytes*/)
-{
-	if (green)
-		*green = readl((void *)0xb8820400 + pid * 4);
-	if (yellow)
-		*yellow = readl((void *)0xb8820200 + pid * 4);
-	return 0;
-}
-
-#define PRINT_Q_MIB(i, c, x, y, z)\
-	PR_INFO("Q[%03d]:0x%08x 0x%08x 0x%08x 0x%08x\n",\
-		 i, c, x, y, z)\
-
-static int proc_gsw_pce_dump(struct seq_file *s, int pos)
-{
-	struct core_ops *gsw_handle;
-	GSW_PCE_rule_t *rule;
-	int ret = 0, i;
-
-	rule = kmalloc(sizeof(GSW_PCE_rule_t) + 1,
-		       GFP_KERNEL);
-	if (!rule) {
-		pos = -1;
-		return pos;
-	}
-
-	/*read gswip-r rmon counter */
-	gsw_handle = dp_port_prop[0].ops[1];
-	rule->pattern.nIndex = pos;
-	ret = gsw_core_api((dp_gsw_cb)gsw_handle->gsw_tflow_ops
-			   .TFLOW_PceRuleRead, gsw_handle, rule);
-	if (ret != GSW_statusOk) {
-		pos = -1;
-		return pos;
-	}
-	if (!rule->pattern.bEnable)
-		goto EXIT;
-
-	seq_printf(s, "Pattern[%d]:-----\n", rule->pattern.nIndex);
-	if (rule->pattern.bPortIdEnable) {
-		seq_printf(s, "  bPortIdEnable           =   %d\n",
-			   rule->pattern.bPortIdEnable);
-		seq_printf(s, "  nPortId                 =   %d\n",
-			   rule->pattern.nPortId);
-		seq_printf(s, "  bPortId_Exclude         =   %d\n",
-			   rule->pattern.bPortId_Exclude);
-	}
-	if (rule->pattern.bSubIfIdEnable) {
-		seq_printf(s, "  bSubIfIdEnable          =   %d\n",
-			   rule->pattern.bSubIfIdEnable);
-		seq_printf(s, "  nSubIfId                =   %d\n",
-			   rule->pattern.nSubIfId);
-		seq_printf(s, "  bSubIfId_Exclude        =   %d\n",
-			   rule->pattern.bSubIfId_Exclude);
-	}
-	if (rule->pattern.bDSCP_Enable) {
-		seq_printf(s, "  bDSCP_Enable            =   %d\n",
-			   rule->pattern.bDSCP_Enable);
-		seq_printf(s, "  nDSCP                   =   %d\n",
-			   rule->pattern.nDSCP);
-		seq_printf(s, "  bDSCP_Exclude           =   %d\n",
-			   rule->pattern.bDSCP_Exclude);
-	}
-	if (rule->pattern.bInner_DSCP_Enable) {
-		seq_printf(s, "  bInner_DSCP_Enable      =   %d\n",
-			   rule->pattern.bInner_DSCP_Enable);
-		seq_printf(s, "  nInnerDSCP              =   %d\n",
-			   rule->pattern.nInnerDSCP);
-		seq_printf(s, "  bInnerDSCP_Exclude      =   %d\n",
-			   rule->pattern.bInnerDSCP_Exclude);
-	}
-	if (rule->pattern.bPCP_Enable) {
-		seq_printf(s, "  bPCP_Enable             =   %d\n",
-			   rule->pattern.bPCP_Enable);
-		seq_printf(s, "  nPCP                    =   %d\n",
-			   rule->pattern.nPCP);
-		seq_printf(s, "  bCTAG_PCP_DEI_Exclude   =   %d\n",
-			   rule->pattern.bCTAG_PCP_DEI_Exclude);
-	}
-	if (rule->pattern.bSTAG_PCP_DEI_Enable) {
-		seq_printf(s, "  bSTAG_PCP_DEI_Enable    =   %d\n",
-			   rule->pattern.bSTAG_PCP_DEI_Enable);
-		seq_printf(s, "  nSTAG_PCP_DEI           =   %d\n",
-			   rule->pattern.nSTAG_PCP_DEI);
-		seq_printf(s, "  bSTAG_PCP_DEI_Exclude   =   %d\n",
-			   rule->pattern.bSTAG_PCP_DEI_Exclude);
-	}
-	if (rule->pattern.bPktLngEnable) {
-		seq_printf(s, "  bPktLngEnable           =   %d\n",
-			   rule->pattern.bPktLngEnable);
-		seq_printf(s, "  nPktLng                 =   %d\n",
-			   rule->pattern.nPktLng);
-		seq_printf(s, "  nPktLngRange            =   %d\n",
-			   rule->pattern.nPktLngRange);
-		seq_printf(s, "  bPktLng_Exclude         =   %d\n",
-			   rule->pattern.bPktLng_Exclude);
-	}
-	if (rule->pattern.bMAC_DstEnable) {
-		seq_printf(s, "  bMAC_DstEnable          =   %d\n",
-			   rule->pattern.bMAC_DstEnable);
-		seq_printf(s,
-			   "  nMAC_Dst                =   %02x:%2x:%2x:%2x:%2x:%2x\n",
-			   rule->pattern.nMAC_Dst[0],
-			   rule->pattern.nMAC_Dst[1],
-			   rule->pattern.nMAC_Dst[2],
-			   rule->pattern.nMAC_Dst[3],
-			   rule->pattern.nMAC_Dst[4],
-			   rule->pattern.nMAC_Dst[5]);
-		seq_printf(s, "  nMAC_DstMask            =   %x\n",
-			   rule->pattern.nMAC_DstMask);
-		seq_printf(s, "  bDstMAC_Exclude         =   %d\n",
-			   rule->pattern.bDstMAC_Exclude);
-	}
-	if (rule->pattern.bMAC_SrcEnable) {
-		seq_printf(s, "  bMAC_SrcEnable          =   %d\n",
-			   rule->pattern.bMAC_SrcEnable);
-		seq_printf(s,
-			   "  nMAC_Src                =   %02x:%2x:%2x:%2x:%2x:%2x\n",
-			   rule->pattern.nMAC_Src[0],
-			   rule->pattern.nMAC_Src[1],
-			   rule->pattern.nMAC_Src[2],
-			   rule->pattern.nMAC_Src[3],
-			   rule->pattern.nMAC_Src[4],
-			   rule->pattern.nMAC_Src[5]);
-		seq_printf(s, "  nMAC_SrcMask            =   %x\n",
-			   rule->pattern.nMAC_SrcMask);
-		seq_printf(s, "  bSrcMAC_Exclude         =   %d\n",
-			   rule->pattern.bSrcMAC_Exclude);
-	}
-	if (rule->pattern.bAppDataMSB_Enable) {
-		seq_printf(s, "  bAppDataMSB_Enable      =   %d\n",
-			   rule->pattern.bAppDataMSB_Enable);
-		seq_printf(s, "  nAppDataMSB             =   %x\n",
-			   rule->pattern.nAppDataMSB);
-		seq_printf(s, "  bAppMaskRangeMSB_Select =   %d\n",
-			   rule->pattern.bAppMaskRangeMSB_Select);
-		seq_printf(s, "  nAppMaskRangeMSB        =   %x\n",
-			   rule->pattern.nAppMaskRangeMSB);
-		seq_printf(s, "  bAppMSB_Exclude         =   %d\n",
-			   rule->pattern.bAppMSB_Exclude);
-	}
-	if (rule->pattern.bAppDataLSB_Enable) {
-		seq_printf(s, "  bAppDataLSB_Enable      =   %d\n",
-			   rule->pattern.bAppDataLSB_Enable);
-		seq_printf(s, "  nAppDataLSB             =   %x\n",
-			   rule->pattern.nAppDataLSB);
-		seq_printf(s, "  bAppMaskRangeLSB_Select =   %d\n",
-			   rule->pattern.bAppMaskRangeLSB_Select);
-		seq_printf(s, "  nAppMaskRangeLSB        =   %x\n",
-			   rule->pattern.nAppMaskRangeLSB);
-		seq_printf(s, "  bAppLSB_Exclude         =   %d\n",
-			   rule->pattern.bAppLSB_Exclude);
-	}
-	if (rule->pattern.eDstIP_Select) {
-		seq_printf(s, "  eDstIP_Select           =   %d\n",
-			   rule->pattern.eDstIP_Select);
-		seq_printf(s, "  nDstIP                  =   %08x ",
-			   rule->pattern.nDstIP.nIPv4);
-		if (rule->pattern.eDstIP_Select == 2)
-			for (i = 2; i < 8; i++)
-				seq_printf(s, "%04x ",
-					   rule->pattern.nDstIP.nIPv6[i]);
-		seq_puts(s, "\n");
-		seq_printf(s, "  nDstIP_Mask             =   %x\n",
-			   rule->pattern.nDstIP_Mask);
-		seq_printf(s, "  bDstIP_Exclude          =   %d\n",
-			   rule->pattern.bDstIP_Exclude);
-	}
-	if (rule->pattern.eInnerDstIP_Select) {
-		seq_printf(s, "  eInnerDstIP_Select      =   %d\n",
-			   rule->pattern.eInnerDstIP_Select);
-		seq_printf(s, "  nInnerDstIP             =   %x\n",
-			   rule->pattern.nInnerDstIP.nIPv4);
-		seq_printf(s, "  nInnerDstIP_Mask        =   %x\n",
-			   rule->pattern.nInnerDstIP_Mask);
-		seq_printf(s, "  bInnerDstIP_Exclude     =   %d\n",
-			   rule->pattern.bInnerDstIP_Exclude);
-	}
-	if (rule->pattern.eSrcIP_Select) {
-		seq_printf(s, "  eSrcIP_Select           =   %d\n",
-			   rule->pattern.eSrcIP_Select);
-		seq_printf(s, "  nSrcIP                  =   %x\n",
-			   rule->pattern.nSrcIP.nIPv4);
-		seq_printf(s, "  nSrcIP_Mask             =   %x\n",
-			   rule->pattern.nSrcIP_Mask);
-		seq_printf(s, "  bSrcIP_Exclude          =   %d\n",
-			   rule->pattern.bSrcIP_Exclude);
-	}
-	if (rule->pattern.eInnerSrcIP_Select) {
-		seq_printf(s, "  eInnerSrcIP_Select      =   %d\n",
-			   rule->pattern.eInnerSrcIP_Select);
-		seq_printf(s, "  nInnerSrcIP             =   %x\n",
-			   rule->pattern.nInnerSrcIP.nIPv4);
-		seq_printf(s, "  nInnerSrcIP_Mask        =   %x\n",
-			   rule->pattern.nInnerSrcIP_Mask);
-		seq_printf(s, "  bInnerSrcIP_Exclude     =   %d\n",
-			   rule->pattern.bInnerSrcIP_Exclude);
-	}
-	if (rule->pattern.bEtherTypeEnable) {
-		seq_printf(s, "  bEtherTypeEnable        =   %d\n",
-			   rule->pattern.bEtherTypeEnable);
-		seq_printf(s, "  nEtherType              =   %x\n",
-			   rule->pattern.nEtherType);
-		seq_printf(s, "  nEtherTypeMask          =   %x\n",
-			   rule->pattern.nEtherTypeMask);
-		seq_printf(s, "  bEtherType_Exclude      =   %d\n",
-			   rule->pattern.bEtherType_Exclude);
-	}
-	if (rule->pattern.bProtocolEnable) {
-		seq_printf(s, "  bProtocolEnable         =   %d\n",
-			   rule->pattern.bProtocolEnable);
-		seq_printf(s, "  nProtocol               =   %x\n",
-			   rule->pattern.nProtocol);
-		seq_printf(s, "  nProtocolMask           =   %x\n",
-			   rule->pattern.nProtocolMask);
-		seq_printf(s, "  bProtocol_Exclude       =   %d\n",
-			   rule->pattern.bProtocol_Exclude);
-	}
-	if (rule->pattern.bInnerProtocolEnable) {
-		seq_printf(s, "  bInnerProtocolEnable    =   %d\n",
-			   rule->pattern.bInnerProtocolEnable);
-		seq_printf(s, "  nInnerProtocol          =   %x\n",
-			   rule->pattern.nInnerProtocol);
-		seq_printf(s, "  nInnerProtocolMask      =   %x\n",
-			   rule->pattern.nInnerProtocolMask);
-		seq_printf(s, "  bInnerProtocol_Exclude  =   %d\n",
-			   rule->pattern.bInnerProtocol_Exclude);
-	}
-	if (rule->pattern.bSessionIdEnable) {
-		seq_printf(s, "  bSessionIdEnable        =   %d\n",
-			   rule->pattern.bSessionIdEnable);
-		seq_printf(s, "  nSessionId              =   %x\n",
-			   rule->pattern.nSessionId);
-		seq_printf(s, "  bSessionId_Exclude      =   %d\n",
-			   rule->pattern.bSessionId_Exclude);
-	}
-	if (rule->pattern.bPPP_ProtocolEnable) {
-		seq_printf(s, "  bPPP_ProtocolEnable     =   %d\n",
-			   rule->pattern.bPPP_ProtocolEnable);
-		seq_printf(s, "  nPPP_Protocol           =   %x\n",
-			   rule->pattern.nPPP_Protocol);
-		seq_printf(s, "  nPPP_ProtocolMask       =   %x\n",
-			   rule->pattern.nPPP_ProtocolMask);
-		seq_printf(s, "  bPPP_Protocol_Exclude   =   %d\n",
-			   rule->pattern.bPPP_Protocol_Exclude);
-	}
-	if (rule->pattern.bVid) {
-		seq_printf(s, "  bVid                    =   %d\n",
-			   rule->pattern.bVid);
-		seq_printf(s, "  nVid                    =   %d\n",
-			   rule->pattern.nVid);
-		seq_printf(s, "  bVid_Exclude            =   %d\n",
-			   rule->pattern.bVid_Exclude);
-	}
-	if (rule->pattern.bSLAN_Vid) {
-		seq_printf(s, "  bSLAN_Vid               =    %d\n",
-			   rule->pattern.bSLAN_Vid);
-		seq_printf(s, "  nSLAN_Vid               =    %d\n",
-			   rule->pattern.nSLAN_Vid);
-		seq_printf(s, "  bSLANVid_Exclude        =    %d\n",
-			   rule->pattern.bSLANVid_Exclude);
-	}
-	if (rule->pattern.bPayload1_SrcEnable) {
-		seq_printf(s, "  bPayload1_SrcEnable     =   %d\n",
-			   rule->pattern.bPayload1_SrcEnable);
-		seq_printf(s, "  nPayload1               =   %x\n",
-			   rule->pattern.nPayload1);
-		seq_printf(s, "  nPayload1_Mask          =   %x\n",
-			   rule->pattern.nPayload1_Mask);
-		seq_printf(s, "  bPayload1_Exclude       =   %d\n",
-			   rule->pattern.bPayload1_Exclude);
-	}
-	if (rule->pattern.bPayload2_SrcEnable) {
-		seq_printf(s, "  bPayload2_SrcEnable     =   %d\n",
-			   rule->pattern.bPayload2_SrcEnable);
-		seq_printf(s, "  nPayload2               =   %x\n",
-			   rule->pattern.nPayload2);
-		seq_printf(s, "  nPayload2_Mask          =   %x\n",
-			   rule->pattern.nPayload2_Mask);
-		seq_printf(s, "  bPayload2_Exclude       =   %d\n",
-			   rule->pattern.bPayload2_Exclude);
-	}
-	if (rule->pattern.bParserFlagLSB_Enable) {
-		seq_printf(s, "  bParserFlagLSB_Enable   =   %d\n",
-			   rule->pattern.bParserFlagLSB_Enable);
-		seq_printf(s, "  nParserFlagLSB          =   %x\n",
-			   rule->pattern.nParserFlagLSB);
-		seq_printf(s, "  nParserFlagLSB_Mask     =   %x\n",
-			   rule->pattern.nParserFlagLSB_Mask);
-		seq_printf(s, "  bParserFlagLSB_Exclude  =   %d\n",
-			   rule->pattern.bParserFlagLSB_Exclude);
-	}
-	if (rule->pattern.bParserFlagMSB_Enable) {
-		seq_printf(s, "  bParserFlagMSB_Enable   =   %d\n",
-			   rule->pattern.bParserFlagMSB_Enable);
-		seq_printf(s, "  nParserFlagMSB          =   %x\n",
-			   rule->pattern.nParserFlagMSB);
-		seq_printf(s, "  nParserFlagMSB_Mask     =   %x\n",
-			   rule->pattern.nParserFlagMSB_Mask);
-		seq_printf(s, "  bParserFlagMSB_Exclude  =   %d\n",
-			   rule->pattern.bParserFlagMSB_Exclude);
-	}
-
-	seq_puts(s, "Action:\n");
-	if (rule->action.eTrafficClassAction) {
-		seq_printf(s, "  eTrafficClassAction      =   %d\n",
-			   rule->action.eTrafficClassAction);
-		seq_printf(s, "  nTrafficClassAlternate   =   %d\n",
-			   rule->action.nTrafficClassAlternate);
-	}
-	if (rule->action.eSnoopingTypeAction)
-		seq_printf(s, "  eSnoopingTypeAction      =   %d\n",
-			   rule->action.eSnoopingTypeAction);
-	if (rule->action.eLearningAction)
-		seq_printf(s, "  eLearningAction          =   %d\n",
-			   rule->action.eLearningAction);
-	if (rule->action.eIrqAction)
-		seq_printf(s, "  eIrqAction               =   %d\n",
-			   rule->action.eIrqAction);
-	if (rule->action.eCrossStateAction)
-		seq_printf(s, "  eCrossStateAction        =   %d\n",
-			   rule->action.eCrossStateAction);
-	if (rule->action.eCritFrameAction)
-		seq_printf(s, "  eCritFrameAction         =   %d\n",
-			   rule->action.eCritFrameAction);
-	if (rule->action.eTimestampAction) {
-		seq_printf(s, "  eTimestampAction         =   %d\n",
-			   rule->action.eTimestampAction);
-	}
-	if (rule->action.ePortMapAction) {
-		seq_printf(s, "  ePortMapAction           =   %d\n",
-			   rule->action.ePortMapAction);
-		seq_printf(s, "  nForwardSubIfId          =   %d\n",
-			   rule->action.nForwardSubIfId);
-	}
-	if (rule->action.bRemarkAction)
-		seq_printf(s, "  bRemarkAction            =   %d\n",
-			   rule->action.bRemarkAction);
-	if (rule->action.bRemarkPCP)
-		seq_printf(s, "  bRemarkPCP               =   %d\n",
-			   rule->action.bRemarkPCP);
-	if (rule->action.bRemarkSTAG_PCP)
-		seq_printf(s, "  bRemarkSTAG_PCP          =   %d\n",
-			   rule->action.bRemarkSTAG_PCP);
-	if (rule->action.bRemarkSTAG_DEI)
-		seq_printf(s, "  bRemarkSTAG_DEI          =   %d\n",
-			   rule->action.bRemarkSTAG_DEI);
-	if (rule->action.bRemarkDSCP)
-		seq_printf(s, "  bRemarkDSCP              =   %d\n",
-			   rule->action.bRemarkDSCP);
-	if (rule->action.bRemarkClass) {
-		seq_printf(s, "  bRemarkClass             =   %d\n",
-			   rule->action.bRemarkClass);
-	}
-	if (rule->action.eMeterAction) {
-		seq_printf(s, "  eMeterAction             =   %d\n",
-			   rule->action.eMeterAction);
-		seq_printf(s, "  nMeterId                 =   %d\n",
-			   rule->action.nMeterId);
-	}
-	if (rule->action.bRMON_Action) {
-		seq_printf(s, "  bRMON_Action             =   %d\n",
-			   rule->action.bRMON_Action);
-		seq_printf(s, "  nRMON_Id                 =   %d\n",
-			   rule->action.nRMON_Id);
-	}
-	if (rule->action.eVLAN_Action) {
-		seq_printf(s, "  eVLAN_Action             =   %d\n",
-			   rule->action.eVLAN_Action);
-		seq_printf(s, "  nVLAN_Id                 =   %d\n",
-			   rule->action.nVLAN_Id);
-	}
-	if (rule->action.eSVLAN_Action) {
-		seq_printf(s, "  eSVLAN_Action            =   %d\n",
-			   rule->action.eSVLAN_Action);
-		seq_printf(s, "  nSVLAN_Id                =   %d\n",
-			   rule->action.nSVLAN_Id);
-	}
-	if (rule->action.eVLAN_CrossAction)
-		seq_printf(s, "  eVLAN_CrossAction        =   %d\n",
-			   rule->action.eVLAN_CrossAction);
-	if (rule->action.nFId)
-		seq_printf(s, "  nFId                     =   %d\n",
-			   rule->action.nFId);
-	if (rule->action.bPortBitMapMuxControl)
-		seq_printf(s, "  bPortBitMapMuxControl    =   %d\n",
-			   rule->action.bPortBitMapMuxControl);
-	if (rule->action.bPortTrunkAction)
-		seq_printf(s, "  bPortTrunkAction         =   %d\n",
-			   rule->action.bPortTrunkAction);
-	if (rule->action.bPortLinkSelection)
-		seq_printf(s, "  bPortLinkSelection       =   %d\n",
-			   rule->action.bPortLinkSelection);
-	if (rule->action.bCVLAN_Ignore_Control)
-		seq_printf(s, "  bCVLAN_Ignore_Control    =   %d\n",
-			   rule->action.bCVLAN_Ignore_Control);
-	if (rule->action.bFlowID_Action) {
-		seq_printf(s, "  bFlowID_Action           =   %d\n",
-			   rule->action.bFlowID_Action);
-		seq_printf(s, "  nFlowID                  =   %d\n",
-			   rule->action.nFlowID);
-	}
-	if (rule->action.bRoutExtId_Action) {
-		seq_printf(s, "  bRoutExtId_Action        =   %d\n",
-			   rule->action.bRoutExtId_Action);
-		seq_printf(s, "  nRoutExtId               =   %d\n",
-			   rule->action.nRoutExtId);
-	}
-	if (rule->action.bRtDstPortMaskCmp_Action)
-		seq_printf(s, "  bRtDstPortMaskCmp_Action =   %d\n",
-			   rule->action.bRtDstPortMaskCmp_Action);
-	if (rule->action.bRtSrcPortMaskCmp_Action)
-		seq_printf(s, "  bRtSrcPortMaskCmp_Action =   %d\n",
-			   rule->action.bRtSrcPortMaskCmp_Action);
-	if (rule->action.bRtDstIpMaskCmp_Action)
-		seq_printf(s, "  bRtDstIpMaskCmp_Action   =   %d\n",
-			   rule->action.bRtDstIpMaskCmp_Action);
-	if (rule->action.bRtSrcIpMaskCmp_Action)
-		seq_printf(s, "  bRtSrcIpMaskCmp_Action   =   %d\n",
-			   rule->action.bRtSrcIpMaskCmp_Action);
-	if (rule->action.bRtInnerIPasKey_Action)
-		seq_printf(s, "  bRtInnerIPasKey_Action   =   %d\n",
-			   rule->action.bRtInnerIPasKey_Action);
-	if (rule->action.bRtAccelEna_Action)
-		seq_printf(s, "  bRtAccelEna_Action       =   %d\n",
-			   rule->action.bRtAccelEna_Action);
-	if (rule->action.bRtCtrlEna_Action)
-		seq_printf(s, "  bRtCtrlEna_Action        =   %d\n",
-			   rule->action.bRtCtrlEna_Action);
-	if (rule->action.eProcessPath_Action)
-		seq_printf(s, "  eProcessPath_Action      =   %d\n",
-			   rule->action.eProcessPath_Action);
-	if (rule->action.ePortFilterType_Action)
-		seq_printf(s, "  ePortFilterType_Action   =   %d\n",
-			   rule->action.ePortFilterType_Action);
-	seq_puts(s, "\n");
- EXIT:
-	kfree(rule);
-	pos++;
-
-	return pos;
-}
-
-int proc_gsw_pce_start(void)
-{
-	return 0;
-}
-
-#define PMAC_EG_SET(x, y) (pmac.eg.x = dp_atoi(y))
-#define PMAC_IG_SET(x, y) (pmac.ig.x = dp_atoi(y))
-
-static int set_pmac_ig_v(char *p, char *tail, GSW_PMAC_Ig_Cfg_t *ig)
-{
-	char *tmp;
-	int k;
-
-	for (k = 0; k < 8; k++) {
-		if (k < (8 - 1)) {
-			tmp = strstr(p, ":");
-			if (!tmp ||
-			    ((u32)tmp >= (u32)tail)) {
-				PR_INFO("%s:%s %s\n",
-					"Wrong format",
-					"should be like",
-					"xx:xx:xx:xx:xx:xx:xx:xx");
-				return -1;
-			}
-			*tmp = 0; /*replace:with zero*/
-		}
-		ig->defPmacHdr[k] = dp_atoi(p);
-
-		p = tmp + 1; /* move to next value */
-	}
-	return 0;
-}
-
-static ssize_t proc_gsw_pmac_write(struct file *file, const char *buf,
-				   size_t count, loff_t *ppos)
-{
-	u16 len, i, k, start_param;
-	GSW_return_t ret = 0;
-	char *str = NULL;
-	char *param_list[20 * 2];
-	unsigned int num;
-	union {
-		GSW_PMAC_Eg_Cfg_t eg;
-		GSW_PMAC_Ig_Cfg_t ig;
-	} pmac;
-	#define MAX_GSWIP_CALSS 15
-	#define MAX_GSWIP_FLOW  3
-	struct core_ops *gsw_handle;
-	int class_s = 0, class_e = MAX_GSWIP_CALSS;
-	int flow_s = 0, flow_e = MAX_GSWIP_FLOW;
-	int id;
-
-	str = kmalloc(count + 1, GFP_KERNEL);
-	if (!str)
-		return count;
-	len = count;
-	len -= copy_from_user(str, buf, len);
-	str[len] = 0;
-
-	num = dp_split_buffer(str, param_list, ARRAY_SIZE(param_list));
-	if ((num < 2) || (num >= ARRAY_SIZE(param_list))) {
-		PR_INFO("parameter %d not enough/more. count=%d\n", num, count);
-		goto help;
-	}
-	if (dp_strncmpi(param_list[0],
-			"help", strlen("help")) == 0)	/* help */
-		goto help;
-	/* set pmac */
-	if (dp_strncmpi(param_list[0], "set", strlen("set")) != 0) {
-		PR_INFO("wrong command: %s\n", param_list[0]);
-		goto help;
-	}
-	if (dp_strncmpi(param_list[1], "0", 1) == 0) {
-		id = 0;
-	} else if (dp_strncmpi(param_list[1], "1", 1) == 0) {
-		id = 1;
-	} else {
-		PR_INFO("wrong param:should provide L/R\n");
-		goto exit;
-	}
-	gsw_handle = dp_port_prop[0].ops[0];
-	memset(&pmac, 0, sizeof(pmac));
-	start_param = 3;
-
-	if (dp_strncmpi(param_list[start_param - 1], "EG", 2) == 0) {
-		/*egress pmac */
-		pmac.eg.nPmacId = id;
-		ret = gsw_core_api((dp_gsw_cb)gsw_handle->gsw_pmac_ops
-				   .Pmac_Eg_CfgGet, gsw_handle, &pmac);
-		for (i = start_param; i < num; i += 2) {
-			if (dp_strncmpi(param_list[i],
-					"Class",
-					strlen("Class")) == 0) {
-				char *p = param_list[i + 1];
-				char *tail = p + strlen(p);
-				char *tmp;
-
-				tmp = strstr(p, ":");
-				if (!tmp || (tmp >= tail)) {
-					PR_INFO("%s:it should be like xx:xx\n",
-						"Wrong format for Class");
-					goto exit;
-				}
-				*tmp = 0;
-				class_s = dp_atoi(p);
-				class_e = dp_atoi(tmp + 1);
-			} else if (dp_strncmpi(param_list[i],
-					"FlowID",
-					strlen("FlowID")) == 0) {
-				char *p = param_list[i + 1];
-				char *tail = p + strlen(p);
-				char *tmp;
-
-				tmp = strstr(p, ":");
-				if (!tmp || (tmp >= tail)) {
-					PR_INFO("%s: it should be like xx:xx\n",
-						"Wrong format for FlowID");
-					goto exit;
-				}
-				*tmp = 0;
-				flow_s = dp_atoi(p);
-				flow_e = dp_atoi(tmp + 1);
-			} else if (dp_strncmpi(param_list[i],
-					"DestPort",
-					strlen("DestPort")) == 0) {
-				PMAC_EG_SET(nDestPortId, param_list[i + 1]);
-			} else if (dp_strncmpi(param_list[i],
-					"RxDmaCH",
-					strlen("RxDmaCH")) == 0) {
-				PMAC_EG_SET(nRxDmaChanId, param_list[i + 1]);
-			}
-#ifdef xxxxx
-			/*below global flag cannot be editted here*/
-			else if (dp_strncmpi(param_list[i],
-					     "MPE1",
-						 strlen("MPE1")) == 0)
-				PMAC_EG_SET(bMpe1Flag, param_list[i + 1]);
-			else if (dp_strncmpi(param_list[i],
-					     "MPE2",
-						 strlen("MPE2")) == 0)
-				PMAC_EG_SET(bMpe2Flag, param_list[i + 1]);
-			else if (dp_strncmpi(param_list[i],
-					     "DEC",
-						 strlen("DEC")) == 0)
-				PMAC_EG_SET(bDecFlag, param_list[i + 1]);
-			else if (dp_strncmpi(param_list[i],
-					     "ENC",
-						 strlen("ENC")) == 0)
-				PMAC_EG_SET(bEncFlag, param_list[i + 1]);
-			else if (dp_strncmpi(param_list[i],
-					     "ProcFlag",
-						 strlen("ProcFlag")) == 0)
-				PMAC_EG_SET(bProcFlagsSelect,
-					    param_list[i + 1]);
-#endif
-			else if (dp_strncmpi(param_list[i],
-					     "RemL2Hdr",
-						 strlen("RemL2Hdr")) == 0)
-				PMAC_EG_SET(bRemL2Hdr, param_list[i + 1]);
-			else if (dp_strncmpi(param_list[i],
-					     "RemNum",
-						 strlen("RemNum")) == 0)
-				PMAC_EG_SET(numBytesRem, param_list[i + 1]);
-			else if (dp_strncmpi(param_list[i],
-					     "FCS",
-						 strlen("FCS")) == 0)
-				PMAC_EG_SET(bFcsEna, param_list[i + 1]);
-			else if (dp_strncmpi(param_list[i],
-					     "PmacEna",
-						 strlen("PmacEna")) == 0)
-				PMAC_EG_SET(bPmacEna, param_list[i + 1]);
-			else if (dp_strncmpi(param_list[i],
-					     "TcEnable",
-						 strlen("TcEnable")) == 0)
-				PMAC_EG_SET(bTCEnable, param_list[i + 1]);
-			else {
-				PR_INFO("wrong parameter[%d]: %s\n",
-					i, param_list[i]);
-				goto exit;
-			}
-		}
-		if (class_e > MAX_GSWIP_CALSS)
-			class_e = MAX_GSWIP_CALSS;
-		if (flow_e > MAX_GSWIP_FLOW)
-			flow_e = MAX_GSWIP_FLOW;
-		if (class_s > class_e) {
-			PR_INFO("wrong param:class_s=%d should < class_e=%d\n",
-				class_s, class_e);
-			goto exit;
-		}
-		if (flow_s > flow_e) {
-			PR_INFO("wrong param:flow_s=%d should < flow_e=%d\n",
-				flow_s, flow_e);
-			goto exit;
-		}
-		PR_INFO("Set EG PMAC for class %d:%d flow %d:%d\n",
-			class_s, class_e, flow_s, flow_e);
-		for (i = class_s; i <= class_e; i++) {
-			for (k = flow_s; k <= flow_e; k++) {
-				pmac.eg.nTrafficClass = i;
-				pmac.eg.nFlowIDMsb = k;
-				ret = gsw_core_api(DP_PMAC_OPS(gsw_handle,
-							       Pmac_Eg_CfgGet),
-						   gsw_handle, &pmac);
-				/*Note: bProcFlagsSelect zero,
-				 *just nTrafficClass,
-				 *else use MPE1/2/ENC/DEC flag instead
-				 */
-				pmac.eg.bMpe1Flag = (pmac.eg.nTrafficClass >>
-					0) & 1;
-				pmac.eg.bMpe2Flag = (pmac.eg.nTrafficClass >>
-					1) & 1;
-				pmac.eg.bEncFlag = (pmac.eg.nTrafficClass >>
-					2) & 1;
-				pmac.eg.bDecFlag = (pmac.eg.nTrafficClass >>
-					3) & 1;
-				pmac.eg.nFlowIDMsb = k;
-				ret = gsw_core_api(DP_PMAC_OPS(gsw_handle,
-							       Pmac_Eg_CfgSet),
-						   gsw_handle, &pmac);
-			}
-		}
-		if (ret < GSW_statusOk) {
-			PR_INFO("GSW_PMAC_EG_CFG_SET returned failure\n");
-			goto exit;
-		}
-	} else if (dp_strncmpi(param_list[start_param - 1], "IG", 2) == 0) {
-		/*ingress pmac1 */
-		pmac.ig.nPmacId = id;
-		ret = gsw_core_api((dp_gsw_cb)gsw_handle->gsw_pmac_ops
-				   .Pmac_Ig_CfgGet, gsw_handle, &pmac);
-		for (i = start_param; i < num; i += 2) {
-			if (dp_strncmpi(param_list[i],
-					"TxDmaCH",
-					strlen("TxDmaCH")) == 0) {
-				PMAC_IG_SET(nTxDmaChanId, param_list[i + 1]);
-			} else if (dp_strncmpi(param_list[i],
-					"ErrDrop",
-					strlen("ErrDrop")) == 0) {
-				PMAC_IG_SET(bErrPktsDisc, param_list[i + 1]);
-			} else if (dp_strncmpi(param_list[i],
-					"ClassEna",
-					strlen("ClassEna")) == 0) {
-				PMAC_IG_SET(bClassEna, param_list[i + 1]);
-			} else if (dp_strncmpi(param_list[i],
-					"ClassDefault",
-					strlen("ClassDefault")) == 0) {
-				PMAC_IG_SET(bClassDefault, param_list[i + 1]);
-			} else if (dp_strncmpi(param_list[i],
-					"PmacEna",
-					strlen("PmacEna")) == 0) {
-				PMAC_IG_SET(bPmapEna, param_list[i + 1]);
-			} else if (dp_strncmpi(param_list[i],
-					"PmacDefault",
-					strlen("PmacEna")) == 0) {
-				PMAC_IG_SET(bPmapDefault, param_list[i + 1]);
-			} else if (dp_strncmpi(param_list[i],
-					"SubIdDefault",
-					strlen("SubIdDefault")) == 0) {
-				 /*changed from bSubIdDefault in GSWIP3.1 */
-				//PMAC_IG_SET(bSubIdDefault, param_list[i + 1]);
-				PMAC_IG_SET(eSubId, param_list[i + 1]);
-			} else if (dp_strncmpi(param_list[i],
-					      "SpIdDefault",
-						  strlen("SpIdDefault")) == 0) {
-				PMAC_IG_SET(bSpIdDefault, param_list[i + 1]);
-			} else if (dp_strncmpi(param_list[i],
-					      "PmacPresent",
-						  strlen("PmacPresent")) == 0) {
-				PMAC_IG_SET(bPmacPresent, param_list[i + 1]);
-			} else if (dp_strncmpi(param_list[i],
-				"DefaultPmacHdr",
-				strlen("DefaultPmacHdr")) == 0) {
-				char *p = param_list[i + 1];
-				char *tail = p + strlen(p);
-
-				if (set_pmac_ig_v(p, tail, &pmac.ig))
-					goto exit;
-			} else {
-				PR_INFO("wrong parameter[%d]: %s\n", i,
-					param_list[i]);
-				goto exit;
-			}
-		}
-		ret = gsw_core_api((dp_gsw_cb)gsw_handle->gsw_pmac_ops
-				   .Pmac_Ig_CfgSet, gsw_handle, &pmac);
-		if (ret < GSW_statusOk) {
-			PR_ERR("GSW_PMAC_IG_CFG_SET returned failure\n");
-			goto exit;
-		}
-	} else if (dp_strncmpi(param_list[start_param - 1],
-			   "reset", strlen("reset")) == 0) {
-		GSW_reset_t reset;
-
-		gsw_core_api((dp_gsw_cb)gsw_handle->gsw_common_ops.Reset,
-			     gsw_handle, &reset);
-	} else {
-		PR_INFO("wrong parameter not supported: %s\n",
-			param_list[start_param - 1]);
-		goto exit;
-	}
-exit:
-	kfree(str);
-	return count;
-
- help:
-	PR_INFO("usage:\n");
-	PR_INFO("  echo set <0/1> EG\n");
-	PR_INFO("    [DestPort] [Dst-PMAC-Port-value]\n");
-	PR_INFO("    [Class] [Class-start:end](0~15)\n");
-	PR_INFO("    [FlowID] [FlowID-start:end](0~3)\n");
-	PR_INFO("\n");
-	PR_INFO("    [PmacEna] [Enable PMAC HDR (1) or not(0)]\n");
-	PR_INFO("    [RxDmaCH] [RxDmaCH-value]\n");
-	PR_INFO("    [TcEnable] [TcEnable-value(0/1)] [FCS] [FCS-value(0/1]\n");
-	PR_INFO("    %s [RemL2Hdr-value(0/1)] [RemNum] [RemNum-value]\n",
-		"[RemL2Hdr]");
-	PR_INFO("     > /prooc/dp/%s\n", PROC_PMAC);
-	PR_INFO("  echo set <0/1> IG [TxDmaCH] [TX-DMA-CH-value]\n");
-	PR_INFO("\n");
-	PR_INFO("    [ErrDrop] [Error-Drop-value(0/1)]\n");
-	PR_INFO("    %s PMAC header(1) or incoming PMAC header(0)]\n",
-		"[ClassEna] [Class Enable info from default");
-	PR_INFO("    %s %s %s\n",
-		"[ClassDefault]",
-		"[Class Default info from default PMAC header(1)",
-		"or incoming PMAC header(0)]");
-	PR_INFO("    %s %s %s\n",
-		"[PmacEna]",
-		"[Port Map Enable info from default PMAC header(1)",
-		"or incoming PMAC header(0)]");
-	PR_INFO("    %s %s or incoming PMAC header(0)]\n",
-		"[PmacDefault]",
-		"[Port Map info from default PMAC header(1)");
-	PR_INFO("    %s %s or in packet descriptor (0)]\n",
-		"[SubIdDefault]",
-		"[Sub_Interface Id Info from default PMAC header(1)");
-	PR_INFO("    %s %s or incoming PMAC header (False)]\n",
-		"[SpIdDefault]",
-		"[Source port id from default PMAC header(1)");
-	PR_INFO("    %s %s or not (0)]\n",
-		"[PmacPresent]",
-		"[Packet PMAC header is present (1)");
-	PR_INFO("    %s [Default PMAC HDR(8 bytes: xx:xx:xx:xx:xx:xx:xx:xx]\n",
-		"[DefaultPmacHdr]");
-	PR_INFO("     > /prooc/dp/%s\n", PROC_PMAC);
-	PR_INFO("  echo set <0/1> reset\n");
-	PR_INFO("  ext1: echo %s %s %s %s > /proc/dp/pmac\n",
-		"set R IG TxDmaCH 1 ErrDrop 0 PmacDefault 0 PmacEna 0",
-		"ClassEna 1 ClassDefault 1 SubIdDefault 1 SpIdDefault 1",
-		"PmacPresent 0",
-		"DefaultPmacHdr 0x11:0x22:0x33:0x44:0x55:0x66:0x77:0x88");
-	PR_INFO("  ext2: %s %s > /proc/dp/pmac\n",
-		"echo set R EG DestPort 15 class 0:15 FlowID 0:3",
-		"RxDmaCH 4 TcEnable 1 RemL2Hdr 1 RemNum 8 PmacEna 0 FCS 1");
-	goto exit;
-}
-
-static int proc_gsw_pmac_start(void)
-{
-	return 0;
-}
-
-static int proc_gsw_pmac_dump(struct seq_file *s, int pos)
-{
-	GSW_PMAC_Ig_Cfg_t igCfg;
-	GSW_PMAC_Eg_Cfg_t egCfg;
-	struct core_ops *gsw_handle;
-	u8 i = 0, j = 0;
-
-	/* Do the GSW-L configuration */
-	gsw_handle = dp_port_prop[0].ops[GSWIP_L];
-	seq_puts(s, "\nGSWIP-L Ingress PMAC Configure\n");
-	seq_printf(s, "%15s %15s %15s %15s %15s %15s %15s %15s %15s %15s\n",
-		   "nTxDmaChanId", "bErrPktsDisc", "bPmapDefault", "bPmapEna",
-		   "bClassDefault", "bClassEna", "bSubIdDefault",
-		   "bSpIdDefault", "bPmacPresent", "defPmacHdr");
-	for (i = 0; i <= 15; i++)  {
-		memset(&igCfg, 0x00, sizeof(igCfg));
-		igCfg.nTxDmaChanId = i;
-		gsw_core_api((dp_gsw_cb)gsw_handle->gsw_pmac_ops.Pmac_Ig_CfgGet,
-			     gsw_handle, &igCfg);
-		seq_printf(s, "%15d %15d %15d %15d %15d %15d %15d %15d %15d ",
-			   igCfg.nTxDmaChanId, igCfg.bErrPktsDisc,
-			   igCfg.bPmapDefault, igCfg.bPmapEna,
-			   igCfg.bClassDefault, igCfg.bClassEna,
-			   igCfg.eSubId, igCfg.bSpIdDefault,
-			   igCfg.bPmacPresent);
-		for (j = 0; j < 8; j++)
-			seq_printf(s, "%02x\n", igCfg.defPmacHdr[j]);
-		seq_puts(s, "\n");
-	}
-
-	seq_puts(s, "GSWIP-L Egress PMAC Configure\n");
-	for (i = 0; i <= 3; i++) {
-		memset(&egCfg, 0x00, sizeof(egCfg));
-
-		egCfg.nDestPortId	= i;
-		egCfg.nTrafficClass	= 0;
-		egCfg.nFlowIDMsb	= 0;
-		egCfg.bDecFlag		= 0;
-		egCfg.bEncFlag		= 0;
-		egCfg.bMpe1Flag		= 0;
-		egCfg.bMpe2Flag		= 0;
-		gsw_core_api((dp_gsw_cb)gsw_handle->gsw_pmac_ops.Pmac_Eg_CfgGet,
-			     gsw_handle, &egCfg);
-		seq_printf(s, " nRxDmaChanId  = %d\n", egCfg.nRxDmaChanId);
-		seq_printf(s, " bRemL2Hdr     = %d\n", egCfg.bRemL2Hdr);
-		seq_printf(s, " numBytesRem   = %d\n", egCfg.numBytesRem);
-		seq_printf(s, " bFcsEna       = %d\n", egCfg.bFcsEna);
-		seq_printf(s, " bPmacEna      = %d\n", egCfg.bPmacEna);
-		seq_printf(s, " nResDW1       = %d\n", egCfg.nResDW1);
-		seq_printf(s, " nRes1DW0      = %d\n", egCfg.nRes1DW0);
-		seq_printf(s, " nRes2DW0      = %d\n", egCfg.nRes2DW0);
-		seq_printf(s, " nDestPortId   = %d\n", egCfg.nDestPortId);
-		seq_printf(s, " nTrafficClass = %d\n", egCfg.nTrafficClass);
-		seq_printf(s, " nFlowIDMsb    = %d\n", egCfg.nFlowIDMsb);
-		seq_printf(s, " bDecFlag      = %d\n", egCfg.bDecFlag);
-		seq_printf(s, " bEncFlag      = %d\n", egCfg.bEncFlag);
-		seq_printf(s, " bMpe1Flag     = %d\n", egCfg.bMpe1Flag);
-		seq_printf(s, " bMpe2Flag     = %d\n", egCfg.bMpe2Flag);
-		seq_puts(s, "\n");
-	}
-
-	gsw_handle = dp_port_prop[0].ops[GSWIP_R];
-	seq_puts(s, "\n\n\nGSWIP-R Ingress PMAC Configure\n");
-		seq_printf(s, "\n%15s %15s %15s %15s %15s %15s %15s %15s %15s %15s\n",
-			   "nTxDmaChanId", "bErrPktsDisc", "bPmapDefault",
-			   "bPmapEna", "bClassDefault", "bClassEna",
-			   "bSubIdDefault", "bSpIdDefault", "bPmacPresent",
-			   "defPmacHdr");
-	for (i = 0; i <= 15; i++) {
-		memset(&igCfg, 0x00, sizeof(igCfg));
-		igCfg.nTxDmaChanId = i;
-		gsw_core_api((dp_gsw_cb)gsw_handle->gsw_pmac_ops.Pmac_Ig_CfgGet,
-			     gsw_handle, &igCfg);
-		seq_printf(s, "%15d %15d %15d %15d %15d %15d %15d %15d %15d ",
-			   igCfg.nTxDmaChanId, igCfg.bErrPktsDisc,
-			   igCfg.bPmapDefault, igCfg.bPmapEna,
-			   igCfg.bClassDefault, igCfg.bClassEna,
-			   igCfg.eSubId, igCfg.bSpIdDefault,
-			   igCfg.bPmacPresent);
-		for (j = 0; j < 8; j++)
-			seq_printf(s, "%02x", igCfg.defPmacHdr[j]);
-		seq_puts(s, "\n");
-	}
-
-	seq_puts(s, "\n\n\nGSWIP-R Egress PMAC Configure\n");
-	for (i = 0; i <= 15; i++) {
-		memset(&egCfg, 0x00, sizeof(egCfg));
-
-		egCfg.nDestPortId	= i;
-		egCfg.nTrafficClass	= 0;
-		egCfg.nFlowIDMsb	= 0;
-		egCfg.bDecFlag		= 0;
-		egCfg.bEncFlag		= 0;
-		egCfg.bMpe1Flag		= 0;
-		egCfg.bMpe2Flag		= 0;
-
-		gsw_core_api((dp_gsw_cb)gsw_handle->gsw_pmac_ops.Pmac_Eg_CfgGet,
-			     gsw_handle, &egCfg);
-
-		seq_printf(s, " nRxDmaChanId  = %d\n", egCfg.nRxDmaChanId);
-		seq_printf(s, " bRemL2Hdr     = %d\n", egCfg.bRemL2Hdr);
-		seq_printf(s, " numBytesRem   = %d\n", egCfg.numBytesRem);
-		seq_printf(s, " bFcsEna       = %d\n", egCfg.bFcsEna);
-		seq_printf(s, " bPmacEna      = %d\n", egCfg.bPmacEna);
-		seq_printf(s, " nResDW1       = %d\n", egCfg.nResDW1);
-		seq_printf(s, " nRes1DW0      = %d\n", egCfg.nRes1DW0);
-		seq_printf(s, " nRes2DW0      = %d\n", egCfg.nRes2DW0);
-		seq_printf(s, " nDestPortId   = %d\n", egCfg.nDestPortId);
-		seq_printf(s, " nTrafficClass = %d\n", egCfg.nTrafficClass);
-		seq_printf(s, " nFlowIDMsb    = %d\n", egCfg.nFlowIDMsb);
-		seq_printf(s, " bDecFlag      = %d\n", egCfg.bDecFlag);
-		seq_printf(s, " bEncFlag      = %d\n", egCfg.bEncFlag);
-		seq_printf(s, " bMpe1Flag     = %d\n", egCfg.bMpe1Flag);
-		seq_printf(s, " bMpe2Flag     = %d\n", egCfg.bMpe2Flag);
-		seq_puts(s, "\n");
-	}
-	if (!seq_has_overflowed(s))
-		pos++;
-	if (pos == 1)
-		return -1;
-
-	return pos;
-}
-
-int proc_common_start(void)
-{
-	return 0;
-}
-
 char *get_bp_member_string(int inst, u16 bp, char *buf)
 {
 	GSW_BRIDGE_portConfig_t bp_cfg;
@@ -1943,13 +257,6 @@ char *get_bp_member_string(int inst, u16 bp, char *buf)
 	sprintf(buf + strlen(buf), " Fid=%d ", bp_cfg.nBridgeId);
 	return buf;
 }
-
-static int proc_gsw_bp_dump(struct seq_file *s, int pos)
-{
-	pos = -1;
-	return pos;
-}
-
 /* proc_print_ctp_bp_info is an callback API, not a standalone proc API */
 int proc_print_ctp_bp_info(struct seq_file *s, int inst,
 			   struct pmac_port_info *port,
@@ -1971,471 +278,9 @@ int proc_print_ctp_bp_info(struct seq_file *s, int inst,
 	kfree(buf);
 	return 0;
 }
-
-#if IS_ENABLED(CONFIG_LTQ_DATAPATH_SWITCHDEV)
-static u32 br_hash_index;
-static struct br_info *brdev_info;
-static int proc_swdev_brctl_dump(struct seq_file *s, int pos)
-{
-	struct bridge_member_port *tmp = NULL;
-
-	while (!brdev_info) {
-		br_hash_index++;
-		pos = 0;
-		if (br_hash_index == BR_ID_ENTRY_HASH_TABLE_SIZE) {
-			seq_puts(s, "end\n");
-			return -1;
-		}
-		brdev_info = hlist_entry_safe
-			     ((&g_bridge_id_entry_hash_table
-			      [0][br_hash_index])->first,
-			      struct br_info, br_hlist);
-	}
-	seq_printf(s, "Hash=%u pos=%d dev=%s inst= fid=%d\n",
-		   br_hash_index,
-		   pos,
-		   brdev_info->br_device_name ? brdev_info->br_device_name
-		   : NULL,
-		   brdev_info->fid);
-	seq_puts(s, "  bp_list=");
-	list_for_each_entry(tmp, &brdev_info->bp_list, list) {
-		seq_printf(s, "%u ", tmp->portid);
-	}
-	seq_puts(s, "\n");
-	brdev_info = hlist_entry_safe((brdev_info)->br_hlist.next,
-				      struct br_info, br_hlist);
-	if (!seq_has_overflowed(s))
-		pos++;
-	return pos;
-}
-
-static int proc_swdev_brctl_start(void)
-{
-	br_hash_index = 0;
-
-	brdev_info = hlist_entry_safe((
-			&g_bridge_id_entry_hash_table[0][br_hash_index])->first,
-				struct br_info, br_hlist);
-	return 0;
-}
-
-static int print_bridge(int fid, int inst)
-{
-	int ret;
-	GSW_BRIDGE_config_t brcfg;
-	struct core_ops *gsw_handle;
-
-	gsw_handle = dp_port_prop[inst].ops[0];
-	memset(&brcfg, 0, sizeof(brcfg));
-	brcfg.nBridgeId = fid;
-	brcfg.eMask = GSW_BRIDGE_CONFIG_MASK_FORWARDING_MODE;
-	ret = gsw_core_api((dp_gsw_cb)gsw_handle->gsw_brdg_ops
-			   .Bridge_ConfigGet, gsw_handle, &brcfg);
-	if (ret != GSW_statusOk) {
-		PR_ERR("Failed to get bridge id(%d)\n", brcfg.nBridgeId);
-		return -1;
-	}
-	PR_INFO("eForwardBroadcast=:%d\r\n", brcfg.eForwardBroadcast);
-	PR_INFO("eForwardUnknownMulticastNonIp=:%d\r\n",
-		brcfg.eForwardUnknownMulticastNonIp);
-	PR_INFO("eForwardUnknownUnicast=:%d\r\n", brcfg.eForwardUnknownUnicast);
-	return 0;
-}
-
-static ssize_t proc_swdev_brctl_write(struct file *file,
-				      const char *buf,
-				      size_t count,
-				      loff_t *ppos)
-{
-	int len;
-	char str[64];
-	int num, ret, k;
-	char *param_list[10];
-	struct br_info *br_info = NULL;
-	struct bridge_member_port *temp_list = NULL;
-	GSW_BRIDGE_portConfig_t brportcfg;
-	unsigned char *buf1;
-	struct core_ops *gsw_handle;
-
-	gsw_handle = dp_port_prop[0].ops[0];
-	memset(&brportcfg, 0, sizeof(GSW_BRIDGE_portConfig_t));
-	len = (sizeof(str) > count) ? count : sizeof(str) - 1;
-	len -= copy_from_user(str, buf, len);
-	str[len] = 0;
-	num = dp_split_buffer(str, param_list, ARRAY_SIZE(param_list));
-
-	if ((num != 2) ||
-	    (dp_strncmpi(param_list[0], "help", strlen("help")) == 0))
-		goto HELP;
-
-	buf1 = kmalloc(MAX_BP_NUM + 1, GFP_KERNEL);
-	if (!buf1)
-		return -1;
-	buf1[0] = 0;
-
-	if (dp_strncmpi(param_list[0], "brctl", strlen("brctl")) == 0) {
-		br_info = dp_swdev_bridge_entry_lookup(param_list[1]);
-		if (br_info) {
-			print_bridge(br_info->fid, br_info->inst);
-			list_for_each_entry(temp_list,  &br_info->bp_list,
-					    list) {
-				PR_INFO("stored BP=:%d\r\n", temp_list->portid);
-				brportcfg.nBridgePortId = temp_list->portid;
-				brportcfg.eMask =
-				GSW_BRIDGE_PORT_CONFIG_MASK_BRIDGE_ID |
-				GSW_BRIDGE_PORT_CONFIG_MASK_BRIDGE_PORT_MAP;
-				ret = gsw_core_api((dp_gsw_cb)gsw_handle
-						   ->gsw_brdgport_ops
-						   .BridgePort_ConfigGet,
-						   gsw_handle, &brportcfg);
-				if (ret != GSW_statusOk) {
-					PR_ERR("fail to get bport configed\n");
-					goto EXIT;
-				}
-				/*for (i = 0; i < MAX_BP_NUM; i++) {
-				 *	if (GET_BP_MAP(brportcfg.nBridgePortMap,
-				 *	    i)) {
-				 *		sprintf(buf1 + strlen(buf1),
-				 *			"%d ", i);
-				 *	}
-				 *}
-				 */
-				for (k = 0; k < 16; k++) {
-					PR_INFO("  nBridgePortMap[%d] = %x\n",
-						k, brportcfg.nBridgePortMap[k]);
-				}
-				sprintf(buf1 + strlen(buf1), " Fid=%d ",
-					brportcfg.nBridgeId);
-				PR_INFO("          : bp=%d(%s)\n",
-					brportcfg.nBridgePortId, buf1);
-				buf1[0] = 0;
-				}
-			}
-		}
-EXIT:
-	kfree(buf1);
-	return count;
-HELP:
-	PR_INFO("Provide brname: echo brctl brdev_name > /proc/dp/brctl\n");
-	return count;
-}
-
-static int fdb_cnt;
-static void proc_swdev_fdb_read(struct seq_file *s)
-{
-	struct fdb_tbl *tmp = NULL;
-
-	seq_puts(s, "dev_name		MAC\n");
-	seq_puts(s, "---------------------------------\n");
-	list_for_each_entry(tmp, &fdb_tbl_list, fdb_list) {
-		if (tmp) {
-			seq_printf
-			(s, "%s		%02x:%02x:%02x:%02x:%02x:%02x\n",
-			 tmp->port_dev->name, tmp->addr[0],
-			 tmp->addr[1], tmp->addr[2], tmp->addr[3],
-			 tmp->addr[4], tmp->addr[5]);
-		} else {
-			break;
-		}
-	}
-}
-
-static ssize_t proc_swdev_fdb_write(struct file *file, const char *buf,
-				    size_t count,
-				    loff_t *ppos)
-{
-	int len;
-	char str[64];
-	int num, flag = 0;
-	char *param_list[10];
-	struct fdb_tbl *tmp = NULL;
-	struct net_device *dev;
-	u8 b[6];
-
-	len = (sizeof(str) > count) ? count : sizeof(str) - 1;
-	len -= copy_from_user(str, buf, len);
-	str[len] = 0;
-	num = dp_split_buffer(str, param_list, ARRAY_SIZE(param_list));
-	if ((num != 5) ||
-	    (dp_strncmpi(param_list[0], "help", strlen("help")) == 0))
-		goto HELP;
-
-	if (dp_strncmpi(param_list[0], "fdb", strlen("fdb")) == 0) {
-		if (dp_strncmpi(param_list[1], "add", strlen("add")) == 0) {
-			if (dp_strncmpi(param_list[2], "dev",
-					strlen("dev")) == 0) {
-				/*fdb add <mac> dev <port>*/
-				tmp =
-				kmalloc(sizeof(struct fdb_tbl *), GFP_KERNEL);
-				if (!tmp)
-					goto exit;
-				INIT_LIST_HEAD(&tmp->fdb_list);
-				tmp->port_dev =
-				dev_get_by_name(&init_net, param_list[3]);
-				mac_stob(param_list[4], tmp->addr);
-				flag = 1;
-			}
-		}
-		if (dp_strncmpi(param_list[1], "del", strlen("del")) == 0) {
-			if (dp_strncmpi(param_list[2], "dev",
-					strlen("dev")) == 0) {
-				/*fdb add dev <port> <mac>*/
-				dev = dev_get_by_name(&init_net, param_list[3]);
-				mac_stob(param_list[4], b);
-				flag = 2;
-			}
-		}
-	}
-	if (!fdb_cnt)
-		INIT_LIST_HEAD(&fdb_tbl_list);
-	if (list_empty(&fdb_tbl_list) && (fdb_cnt != 0))
-		goto exit;
-	if (fdb_cnt < 0)
-		goto exit;
-	if (flag == 1) {
-		list_add_tail(&tmp->fdb_list, &fdb_tbl_list);
-		fdb_cnt++;
-	}
-	if (flag == 2) {
-		list_for_each_entry(tmp, &fdb_tbl_list, fdb_list) {
-			if (memcmp(&tmp->addr, &b, 6) == 0) {
-				list_del(&tmp->fdb_list);
-				kfree(tmp);
-				fdb_cnt--;
-				break;
-			}
-		}
-	}
-	return count;
-exit:
-	PR_ERR("list add / count error %d\n", fdb_cnt);
-	return count;
-HELP:
-	PR_INFO("echo fdb add dev <dev_name> <mac_addr> > /proc/dp/fdb\n");
-	PR_INFO("echo fdb del dev <dev_name> <mac_addr> > /proc/dp/fdb\n");
-	return count;
-}
-
-static void proc_swdev_mac_read(struct seq_file *s)
-{
-	int ret, i;
-	//GSW_MAC_tableRead_t macread;
-	GSW_MAC_tableQuery_t macread;
-	struct core_ops *gsw_handle;
-	static int bp = 1;
-
-	gsw_handle = dp_port_prop[0].ops[0];
-	seq_puts(s, "FID    BP    static	MAC\n");
-	seq_puts(s, "---------------------------------\n");
-	for (i = 0; i < 10; i++) {
-	memset(&macread, 0, sizeof(macread));
-	macread.nFId = 1;
-	macread.nPortId = bp;
-	ret = gsw_core_api((dp_gsw_cb)gsw_handle->gsw_swmac_ops.
-			   //MAC_TableEntryRead, gsw_handle, &macread);
-			   MAC_TableEntryQuery, gsw_handle, &macread);
-	if (ret != GSW_statusOk) {
-		PR_ERR("Failed to get MAC entry\n");
-		//return -1;
-	}
-
-	seq_printf(s, "%d    %d    %d	%02x:%02x:%02x:%02x:%02x:%02x\n",
-		   macread.nFId, macread.nPortId, macread.bStaticEntry,
-		   macread.nMAC[0],
-		   macread.nMAC[1], macread.nMAC[2], macread.nMAC[3],
-		   macread.nMAC[4], macread.nMAC[5]);
-	bp += 1;
-	}
-}
-#endif
-
-static void pmac_eg_cfg(char *param_list[], int num, dp_pmac_cfg_t *pmac_cfg)
-{
-	int i, j;
-	u32 value;
-
-	for (i = 2; i < num; i += 2) {
-		for (j = 0; j < ARRAY_SIZE(egress_entries); j++) {
-			if (dp_strncmpi(param_list[i],
-					egress_entries[j].name,
-					strlen(egress_entries[j].name)))
-				continue;
-			if (dp_strncmpi(egress_entries[j].name,
-					"rm_l2hdr",
-					strlen("rm_l2hdr")) == 0) {
-				if (dp_atoi(param_list[i + 1]) > 0) {
-					pmac_cfg->eg_pmac.rm_l2hdr = 1;
-					value = dp_atoi(param_list[i + 1]);
-					egress_entries[j].
-					   egress_callback(pmac_cfg,
-							   value);
-					PR_INFO("egress ep %s configed ok\n",
-						egress_entries
-					     [j].name);
-					break;
-				}
-				pmac_cfg->eg_pmac.rm_l2hdr =
-				    dp_atoi(param_list[i + 1]);
-			} else {
-				value = dp_atoi(param_list[i + 1]);
-				egress_entries[j].
-				    egress_callback(pmac_cfg,
-						    value);
-				PR_INFO("egress pmac ep %s configured ok\n",
-					egress_entries[j].name);
-				break;
-			}
-		}
-	}
-}
-
-static ssize_t ep_port_write(struct file *file, const char *buf, size_t count,
-			     loff_t *ppos)
-{
-	int len;
-	char str[64];
-	int num, i, j, ret;
-	u32 value;
-	u32 port;
-	char *param_list[10];
-	dp_pmac_cfg_t pmac_cfg;
-	int inst = 0;
-	int flag1 = 0;
-	struct dp_tc_cfg *tc;
-	struct dp_meter_subif mtr_subif = {0};
-
-	memset(&pmac_cfg, 0, sizeof(dp_pmac_cfg_t));
-	len = (sizeof(str) > count) ? count : sizeof(str) - 1;
-	len -= copy_from_user(str, buf, len);
-	str[len] = 0;
-	num = dp_split_buffer(str, param_list, ARRAY_SIZE(param_list));
-
-	if (dp_strncmpi(param_list[0], "ingress", strlen("ingress")) == 0) {
-		port = dp_atoi(param_list[1]);
-
-		for (i = 2; i < num; i += 2) {
-			for (j = 0; j < ARRAY_SIZE(ingress_entries); j++) {
-				if (dp_strncmpi
-				    (param_list[i],
-				     ingress_entries[j].name,
-					 strlen(ingress_entries[j].name))
-					 == 0) {
-					value = dp_atoi(param_list[i + 1]);
-					ingress_entries[j].
-					    ingress_callback(&pmac_cfg,
-							     value);
-					PR_INFO("ingress pmac ep %s configed\n",
-						ingress_entries[j].name);
-					break;
-				}
-			}
-		}
-
-		ret = dp_pmac_set_31(inst, port, &pmac_cfg);
-
-		if (ret != 0) {
-			PR_INFO("pmac set configuration failed\n");
-			return -1;
-		}
-	} else if (dp_strncmpi(param_list[0], "egress",
-	strlen("egress")) == 0) {
-		port = dp_atoi(param_list[1]);
-
-		pmac_eg_cfg(param_list, num, &pmac_cfg);
-		ret = dp_pmac_set_31(inst, port, &pmac_cfg);
-
-		if (ret != 0) {
-			PR_INFO("pmac set configuration failed\n");
-			return -1;
-		}
-	} else if (dp_strncmpi(param_list[0], "ctp_tc",
-		   strlen("ctp_tc")) == 0) {
-		tc = kzalloc(sizeof(*tc), GFP_KERNEL);
-		if (!tc) {
-			PR_ERR("failed to alloc ctp tc %d bytes\n",
-			       sizeof(*tc));
-			return 0;
-		}
-		tc->dev = dev_get_by_name(&init_net, param_list[1]);
-		tc->tc = dp_atoi(param_list[2]);
-		flag1 = dp_atoi(param_list[3]);
-		if (tc->tc > 15) {
-			PR_ERR("traffic class value range 0-15 only\n");
-			kfree(tc);
-			return count;
-		}
-		tc->force = 0;
-		if (dp_get_netif_subifid(tc->dev, NULL, NULL, NULL,
-					 &mtr_subif.subif, 0)) {
-			DP_DEBUG(DP_DBG_FLAG_DBG, "get subifid fail(%s)\n",
-				 tc->dev ? tc->dev->name : "NULL");
-			kfree(tc);
-			return count;
-		}
-		mtr_subif.inst =  mtr_subif.subif.inst;
-		if (dp_port_prop[mtr_subif.inst].info.
-				dp_ctp_tc_map_set(tc, flag1,
-						  &mtr_subif))
-			PR_ERR("ctp_tc_set fail\n");
-		else
-			PR_INFO("ctp_tc_set success\n");
-		kfree(tc);
-	} else {
-		PR_INFO("wrong command\n");
-		goto help;
-	}
-
-	return count;
- help:
-	PR_INFO("echo %s > /proc/dp/ep\n",
-		"ingress/egress [ep_port] ['ingress/egress fields'] [value]");
-	PR_INFO("(eg) echo ingress 1 pmac 1 > /proc/dp/ep\n");
-	PR_INFO("(eg) echo egress 1 rm_l2hdr 2 > /proc/dp/ep\n");
-	PR_INFO("echo %s %s",
-		"ingress [ep_port]",
-		"['errdisc/pmac/pmac_pmap/pmac_en_pmap/pmac_tc");
-	PR_INFO("                         %s [value] > /proc/dp/ep\n",
-		"/pmac_en_tc/pmac_subifid/pmac_srcport']");
-	PR_INFO("echo %s %s > /proc/dp/ep\n",
-		"egress [ep_port]",
-		"['rx_dmachan/fcs/pmac/res_dw1/res1_dw0/res2_dw0] [value]");
-	PR_INFO("echo egress [ep_port] ['rm_l2hdr'] [value] > /proc/dp/ep\n");
-	PR_INFO("echo ctp_tc [dev] [val] [flag] > /proc/dp/ep\n");
-	return count;
-}
-
 static struct dp_proc_entry dp_proc_entries[] = {
 	/*name single_callback_t multi_callback_t/_start write_callback_t */
 	{PROC_PARSER, proc_parser_read, NULL, NULL, proc_parser_write},
-	{PROC_RMON_PORTS, NULL, proc_gsw_port_rmon_dump,
-	 proc_gsw_rmon_port_start, proc_gsw_rmon_write},
-#ifdef CONFIG_LTQ_DATAPATH_MIB
-	{PROC_MIB_TIMER, proc_mib_timer_read, NULL, NULL,
-		proc_mib_timer_write},
-	{PROC_MIB_INSIDE, NULL, proc_mib_inside_dump,
-		proc_mib_inside_start, proc_mib_inside_write},
-	{PROC_MIBPORT, NULL, proc_mib_port_dump,
-		proc_mib_port_start, proc_mib_port_write},
-	{PROC_MIBVAP, NULL, proc_mib_vap_dump, proc_mib_vap_start,
-		proc_mib_vap_write},
-#endif
-#ifdef CONFIG_LTQ_DATAPATH_CPUFREQ
-	{PROC_COC, proc_coc_read, NULL, NULL, proc_coc_write},
-#endif
-	{PROC_EP, NULL, NULL, NULL, ep_port_write},
-	{PROC_PCE, NULL, proc_gsw_pce_dump, proc_gsw_pce_start, NULL},
-	{PROC_PMAC, NULL, proc_gsw_pmac_dump, proc_gsw_pmac_start,
-	 proc_gsw_pmac_write},
-	{DP_PROC_FILE_GSWIP_BP, NULL, proc_gsw_bp_dump,
-		proc_common_start, NULL},
-#if IS_ENABLED(CONFIG_LTQ_DATAPATH_SWITCHDEV)
-	{DP_PROC_FILE_SWDEV_BR, NULL, proc_swdev_brctl_dump,
-		proc_swdev_brctl_start, proc_swdev_brctl_write},
-	{DP_PROC_SWDEV_FDB, proc_swdev_fdb_read, NULL, NULL,
-		proc_swdev_fdb_write},
-	{DP_PROC_SWDEV_MAC, proc_swdev_mac_read, NULL, NULL,
-		NULL},
-#endif
 	{DP_PROC_CBMLOOKUP, NULL, lookup_dump31, lookup_start31,
 		proc_get_qid_via_index31},
 
