From a3fa1586136f9c9d7d17fe8aa7d344a8d455f01f Mon Sep 17 00:00:00 2001
From: Hua Ma <hua.ma@linux.intel.com>
Date: Thu, 21 Jun 2018 17:38:10 +0800
Subject: [PATCH] Add support for net ipv6 changes

---
 net/ipv6/ip6_gre.c    | 16 ++++++++++++++++
 net/ipv6/ip6_tunnel.c | 12 ++++++++++++
 net/ipv6/ip6mr.c      | 29 ++++++++++++++++++++---------
 3 files changed, 48 insertions(+), 9 deletions(-)

diff --git a/net/ipv6/ip6_gre.c b/net/ipv6/ip6_gre.c
index caee5530ae2c..4c9e7f56aafa 100644
--- a/net/ipv6/ip6_gre.c
+++ b/net/ipv6/ip6_gre.c
@@ -1569,6 +1569,15 @@ static struct rtnl_link_ops ip6gre_tap_ops __read_mostly = {
 	.get_link_net	= ip6_tnl_get_link_net,
 };
 
+#ifdef CONFIG_PPA
+extern uint32_t (*ppa_is_ipv6_gretap_fn)(struct net_device *dev);
+
+static u32 ppa_is_ipv6_gretap(struct net_device *dev)
+{
+	return (dev && (dev->netdev_ops == (&ip6gre_tap_netdev_ops)));
+}
+#endif
+
 /*
  *	And now the modules code and kernel interface.
  */
@@ -1597,6 +1606,10 @@ static int __init ip6gre_init(void)
 	if (err < 0)
 		goto tap_ops_failed;
 
+#ifdef CONFIG_PPA
+	ppa_is_ipv6_gretap_fn = ppa_is_ipv6_gretap;
+#endif
+
 out:
 	return err;
 
@@ -1611,6 +1624,9 @@ static int __init ip6gre_init(void)
 
 static void __exit ip6gre_fini(void)
 {
+#ifdef CONFIG_PPA
+	ppa_is_ipv6_gretap_fn = NULL;
+#endif
 	rtnl_link_unregister(&ip6gre_tap_ops);
 	rtnl_link_unregister(&ip6gre_link_ops);
 	inet6_del_protocol(&ip6gre_protocol, IPPROTO_GRE);
diff --git a/net/ipv6/ip6_tunnel.c b/net/ipv6/ip6_tunnel.c
index cc28b8646986..35b21f80af78 100644
--- a/net/ipv6/ip6_tunnel.c
+++ b/net/ipv6/ip6_tunnel.c
@@ -1140,11 +1140,18 @@ int ip6_tnl_xmit(struct sk_buff *skb, struct net_device *dev, __u8 dsfield,
 	if (skb_dst(skb) && !t->parms.collect_md)
 		skb_dst(skb)->ops->update_pmtu(skb_dst(skb), NULL, skb, mtu);
 	if (skb->len - t->tun_hlen - eth_hlen > mtu && !skb_is_gso(skb)) {
+		if ((fl6->flowi6_proto == IPPROTO_IPIP)) {
+			struct iphdr  *ipv4h = ip_hdr(skb);
+			if (!(ipv4h->frag_off & htons(IP_DF)))
+				goto ipv6_frag;
+		}
 		*pmtu = mtu;
 		err = -EMSGSIZE;
 		goto tx_err_dst_release;
 	}
 
+ipv6_frag:
+
 	if (t->err_count > 0) {
 		if (time_before(jiffies,
 				t->err_time + IP6TUNNEL_ERR_TIMEO)) {
@@ -1212,6 +1219,11 @@ int ip6_tnl_xmit(struct sk_buff *skb, struct net_device *dev, __u8 dsfield,
 	ipv6h->nexthdr = proto;
 	ipv6h->saddr = fl6->saddr;
 	ipv6h->daddr = fl6->daddr;
+	if (fl6->flowi6_proto == IPPROTO_IPIP &&
+		skb->dev->type == ARPHRD_TUNNEL6 &&
+			(skb->len > ip6_skb_dst_mtu(skb))) {
+		skb->ignore_df = 1 ;
+	}
 	ip6tunnel_xmit(NULL, skb, dev);
 	return 0;
 tx_err_link_failure:
diff --git a/net/ipv6/ip6mr.c b/net/ipv6/ip6mr.c
index f38b22f54c09..c1408047ae95 100644
--- a/net/ipv6/ip6mr.c
+++ b/net/ipv6/ip6mr.c
@@ -123,6 +123,11 @@ static int ip6mr_rtm_dumproute(struct sk_buff *skb,
 static void mroute_clean_tables(struct mr6_table *mrt, bool all);
 static void ipmr_expire_process(unsigned long arg);
 
+#if IS_ENABLED(CONFIG_MCAST_HELPER)
+void (*five_tuple_info6_ptr)(struct sk_buff *skb, char iface_name[20]) = NULL;
+EXPORT_SYMBOL(five_tuple_info6_ptr);
+#endif
+
 #ifdef CONFIG_IPV6_MROUTE_MULTIPLE_TABLES
 #define ip6mr_for_each_table(mrt, net) \
 	list_for_each_entry_rcu(mrt, &net->ipv6.mr6_tables, list)
@@ -740,7 +745,7 @@ static void reg_vif_setup(struct net_device *dev)
 	dev->features		|= NETIF_F_NETNS_LOCAL;
 }
 
-static struct net_device *ip6mr_reg_vif(struct net *net, struct mr6_table *mrt)
+static struct net_device *ip6mr_reg_vif (struct net *net, struct mr6_table *mrt)
 {
 	struct net_device *dev;
 	char name[IFNAMSIZ];
@@ -950,7 +955,7 @@ static int mif6_add(struct net *net, struct mr6_table *mrt,
 		 */
 		if (mrt->mroute_reg_vif_num >= 0)
 			return -EADDRINUSE;
-		dev = ip6mr_reg_vif(net, mrt);
+		dev = ip6mr_reg_vif (net, mrt);
 		if (!dev)
 			return -ENOBUFS;
 		err = dev_set_allmulti(dev, 1);
@@ -1178,6 +1183,13 @@ static int ip6mr_cache_report(struct mr6_table *mrt, struct sk_buff *pkt,
 	} else
 #endif
 	{
+
+#if IS_ENABLED(CONFIG_MCAST_HELPER)
+		/* Send five tuple info to mcast helper */
+		if (ipv6_hdr(pkt)->nexthdr == 17)
+			if (five_tuple_info6_ptr != NULL)
+				five_tuple_info6_ptr(pkt, mrt->vif6_table[mifi].dev->name);
+#endif
 	/*
 	 *	Copy the IP header
 	 */
@@ -1466,7 +1478,6 @@ static int ip6mr_mfc_add(struct net *net, struct mr6_table *mrt,
 	for (i = 0; i < MAXMIFS; i++) {
 		if (IF_ISSET(i, &mfc->mf6cc_ifset))
 			ttls[i] = 1;
-
 	}
 
 	line = MFC6_HASH(&mfc->mf6cc_mcastgrp.sin6_addr, &mfc->mf6cc_origin.sin6_addr);
@@ -2082,7 +2093,7 @@ static int ip6mr_forward2(struct net *net, struct mr6_table *mrt,
 	return 0;
 }
 
-static int ip6mr_find_vif(struct mr6_table *mrt, struct net_device *dev)
+static int ip6mr_find_vif (struct mr6_table *mrt, struct net_device *dev)
 {
 	int ct;
 
@@ -2098,7 +2109,7 @@ static void ip6_mr_forward(struct net *net, struct mr6_table *mrt,
 {
 	int psend = -1;
 	int vif, ct;
-	int true_vifi = ip6mr_find_vif(mrt, skb->dev);
+	int true_vifi = ip6mr_find_vif (mrt, skb->dev);
 
 	vif = cache->mf6c_parent;
 	cache->mfc_un.res.pkt++;
@@ -2209,7 +2220,7 @@ int ip6_mr_input(struct sk_buff *skb)
 	cache = ip6mr_cache_find(mrt,
 				 &ipv6_hdr(skb)->saddr, &ipv6_hdr(skb)->daddr);
 	if (!cache) {
-		int vif = ip6mr_find_vif(mrt, skb->dev);
+		int vif = ip6mr_find_vif (mrt, skb->dev);
 
 		if (vif >= 0)
 			cache = ip6mr_cache_find_any(mrt,
@@ -2223,7 +2234,7 @@ int ip6_mr_input(struct sk_buff *skb)
 	if (!cache) {
 		int vif;
 
-		vif = ip6mr_find_vif(mrt, skb->dev);
+		vif = ip6mr_find_vif (mrt, skb->dev);
 		if (vif >= 0) {
 			int err = ip6mr_cache_unresolved(mrt, vif, skb);
 			read_unlock(&mrt_lock);
@@ -2310,7 +2321,7 @@ int ip6mr_get_route(struct net *net, struct sk_buff *skb, struct rtmsg *rtm,
 	read_lock(&mrt_lock);
 	cache = ip6mr_cache_find(mrt, &rt->rt6i_src.addr, &rt->rt6i_dst.addr);
 	if (!cache && skb->dev) {
-		int vif = ip6mr_find_vif(mrt, skb->dev);
+		int vif = ip6mr_find_vif (mrt, skb->dev);
 
 		if (vif >= 0)
 			cache = ip6mr_cache_find_any(mrt, &rt->rt6i_dst.addr,
@@ -2329,7 +2340,7 @@ int ip6mr_get_route(struct net *net, struct sk_buff *skb, struct rtmsg *rtm,
 		}
 
 		dev = skb->dev;
-		if (!dev || (vif = ip6mr_find_vif(mrt, dev)) < 0) {
+		if (!dev || (vif = ip6mr_find_vif (mrt, dev)) < 0) {
 			read_unlock(&mrt_lock);
 			return -ENODEV;
 		}
