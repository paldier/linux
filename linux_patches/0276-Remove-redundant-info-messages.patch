From b4ed081e21b8655339594b283e3b90ccfaad32a4 Mon Sep 17 00:00:00 2001
From: Oren Bakshe <oren.bakshe@intel.com>
Date: Sun, 16 Sep 2018 15:32:46 +0300
Subject: [PATCH] Remove redundant info messages

---
 drivers/net/ethernet/lantiq/ppv4/bm/pp_bm_drv.c    | 14 ++++++-------
 drivers/net/ethernet/lantiq/ppv4/bm/pp_bm_drv.h    |  2 +-
 .../net/ethernet/lantiq/ppv4/qos/pp_qos_linux.c    | 23 +++++++++++-----------
 3 files changed, 19 insertions(+), 20 deletions(-)

diff --git a/drivers/net/ethernet/lantiq/ppv4/bm/pp_bm_drv.c b/drivers/net/ethernet/lantiq/ppv4/bm/pp_bm_drv.c
index 393ea10afc61..16a7fe764c32 100644
--- a/drivers/net/ethernet/lantiq/ppv4/bm/pp_bm_drv.c
+++ b/drivers/net/ethernet/lantiq/ppv4/bm/pp_bm_drv.c
@@ -195,7 +195,7 @@ static void print_resource(struct device *dev,
 			   struct resource *r)
 {
 
-	dev_info(dev, "%s memory resource: start(0x%08zX), size(%zu)\n",
+	dev_dbg(dev, "%s memory resource: start(0x%08zX), size(%zu)\n",
 		 name,
 		 (size_t)(uintptr_t)r->start,
 		 (size_t)(uintptr_t)resource_size(r));
@@ -235,7 +235,7 @@ static int buffer_manager_probe(struct platform_device *pdev)
 	struct device_node		*node;
 	int				err;
 
-	dev_info(&pdev->dev, "BM probe...\n");
+	dev_dbg(&pdev->dev, "BM probe...\n");
 
 	node = pdev->dev.of_node;
 
@@ -342,7 +342,7 @@ static int buffer_manager_remove(struct platform_device *pdev)
 
 	bm_dbg_dev_clean(pdev);
 
-	dev_info(&pdev->dev, "buffer_manager_remove(): remove done\n");
+	dev_dbg(&pdev->dev, "buffer_manager_remove(): remove done\n");
 
 	return 0;
 }
@@ -388,7 +388,7 @@ static void __exit buffer_manager_driver_exit(void)
 
 	bm_dbg_module_clean();
 
-	pr_info("buffer manager driver exit done\n");
+	pr_debug("buffer manager driver exit done\n");
 }
 
 /*************************************************/
@@ -456,7 +456,7 @@ static s32 bmgr_wait_for_init_completion(void)
 	struct timespec start_ts;
 	struct timespec end_ts;
 
-	pr_info("Waiting for operation complete....");
+	pr_debug("Waiting for operation complete....");
 
 	getnstimeofday(&start_ts);
 
@@ -469,7 +469,7 @@ static s32 bmgr_wait_for_init_completion(void)
 		st = (RD_REG_32(BMGR_STATUS_REG_ADDR(BM_BASE)) & (1));
 	} while (st);
 
-	pr_info("Done\n");
+	pr_debug("Done\n");
 
 	return RC_SUCCESS;
 }
@@ -1912,7 +1912,7 @@ s32 bmgr_pool_configure(const struct bmgr_pool_params * const pool_params,
 		u32 temp = user_array_ptr >> 6;
 		// for debugging ...
 		if (index == 0 || index == pool_params->num_buffers - 1)
-			pr_info("bmgr_pool_configure: index %d) writing 0x%x to 0x%x\n",
+			pr_debug("bmgr_pool_configure: index %d) writing 0x%x to 0x%x\n",
 				index, temp, (u32)temp_pointers_table_ptr);
 
 		*temp_pointers_table_ptr = user_array_ptr >> 6;
diff --git a/drivers/net/ethernet/lantiq/ppv4/bm/pp_bm_drv.h b/drivers/net/ethernet/lantiq/ppv4/bm/pp_bm_drv.h
index 911eb8b07293..f033d3a903a5 100644
--- a/drivers/net/ethernet/lantiq/ppv4/bm/pp_bm_drv.h
+++ b/drivers/net/ethernet/lantiq/ppv4/bm/pp_bm_drv.h
@@ -50,7 +50,7 @@
 #define PP_BMGR_MAX_GROUPS		(16)
 
 /*! \def PP_BMGR_MAX_POLICIES
- *       Max supoorted policies. Real max defined in the DTS
+ *       Max supported policies. Real max defined in the DTS
  */
 #define PP_BMGR_MAX_POLICIES		(256)
 
diff --git a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_linux.c b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_linux.c
index 8e84e927005b..680cf46fd97f 100644
--- a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_linux.c
+++ b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_linux.c
@@ -139,8 +139,7 @@ static void print_resource(
 		const char *name,
 		struct resource *r)
 {
-
-	dev_info(dev, "%s memory resource: start(0x%08zX), size(%zu)\n",
+	dev_dbg(dev, "%s memory resource: start(0x%08zX), size(%zu)\n",
 			name,
 			(size_t)(uintptr_t)r->start,
 			(size_t)(uintptr_t)resource_size(r));
@@ -177,7 +176,7 @@ static void *map_mem_resource(
 			err);
 		return NULL;
 	}
-	dev_info(dev, "%s memory mapped to %p\n", name, addr);
+	dev_dbg(dev, "%s memory mapped to %p\n", name, addr);
 
 	return addr;
 }
@@ -206,7 +205,7 @@ static void __iomem *map_reg_resource(
 	if (!addr)
 		dev_err(&pdev->dev, "Map of resource %s failed\n", name);
 	else
-		dev_info(&pdev->dev, "%s register mapped to %p\n", name, addr);
+		dev_dbg(&pdev->dev, "%s register mapped to %p\n", name, addr);
 
 	return addr;
 }
@@ -262,7 +261,7 @@ static int pp_qos_get_resources(
 		return err;
 	}
 	info->fwcom.irqline = err;
-	dev_info(dev, "irq is %d\n", err);
+	dev_dbg(dev, "irq is %d\n", err);
 
 	return 0;
 }
@@ -329,7 +328,7 @@ static int pp_qos_config_from_of_node(
 
 	dev = &pdev->dev;
 	node = pdev->dev.of_node;
-	dev_info(&pdev->dev, "Using device tree info to init platform data\n");
+	dev_dbg(&pdev->dev, "Using device tree info to init platform data\n");
 	err = of_alias_get_id(node, "qos");
 	if (err < 0) {
 		dev_err(dev, "failed to get alias id, errno %d\n", err);
@@ -382,7 +381,7 @@ static int pp_qos_config_from_of_node(
 		dev_err(dev, "devm_memremap failed mapping ddr with %d\n", err);
 		return err;
 	}
-	dev_info(dev, "DDR memory mapped to %p\n", pdrvdata->ddr);
+	dev_dbg(dev, "DDR memory mapped to %p\n", pdrvdata->ddr);
 
 	addr = dmam_alloc_coherent(
 			dev,
@@ -399,7 +398,7 @@ static int pp_qos_config_from_of_node(
 	pdata->fw_stat = pdata->fw_logger_start + PPV4_QOS_LOGGER_BUF_SIZE;
 	pdrvdata->dbg.fw_logger_addr = addr;
 
-	dev_info(dev, "Dma allocated %u bytes for fw logger, bus address is 0x%08X, virtual addr is %p\n",
+	dev_dbg(dev, "Dma allocated %u bytes for fw logger, bus address is 0x%08X, virtual addr is %p\n",
 		 PPV4_QOS_LOGGER_BUF_SIZE,
 		 pdata->fw_logger_start,
 		 pdrvdata->dbg.fw_logger_addr);
@@ -416,7 +415,7 @@ static int pp_qos_config_from_platform_data(
 	struct ppv4_qos_platform_data *psrc;
 	void *memaddr;
 
-	dev_info(&pdev->dev, "Using platform info to init platform data\n");
+	dev_dbg(&pdev->dev, "Using platform info to init platform data\n");
 	psrc = (struct ppv4_qos_platform_data *)dev_get_platdata(&pdev->dev);
 	if (!psrc) {
 		dev_err(&pdev->dev, "Device contain no platform data\n");
@@ -452,7 +451,7 @@ static int pp_qos_probe(struct platform_device *pdev)
 	struct device *dev;
 
 	dev = &pdev->dev;
-	dev_info(dev, "Probing...\n");
+	dev_dbg(dev, "Probing...\n");
 
 	/* there is no devm_vmalloc so using dev_kzalloc */
 	pdata = devm_kzalloc(dev, sizeof(*pdata), GFP_KERNEL);
@@ -481,7 +480,7 @@ static int pp_qos_probe(struct platform_device *pdev)
 		return -ENODEV;
 	}
 
-	dev_info(dev, "id(%d), max_port(%u), pop_prioritize(%u)\n",
+	dev_dbg(dev, "id(%d), max_port(%u), pop_prioritize(%u)\n",
 			init_info.pl_data.id,
 			init_info.pl_data.max_port,
 			init_info.pl_data.wred_prioritize_pop
@@ -503,7 +502,7 @@ static int pp_qos_probe(struct platform_device *pdev)
 	if (err)
 		goto fail;
 
-	dev_info(dev, "Probe completed\n");
+	dev_dbg(dev, "Probe completed\n");
 	cur_dev = dev;
 	return 0;
 
