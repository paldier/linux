From aa095040e87b8c1ad867dcdd4d75e6f38ad054f4 Mon Sep 17 00:00:00 2001
From: Rekha Eswaran <rekha.eswaran@intel.com>
Date: Tue, 23 Apr 2019 11:45:28 +0800
Subject: [PATCH] DRVLIB_SW-2162 - Datapath changes from lgmdev x64 to master
 branch review comments addressed

---
 drivers/net/ethernet/lantiq/datapath/Kconfig       | 140 +++++----------
 drivers/net/ethernet/lantiq/datapath/Makefile      |   4 +-
 drivers/net/ethernet/lantiq/datapath/datapath.h    |   4 +-
 .../net/ethernet/lantiq/datapath/datapath_ioctl.c  |   2 +-
 .../net/ethernet/lantiq/datapath/datapath_misc.c   |   4 +-
 .../net/ethernet/lantiq/datapath/datapath_proc.c   | 197 ---------------------
 .../net/ethernet/lantiq/datapath/datapath_swdev.c  |   5 +-
 .../net/ethernet/lantiq/datapath/datapath_swdev.h  |   1 +
 .../net/ethernet/lantiq/datapath/gswip30/Kconfig   |   7 +
 .../lantiq/datapath/gswip30/datapath_mib.c         |  20 +--
 .../lantiq/datapath/gswip30/datapath_misc.c        |  13 +-
 .../lantiq/datapath/gswip30/datapath_misc.h        |   4 +-
 .../lantiq/datapath/gswip30/datapath_proc.c        |   2 +-
 .../ethernet/lantiq/datapath/gswip30/datapath_rx.c |   4 +-
 .../ethernet/lantiq/datapath/gswip30/datapath_tx.c |   2 +-
 .../net/ethernet/lantiq/datapath/gswip31/Kconfig   |  14 +-
 .../lantiq/datapath/gswip31/datapath_coc.c         |   2 +-
 .../lantiq/datapath/gswip31/datapath_misc.c        |   8 +-
 .../lantiq/datapath/gswip31/datapath_ppv4.c        |   8 +-
 .../lantiq/datapath/gswip31/datapath_ppv4_api.c    |   2 +-
 .../ethernet/lantiq/datapath/gswip31/datapath_rx.c |   4 +-
 .../ethernet/lantiq/datapath/gswip31/datapath_tx.c |   2 +-
 include/net/datapath_api.h                         |   4 +-
 include/net/datapath_api_umt.h                     |  18 +-
 include/net/datapath_inst.h                        |   2 +-
 25 files changed, 122 insertions(+), 351 deletions(-)

diff --git a/drivers/net/ethernet/lantiq/datapath/Kconfig b/drivers/net/ethernet/lantiq/datapath/Kconfig
index 9f6625048ac1..432e877ca187 100644
--- a/drivers/net/ethernet/lantiq/datapath/Kconfig
+++ b/drivers/net/ethernet/lantiq/datapath/Kconfig
@@ -1,7 +1,7 @@
 #
 # Datapath Lib
 #
-menuconfig LTQ_DATAPATH
+menuconfig INTEL_DATAPATH
 	bool "Datapath LIB"
 	default y
 	depends on LTQ_CBM
@@ -11,21 +11,21 @@ menuconfig LTQ_DATAPATH
 	  devices and different HW like to CBM or LRO.
 	  Take note: All devices need to register to datapath Lib first
 
-if LTQ_DATAPATH
+if INTEL_DATAPATH
 
-config LTQ_DATAPATH_ACA_CSUM_WORKAROUND
+config INTEL_DATAPATH_ACA_CSUM_WORKAROUND
 	bool "ACA Checksum Workaround"
 	default n
-	depends on SOC_GRX500 && LTQ_DATAPATH
+	depends on SOC_GRX500 && INTEL_DATAPATH
 	---help---
 	  It is to solve system bus hang hang issue in GRX500
 	  Once there is SW-UMT, there is no need to enable it
 	  in Facon-MX and later SOC, HW bug is fixed already
 	  So it should be disabled
 
-config LTQ_DATAPATH_MANUAL_PARSE
+config INTEL_DATAPATH_MANUAL_PARSE
 	bool "Datapath manual parse network protocol"
-	depends on LTQ_DATAPATH
+	depends on INTEL_DATAPATH
 	default y
 	---help---
 	  Manual parse network protocol for tcp offloading
@@ -33,65 +33,65 @@ config LTQ_DATAPATH_MANUAL_PARSE
 	  later need to enhance to support other tunnels
 	  Also need to study to use network stack information
 
-config LTQ_DATAPATH_COPY_LINEAR_BUF_ONLY
+config INTEL_DATAPATH_COPY_LINEAR_BUF_ONLY
 	bool "Datapath Copy linear buffer only for skb"
 	default n
-	depends on LTQ_DATAPATH
+	depends on INTEL_DATAPATH
 	---help---
 	  Datapath Copy linear buffer only for skb if need to alloc new buffer.
 	  For TSO/GSO case, it will not consider
 	  Make sure TSO/GSO always with enough header room to insert pmac header
 	  need to enhance in the future
 
-config LTQ_DATAPATH_DBG
+config INTEL_DATAPATH_DBG
 	bool "Datapath Debug Tool"
 	default y
-	depends on LTQ_DATAPATH
+	depends on INTEL_DATAPATH
 	---help---
 	  Datapath Debug Tool is used to provide simple debug tool
 	  All other debug tools is based on it
 	  Once it is disabled, all other datapath debug tool disabled.
 	  By default had better enable it
 
-config LTQ_DATAPATH_DBG_PROTOCOL_PARSE
+config INTEL_DATAPATH_DBG_PROTOCOL_PARSE
 	bool "Datapath Debug Tool for hw checksum's protocol parsing"
 	default n
-	depends on LTQ_DATAPATH_DBG
+	depends on INTEL_DATAPATH_DBG
 	---help---
 	  Datapath Debug Tool for hw checksum's protocol parsing
 	  Only for debugging purpose
 	  By default it should be disabled.
-config LTQ_DATAPATH_EXTRA_DEBUG
+config INTEL_DATAPATH_EXTRA_DEBUG
 	bool "extra debugging support"
 	default n
-	depends on  LTQ_DATAPATH_DBG
+	depends on  INTEL_DATAPATH_DBG
 	---help---
 	  This is to enable/disable extra strict debugging support.
 	  This is useful during initial system bring up
 	  It will affect performance
 	  By default it should be disabled.
 
-config LTQ_DATAPATH_SWDEV_TEST
+config INTEL_DATAPATH_SWDEV_TEST
 	bool "Test Switchdev Event"
 	default n
-	depends on  LTQ_DATAPATH_DBG && LTQ_DATAPATH_SWITCHDEV
+	depends on  INTEL_DATAPATH_DBG && INTEL_DATAPATH_SWITCHDEV
 	---help---
 	  This is to force enable macro CONFIG_SOC_SWITCHDEV_TESTING
 	  in order to test switchdev event
 	  without real switchdev handling
 
-config LTQ_DATAPATH_SKB
+config INTEL_DATAPATH_SKB
 	bool "Datapath Skb Hack"
 	default n
-	depends on  LTQ_DATAPATH
+	depends on  INTEL_DATAPATH
 	---help---
 	  For Ethernet OAM and MPE FW purpose testing purpose,
 	  It needs to hack SKB
 
-config LTQ_DATAPATH_MPE_FASTHOOK_TEST
+config INTEL_DATAPATH_MPE_FASTHOOK_TEST
 	bool "MPE Fast Hook Test"
 	default n
-	depends on  LTQ_DATAPATH_SKB
+	depends on  INTEL_DATAPATH_SKB
 	---help---
 	  MPE FW Fast Hook is used to quick verify MPE FW Functionality without
 	  full PPA support. Once it is enabled, it will add some fields in skb structure
@@ -99,130 +99,88 @@ config LTQ_DATAPATH_MPE_FASTHOOK_TEST
 	  pre-build out of this build system.
 	  The testing code by default is not checked in.
 
-config LTQ_DATAPATH_ETH_OAM
+config INTEL_DATAPATH_ETH_OAM
 	bool "ETH OAM SUPPORT"
 	default n
-	depends on  LTQ_DATAPATH_SKB
+	depends on  INTEL_DATAPATH_SKB
 	---help---
 	  Datapath Ethernet OAM support. Once it is enabled, it will add some fields in skb structure
 	  in order to support MPE FAST HOOK. The reason is that some network driver is
 	  pre-build out of this build system.
 	  The testing code by default is not checked in.
 
-config LTQ_DATAPATH_SWITCHDEV
+config INTEL_DATAPATH_SWITCHDEV
 	bool "Switchdev Support"
 	default n
-	depends on  LTQ_DATAPATH && NET_SWITCHDEV
+	depends on  INTEL_DATAPATH && NET_SWITCHDEV
 	---help---
 	  Switchdev support for different switch in datapath
 
-config LTQ_DATAPATH_PTP1588
+config INTEL_DATAPATH_PTP1588
 	bool "PTP1588 Support"
 	default n
-	depends on  LTQ_DATAPATH
+	depends on  INTEL_DATAPATH
 	---help---
 	  PTP1588 support in datapath
 
-config LTQ_DATAPATH_PTP1588_SW_WORKAROUND
+config INTEL_DATAPATH_PTP1588_SW_WORKAROUND
         bool "PTP1588 Software Workaround"
         default n
-        depends on  LTQ_DATAPATH && LTQ_DATAPATH_PTP1588
+        depends on  INTEL_DATAPATH && INTEL_DATAPATH_PTP1588
         ---help---
           PTP1588 Software Workaround
 
-config LTQ_DATAPATH_DDR_SIMULATE_GSWIP31
+config INTEL_DATAPATH_DDR_SIMULATE_GSWIP31
 	bool "Force PRX300 SOC"
 	default n
-	depends on LTQ_DATAPATH
+	depends on INTEL_DATAPATH
 	---help---
 	  test prx300 HAL in GRX350 boards
 
-config LTQ_DATAPATH_CPUFREQ
+config INTEL_DATAPATH_CPUFREQ
 	bool "Datapath DFS(COC) support"
-	depends on LTQ_DATAPATH && CPU_FREQ
+	depends on INTEL_DATAPATH && CPU_FREQ
 	default n
 	---help---
 	  It is to support DFS(COC) in Datapath
 
-config INTEL_DATAPATH
-	bool
-	depends on LTQ_DATAPATH
-	default y
-
-config INTEL_DATAPATH_ACA_CSUM_WORKAROUND
-	bool
-	default y
-	depends on SOC_GRX500 && INTEL_DATAPATH && LTQ_DATAPATH_ACA_CSUM_WORKAROUND
-
-config INTEL_DATAPATH_MANUAL_PARSE
-	bool
-	default y
-	depends on INTEL_DATAPATH && LTQ_DATAPATH_MANUAL_PARSE
-
-config INTEL_DATAPATH_COPY_LINEAR_BUF_ONLY
-	bool
-	default y
-	depends on INTEL_DATAPATH && LTQ_DATAPATH_COPY_LINEAR_BUF_ONLY
-
-config INTEL_DATAPATH_DBG
-	bool
-	default y
-	depends on INTEL_DATAPATH && LTQ_DATAPATH_DBG
-
-config INTEL_DATAPATH_DBG_PROTOCOL_PARSE
-	bool
-	default y
-	depends on INTEL_DATAPATH_DBG && LTQ_DATAPATH_DBG_PROTOCOL_PARSE
-
-config INTEL_DATAPATH_EXTRA_DEBUG
-	bool
-	default y
-	depends on  INTEL_DATAPATH_DBG && LTQ_DATAPATH_EXTRA_DEBUG
-
-config INTEL_DATAPATH_SWDEV_TEST
-	bool
-	default y
-	depends on  INTEL_DATAPATH_DBG && INTEL_DATAPATH_SWITCHDEV && LTQ_DATAPATH_SWDEV_TEST
-
-config INTEL_DATAPATH_SKB
-	bool
-	default y
-	depends on  INTEL_DATAPATH && LTQ_DATAPATH_SKB
-
-config INTEL_DATAPATH_MPE_FASTHOOK_TEST
+#
+# Datapath Lib
+#
+config LTQ_DATAPATH
 	bool
 	default y
-	depends on  INTEL_DATAPATH_SKB && LTQ_DATAPATH_MPE_FASTHOOK_TEST
+	depends on INTEL_DATAPATH
 
-config INTEL_DATAPATH_ETH_OAM
+config LTQ_DATAPATH_ACA_CSUM_WORKAROUND
 	bool
 	default y
-	depends on  INTEL_DATAPATH_SKB && LTQ_DATAPATH_ETH_OAM
+	default LTQ_DATAPATH_ACA_CSUM_WORKAROUND
 
-config INTEL_DATAPATH_SWITCHDEV
+config LTQ_DATAPATH_MANUAL_PARSE
 	bool
 	default y
-	depends on  INTEL_DATAPATH && LTQ_DATAPATH_SWITCHDEV
+	depends on INTEL_DATAPATH_MANUAL_PARSE
 
-config INTEL_DATAPATH_PTP1588
+config LTQ_DATAPATH_SKB
 	bool
 	default y
-	depends on  INTEL_DATAPATH && LTQ_DATAPATH_PTP1588
+	depends on INTEL_DATAPATH_SKB
 
-config INTEL_DATAPATH_PTP1588_SW_WORKAROUND
+config LTQ_DATAPATH_PTP1588
 	bool
 	default y
-        depends on  INTEL_DATAPATH && INTEL_DATAPATH_PTP1588 && LTQ_DATAPATH_PTP1588_SW_WORKAROUND
+	depends on INTEL_DATAPATH_PTP1588
 
-config INTEL_DATAPATH_DDR_SIMULATE_GSWIP31
+config LTQ_DATAPATH_PTP1588_SW_WORKAROUND
 	bool
 	default y
-	depends on INTEL_DATAPATH && LTQ_DATAPATH_DDR_SIMULATE_GSWIP31
+	depends on INTEL_DATAPATH_PTP1588_SW_WORKAROUND
 
-config INTEL_DATAPATH_CPUFREQ
+config LTQ_DATAPATH_CPUFREQ
 	bool
 	default y
-	depends on INTEL_DATAPATH && CPU_FREQ && LTQ_DATAPATH_CPUFREQ
+	depends on INTEL_DATAPATH_CPUFREQ
 
 source "drivers/net/ethernet/lantiq/datapath/gswip31/Kconfig"
 source "drivers/net/ethernet/lantiq/datapath/gswip30/Kconfig"
diff --git a/drivers/net/ethernet/lantiq/datapath/Makefile b/drivers/net/ethernet/lantiq/datapath/Makefile
index 646b5d71eba6..fa6fd06caa7e 100644
--- a/drivers/net/ethernet/lantiq/datapath/Makefile
+++ b/drivers/net/ethernet/lantiq/datapath/Makefile
@@ -1,4 +1,4 @@
-obj-$(CONFIG_LTQ_DATAPATH) = datapath_api.o datapath_proc_api.o datapath_proc.o  datapath_misc.o datapath_notifier.o datapath_logical_dev.o datapath_instance.o datapath_platform_dev.o datapath_soc.o datapath_qos.o datapath_proc_qos.o
+obj-$(CONFIG_INTEL_DATAPATH) = datapath_api.o datapath_proc_api.o datapath_proc.o  datapath_misc.o datapath_notifier.o datapath_logical_dev.o datapath_instance.o datapath_platform_dev.o datapath_soc.o datapath_qos.o datapath_proc_qos.o
 
 ifneq ($(CONFIG_INTEL_DATAPATH_HAL_GSWIP32),)
 obj-$(CONFIG_INTEL_DATAPATH) += gswip32/
@@ -14,5 +14,5 @@ ifneq ($(CONFIG_INTEL_DATAPATH_SWITCHDEV),)
 obj-$(CONFIG_INTEL_DATAPATH) += datapath_swdev.o
 endif
 
-obj-$(CONFIG_LTQ_DATAPATH) += datapath_ioctl.o
+obj-$(CONFIG_INTEL_DATAPATH) += datapath_ioctl.o
 
diff --git a/drivers/net/ethernet/lantiq/datapath/datapath.h b/drivers/net/ethernet/lantiq/datapath/datapath.h
index 76c10e2c0ac7..38a3b276b08c 100644
--- a/drivers/net/ethernet/lantiq/datapath/datapath.h
+++ b/drivers/net/ethernet/lantiq/datapath/datapath.h
@@ -19,8 +19,6 @@
 #include <net/ppa/qos_mgr_tc_hook.h>
 //#include "../cqm/cqm_common.h"
 
-//#define CONFIG_INTEL_DATAPATH_DUMMY_QOS
-//#define DUMMY_PPV4_QOS_API_OLD
 #define dp_vlan_dev_priv vlan_dev_priv
 #ifdef DUMMY_PPV4_QOS_API_OLD
 /*TODO:currently need to include both header file */
@@ -357,7 +355,7 @@ enum DP_DBG_FLAG {
 	DP_DBG_ENUM_OR_STRING(DP_DBG_FLAG_MAX, "")\
 }
 
-enum {
+enum QOS_FLAG {
 	NODE_LINK_ADD = 0, /*add a link node */
 	NODE_LINK_GET,     /*get a link node */
 	NODE_LINK_EN_GET,  /*Get link status: enable/disable */
diff --git a/drivers/net/ethernet/lantiq/datapath/datapath_ioctl.c b/drivers/net/ethernet/lantiq/datapath/datapath_ioctl.c
index f88bf2d643a2..2e00682eda21 100644
--- a/drivers/net/ethernet/lantiq/datapath/datapath_ioctl.c
+++ b/drivers/net/ethernet/lantiq/datapath/datapath_ioctl.c
@@ -4,6 +4,7 @@
 static int dp_ndo_ptp_ioctl(struct net_device *dev,
 			    struct ifreq *ifr,
 			    int cmd);
+#endif
 
 static int get_tsinfo(struct net_device *dev,
 		      struct ethtool_ts_info *ts_info)
@@ -29,7 +30,6 @@ static int get_tsinfo(struct net_device *dev,
 		 dev->name);
 	return 0;
 }
-#endif
 
 int dp_ops_set(void **dev_ops, int ops_cb_offset,
 	       size_t ops_size, void **dp_orig_ops_cb,
diff --git a/drivers/net/ethernet/lantiq/datapath/datapath_misc.c b/drivers/net/ethernet/lantiq/datapath/datapath_misc.c
index 5ee13a1c4870..f0ab26631967 100644
--- a/drivers/net/ethernet/lantiq/datapath/datapath_misc.c
+++ b/drivers/net/ethernet/lantiq/datapath/datapath_misc.c
@@ -42,7 +42,7 @@
 #define dp_memcpy(x, y, z)   memcpy(x, y, z)
 #endif
 
-#ifdef CONFIG_INTEL_DATAPATH_CPUFREQ
+#if IS_ENABLED(CONFIG_INTEL_DATAPATH_CPUFREQ)
 #include <linux/cpufreq.h>
 static int dp_coc_cpufreq_transition_notifier(struct notifier_block *nb,
 					      unsigned long event, void *data);
@@ -1381,7 +1381,7 @@ int32_t dp_sync_subifid_priv(struct net_device *dev, char *subif_name,
 	return 0;
 }
 
-#ifdef CONFIG_INTEL_DATAPATH_CPUFREQ
+#if IS_ENABLED(CONFIG_INTEL_DATAPATH_CPUFREQ)
 static int dp_coc_cpufreq_policy_notifier(struct notifier_block *nb,
 					  unsigned long event, void *data)
 {
diff --git a/drivers/net/ethernet/lantiq/datapath/datapath_proc.c b/drivers/net/ethernet/lantiq/datapath/datapath_proc.c
index 26dc53d19d89..5efa9fb6e0ea 100644
--- a/drivers/net/ethernet/lantiq/datapath/datapath_proc.c
+++ b/drivers/net/ethernet/lantiq/datapath/datapath_proc.c
@@ -518,203 +518,6 @@ ssize_t proc_dbg_write(struct file *file, const char *buf, size_t count,
 }
 #endif
 
-struct property_info {
-	char *name;
-	int type;
-};
-
-enum PROPERTY_TYPE {
-	PROP_UNKNOWN = 0,
-	PROP_STRING,
-	PROP_REG,
-	PROP_RANGER,
-	PROP_U32_OCT,
-	PROP_U32_HEX,
-	PROP_HANDLE,
-	PROP_REFERENCE
-};
-
-struct property_info prop_info[] = {
-	{"compatible", PROP_STRING},
-	{"status", PROP_STRING},
-	{"name", PROP_STRING},
-	{"label", PROP_STRING},
-	{"model", PROP_STRING},
-	{"reg-names", PROP_STRING},
-	{"reg", PROP_REG},
-	{"interrupts", PROP_U32_OCT},
-	{"ranges", PROP_RANGER},
-	{"dma-ranges", PROP_RANGER},
-	{"phandle", PROP_HANDLE},
-	{"interrupt-parent", PROP_HANDLE}
-
-};
-
-int get_property_info(char *name)
-{
-	int i;
-
-	if (!name)
-		return PROP_UNKNOWN;
-	for (i = 0; i < ARRAY_SIZE(prop_info); i++) {
-		if (dp_strncmpi(name, prop_info[i].name, strlen(prop_info[i].name)) == 0)
-			return prop_info[i].type;
-	}
-
-	return PROP_UNKNOWN;
-}
-
-/*0--not string
- *1--is string
- */
-/*#define LOCAL_STRING_PARSE*/
-int is_print_string(char *p, int len)
-{
-	int i;
-
-	if (!p || !len)
-		return 0;
-	if (p[len - 1] != 0)
-		return 0;
-	for (i = 0; i < len - 1; i++) {
-#ifdef LOCAL_STRING_PARSE
-		if (!(((p[i] >= 'a') && (p[i] <= 'z')) ||
-		      ((p[i] >= 'A') && (p[i] <= 'Z')) ||
-		      ((p[i] >= '0') && (p[i] <= '9')) ||
-		      (p[i] == '.') ||
-		      (p[i] == '/')))
-#else
-		if (!isprint(p[i]) && p[i] != 0) /*string list */
-#endif
-			return 0;
-	}
-	if (p[0] == 0)
-		return 0;
-
-	return 1;
-}
-
-#define INDENT_BASE 3 /*3 Space */
-void print_property(struct device_node *node, struct property *p, char *indent)
-{
-	int type;
-	int k, times, i;
-
-	if (!p || !node)
-		return;
-	type = get_property_info(p->name);
-	if (type == PROP_UNKNOWN) {
-		if (is_print_string(p->value, p->length))
-			type = PROP_STRING;
-		else if ((p->length % 4) == 0)
-			type = PROP_U32_OCT;
-	}
-	if (type == PROP_STRING) {
-		char *s = (char *)p->value;
-		int k = 0;
-
-		PR_INFO("%s  %s=", indent, p->name);
-		do {
-			PR_INFO("\"%s\"", s);
-			k += strlen(s) + 1;
-			if (k < p->length) {
-				s += strlen(s) + 1;
-				PR_INFO(",");
-				continue;
-			}
-			PR_INFO("\n");
-			break;
-		} while (1);
-	} else if (type == PROP_U32_OCT) { /*each item is 4 bytes*/
-		PR_INFO("%s  %s=<", indent, p->name);
-		times = p->length / 4;
-		if (times) {
-			for (k = 0; k < times; k++)
-				PR_INFO("%d ", *(int *)(p->value + k * 4));
-		}
-		PR_INFO(">\n");
-	} else if (type == PROP_U32_HEX) { /*each item is 4 bytes*/
-		PR_INFO("%s  %s=<", indent, p->name);
-		times = p->length / 4;
-		if (times) {
-			for (k = 0; k < times; k++)
-				PR_INFO("0x%x ", *(int *)(p->value + k * 4));
-		}
-		PR_INFO(">\n");
-	} else if (type == PROP_REG) {/*two tuple: address and size */
-		int n = (of_n_addr_cells(node) + of_n_size_cells(node));
-		int j;
-
-		PR_INFO("%s  %s=<", indent, p->name);
-		times = p->length / (4 * n);
-		if (times) {
-			for (k = 0; k < times; k++) {
-				if (k)
-					PR_INFO("%s    ", indent);
-				for (j = 0; j < n; j++)
-					PR_INFO("0x%x ",
-						*(int *)(p->value + k * 8 +
-						4 * j));
-				if (k != (times - 1))
-					PR_INFO("\n");
-			}
-		}
-		PR_INFO(">\n");
-	} else if (type == PROP_RANGER) {
-		/*triple: child-bus-address, parent-bus-address, length */
-		PR_INFO("%s  %s=<", indent, p->name);
-		times = p->length / (4 * 3);
-		if (times) {
-			for (k = 0; k < times; k++) {
-				if (!k)
-					PR_INFO("0x%x 0x%x 0x%x",
-						*(int *)(p->value + k * 8),
-						*(int *)(p->value + k * 8 + 4),
-						*(int *)(p->value + k * 8 + 8));
-				else
-					PR_INFO("%s    0x%x 0x%x 0x%x", indent,
-						*(int *)(p->value + k * 8),
-						*(int *)(p->value + k * 8 + 4),
-						*(int *)(p->value + k * 8 + 8));
-				if (k != (times - 1))
-					PR_INFO("\n");
-			}
-		}
-		PR_INFO(">\n");
-	} else if (type == PROP_HANDLE) {
-		struct device_node *tmp = of_find_node_by_phandle(
-			be32_to_cpup((u32 *)p->value));
-		int offset = 0;
-
-		if (tmp) {
-			PR_INFO("%s  %s=<&%s", indent, p->name, tmp->name);
-			offset = 1;
-		} else {
-			PR_INFO("%s  %s=<", indent, p->name);
-		}
-		if (p->length >= 4) {
-			int times = p->length / 4;
-
-			if (times) {
-				for (k = offset; k < times; k++)
-					PR_INFO("%d ",
-						*(int *)(p->value + k * 4));
-			}
-		}
-		PR_INFO(">\n");
-	} else {
-		PR_INFO("%s  %s length=%d\n", indent, p->name, p->length);
-		if (p->length) {
-			char *s = (unsigned char *)p->value;
-
-			PR_INFO("%s   ", indent);
-			for (i = 0; i < p->length; i++)
-				PR_INFO("0x%02x ", s[i]);
-			PR_INFO("\n");
-		}
-	}
-}
-
 static struct dp_proc_entry dp_proc_entries[] = {
 	/*name single_callback_t multi_callback_t/_start write_callback_t */
 #if defined(CONFIG_INTEL_DATAPATH_DBG) && CONFIG_INTEL_DATAPATH_DBG
diff --git a/drivers/net/ethernet/lantiq/datapath/datapath_swdev.c b/drivers/net/ethernet/lantiq/datapath/datapath_swdev.c
index 29a1a743799e..4d9a88e585ff 100644
--- a/drivers/net/ethernet/lantiq/datapath/datapath_swdev.c
+++ b/drivers/net/ethernet/lantiq/datapath/datapath_swdev.c
@@ -691,8 +691,6 @@ int dp_del_br_if(struct net_device *dev, struct net_device *br_dev,
 	return 0;
 }
 
-//#define CONFIG_INTEL_DATAPATH_SWDEV_TEST
-
 static int dp_swdev_port_attr_set(struct net_device *dev,
 				  const struct switchdev_attr *attr,
 				  struct switchdev_trans *trans)
@@ -897,8 +895,7 @@ static int dp_swdev_port_fdb_dump(struct net_device *dev,
 #if 0
 	int err = 0;
 	struct fdb_tbl *fdb_d = NULL;
-	
-	extern struct list_head fdb_tbl_list_31;
+
 	list_for_each_entry(fdb_d, &fdb_tbl_list_31, fdb_list) {
 		if (fdb_d) {
 			if (fdb_d->port_dev != dev) {
diff --git a/drivers/net/ethernet/lantiq/datapath/datapath_swdev.h b/drivers/net/ethernet/lantiq/datapath/datapath_swdev.h
index ba53def11eba..af322d58faae 100644
--- a/drivers/net/ethernet/lantiq/datapath/datapath_swdev.h
+++ b/drivers/net/ethernet/lantiq/datapath/datapath_swdev.h
@@ -57,6 +57,7 @@ struct fdb_tbl {
 	__be16 vid;
 };
 
+extern struct list_head fdb_tbl_list;
 extern struct hlist_head
 	g_bridge_id_entry_hash_table[DP_MAX_INST][BR_ID_ENTRY_HASH_TABLE_SIZE];
 int dp_swdev_bridge_id_entry_free(int instance);
diff --git a/drivers/net/ethernet/lantiq/datapath/gswip30/Kconfig b/drivers/net/ethernet/lantiq/datapath/gswip30/Kconfig
index 3c33b5dfa665..441c8a362519 100644
--- a/drivers/net/ethernet/lantiq/datapath/gswip30/Kconfig
+++ b/drivers/net/ethernet/lantiq/datapath/gswip30/Kconfig
@@ -15,4 +15,11 @@ config INTEL_DATAPATH_HAL_GSWIP30_MIB
 	default y
 	---help---
 	  It is to aggregate GSWIP-L/R, TMU and driver's MIB counter
+
+config INTEL_DATAPATH_MIB_TMU_MPE_MIB
+        bool "Support TMU-HAL mib API and MPE_HAL mib API"
+        default y
+        depends on INTEL_DATAPATH_MIB_HAL_GSWIP30_MIB
+        ---help---
+          it is to provide TMU HAL mib api
 endif
diff --git a/drivers/net/ethernet/lantiq/datapath/gswip30/datapath_mib.c b/drivers/net/ethernet/lantiq/datapath/gswip30/datapath_mib.c
index 768357bc2dad..6552c62a18cd 100644
--- a/drivers/net/ethernet/lantiq/datapath/gswip30/datapath_mib.c
+++ b/drivers/net/ethernet/lantiq/datapath/gswip30/datapath_mib.c
@@ -185,7 +185,7 @@ struct task_struct *thread;
 static struct timer_list exp_timer;	/*timer setting */
 #endif
 
-#if IS_ENABLED(CONFIG_LTQ_DATAPATH_MIB_TMU_MPE_MIB)
+#if IS_ENABLED(CONFIG_INTEL_DATAPATH_MIB_TMU_MPE_MIB)
 static int32_t (*tmu_hal_get_qos_m_local)(struct net_device *dev,
 					  dp_subif_t *subif_id,
 					  s32 queue_id,
@@ -565,7 +565,7 @@ static int update_port_mib_lower_lvl(dp_subif_t *subif, u32 flag)
 	GSW_return_t ret;
 	struct mibs_low_lvl_port *curr;
 	dp_subif_t tmp;
-#if IS_ENABLED(CONFIG_LTQ_DATAPATH_MIB_TMU_MPE_MIB)
+#if IS_ENABLED(CONFIG_INTEL_DATAPATH_MIB_TMU_MPE_MIB)
 	int update_flag, i;
 	struct pmac_port_info *port;
 #endif
@@ -613,7 +613,7 @@ static int update_port_mib_lower_lvl(dp_subif_t *subif, u32 flag)
 	if (ret)/*workaroud */
 		curr->r = last[tmp.port_id].r;
 
-#if IS_ENABLED(CONFIG_LTQ_DATAPATH_MIB_TMU_MPE_MIB)
+#if IS_ENABLED(CONFIG_INTEL_DATAPATH_MIB_TMU_MPE_MIB)
 	/* collect all mib per VAP for TMU and MPE MIB */
 	tmu_hal_get_qos_m_local = tmu_hal_get_qos_mib_hook_fn;
 	port = get_port_info(tmp.port_id);
@@ -663,7 +663,7 @@ static int update_port_mib_lower_lvl(dp_subif_t *subif, u32 flag)
 					  &curr->redir);
 		if (ret)	/*workaroud */
 			curr->redir = last[tmp.port_id].redir;
-#if IS_ENABLED(CONFIG_LTQ_DATAPATH_MIB_TMU_MPE_MIB)
+#if IS_ENABLED(CONFIG_INTEL_DATAPATH_MIB_TMU_MPE_MIB)
 		tmu_hal_get_csum_ol_m_local =
 			tmu_hal_get_csum_ol_mib_hook_fn;
 		update_flag = 0;
@@ -763,7 +763,7 @@ static int update_vap_mib_lower_lvl(dp_subif_t *subif, u32 flag)
 		PR_ERR("get_gsw_itf_rmon failed for port/vap(%d/%d)", port_id,
 		       vap);
 	}
-#if IS_ENABLED(CONFIG_LTQ_DATAPATH_MIB_TMU_MPE_MIB)
+#if IS_ENABLED(CONFIG_INTEL_DATAPATH_MIB_TMU_MPE_MIB)
 	/*get TMU mib */
 	tmu_hal_get_qos_m_local = tmu_hal_get_qos_mib_hook_fn;
 	if (!tmu_hal_get_qos_m_local) {
@@ -1617,7 +1617,7 @@ int dp_clear_netif_mib_30(dp_subif_t *subif, void *priv, u32 flag)
 		gsw_mib_reset_30(1, 0);
 		tmu_reset_mib_all(flag);
 		dp_clear_all_mib_inside(flag);
-#if IS_ENABLED(CONFIG_LTQ_DATAPATH_MIB_TMU_MPE_MIB)
+#if IS_ENABLED(CONFIG_INTEL_DATAPATH_MIB_TMU_MPE_MIB)
 		tmu_hal_clear_qos_m_local =
 			tmu_hal_clear_qos_mib_hook_fn;
 		if (tmu_hal_clear_qos_m_local)
@@ -1707,7 +1707,7 @@ int dp_clear_netif_mib_30(dp_subif_t *subif, void *priv, u32 flag)
 		gsw_core_api((dp_gsw_cb)gsw_r->gsw_rmon_ops.RMON_Clear,
 			     gsw_r, &rmon);
 
-#if IS_ENABLED(CONFIG_LTQ_DATAPATH_MIB_TMU_MPE_MIB)
+#if IS_ENABLED(CONFIG_INTEL_DATAPATH_MIB_TMU_MPE_MIB)
 		tmu_hal_clear_csum_ol_m_local =
 			tmu_hal_clear_csum_ol_mib_hook_fn;
 		if (tmu_hal_clear_csum_ol_m_local)
@@ -1728,7 +1728,7 @@ int dp_clear_netif_mib_30(dp_subif_t *subif, void *priv, u32 flag)
 		gsw_core_api((dp_gsw_cb)gsw_r->gsw_rmon_ops.RMON_Clear,
 			     gsw_r, &rmon);
 	}
-#if IS_ENABLED(CONFIG_LTQ_DATAPATH_MIB_TMU_MPE_MIB)
+#if IS_ENABLED(CONFIG_INTEL_DATAPATH_MIB_TMU_MPE_MIB)
 	tmu_hal_clear_qos_m_local = tmu_hal_clear_qos_mib_hook_fn;
 	if (tmu_hal_clear_qos_m_local)
 		tmu_hal_clear_qos_m_local(NULL, subif, -1, flag);
@@ -1829,7 +1829,7 @@ int proc_mib_port_dump(struct seq_file *s, int pos)
 ssize_t proc_mib_port_write(struct file *file, const char *buf, size_t count,
 			    loff_t *ppos)
 {
-#if IS_ENABLED(CONFIG_LTQ_DATAPATH_MIB_TMU_MPE_MIB)
+#if IS_ENABLED(CONFIG_INTEL_DATAPATH_MIB_TMU_MPE_MIB)
 	int len;
 	char str[64];
 	int i, num, res;
@@ -1953,7 +1953,7 @@ ssize_t proc_mib_port_write(struct file *file, const char *buf, size_t count,
 	return count;
 #endif
 	return count;
-#if IS_ENABLED(CONFIG_LTQ_DATAPATH_MIB_TMU_MPE_MIB)
+#if IS_ENABLED(CONFIG_INTEL_DATAPATH_MIB_TMU_MPE_MIB)
 help:
 	PR_INFO("usage:\n");
 	PR_INFO("  test qos_mib  api:      echo qos_mib        > %s\n",
diff --git a/drivers/net/ethernet/lantiq/datapath/gswip30/datapath_misc.c b/drivers/net/ethernet/lantiq/datapath/gswip30/datapath_misc.c
index e5a970cdfb26..5558c51b78e7 100644
--- a/drivers/net/ethernet/lantiq/datapath/gswip30/datapath_misc.c
+++ b/drivers/net/ethernet/lantiq/datapath/gswip30/datapath_misc.c
@@ -457,6 +457,12 @@ static int dp_platform_set(int inst, u32 flag)
 	return 0;
 }
 
+static int dev_platform_set(int inst, u8 ep, struct dp_dev_data *data,
+			     u32 flags)
+{
+	return 0;
+}
+
 static int port_platform_set(int inst, u8 ep, struct dp_port_data *data,
 			     u32 flags)
 {
@@ -472,6 +478,8 @@ static int port_platform_set(int inst, u8 ep, struct dp_port_data *data,
 	dma_ch_base = port_info->dma_ch_base;
 	for (i = 0; i < port_info->deq_port_num; i++) {
 		dp_deq_port_tbl[inst][i + idx].dp_port = ep;
+
+		/* For G.INT num_dma_chan 8 or 16, for other 1 */
 		if (port_info->num_dma_chan > 1) {
 			dp_deq_port_tbl[inst][i + idx].dma_chan = dma_chan++;
 			dp_deq_port_tbl[inst][i + idx].dma_ch_offset =
@@ -531,7 +539,7 @@ static int subif_hw_set(int inst, int portid, int subif_ix,
 	dp_deq_port_tbl[inst][cqe_deq].ref_cnt++;
 	if (port_info->num_dma_chan)
 		atomic_inc(&(dp_dma_chan_tbl[inst] + dma_ch_offset)->ref_cnt);
-	DP_DEBUG(DP_DBG_FLAG_REG, "cbm[%d].ref_cnt=%d tx_dma_chan: (ref=%d)\n",
+	DP_DEBUG(DP_DBG_FLAG_REG, "cbm[%d].ref_cnt=%d tx_dma_chan ref=%d\n",
 		 cqe_deq,
 		 dp_deq_port_tbl[inst][cqe_deq].ref_cnt,
 		 atomic_read(&(dp_dma_chan_tbl[inst] +
@@ -572,7 +580,7 @@ static int subif_hw_reset(int inst, int portid, int subif_ix,
 	dp_deq_port_tbl[inst][cqe_deq].ref_cnt--;
 	if (port_info->num_dma_chan)
 		atomic_dec(&(dp_dma_chan_tbl[inst] + dma_ch_offset)->ref_cnt);
-	DP_DEBUG(DP_DBG_FLAG_REG, "cbm[%d].ref_cnt=%d tx_dma_chan: (ref=%d)\n",
+	DP_DEBUG(DP_DBG_FLAG_REG, "cbm[%d].ref_cnt=%d tx_dma_chan ref=%d\n",
 		 cqe_deq,
 		 dp_deq_port_tbl[inst][cqe_deq].ref_cnt,
 		 atomic_read(&(dp_dma_chan_tbl[inst] +
@@ -662,6 +670,7 @@ int register_dp_cap_gswip30(int flag)
 	cap.info.ver = GSWIP30_VER;
 	cap.info.dp_platform_set = dp_platform_set;
 	cap.info.port_platform_set = port_platform_set;
+	cap.info.dev_platform_set = dev_platform_set;
 	cap.info.subif_platform_set_unexplicit = subif_platform_set_unexplicit;
 	cap.info.proc_print_ctp_bp_info = NULL;
 	cap.info.init_dma_pmac_template = init_dma_pmac_template;
diff --git a/drivers/net/ethernet/lantiq/datapath/gswip30/datapath_misc.h b/drivers/net/ethernet/lantiq/datapath/gswip30/datapath_misc.h
index 248401bff67a..92b63fa0e19f 100644
--- a/drivers/net/ethernet/lantiq/datapath/gswip30/datapath_misc.h
+++ b/drivers/net/ethernet/lantiq/datapath/gswip30/datapath_misc.h
@@ -30,7 +30,7 @@ struct gsw_itf {
 	u16 n;
 };
 
-#ifdef CONFIG_LTQ_DATAPATH_CPUFREQ
+#if IS_ENABLED(CONFIG_INTEL_DATAPATH_CPUFREQ)
 /* threshold data for D0:D3 */
 struct dp_coc_threshold {
 	int	th_d0;
@@ -88,7 +88,7 @@ int lookup_dump30(struct seq_file *s, int pos);
 int lookup_start30(void);
 ssize_t proc_get_qid_via_index30(struct file *file, const char *buf,
 				 size_t count, loff_t *ppos);
-#ifdef CONFIG_LTQ_DATAPATH_CPUFREQ
+#if IS_ENABLED(CONFIG_INTEL_DATAPATH_CPUFREQ)
 int dp_handle_cpufreq_event_30(int event_id, void *cfg);
 void proc_coc_read_30(struct seq_file *s);
 ssize_t proc_coc_write_30(struct file *file, const char *buf, size_t count,
diff --git a/drivers/net/ethernet/lantiq/datapath/gswip30/datapath_proc.c b/drivers/net/ethernet/lantiq/datapath/gswip30/datapath_proc.c
index 2b35a1fd381d..7d19147b88ee 100644
--- a/drivers/net/ethernet/lantiq/datapath/gswip30/datapath_proc.c
+++ b/drivers/net/ethernet/lantiq/datapath/gswip30/datapath_proc.c
@@ -1203,7 +1203,7 @@ static struct dp_proc_entry dp_proc_entries[] = {
 	{PROC_PARSER, proc_parser_read, NULL, NULL, proc_parser_write},
 	{PROC_RMON_PORTS, NULL, proc_gsw_port_rmon_dump,
 	 proc_gsw_rmon_port_start, proc_gsw_rmon_write},
-#ifdef CONFIG_LTQ_DATAPATH_CPUFREQ
+#if IS_ENABLED(CONFIG_INTEL_DATAPATH_CPUFREQ)
 	{PROC_COC, proc_coc_read_30, NULL, NULL, proc_coc_write_30},
 #endif
 	{PROC_EP, NULL, proc_ep_dump, NULL, ep_port_write},
diff --git a/drivers/net/ethernet/lantiq/datapath/gswip30/datapath_rx.c b/drivers/net/ethernet/lantiq/datapath/gswip30/datapath_rx.c
index a7ebf2ab6aba..5a66f66d2939 100644
--- a/drivers/net/ethernet/lantiq/datapath/gswip30/datapath_rx.c
+++ b/drivers/net/ethernet/lantiq/datapath/gswip30/datapath_rx.c
@@ -174,7 +174,7 @@ int32_t dp_rx_30(struct sk_buff *skb, u32 flags)
 		skb->mark |= FLG_PPA_PROCESSED;
 #endif
 	}
-#ifdef CONFIG_LTQ_DATAPATH_EXTRA_DEBUG
+#if IS_ENABLED(CONFIG_INTEL_DATAPATH_EXTRA_DEBUG)
 	/*Sanity check */
 	if (unlikely(dp_port_prop[inst].info.not_valid_rx_ep(ep))) {
 		DP_DEBUG(DP_DBG_FLAG_DUMP_RX, "Wrong: why ep=%d??\n", ep);
@@ -261,7 +261,7 @@ int32_t dp_rx_30(struct sk_buff *skb, u32 flags)
 					desc_0, desc_1,
 					desc_2, desc_3);
 		}
-#ifdef CONFIG_LTQ_DATAPATH_MPE_FASTHOOK_TEST
+#if IS_ENABLED(CONFIG_INTEL_DATAPATH_MPE_FASTHOOK_TEST)
 		if (unlikely(ltq_mpe_fasthook_rx_fn))
 			ltq_mpe_fasthook_rx_fn(skb, 1, NULL);	/*with pmac */
 #endif
diff --git a/drivers/net/ethernet/lantiq/datapath/gswip30/datapath_tx.c b/drivers/net/ethernet/lantiq/datapath/gswip30/datapath_tx.c
index 8dfbec91b1bc..ae9669e5b210 100644
--- a/drivers/net/ethernet/lantiq/datapath/gswip30/datapath_tx.c
+++ b/drivers/net/ethernet/lantiq/datapath/gswip30/datapath_tx.c
@@ -160,7 +160,7 @@ int32_t dp_xmit_30(struct net_device *rx_if, dp_subif_t *rx_subif,
 			err_ret = DP_XMIT_ERR_NULL_IF;
 			goto lbl_err_ret;
 		}
-#ifdef CONFIG_LTQ_DATAPATH_MPE_FASTHOOK_TEST
+#if IS_ENABLED(CONFIG_INTEL_DATAPATH_MPE_FASTHOOK_TEST)
 		if (unlikely(ltq_mpe_fasthook_tx_fn))
 			ltq_mpe_fasthook_tx_fn(skb, 0, NULL);
 #endif
diff --git a/drivers/net/ethernet/lantiq/datapath/gswip31/Kconfig b/drivers/net/ethernet/lantiq/datapath/gswip31/Kconfig
index bac97977d6e3..2b6a5bc2fb22 100644
--- a/drivers/net/ethernet/lantiq/datapath/gswip31/Kconfig
+++ b/drivers/net/ethernet/lantiq/datapath/gswip31/Kconfig
@@ -11,32 +11,32 @@ menuconfig INTEL_DATAPATH_HAL_GSWIP31
 if INTEL_DATAPATH_HAL_GSWIP31
 config INTEL_DATAPATH_HAL_GSWIP31_MIB
 	bool "Datapath aggregated mib support"
-	depends on LTQ_DATAPATH_HAL_GSWIP30 && SOC_GRX500 && LTQ_TMU && LTQ_PPA_TMU_MIB_SUPPORT
+	depends on INTEL_DATAPATH_HAL_GSWIP30 && SOC_GRX500 && LTQ_TMU && LTQ_PPA_TMU_MIB_SUPPORT
 	default y
 	---help---
 	  It is to aggregate GSWIP-L/R, TMU and driver's MIB counter
 
-config LTQ_DATAPATH_DDR_SIMULATE_GSWIP31
+config INTEL_DATAPATH_DDR_SIMULATE_GSWIP31
 	bool "Datapath Simulation GSWIP3.1 based on GRX500 board"
 	default n
-	depends on LTQ_DATAPATH_DBG
+	depends on INTEL_DATAPATH_DBG
 	---help---
 		Datapath Debug Tool for GSWIP DDR simulation
 		Only for debugging purpose
 		By default it should be disabled.
 
-config LTQ_DATAPATH_DUMMY_QOS
+config INTEL_DATAPATH_DUMMY_QOS
 	bool "datapath dummy QOS based on slim QOS driver or real QOS API with PRX300_test API"
 	default y
 	depends on LTQ_PPV4_QOS_SLIM || (LTQ_PPV4_QOS || LTQ_PPV4)
 
-config LTQ_DATAPATH_DUMMY_QOS_VIA_PRX300_TEST
+config INTEL_DATAPATH_DUMMY_QOS_VIA_PRX300_TEST
 	bool "datapath dummy QOS via ppv4 qos driver's PRX300_test api, like slim driver"
 	default y
-	depends on (LTQ_PPV4_QOS || LTQ_PPV4) && !LTQ_PPV4_QOS_SLIM && LTQ_DATAPATH_DUMMY_QOS
+	depends on (LTQ_PPV4_QOS || LTQ_PPV4) && !LTQ_PPV4_QOS_SLIM && INTEL_DATAPATH_DUMMY_QOS
 
 config INTEL_DATAPATH_QOS_HAL
 	bool "datapath QOS hal"
 	default n
-	depends on (LTQ_PPV4_QOS || LTQ_PPV4) && !LTQ_DATAPATH_DUMMY_QOS_VIA_PRX300_TEST
+	depends on (LTQ_PPV4_QOS || LTQ_PPV4) && !INTEL_DATAPATH_DUMMY_QOS_VIA_PRX300_TEST
 endif
diff --git a/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_coc.c b/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_coc.c
index ace300199a9b..c3ccbfd0bec1 100644
--- a/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_coc.c
+++ b/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_coc.c
@@ -91,7 +91,7 @@ struct ltq_cpufreq_module_info dp_coc_feature_fss = {
 	.ltq_cpufreq_pwr_feature_switch = dp_coc_fss_ena,
 };
 
-#if defined(CONFIG_INTEL_DATAPATH_DBG) && CONFIG_INTEL_DATAPATH_DBG
+#if IS_ENABLED(CONFIG_INTEL_DATAPATH_DBG) && CONFIG_INTEL_DATAPATH_DBG
 static char *get_sub_module_str(uint32_t flag)
 {
 	if (flag == DP_COC_REQ_DP)
diff --git a/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_misc.c b/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_misc.c
index 53c509b36fec..ec1b7c08e3a5 100644
--- a/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_misc.c
+++ b/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_misc.c
@@ -1714,7 +1714,7 @@ static int subif_hw_set(int inst, int portid, int subif_ix,
 				   dma_ch_offset)->ref_cnt);
 	}
 	DP_DEBUG(DP_DBG_FLAG_QOS,
-		 "%s:%s=%d %s=%d q[%d].cnt=%d cqm_p[%d].cnt=%d tx_dma_chan: (ref=%d)\n",
+		 "%s:%s=%d %s=%d q[%d].cnt=%d cqm_p[%d].cnt=%d tx_dma_chan ref=%d\n",
 		 "subif_hw_set",
 		 "dp_port", portid,
 		 "vap", subif_ix,
@@ -1855,7 +1855,7 @@ static int subif_hw_reset(int inst, int portid, int subif_ix,
 		DP_DEBUG(DP_DBG_FLAG_QOS, "q_id[%d] dont need freed\n", qid);
 	}
 	DP_DEBUG(DP_DBG_FLAG_QOS,
-		 "%s:%s=%d %s=%d q[%d].cnt=%d cqm_p[%d].cnt=%d tx_dma_chan: (ref=%d)\n",
+		 "%s:%s=%d %s=%d q[%d].cnt=%d cqm_p[%d].cnt=%d tx_dma_chan ref=%d\n",
 		 "subif_hw_reset",
 		 "dp_port", portid,
 		 "vap", subif_ix,
@@ -1972,7 +1972,7 @@ static void update_port_vap(int inst, u32 *ep, int *vap,
 			    struct pmac_rx_hdr *pmac, char *decryp)
 {
 	//*ep = pmac->igp_egp; /*get the port_id from pmac's sppid */
-#ifdef DP_SKB_HACK
+#if defined(DP_SKB_HACK)
 	*ep = (skb->DW1 >> 4) & 0xF; /*get the port_id from pmac's sppid */
 #endif
 	if (dp_port_info[inst][*ep].alloc_flags & DP_F_LOOPBACK) {
@@ -1986,7 +1986,7 @@ static void update_port_vap(int inst, u32 *ep, int *vap,
 		*decryp = 1;
 	} else {
 		struct dma_rx_desc_1 *desc_1;
-#ifdef DP_SKB_HACK
+#if defined(DP_SKB_HACK)
 		desc_1 = (struct dma_rx_desc_1 *)&skb->DW1;
 #else
 	//error "Please add proper logic here"
diff --git a/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_ppv4.c b/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_ppv4.c
index e8196bec3c06..58e83c2217b8 100644
--- a/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_ppv4.c
+++ b/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_ppv4.c
@@ -335,7 +335,7 @@ s32 qos_node_config(struct qos_node_api_param *param)
 
 void init_qos_fn(void)
 {
-#ifdef CONFIG_LTQ_DATAPATH_DUMMY_QOS
+#if IS_ENABLED(CONFIG_INTEL_DATAPATH_DUMMY_QOS)
 	qos_queue_remove = test_qos_queue_remove;
 	qos_queue_allocate = test_qos_queue_allocate;
 	qos_queue_info_get = test_qos_queue_info_get;
@@ -382,7 +382,7 @@ void init_qos_fn(void)
 #else
 	/*all NULL function pointer */
 	DP_DEBUG(DP_DBG_FLAG_QOS, "call QOS function pointer set to NULL\n");
-#endif /*CONFIG_LTQ_DATAPATH_DUMMY_QOS*/
+#endif /*CONFIG_INTEL_DATAPATH_DUMMY_QOS*/
 }
 
 #ifdef DUMMY_PPV4_QOS_API_OLD
@@ -585,7 +585,7 @@ int dp_pp_alloc_port(struct ppv4_port *info)
 	conf.ring_size = info->tx_ring_size;
 	conf.packet_credit_enable = 1;
 	conf.credit = info->tx_pkt_credit;
-#if IS_ENABLED(CONFIG_LTQ_DATAPATH_DBG)
+#if IS_ENABLED(CONFIG_INTEL_DATAPATH_DBG)
 	if (dp_dbg_flag & DP_DBG_FLAG_QOS) {
 		DP_DEBUG(DP_DBG_FLAG_QOS,
 			 "qos_port_set info for p[%d/%d] dp_port=%d:\n",
@@ -678,7 +678,7 @@ int init_ppv4_qos(int inst, int flag)
 	union qos_init *t = NULL;
 	int res = DP_FAILURE, i;
 	struct hal_priv *priv = HAL(inst);
-#ifdef CONFIG_INTEL_DATAPATH_QOS_HAL
+#if IS_ENABLED(CONFIG_INTEL_DATAPATH_QOS_HAL)
 	unsigned int q, idx;
 	struct cbm_tx_push *flush_port;
 	struct cbm_cpu_port_data cpu_data = {0};
diff --git a/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_ppv4_api.c b/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_ppv4_api.c
index a0662660e202..4a160663f249 100644
--- a/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_ppv4_api.c
+++ b/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_ppv4_api.c
@@ -1354,7 +1354,7 @@ static int dp_alloc_qos_port(struct dp_node_alloc *node, int flag)
 	if (port_cfg.credit)
 		port_cfg.packet_credit_enable = 1;
 	port_cfg.port_parent_prop.arbitration = PP_QOS_ARBITRATION_WRR;
-#if IS_ENABLED(CONFIG_LTQ_DATAPATH_DBG)
+#if IS_ENABLED(CONFIG_INTEL_DATAPATH_DBG)
 	if (unlikely(dp_dbg_flag & DP_DBG_FLAG_QOS)) {
 		DP_DEBUG(DP_DBG_FLAG_QOS, "qos_port_set parameter: %d/%d\n",
 			 cqm_deq_port, qos_port);
diff --git a/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_rx.c b/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_rx.c
index 8cdcfab58b7e..c4c71c5e8b3e 100644
--- a/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_rx.c
+++ b/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_rx.c
@@ -174,7 +174,7 @@ int32_t dp_rx_31(struct sk_buff *skb, u32 flags)
 		skb->mark |= FLG_PPA_PROCESSED;
 #endif
 	}
-#ifdef CONFIG_LTQ_DATAPATH_EXTRA_DEBUG
+#if IS_ENABLED(CONFIG_INTEL_DATAPATH_EXTRA_DEBUG)
 	/*Sanity check */
 	if (unlikely(dp_port_prop[inst].info.not_valid_rx_ep(ep))) {
 		DP_DEBUG(DP_DBG_FLAG_DUMP_RX, "Wrong: why ep=%d??\n", ep);
@@ -264,7 +264,7 @@ int32_t dp_rx_31(struct sk_buff *skb, u32 flags)
 					desc_0, desc_1,
 					desc_2, desc_3);
 		}
-#ifdef CONFIG_LTQ_DATAPATH_MPE_FASTHOOK_TEST
+#if IS_ENABLED(CONFIG_INTEL_DATAPATH_MPE_FASTHOOK_TEST)
 		if (unlikely(ltq_mpe_fasthook_rx_fn))
 			ltq_mpe_fasthook_rx_fn(skb, 1, NULL);	/*with pmac */
 #endif
diff --git a/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_tx.c b/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_tx.c
index c09575bc3a39..25517ca88b5a 100644
--- a/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_tx.c
+++ b/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_tx.c
@@ -160,7 +160,7 @@ int32_t dp_xmit_31(struct net_device *rx_if, dp_subif_t *rx_subif,
 			err_ret = DP_XMIT_ERR_NULL_IF;
 			goto lbl_err_ret;
 		}
-#ifdef CONFIG_LTQ_DATAPATH_MPE_FASTHOOK_TEST
+#if IS_ENABLED(CONFIG_INTEL_DATAPATH_MPE_FASTHOOK_TEST)
 		if (unlikely(ltq_mpe_fasthook_tx_fn))
 			ltq_mpe_fasthook_tx_fn(skb, 0, NULL);
 #endif
diff --git a/include/net/datapath_api.h b/include/net/datapath_api.h
index 20fe977784eb..db8bf461f208 100644
--- a/include/net/datapath_api.h
+++ b/include/net/datapath_api.h
@@ -45,8 +45,6 @@
 #include <net/switch_api/gsw_flow_ops.h>
 #if IS_ENABLED(CONFIG_INTEL_DATAPATH_CPUFREQ)
 #include <linux/cpufreq.h>
-#include <cpufreq/ltq_cpufreq.h>
-
 #endif /*CONFIG_INTEL_DATAPATH_CPUFREQ*/
 
 /*! @mainpage Datapath Manager API
@@ -438,7 +436,7 @@ typedef int32_t(*dp_get_mib_fn_t)(dp_subif_t *subif, dp_drv_mib_t *,
 typedef int32_t(*dp_get_netif_subifid_fn_t)(struct net_device *netif,
 	struct sk_buff *skb, void *subif_data, uint8_t dst_mac[DP_MAX_ETH_ALEN],
 	dp_subif_t *subif, uint32_t flags);	/*!< @brief   get subifid */
-#if defined(CONFIG_INTEL_DATAPATH_CPUFREQ) && defined(CONFIG_LTQ_CPUFREQ)
+#if defined(CONFIG_INTEL_DATAPATH_CPUFREQ)
 typedef int32_t(*dp_coc_confirm_stat)(int new_state,
 	int old_st, uint32_t f); /*!< @brief Confirm state
 				  *   by COC
diff --git a/include/net/datapath_api_umt.h b/include/net/datapath_api_umt.h
index 5cac7e55caff..6f64bdc8ece8 100644
--- a/include/net/datapath_api_umt.h
+++ b/include/net/datapath_api_umt.h
@@ -1,18 +1,18 @@
-// SPDX-License-Identifier: GPL-2.0
+/* SPDX-License-Identifier: GPL-2.0 */
 /*
  *  Copyright (C) 2018 Intel Corporation.
  *  Zhu YiXin <Yixin.zhu@intel.com>
  */
 
-//----define register and macro start
+/* ----define register and macro start */
 #define DP_UMT_NOT_SENDING_ZERO_COUNT	BIT(0)
 #define DP_UMT_SENDING_RX_COUNT_ONLY	BIT(1)
 #define DP_UMT_SUSPEND_SENDING_COUNT	BIT(2)
 #define DP_UMT_ENABLE			BIT(3)
 
-//----define register and macro end
+/* ----define register and macro end */
 
-//----define enum start
+/* ----define enum start*/
 enum dp_umt_rx_src {
 	DP_UMT_RX_FROM_CQEM,
 	DP_UMT_RX_FROM_DMA
@@ -29,9 +29,9 @@ enum dp_umt_sw_msg { /* for DP_UMG_USER_MSG_MODE only */
 	DP_UMT_MSG0_MSG1,
 };
 
-//----define enum end
+/* ----define enum end */
 
-//----define structure here start
+/* ----define structure here start*/
 /**
  * struct dp_umt_param
  * id: umt HW ID. (0 - 7)
@@ -98,9 +98,9 @@ struct dp_umt_entry {
 	struct dentry		*debugfs;
 };
 
-//----define structure here end
+/* ----define structure here end */
 
-//----declare APIs start
+/* ----declare APIs start */
 int dp_umt_request(struct dp_umt_param *umt, unsigned long flag);
 
 /* set flag for period  */
@@ -111,7 +111,7 @@ int dp_umt_enable(struct dp_umt_param *umt, unsigned long flag, int enable);
 int dp_umt_suspend_sending(struct dp_umt_param *umt,
 			   unsigned long flag, int halt);
 
-//----declare APIs end
+/* ----declare APIs end */
 
 /**
  * debug proc should support:
diff --git a/include/net/datapath_inst.h b/include/net/datapath_inst.h
index 4a7d01fedd43..d490b08bf5b0 100644
--- a/include/net/datapath_inst.h
+++ b/include/net/datapath_inst.h
@@ -148,7 +148,7 @@ struct inst_info {
 	int (*dp_tc_vlan_set)(struct core_ops *ops, struct dp_tc_vlan *vlan,
 			      struct dp_tc_vlan_info *info,
 			      int flag);
-#ifdef CONFIG_INTEL_DATAPATH_CPUFREQ
+#if IS_ENABLED(CONFIG_INTEL_DATAPATH_CPUFREQ)
 	int (*dp_handle_cpufreq_event)(int event_id, void *cfg);
 #endif
 	int (*dp_qos_get_q_logic)(int cmd_id, void *cfg, int flag);
