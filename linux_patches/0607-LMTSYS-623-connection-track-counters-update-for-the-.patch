From b7ce5583700c8100f398cc3c949b83979fa6847c Mon Sep 17 00:00:00 2001
From: "kamal.eradath" <kamal.eradath@intel.com>
Date: Sat, 25 May 2019 07:19:44 +0530
Subject: [PATCH] 
 LMTSYS-623-connection-track-counters-update-for-the-hw-accelerated-sessions

---
 drivers/net/ethernet/lantiq/ppa/ppa_hal_wrapper.c | 8 ++++----
 drivers/net/ethernet/lantiq/ppa/ppa_hook.c        | 4 ++--
 include/net/ppa/ppa_api.h                         | 9 ++++++++-
 include/net/ppa/ppa_drv_wrapper.h                 | 2 +-
 include/uapi/net/ppa_api.h                        | 1 +
 5 files changed, 16 insertions(+), 8 deletions(-)

diff --git a/drivers/net/ethernet/lantiq/ppa/ppa_hal_wrapper.c b/drivers/net/ethernet/lantiq/ppa/ppa_hal_wrapper.c
index 6f6f5b588e16..aed175f61046 100644
--- a/drivers/net/ethernet/lantiq/ppa/ppa_hal_wrapper.c
+++ b/drivers/net/ethernet/lantiq/ppa/ppa_hal_wrapper.c
@@ -181,12 +181,12 @@ uint32_t ppa_drv_deregister_cap(PPA_API_CAPS cap, PPA_HAL_ID hal_id)
 /*****************************************************************************************/
 /* wrappers for various hal API*/
 /*****************************************************************************************/
-uint32_t ppa_hsel_hal_init(uint32_t flag, uint32_t hal_id)
+uint32_t ppa_hsel_hal_init(PPA_HAL_INIT_CFG *cfg, uint32_t flag, uint32_t hal_id)
 {
 	if (!ppa_drv_hal_hook[hal_id])
 		return PPA_FAILURE;
 
-	return ppa_drv_hal_hook[hal_id](PPA_GENERIC_HAL_INIT, (void *)NULL, flag);
+	return ppa_drv_hal_hook[hal_id](PPA_GENERIC_HAL_INIT, cfg, flag);
 }
 
 uint32_t ppa_hsel_hal_exit(uint32_t flag, uint32_t hal_id)
@@ -798,7 +798,7 @@ static inline int32_t get_platform_hal(int api_type) /* 0 = routing, 1 = qos */
 /*****************************************************************************************/
 /*  Initialize all registred HAL layers							 */
 /*****************************************************************************************/
-uint32_t ppa_drv_hal_init(uint32_t flag)
+uint32_t ppa_drv_hal_init(PPA_HAL_INIT_CFG *cfg, uint32_t flag)
 {
 	int i = 0;
 
@@ -808,7 +808,7 @@ uint32_t ppa_drv_hal_init(uint32_t flag)
 	}
 	/* Initialize all the registred HAL layers*/
 	for (i = 0; i < MAX_HAL; i++) {
-		if (ppa_drv_hal_hook[i] && (ppa_hsel_hal_init(flag, i) !=  PPA_SUCCESS))
+		if (ppa_drv_hal_hook[i] && (ppa_hsel_hal_init(cfg, flag, i) !=  PPA_SUCCESS))
 			return PPA_FAILURE;
 	}
 
diff --git a/drivers/net/ethernet/lantiq/ppa/ppa_hook.c b/drivers/net/ethernet/lantiq/ppa/ppa_hook.c
index 048de337bc94..6f7785d53d24 100644
--- a/drivers/net/ethernet/lantiq/ppa/ppa_hook.c
+++ b/drivers/net/ethernet/lantiq/ppa/ppa_hook.c
@@ -114,6 +114,7 @@ int32_t (*ppa_hook_session_add_fn)(PPA_BUF *, PPA_SESSION *, uint32_t) = NULL;
 int32_t (*ppa_hook_session_bradd_fn)(PPA_BUF *, PPA_SESSION *, uint32_t) = NULL;
 #endif /*CONFIG_PPA_BR_SESS_LEARNING*/
 
+#endif /*CONFIG_PPA_RT_SESS_LEARNING*/
 /**********************************************************************************************
  * PPA unicast routing hook function:ppa_hook_session_add_fn
  * It it used to delete a unicast routing session when it is timeout, reset or purposely.
@@ -123,7 +124,6 @@ int32_t (*ppa_hook_session_bradd_fn)(PPA_BUF *, PPA_SESSION *, uint32_t) = NULL;
  * ...
  **********************************************************************************************/
 int32_t (*ppa_hook_session_del_fn)(PPA_SESSION *, uint32_t) = NULL;
-#endif /*CONFIG_PPA_RT_SESS_LEARNING*/
 
 void (*ppa_hook_pitem_refcnt_inc_fn)(PPA_BUF *) = NULL;
 void (*ppa_hook_pitem_refcnt_dec_fn)(PPA_BUF *) = NULL;
@@ -460,7 +460,6 @@ EXPORT_SYMBOL(ppa_hook_session_add_fn);
 #if IS_ENABLED(CONFIG_PPA_BR_SESS_LEARNING)
 EXPORT_SYMBOL(ppa_hook_session_bradd_fn);
 #endif /*CONFIG_PPA_BR_SESS_LEARNING*/
-EXPORT_SYMBOL(ppa_hook_session_del_fn);
 EXPORT_SYMBOL(ppa_hook_pitem_refcnt_inc_fn);
 EXPORT_SYMBOL(ppa_hook_pitem_refcnt_dec_fn);
 #if IS_ENABLED(CONFIG_PPA_MPE_IP97)
@@ -468,6 +467,7 @@ EXPORT_SYMBOL(ppa_hook_session_ipsec_add_fn);
 EXPORT_SYMBOL(ppa_hook_session_ipsec_del_fn);
 #endif
 #endif /*CONFIG_PPA_RT_SESS_LEARNING*/
+EXPORT_SYMBOL(ppa_hook_session_del_fn);
 EXPORT_SYMBOL(ppa_hook_get_ct_stats_fn);
 EXPORT_SYMBOL(ppa_hook_session_prio_fn);
 EXPORT_SYMBOL(ppa_hook_inactivity_status_fn);
diff --git a/include/net/ppa/ppa_api.h b/include/net/ppa/ppa_api.h
index 4a70f064d174..103dd2567e7a 100644
--- a/include/net/ppa/ppa_api.h
+++ b/include/net/ppa/ppa_api.h
@@ -201,7 +201,6 @@ typedef struct ppa_hsel_cnode{
 #define FLAG_SESSION_HI_PRIO 0x0001
 #define FLAG_SESSION_SWAPPED 0x0002
 #define FLAG_SESSION_LOCK_FAIL 0x0004
-#define SESSION_FLAG2_VALID_IPSEC_TRANS		0x00040000 /* Flag for L2TP over IPSec Transport mode */
 /* tunnel table datastructures*/
 /* PPA default values */
 #define PPA_IPV4_HDR_LEN 20
@@ -258,6 +257,12 @@ typedef struct {
 	uint32_t add_requires_min_hits; /*!< Minimum number of calls to ppa_add_session() before session would be added in h/w - calls from the same hook position in stack. Currently, set to 1 */
 } PPA_INIT_INFO;
 /*!
+        \brief This is the data structure for PPA HAL Initialization kernel hook function
+ */
+typedef struct {
+	void (*del_cb)(void *); /*!< Pointer to pass the callback function*/
+} PPA_HAL_INIT_CFG;
+/*!
 	\brief This is the data structure which specifies an interface and its TTL value as applicable for multicast routing.
  */
 typedef struct {
@@ -517,6 +522,7 @@ typedef struct {
 
 	uint32_t	entry;		/* session index returned by Hardware */
 	uint64_t	bytes;		/*for MIB*/
+	uint64_t	packets;	/*for MIB*/
 	uint8_t		f_hit;		/*only for test_and_clear_hit_stat*/
 	uint8_t		collision_flag; /* 1 mean the entry is in collsion table or no hashed table, like ASE/Danube*/
 
@@ -591,6 +597,7 @@ typedef struct {
 	uint32_t 	dest_list; 
 	uint32_t 	p_entry;
 	uint64_t 	bytes;
+	uint64_t 	packets;
 	uint32_t 	update_flags; 
 #if IS_ENABLED(CONFIG_SOC_GRX500)
 	PPA_TUNNEL_INFO tnnl_info;
diff --git a/include/net/ppa/ppa_drv_wrapper.h b/include/net/ppa/ppa_drv_wrapper.h
index b78d852c5794..5eaaaff4b0ec 100644
--- a/include/net/ppa/ppa_drv_wrapper.h
+++ b/include/net/ppa/ppa_drv_wrapper.h
@@ -65,7 +65,7 @@ extern uint32_t ppa_drv_get_ports_mib(PPA_PORT_MIB *mib, uint32_t flag);
 extern uint32_t ppa_drv_get_itf_mib(PPE_ITF_MIB_INFO *mib, uint32_t flag);
 extern uint32_t ppa_drv_test_and_clear_bridging_hit_stat(PPA_BR_MAC_INFO *entry, uint32_t flag);
 extern uint32_t ppa_set_wan_itf(PPA_WANITF_CFG *cfg, uint32_t flag);
-extern uint32_t ppa_drv_hal_init(uint32_t flag);
+extern uint32_t ppa_drv_hal_init(PPA_HAL_INIT_CFG *cfg, uint32_t flag);
 extern uint32_t ppa_drv_hal_exit(uint32_t flag);
 extern uint32_t ppa_get_session_hash(PPA_SESSION_HASH *cfg, uint32_t flag);
 #if defined(MBR_CONFIG) && MBR_CONFIG
diff --git a/include/uapi/net/ppa_api.h b/include/uapi/net/ppa_api.h
index 9e8768a2944a..3c6d0f30d261 100755
--- a/include/uapi/net/ppa_api.h
+++ b/include/uapi/net/ppa_api.h
@@ -486,6 +486,7 @@
 #define SESSION_FLAG2_CONTAINER 		0x00008000
 #define SESSION_FLAG2_NON_ETHWAN_SESSION 	0x00010000
 #define SESSION_FLAG2_DS_MPE_QOS		0x00020000 /* Flag for DS_QOS capability */
+#define SESSION_FLAG2_VALID_IPSEC_TRANS		0x00040000 /* Flag for L2TP over IPSec Transport mode */
 
 /* Other flags */
 #define FLG_PPA_PROCESSED		0x100	/* this used to mark ecah packets which are processed by ppa datapath driver*/
