From 9edbe80cb2caf732a0a07e7eae368dad973a7399 Mon Sep 17 00:00:00 2001
From: Dinesh Sudham <dineshx.sudham@intel.com>
Date: Tue, 5 Mar 2019 18:44:21 +0800
Subject: [PATCH] DRVLIB_SW-1588-switch_api-mac-index-changes

---
 .../net/ethernet/lantiq/datapath/datapath_soc.c    |  6 +--
 drivers/net/ethernet/lantiq/switch-api/gsw_debug.c |  5 +--
 .../net/ethernet/lantiq/switch-api/gsw_defconf.h   |  8 ----
 .../net/ethernet/lantiq/switch-api/gsw_flow_core.c |  8 ++--
 .../ethernet/lantiq/switch-api/gswip_dev/gsw_dev.c | 16 +++++---
 .../ethernet/lantiq/switch-api/mac/gswss_mac_api.h | 48 +++++++++++-----------
 .../net/ethernet/lantiq/switch-api/mac/lmac_api.c  | 11 +++--
 .../net/ethernet/lantiq/switch-api/mac/lmac_api.h  | 24 +++++------
 .../net/ethernet/lantiq/switch-api/mac/mac_cfg.c   |  8 ++--
 .../net/ethernet/lantiq/switch-api/mac/mac_cli.c   |  4 +-
 .../net/ethernet/lantiq/switch-api/mac/mac_drv.c   |  7 ++--
 drivers/net/ethernet/lantiq/switch-api/mac/xgmac.h |  6 +--
 .../ethernet/lantiq/switch-api/mac/xgmac_main.c    |  6 +--
 include/net/switch_api/mac_ops.h                   | 17 ++++++++
 14 files changed, 92 insertions(+), 82 deletions(-)

diff --git a/drivers/net/ethernet/lantiq/datapath/datapath_soc.c b/drivers/net/ethernet/lantiq/datapath/datapath_soc.c
index 94f3c5f104b8..7a5306bb35d6 100644
--- a/drivers/net/ethernet/lantiq/datapath/datapath_soc.c
+++ b/drivers/net/ethernet/lantiq/datapath/datapath_soc.c
@@ -34,9 +34,9 @@ int request_dp(u32 flag)
 	info.ops[1] = gsw_get_swcore_ops(0);
 	info.mac_ops[0] = NULL;
 	info.mac_ops[1] = NULL;
-	info.mac_ops[2] = gsw_get_mac_ops(0, 0);
-	info.mac_ops[3] = gsw_get_mac_ops(0, 1);
-	info.mac_ops[4] = gsw_get_mac_ops(0, 2);
+	info.mac_ops[2] = gsw_get_mac_ops(0, 2);
+	info.mac_ops[3] = gsw_get_mac_ops(0, 3);
+	info.mac_ops[4] = gsw_get_mac_ops(0, 4);
 #else
 	info.type = GSWIP30_TYPE;
 	info.ver = GSWIP30_VER;
diff --git a/drivers/net/ethernet/lantiq/switch-api/gsw_debug.c b/drivers/net/ethernet/lantiq/switch-api/gsw_debug.c
index 9fc94a2f045e..a37af647e71b 100644
--- a/drivers/net/ethernet/lantiq/switch-api/gsw_debug.c
+++ b/drivers/net/ethernet/lantiq/switch-api/gsw_debug.c
@@ -1083,8 +1083,7 @@ GSW_return_t GSW_XgmacCfg(void *cdev, GSW_MAC_Cli_t *mac_cfg)
 		return GSW_statusErr;
 	}
 
-
-	ops = gsw_get_mac_ops(0, 0);
+	ops = gsw_get_mac_ops(0, MAC_2);
 
 	if (!ops) {
 		pr_err("%s:%s:%d", __FILE__, __func__, __LINE__);
@@ -1141,7 +1140,7 @@ GSW_return_t GSW_LmacCfg(void *cdev, GSW_MAC_Cli_t *mac_cfg)
 		return GSW_statusErr;
 	}
 
-	ops = gsw_get_mac_ops(0, 0);
+	ops = gsw_get_mac_ops(0, MAC_2);
 
 	if (!ops) {
 		pr_err("%s:%s:%d", __FILE__, __func__, __LINE__);
diff --git a/drivers/net/ethernet/lantiq/switch-api/gsw_defconf.h b/drivers/net/ethernet/lantiq/switch-api/gsw_defconf.h
index 14e3ef6da4f5..702a7505294c 100644
--- a/drivers/net/ethernet/lantiq/switch-api/gsw_defconf.h
+++ b/drivers/net/ethernet/lantiq/switch-api/gsw_defconf.h
@@ -13,14 +13,6 @@
 #define NOT_USED -1
 #define X NOT_USED
 
-enum _mac_pid {
-	PMAC_0 = 0,
-	PMAC_1,
-	MAC_2,
-	MAC_3,
-	MAC_4
-};
-
 enum _logical_pid {
 	LOG_0 = 0,
 	LOG_1,
diff --git a/drivers/net/ethernet/lantiq/switch-api/gsw_flow_core.c b/drivers/net/ethernet/lantiq/switch-api/gsw_flow_core.c
index 818f6ea14904..2990d0c93b14 100644
--- a/drivers/net/ethernet/lantiq/switch-api/gsw_flow_core.c
+++ b/drivers/net/ethernet/lantiq/switch-api/gsw_flow_core.c
@@ -211,14 +211,11 @@ struct mac_ops *get_mac_ops(ethsw_api_dev_t *gswdev, int idx)
 #endif
 	u32 max_mac = gsw_get_mac_subifcnt(dev_id);
 
-	if (idx < 2 || idx > max_mac + 1) {
-		pr_info("Invalid MAC Idx %d, Only MAC idx > 2 is Allowed\n", idx);
+	if (idx < MAC_2 || idx > ((max_mac + MAC_2) - 1)) {
+		pr_err("Invalid MAC Idx %d, Only MAC idx > 2 is Allowed\n", idx);
 		return NULL;
 	}
 
-	/* For mac Idx is from 0, 1, 2 */
-	idx -= 2;
-
 	return gsw_get_mac_ops(dev_id, idx);
 }
 
@@ -25703,6 +25700,7 @@ GSW_return_t GSW_RMON_ExtendGet(void *cdev, GSW_RMON_extendGet_t *parm)
 		goto UNLOCK_AND_RETURN;
 	}
 
+
 	memset(parm, 0, sizeof(GSW_RMON_extendGet_t));
 
 	for (i = 0; i < GSW_RMON_EXTEND_NUM; i++) {
diff --git a/drivers/net/ethernet/lantiq/switch-api/gswip_dev/gsw_dev.c b/drivers/net/ethernet/lantiq/switch-api/gswip_dev/gsw_dev.c
index 401da46cfaa2..55e17651a8bb 100644
--- a/drivers/net/ethernet/lantiq/switch-api/gswip_dev/gsw_dev.c
+++ b/drivers/net/ethernet/lantiq/switch-api/gswip_dev/gsw_dev.c
@@ -713,11 +713,13 @@ EXPORT_SYMBOL(gsw_get_adap_ops);
 
 struct mac_ops *gsw_get_mac_ops(u32 devid, u32 mac_idx)
 {
-	if (mac_idx > gsw_dev[devid].mac_subdevs_cnt)
+	u32 macid = mac_idx - MAC_2;
+
+	if (macid > gsw_dev[devid].mac_subdevs_cnt)
 		return NULL;
 
-	if (gsw_dev[devid].mac_dev)
-		return (platform_get_drvdata(gsw_dev[devid].mac_dev[mac_idx]));
+	if (gsw_dev[devid].mac_dev[macid])
+		return (platform_get_drvdata(gsw_dev[devid].mac_dev[macid]));
 
 	return NULL;
 }
@@ -744,15 +746,17 @@ EXPORT_SYMBOL(gsw_get_coredev);
 
 struct platform_device *gsw_get_macdev(u32 devid, u32 mac_idx)
 {
-	if (mac_idx > gsw_dev[devid].mac_subdevs_cnt) {
+	u32 macid = mac_idx - MAC_2;
+
+	if (macid > gsw_dev[devid].mac_subdevs_cnt) {
 		pr_crit("%s: No. of Mac Idx given is more than Mac Sub devs"
 			"supported\n",
 			__func__);
 		return NULL;
 	}
 
-	if (gsw_dev[devid].mac_dev)
-		return (gsw_dev[devid].mac_dev[mac_idx]);
+	if (gsw_dev[devid].mac_dev[macid])
+		return (gsw_dev[devid].mac_dev[macid]);
 
 	return NULL;
 }
diff --git a/drivers/net/ethernet/lantiq/switch-api/mac/gswss_mac_api.h b/drivers/net/ethernet/lantiq/switch-api/mac/gswss_mac_api.h
index 1eca9937dacc..56d2a489381b 100644
--- a/drivers/net/ethernet/lantiq/switch-api/mac/gswss_mac_api.h
+++ b/drivers/net/ethernet/lantiq/switch-api/mac/gswss_mac_api.h
@@ -13,30 +13,30 @@
 #include <xgmac_common.h>
 #include <gswss_api.h>
 
-#define MAC_IF_CFG(idx)			(0x1200 + ((idx) * (0x100)))
-#define MAC_OP_CFG(idx)			(0x1204 + ((idx) * (0x100)))
-#define MAC_MTU_CFG(idx)		(0x1208 + ((idx) * (0x100)))
-#define MAC_GINT_CFG(idx)		(0x120C + ((idx) * (0x100)))
-#define MAC_GINT_HD0_CFG(idx)		(0x1220 + ((idx) * (0x100)))
-#define MAC_GINT_HD1_CFG(idx)		(0x1224 + ((idx) * (0x100)))
-#define MAC_GINT_HD2_CFG(idx)		(0x1228 + ((idx) * (0x100)))
-#define MAC_GINT_HD3_CFG(idx)		(0x122C + ((idx) * (0x100)))
-#define MAC_GINT_HD4_CFG(idx)		(0x1230 + ((idx) * (0x100)))
-#define MAC_GINT_HD5_CFG(idx)		(0x1234 + ((idx) * (0x100)))
-#define MAC_GINT_HD6_CFG(idx)		(0x1238 + ((idx) * (0x100)))
-#define LMAC_CNT_LSB(idx)		(0x1240 + ((idx) * (0x100)))
-#define LMAC_CNT_MSB(idx)		(0x1244 + ((idx) * (0x100)))
-#define LMAC_CNT_ACC(idx)		(0x1248 + ((idx) * (0x100)))
-#define MAC_TXTS_0(idx)			(0x1250 + ((idx) * (0x100)))
-#define MAC_TXTS_1(idx)			(0x1254 + ((idx) * (0x100)))
-#define MAC_TXTS_2(idx)			(0x1258 + ((idx) * (0x100)))
-#define MAC_TXTS_3(idx)			(0x125C + ((idx) * (0x100)))
-#define MAC_TXTS_CIC(idx)		(0x1260 + ((idx) * (0x100)))
-#define MAC_TXTS_ACC(idx)		(0x1264 + ((idx) * (0x100)))
-#define PHY_MODE(idx)			(0x1270 + ((idx) * (0x100)))
-#define PHY_STAT(idx)			(0x1274 + ((idx) * (0x100)))
-#define ANEG_EEE(idx)			(0x1278 + ((idx) * (0x100)))
-#define XGMAC_CTRL(idx)			(0x1280 + ((idx) * (0x100)))
+#define MAC_IF_CFG(idx)			(0x1200 + ((idx - MAC_2) * (0x100)))
+#define MAC_OP_CFG(idx)			(0x1204 + ((idx - MAC_2) * (0x100)))
+#define MAC_MTU_CFG(idx)		(0x1208 + ((idx - MAC_2) * (0x100)))
+#define MAC_GINT_CFG(idx)		(0x120C + ((idx - MAC_2) * (0x100)))
+#define MAC_GINT_HD0_CFG(idx)		(0x1220 + ((idx - MAC_2) * (0x100)))
+#define MAC_GINT_HD1_CFG(idx)		(0x1224 + ((idx - MAC_2) * (0x100)))
+#define MAC_GINT_HD2_CFG(idx)		(0x1228 + ((idx - MAC_2) * (0x100)))
+#define MAC_GINT_HD3_CFG(idx)		(0x122C + ((idx - MAC_2) * (0x100)))
+#define MAC_GINT_HD4_CFG(idx)		(0x1230 + ((idx - MAC_2) * (0x100)))
+#define MAC_GINT_HD5_CFG(idx)		(0x1234 + ((idx - MAC_2) * (0x100)))
+#define MAC_GINT_HD6_CFG(idx)		(0x1238 + ((idx - MAC_2) * (0x100)))
+#define LMAC_CNT_LSB(idx)		(0x1240 + ((idx - MAC_2) * (0x100)))
+#define LMAC_CNT_MSB(idx)		(0x1244 + ((idx - MAC_2) * (0x100)))
+#define LMAC_CNT_ACC(idx)		(0x1248 + ((idx - MAC_2) * (0x100)))
+#define MAC_TXTS_0(idx)			(0x1250 + ((idx - MAC_2) * (0x100)))
+#define MAC_TXTS_1(idx)			(0x1254 + ((idx - MAC_2) * (0x100)))
+#define MAC_TXTS_2(idx)			(0x1258 + ((idx - MAC_2) * (0x100)))
+#define MAC_TXTS_3(idx)			(0x125C + ((idx - MAC_2) * (0x100)))
+#define MAC_TXTS_CIC(idx)		(0x1260 + ((idx - MAC_2) * (0x100)))
+#define MAC_TXTS_ACC(idx)		(0x1264 + ((idx - MAC_2) * (0x100)))
+#define PHY_MODE(idx)			(0x1270 + ((idx - MAC_2) * (0x100)))
+#define PHY_STAT(idx)			(0x1274 + ((idx - MAC_2) * (0x100)))
+#define ANEG_EEE(idx)			(0x1278 + ((idx - MAC_2) * (0x100)))
+#define XGMAC_CTRL(idx)			(0x1280 + ((idx - MAC_2) * (0x100)))
 
 #define MAC_IF_CFG_ADAP_RES_POS		15
 #define MAC_IF_CFG_ADAP_RES_WIDTH	1
diff --git a/drivers/net/ethernet/lantiq/switch-api/mac/lmac_api.c b/drivers/net/ethernet/lantiq/switch-api/mac/lmac_api.c
index 79a053072fa1..b53525ca51f3 100644
--- a/drivers/net/ethernet/lantiq/switch-api/mac/lmac_api.c
+++ b/drivers/net/ethernet/lantiq/switch-api/mac/lmac_api.c
@@ -136,8 +136,7 @@ int lmac_set_int(void *pdev, u32 val)
 	struct mac_prv_data *pdata = GET_MAC_PDATA(pdev);
 	u32 lmac_ier = LMAC_RGRD(pdata, LMAC_IER);
 
-	pdata->mac_idx += LMAC_IER_MAC2_POS;
-	SET_N_BITS(lmac_ier, pdata->mac_idx, LMAC_IER_MAC2_WIDTH, val);
+	SET_N_BITS(lmac_ier, (pdata->mac_idx - MAC_2), LMAC_IER_MAC2_WIDTH, val);
 
 	//mac_dbg("LMAC %d Interrupt : %s\n", pdata->mac_idx,
 	//	   val ? "ENABLED" : "DISABLED");
@@ -225,7 +224,7 @@ int lmac_get_int(void *pdev)
 	u32 lmac_isr = LMAC_RGRD(pdata, LMAC_ISR);
 	u32 val = 0, mac_idx = 0;
 
-	mac_idx = pdata->mac_idx + LMAC_ISR_MAC2_POS;
+	mac_idx = pdata->mac_idx - MAC_2;
 	val = GET_N_BITS(lmac_isr, mac_idx, LMAC_ISR_MAC2_WIDTH);
 
 	return val;
@@ -655,7 +654,7 @@ void lmac_rmon_rd(void *pdev, struct lmac_rmon_cnt *lmac_cnt)
 	int i = 0;
 
 	MAC_SET_VAL(lmac_cnt_acc, LMAC_CNT_ACC, OPMOD, LMAC_RMON_RD);
-	MAC_SET_VAL(lmac_cnt_acc, LMAC_CNT_ACC, MAC, pdata->mac_idx + 2);
+	MAC_SET_VAL(lmac_cnt_acc, LMAC_CNT_ACC, MAC, pdata->mac_idx);
 
 	for (i = 0; i < 6; i++) {
 		MAC_SET_VAL(lmac_cnt_acc, LMAC_CNT_ACC, BAS, 1);
@@ -706,7 +705,7 @@ void lmac_rmon_wr(void *pdev, struct lmac_rmon_cnt *lmac_cnt)
 	int i = 0;
 
 	MAC_SET_VAL(lmac_cnt_acc, LMAC_CNT_ACC, OPMOD, LMAC_RMON_WR);
-	MAC_SET_VAL(lmac_cnt_acc, LMAC_CNT_ACC, MAC, pdata->mac_idx + 2);
+	MAC_SET_VAL(lmac_cnt_acc, LMAC_CNT_ACC, MAC, pdata->mac_idx);
 
 	for (i = 0; i < 6; i++) {
 		MAC_SET_VAL(lmac_cnt_acc, LMAC_CNT_ACC, BAS, 1);
@@ -756,7 +755,7 @@ int lmac_rmon_clr(void *pdev)
 	u32 lmac_cnt_acc = 0;
 
 	MAC_SET_VAL(lmac_cnt_acc, LMAC_CNT_ACC, OPMOD, LMAC_RMON_CLR);
-	MAC_SET_VAL(lmac_cnt_acc, LMAC_CNT_ACC, MAC, pdata->mac_idx + 2);
+	MAC_SET_VAL(lmac_cnt_acc, LMAC_CNT_ACC, MAC, pdata->mac_idx);
 
 	MAC_SET_VAL(lmac_cnt_acc, LMAC_CNT_ACC, BAS, 1);
 	MAC_SET_VAL(lmac_cnt_acc, LMAC_CNT_ACC, ADDR, 0); // ignored
diff --git a/drivers/net/ethernet/lantiq/switch-api/mac/lmac_api.h b/drivers/net/ethernet/lantiq/switch-api/mac/lmac_api.h
index 569e664333d2..2448ac52aa6a 100644
--- a/drivers/net/ethernet/lantiq/switch-api/mac/lmac_api.h
+++ b/drivers/net/ethernet/lantiq/switch-api/mac/lmac_api.h
@@ -28,18 +28,18 @@
 #define REG_LMAC_CNT_LSB		0x328
 #define REG_LMAC_CNT_MSB		0x32C
 #define REG_LMAC_CNT_ACC		0x330
-#define MAC_PSTAT(idx)			(0x400 + ((idx) * (0x30)))
-#define MAC_PISR(idx)			(0x404 + ((idx) * (0x30)))
-#define MAC_PIER(idx)			(0x408 + ((idx) * (0x30)))
-#define MAC_CTRL0(idx)			(0x40C + ((idx) * (0x30)))
-#define MAC_CTRL1(idx)			(0x410 + ((idx) * (0x30)))
-#define MAC_CTRL2(idx)			(0x414 + ((idx) * (0x30)))
-#define MAC_CTRL3(idx)			(0x418 + ((idx) * (0x30)))
-#define MAC_CTRL4(idx)			(0x41C + ((idx) * (0x30)))
-#define MAC_CTRL5(idx)			(0x420 + ((idx) * (0x30)))
-#define MAC_TESTEN(idx)			(0x42C + ((idx) * (0x30)))
-#define MAC_LPITIMER0(idx)		(0x424 + ((idx) * (0x30)))
-#define MAC_LPITIMER1(idx)		(0x428 + ((idx) * (0x30)))
+#define MAC_PSTAT(idx)			(0x400 + ((idx - MAC_2) * (0x30)))
+#define MAC_PISR(idx)			(0x404 + ((idx - MAC_2) * (0x30)))
+#define MAC_PIER(idx)			(0x408 + ((idx - MAC_2) * (0x30)))
+#define MAC_CTRL0(idx)			(0x40C + ((idx - MAC_2) * (0x30)))
+#define MAC_CTRL1(idx)			(0x410 + ((idx - MAC_2) * (0x30)))
+#define MAC_CTRL2(idx)			(0x414 + ((idx - MAC_2) * (0x30)))
+#define MAC_CTRL3(idx)			(0x418 + ((idx - MAC_2) * (0x30)))
+#define MAC_CTRL4(idx)			(0x41C + ((idx - MAC_2) * (0x30)))
+#define MAC_CTRL5(idx)			(0x420 + ((idx - MAC_2) * (0x30)))
+#define MAC_TESTEN(idx)			(0x42C + ((idx - MAC_2) * (0x30)))
+#define MAC_LPITIMER0(idx)		(0x424 + ((idx - MAC_2) * (0x30)))
+#define MAC_LPITIMER1(idx)		(0x428 + ((idx - MAC_2) * (0x30)))
 
 #define MAC_CTRL0_GMII_POS      0
 #define MAC_CTRL0_GMII_WIDTH      2
diff --git a/drivers/net/ethernet/lantiq/switch-api/mac/mac_cfg.c b/drivers/net/ethernet/lantiq/switch-api/mac/mac_cfg.c
index 9a3f0fe7c6e3..71db45d30700 100644
--- a/drivers/net/ethernet/lantiq/switch-api/mac/mac_cfg.c
+++ b/drivers/net/ethernet/lantiq/switch-api/mac/mac_cfg.c
@@ -894,7 +894,7 @@ int mac_enable_ts(void *pdev)
 
 	/* Enable the Egress Special Tag */
 	ops->gsw_common_ops.CPU_PortCfgGet(ops, &cpu_port_cfg);
-	cpu_port_cfg.nPortId = (pdata->mac_idx + 2);
+	cpu_port_cfg.nPortId = pdata->mac_idx;
 	cpu_port_cfg.bSpecialTagIngress = 1;
 	cpu_port_cfg.bSpecialTagEgress = 1;
 	ops->gsw_common_ops.CPU_PortCfgSet(ops, &cpu_port_cfg);
@@ -947,7 +947,7 @@ int mac_disable_ts(void *pdev)
 
 	/* Disable the Egress Special Tag */
 	ops->gsw_common_ops.CPU_PortCfgGet(ops, &cpu_port_cfg);
-	cpu_port_cfg.nPortId = (pdata->mac_idx + 2);
+	cpu_port_cfg.nPortId = pdata->mac_idx;
 	cpu_port_cfg.bSpecialTagEgress = 0;
 	ops->gsw_common_ops.CPU_PortCfgSet(ops, &cpu_port_cfg);
 
@@ -1126,7 +1126,7 @@ int mac_init(void *pdev)
 
 #if defined(UPTIME) && UPTIME
 
-	if (pdata->mac_idx == 0)
+	if (pdata->mac_idx == MAC_2)
 		xgmac_set_hwtstamp_settings(pdev, 1, 1);
 
 #endif
@@ -1155,7 +1155,7 @@ int mac_init(void *pdev)
 	gswss_set_mac_rxfcs_op(pdev, MODE3);
 
 	/* Set XGMAC Port to MDIO Clause 22 */
-	mdio_set_clause(pdev, 1, pdata->mac_idx);
+	mdio_set_clause(pdev, 1, (pdata->mac_idx - MAC_2));
 
 #ifdef __KERNEL__
 	xgmac_mdio_register(pdev);
diff --git a/drivers/net/ethernet/lantiq/switch-api/mac/mac_cli.c b/drivers/net/ethernet/lantiq/switch-api/mac/mac_cli.c
index c3e0a89f1663..f608a97935d7 100644
--- a/drivers/net/ethernet/lantiq/switch-api/mac/mac_cli.c
+++ b/drivers/net/ethernet/lantiq/switch-api/mac/mac_cli.c
@@ -250,7 +250,7 @@ static const struct mac_api_cfg xgmac_cfg[] = {
 
 int xgmac_cfg_main(GSW_MAC_Cli_t *params)
 {
-	struct mac_ops *ops = gsw_get_mac_ops(0, 0);
+	struct mac_ops *ops = gsw_get_mac_ops(0, MAC_2);
 	struct mac_prv_data *pdata = GET_MAC_PDATA(ops);
 	int i = 0, ret = 0;
 	int num_of_elem = ARRAY_SIZE(xgmac_cfg);
@@ -498,7 +498,7 @@ int gswss_cfg_main(GSW_MAC_Cli_t *params)
 	if (params->cmdType < GSWSS_MAX_MAC) {
 
 		if (params->cmdType == GSWSS_REG_WR || params->cmdType == GSWSS_REG_RD) {
-			params->mac_idx = 0;
+			params->mac_idx = MAC_2;
 		}
 		mac_ops = gsw_get_mac_ops(0, params->mac_idx);
 		mac_pdata = GET_MAC_PDATA(mac_ops);
diff --git a/drivers/net/ethernet/lantiq/switch-api/mac/mac_drv.c b/drivers/net/ethernet/lantiq/switch-api/mac/mac_drv.c
index 1e1595e5708f..595c4ee01ed5 100644
--- a/drivers/net/ethernet/lantiq/switch-api/mac/mac_drv.c
+++ b/drivers/net/ethernet/lantiq/switch-api/mac/mac_drv.c
@@ -33,7 +33,8 @@ static irqreturn_t mac_isr(int irq, void *dev_id)
 
 		mac_int_sts = gswss_get_int_stat(adap_ops, XGMAC);
 
-		mac_ops = gsw_get_mac_ops(devid, i);
+		mac_ops = gsw_get_mac_ops(devid, (i + MAC_2));
+
 		if (!mac_ops)
 			return IRQ_HANDLED;
 
@@ -108,7 +109,7 @@ static int mac_irq_init(struct mac_prv_data *pdata)
 		return -1;
 	}
 
-	if (pdata->mac_idx == 0) {
+	if (pdata->mac_idx == MAC_2) {
 		ret = request_irq(pdata->irq_num, mac_isr, 0, "gsw_mac", NULL);
 
 		if (ret) {
@@ -150,7 +151,7 @@ static int mac_probe(struct platform_device *pdev)
 			return -1;
 		}
 
-		if (pdata->mac_idx == 0)
+		if (pdata->mac_idx == MAC_2)
 			base[i] = devm_ioremap_resource(&pdev->dev, res[i]);
 	}
 
diff --git a/drivers/net/ethernet/lantiq/switch-api/mac/xgmac.h b/drivers/net/ethernet/lantiq/switch-api/mac/xgmac.h
index 9e6f52dbb02a..3695c9c9a202 100644
--- a/drivers/net/ethernet/lantiq/switch-api/mac/xgmac.h
+++ b/drivers/net/ethernet/lantiq/switch-api/mac/xgmac.h
@@ -71,9 +71,9 @@
 
 #define MHZ_TO_HZ(val)			((val) * 1000000)
 
-#define XGMAC_CTRL_REG(idx)		(0x1298 + ((idx) * 0x100))
-#define XGMAC_DATA1_REG(idx)		(0x1294 + ((idx) * 0x100))
-#define XGMAC_DATA0_REG(idx)		(0x1290 + ((idx) * 0x100))
+#define XGMAC_CTRL_REG(idx)		(0x1298 + ((idx - MAC_2) * 0x100))
+#define XGMAC_DATA1_REG(idx)		(0x1294 + ((idx - MAC_2) * 0x100))
+#define XGMAC_DATA0_REG(idx)		(0x1290 + ((idx - MAC_2) * 0x100))
 
 /* MAC register offsets */
 #define MAC_TX_CFG			0x0000
diff --git a/drivers/net/ethernet/lantiq/switch-api/mac/xgmac_main.c b/drivers/net/ethernet/lantiq/switch-api/mac/xgmac_main.c
index 26cf394536d4..cceb639adbbf 100644
--- a/drivers/net/ethernet/lantiq/switch-api/mac/xgmac_main.c
+++ b/drivers/net/ethernet/lantiq/switch-api/mac/xgmac_main.c
@@ -109,13 +109,13 @@ void xgmac_init_pdata(struct mac_prv_data *pdata, int idx)
 {
 #ifdef __KERNEL__
 	memset(pdata, 0, sizeof(struct mac_prv_data));
-	pdata->mac_idx = idx;
+	pdata->mac_idx = idx + MAC_2;
 #else
 
 	if (idx == -1)
-		pdata->mac_idx = (pdata - &prv_data[0]);
+		pdata->mac_idx = (pdata - &prv_data[0]) + MAC_2;
 	else
-		pdata->mac_idx = idx;
+		pdata->mac_idx = idx + MAC_2;
 
 #endif
 
diff --git a/include/net/switch_api/mac_ops.h b/include/net/switch_api/mac_ops.h
index 06005128aaf5..ff78b348159c 100644
--- a/include/net/switch_api/mac_ops.h
+++ b/include/net/switch_api/mac_ops.h
@@ -339,6 +339,23 @@ typedef enum  {
 	RX_SPTAG_RES,
 } MAC_OPER_CFG;
 
+/* MAC Index used by modules */
+typedef enum {
+	PMAC_0 = 0,
+	PMAC_1,
+	MAC_2,
+	MAC_3,
+	MAC_4,
+	MAC_5,
+	MAC_6,
+	MAC_7,
+	MAC_8,
+	MAC_9,
+	MAC_10,
+	PMAC_2,
+	MAC_LAST,
+} MAC_IDX;
+
 struct mac_ops {
 	/* This function Sets the Flow Ctrl operation in Both XGMAC and LMAC.
 	 * param[in/out]IN:	ops	MAC ops Struct registered for MAC 0/1/2.
