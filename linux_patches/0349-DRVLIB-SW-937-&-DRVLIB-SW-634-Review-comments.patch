From f3d70735388f884d0c758c59bedc0f23063c12dc Mon Sep 17 00:00:00 2001
From: Rekha Eswaran <rekha.eswaran@intel.com>
Date: Wed, 24 Oct 2018 16:38:11 +0800
Subject: [PATCH] DRVLIB_SW-937 & DRVLIB_SW-634: Review comments

---
 drivers/net/ethernet/lantiq/datapath/datapath_misc.c         | 12 +++++++++++-
 .../net/ethernet/lantiq/datapath/gswip31/datapath_ext_vlan.c |  7 ++++---
 drivers/net/ethernet/lantiq/datapath/gswip31/datapath_misc.c | 11 +++++++----
 3 files changed, 22 insertions(+), 8 deletions(-)

diff --git a/drivers/net/ethernet/lantiq/datapath/datapath_misc.c b/drivers/net/ethernet/lantiq/datapath/datapath_misc.c
index 08ca58800228..3121d4ab8b99 100644
--- a/drivers/net/ethernet/lantiq/datapath/datapath_misc.c
+++ b/drivers/net/ethernet/lantiq/datapath/datapath_misc.c
@@ -1283,6 +1283,7 @@ int32_t	dp_del_subif(struct net_device *netif, void *data, dp_subif_t *subif,
 	}
 	hlist_del_rcu(&dp_subif->hlist);
 	synchronize_rcu_bh();
+	kfree(dp_subif->data);
 	kfree(dp_subif);
 	return 1;
 }
@@ -1311,7 +1312,8 @@ int32_t	dp_update_subif(struct net_device *netif, void *data,
 		dp_subif = kzalloc(sizeof(*dp_subif), GFP_KERNEL);
 		if (dp_subif) {
 			memcpy(&dp_subif->subif, subif, sizeof(subif));
-			memcpy(dp_subif->data, (u8 *)data, IFNAMSIZ);
+			dp_subif->data = kzalloc(IFNAMSIZ, GFP_KERNEL);
+			memcpy(&dp_subif->data, (u8 *)data, IFNAMSIZ);
 			dp_subif->dev = netif;
 			strncpy(dp_subif->name, subif_name,
 				sizeof(dp_subif->name) - 1);
@@ -1323,6 +1325,14 @@ int32_t	dp_update_subif(struct net_device *netif, void *data,
 	} else {
 		dp_subif_new = kzalloc(sizeof(*dp_subif), GFP_KERNEL);
 		if (dp_subif_new) {
+			memcpy(&dp_subif_new->subif, subif, sizeof(subif));
+			dp_subif_new->data =
+					kzalloc(IFNAMSIZ, GFP_KERNEL);
+			memcpy(&dp_subif_new->data, (u8 *)data, IFNAMSIZ);
+			dp_subif_new->dev = netif;
+			strncpy(dp_subif_new->name, subif_name,
+				sizeof(dp_subif->name) - 1);
+			dp_subif_new->subif_fn = subifid_fn_t;
 			hlist_replace_rcu(&dp_subif->hlist,
 					  &dp_subif_new->hlist);
 			synchronize_rcu_bh();
diff --git a/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_ext_vlan.c b/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_ext_vlan.c
index 14758eefb780..f7ff39f14be3 100644
--- a/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_ext_vlan.c
+++ b/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_ext_vlan.c
@@ -245,10 +245,11 @@ static int update_ctp(struct core_ops *ops, struct ext_vlan_info *vlan)
 		ctp.bIngressExtendedVlanEnable = LTQ_FALSE;
 		ret = ops->gsw_ctp_ops.CTP_PortConfigSet(ops, &ctp);
 		if (ret != GSW_statusOk) {
-			PR_ERR("Fail:Ingress VLan operate disable in ctp\n");
+			PR_ERR("Fail:Ingress VLAN operate disable in ctp\n");
 			return -EIO;
 		}
-		PR_ERR("ingress VLan operation disabled in ctp\n");
+		DP_DEBUG(DP_DBG_FLAG_SWDEV,
+			 "ingress VLAN operation disabled in ctp\n");
 		alloc.nExtendedVlanBlockId = block;
 		ret = ops->gsw_extvlan_ops.ExtendedVlan_Free(ops, &alloc);
 		if (ret != GSW_statusOk) {
@@ -262,7 +263,7 @@ static int update_ctp(struct core_ops *ops, struct ext_vlan_info *vlan)
 	alloc.nNumberOfEntries += vlan->n_vlan1_drop * 2;
 	alloc.nNumberOfEntries += vlan->n_vlan2_drop;
 	if (alloc.nNumberOfEntries == 0) {
-		PR_ERR("nNumberOfEntries == 0 , returning to caller\n");
+		DP_DEBUG(DP_DBG_FLAG_SWDEV,"nNumberOfEntries == 0\n");
 		return 0;
 	}
 
diff --git a/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_misc.c b/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_misc.c
index 6947a0239c52..742650ac74b1 100644
--- a/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_misc.c
+++ b/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_misc.c
@@ -1104,7 +1104,9 @@ static int subif_hw_set(int inst, int portid, int subif_ix,
 			 *      we need find way to get cqm_dequeue_port
 			 *      and qos_port later
 			 */
-			PR_ERR("need set cqm_dequeue_port/qos_port... ?\n");
+			/* need set cqm_dequeue_port/qos_port since not fully
+			 * tested
+			 */
 			dp_q_tbl[inst][q_port.qid].cqm_dequeue_port =
 				q_port.cqe_deq;
 			dp_deq_port_tbl[inst][q_port.cqe_deq].qos_port = -1;
@@ -1121,9 +1123,10 @@ static int subif_hw_set(int inst, int portid, int subif_ix,
 		q_port.port_node =
 			dp_deq_port_tbl[inst][q_port.cqe_deq].qos_port;
 
-		PR_ERR("need to further set q_port.q_node/port_node\n");
-		PR_ERR("via special internal QOS HAL API to get it\n");
-		PR_ERR("since it is created by caller itself\n");
+		/* need to further set q_port.q_node/port_node
+		 * via special internal QOS HAL API to get it
+		 * since it is created by caller itself\n");
+		 */
 
 	} else { /*auto sharing queue: if go to here, it means sharing queue
 		  *is ready and it is created by previous dp_register_subif_ext
