From 0917bfa760c3c4896f1d2aa4606399dd33c04acc Mon Sep 17 00:00:00 2001
From: thampan <joby.thampan@intel.com>
Date: Sat, 15 Dec 2018 23:44:35 +0800
Subject: [PATCH] Update review comments

---
 drivers/net/ethernet/lantiq/ltq_eth_drv_xrx500.c | 65 +++++++++++++-----------
 drivers/net/ethernet/lantiq/xpcs/xpcs.c          | 35 +++++++++----
 drivers/net/ethernet/lantiq/xpcs/xpcs.h          |  7 ++-
 3 files changed, 64 insertions(+), 43 deletions(-)

diff --git a/drivers/net/ethernet/lantiq/ltq_eth_drv_xrx500.c b/drivers/net/ethernet/lantiq/ltq_eth_drv_xrx500.c
index 00e6948a18b5..7cbb276f572d 100644
--- a/drivers/net/ethernet/lantiq/ltq_eth_drv_xrx500.c
+++ b/drivers/net/ethernet/lantiq/ltq_eth_drv_xrx500.c
@@ -256,8 +256,31 @@ static int  ethtool_eee_set(struct net_device *dev,
 	return retval;
 }
 
-/* Structure of the ether tool operation  */
-static struct ethtool_ops ethtool_ops = {
+int serdes_ethtool_get_link_ksettings(struct net_device *dev,
+				   struct ethtool_link_ksettings *cmd)
+{
+	struct ltq_eth_priv *priv = netdev_priv(dev);
+
+	/* Speed Get in Ethtool */
+	xpcs_ethtool_ksettings_get(priv->xgmac_id, cmd);
+
+	return 0;
+}
+
+int serdes_ethtool_set_link_ksettings(struct net_device *dev,
+				   const struct ethtool_link_ksettings *cmd)
+{
+	struct ltq_eth_priv *priv = netdev_priv(dev);
+	int ret = 0;
+
+	/* Speed Set in Ethtool */
+	ret = xpcs_ethtool_ksettings_set(priv->xgmac_id, cmd);
+
+	return ret;
+}
+
+/* Structure of the ether tool operation in Phy case  */
+static const struct ethtool_ops ethtool_ops = {
 	.get_drvinfo		= get_drvinfo,
 	.get_settings		= get_settings,
 	.set_settings		= set_settings,
@@ -269,6 +292,14 @@ static struct ethtool_ops ethtool_ops = {
 	.set_eee		= ethtool_eee_set,
 };
 
+/* Structure of the ether tool operation in No-Phy case */
+static const struct ethtool_ops serdes_ethtool_ops = {
+	.get_drvinfo		= get_drvinfo,
+	.get_link_ksettings	= serdes_ethtool_get_link_ksettings,
+	.set_link_ksettings	= serdes_ethtool_set_link_ksettings,
+};
+
+
 /* open the network device interface*/
 static int ltq_eth_open(struct net_device *dev)
 {
@@ -698,29 +729,6 @@ static int ltq_ioctl(struct net_device *dev, struct ifreq *ifr, int cmd)
 	return -EOPNOTSUPP;
 }
 
-int serdes_ethtool_get_link_ksettings(struct net_device *dev,
-				   struct ethtool_link_ksettings *cmd)
-{
-	struct ltq_eth_priv *priv = netdev_priv(dev);
-
-	/* Speed Get in Ethtool */
-	xpcs_ethtool_ksettings_get(priv->xgmac_id, cmd);
-
-	return 0;
-}
-
-int serdes_ethtool_set_link_ksettings(struct net_device *dev,
-				   const struct ethtool_link_ksettings *cmd)
-{
-	struct ltq_eth_priv *priv = netdev_priv(dev);
-	int ret = 0;
-
-	/* Speed Set in Ethtool */
-	ret = xpcs_ethtool_ksettings_set(priv->xgmac_id, cmd);
-
-	return ret;
-}
-
 /* init of the network device */
 static int ltq_eth_init(struct net_device *dev)
 {
@@ -744,12 +752,7 @@ static int ltq_eth_init(struct net_device *dev)
 	}
 
 	if (!priv->port[i].phy_node) {
-		ethtool_ops.get_link_ksettings =
-			serdes_ethtool_get_link_ksettings;
-		ethtool_ops.set_link_ksettings =
-			serdes_ethtool_set_link_ksettings;
-
-		dev->ethtool_ops = &ethtool_ops;
+		dev->ethtool_ops = &serdes_ethtool_ops;
 	}
 
 	if (priv->lct_en == 1) {
diff --git a/drivers/net/ethernet/lantiq/xpcs/xpcs.c b/drivers/net/ethernet/lantiq/xpcs/xpcs.c
index b8b319d55739..2719ef0bec6c 100644
--- a/drivers/net/ethernet/lantiq/xpcs/xpcs.c
+++ b/drivers/net/ethernet/lantiq/xpcs/xpcs.c
@@ -34,6 +34,8 @@
 #define XPCS_MODE_NAME "xpcs-mode"
 #define XPCS_RESET_NAME "xpcs_reset"
 #define POWER_SAVE_MODE "power-save"
+#define XPCS_MAC_IDX	"mac_idx"
+
 
 static void xpcs_cl37_an(struct xpcs_prv_data *pdata);
 static void xpcs_cl73_an(struct xpcs_prv_data *pdata);
@@ -934,6 +936,13 @@ static int xpcs_parse_dts(struct platform_device *pdev,
 		return -EINVAL;
 	}
 
+	if (!device_property_read_u32(dev, XPCS_MAC_IDX, &prop)) {
+		(*pdata)->mac_idx = prop;
+	} else {
+		dev_err(dev, "Xpcs conn: cannot get property\n");
+		return -EINVAL;
+	}
+
 	if (!device_property_read_u32(dev, POWER_SAVE_MODE, &prop)) {
 		(*pdata)->power_save = prop;
 	} else {
@@ -971,6 +980,11 @@ void xpcs_ethtool_ksettings_get(u32 idx,
 {
 	struct xpcs_prv_data *pdata = priv_data[idx];
 
+	if (!pdata) {
+		pr_err("XPCS %d is not initialized\n",idx);
+		return;
+	}
+
 	if (pdata->mode == TENG_KR_MODE)
 		cmd->base.speed = SPEED_10000;
 	else if (pdata->mode == ONEG_XAUI_MODE)
@@ -987,6 +1001,11 @@ int xpcs_ethtool_ksettings_set(u32 idx,
 	u32 mode;
 	struct xpcs_prv_data *pdata = priv_data[idx];
 
+	if (!pdata) {
+		pr_err("XPCS %d is not initialized\n",idx);
+		return -1;
+	}
+	
 	if (speed != SPEED_10000 &&
 	    speed != SPEED_1000)
 		return -EINVAL;
@@ -995,18 +1014,19 @@ int xpcs_ethtool_ksettings_set(u32 idx,
 		mode = TENG_KR_MODE;
 	else if (speed == SPEED_1000 && (pdata->mode != ONEG_XAUI_MODE))
 		mode = ONEG_XAUI_MODE;
+	else
+		return -1;
 
 	/* Restart Xpcs & PHY */
-	xpcs_reinit(idx, mode);
+	xpcs_reinit(pdata->dev, mode);
 
 	return 0;
 }
 EXPORT_SYMBOL(xpcs_ethtool_ksettings_set);
 
-int xpcs_reinit(int idx, u32 mode)
+int xpcs_reinit(struct device *dev, u32 mode)
 {
-	struct xpcs_prv_data *pdata = priv_data[idx];
-	struct device *dev = pdata->dev;
+	struct xpcs_prv_data *pdata = dev_get_drvdata(dev);
 	struct phy *phy = pdata->phy;
 	int ret = 0;
 
@@ -1076,12 +1096,7 @@ static int xpcs_probe(struct platform_device *pdev)
 		}
 	}
 
-	if (!strcmp(pdata->name, "wan_xpcs"))
-		priv_data[0] = pdata;
-	else if (!strcmp(pdata->name, "lan_xpcs0"))
-		priv_data[1] = pdata;
-	else if (!strcmp(pdata->name, "lan_xpcs1"))
-		priv_data[2] = pdata;
+	priv_data[pdata->mac_idx] = pdata;
 
 	pdata->id = pdev->id;
 	pdata->dev = dev;
diff --git a/drivers/net/ethernet/lantiq/xpcs/xpcs.h b/drivers/net/ethernet/lantiq/xpcs/xpcs.h
index e01e1aa6b9f7..c8a22b5f0190 100644
--- a/drivers/net/ethernet/lantiq/xpcs/xpcs.h
+++ b/drivers/net/ethernet/lantiq/xpcs/xpcs.h
@@ -544,7 +544,7 @@
 #define PCS_DIG_STS_PSEQ_STATE_POS		2
 #define PCS_DIG_STS_PSEQ_STATE_WIDTH		3
 
-#define MAX_XPCS 3
+#define MAX_XPCS 				6
 
 enum {
 	BACKPL_ETH_PCS = 0,
@@ -683,6 +683,9 @@ struct xpcs_prv_data {
 
 	struct reset_control *xpcs_rst;
 
+	/* mac_idx where xpcs is connected */
+	u32 mac_idx;
+
 	/* XPCS Mode Switching */
 	struct xpcs_mode_cfg *mode_cfg;
 };
@@ -769,7 +772,7 @@ void xpcs_ethtool_ksettings_get(u32 idx,
 				struct ethtool_link_ksettings *cmd);
 int xpcs_ethtool_ksettings_set(u32 idx,
 			       const struct ethtool_link_ksettings *cmd);
-int xpcs_reinit(int idx, u32 mode);
+int xpcs_reinit(struct device *dev, u32 mode);
 
 #endif
 
