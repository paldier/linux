From c45f7156e9bd4c1c0aa25e2df57539f3e3d48458 Mon Sep 17 00:00:00 2001
From: arathinx <ayyappanx.rathinam@intel.com>
Date: Mon, 4 Mar 2019 14:36:53 +0800
Subject: [PATCH] DRVLIB_SW-1578: Fix compile warnings in spi cadence driver

---
 drivers/spi/spi-cadence-qspi-apb.c | 62 ++++++++------------------------------
 drivers/spi/spi-cadence-qspi.c     | 12 ++++----
 2 files changed, 19 insertions(+), 55 deletions(-)

diff --git a/drivers/spi/spi-cadence-qspi-apb.c b/drivers/spi/spi-cadence-qspi-apb.c
index a8570e24442f..490d8d67fd31 100644
--- a/drivers/spi/spi-cadence-qspi-apb.c
+++ b/drivers/spi/spi-cadence-qspi-apb.c
@@ -121,12 +121,12 @@ static void cadence_qspi_apb_read_fifo_data(void *dest,
 			const void *src_ahb_addr, unsigned int bytes,
 			unsigned int flash_type)
 {
-	unsigned int temp, count = 0;
+	unsigned int temp;
 	int remaining = bytes;
 	unsigned int *dest_ptr = (unsigned int *)dest;
 	unsigned int *src_ptr = (unsigned int *)src_ahb_addr;
 
-	debug_print("[%s]dest=0x%x src_ahb_addr=0x%x bytes=0x%x\n",
+	debug_print("[%s]dest=0x%p src_ahb_addr=0x%p bytes=0x%x\n",
 		__func__, dest, src_ahb_addr, bytes);
 	if (bytes == 0)
 		return;
@@ -144,7 +144,7 @@ static void cadence_qspi_apb_read_fifo_data(void *dest,
 				temp = CQSPI_READL(src_ptr);
 //				SwapBytes(&temp, remaining);
 				(*(u32 *)(dest_ptr)) = temp;
-				debug_print("[%s]dest_ptr=0x%x *src_ptr=0x%x\n",
+				debug_print("[%s]dest_ptr=0x%p *src_ptr=0x%x\n",
 					__func__, dest_ptr, temp);
 				remaining = 0;
 				break;
@@ -174,7 +174,7 @@ static void cadence_qspi_apb_write_fifo_data(void *dest_ahb_addr,
 	unsigned int *dest_ptr = (unsigned int *)dest_ahb_addr;
 	unsigned int *src_ptr = (unsigned int *)src;
 
-	debug_print("[%s]dest_ahb_addr=0x%x src=0x%x bytes=0x%x\n",
+	debug_print("[%s]dest_ahb_addr=0x%p src=0x%p bytes=0x%x\n",
 		__func__, dest_ahb_addr, src, bytes);
 	debug_print("[%s]*dest_ahb_addr=0x%x *src=0x%x\n",
 		__func__, *(unsigned int *)dest_ahb_addr,
@@ -185,7 +185,7 @@ static void cadence_qspi_apb_write_fifo_data(void *dest_ahb_addr,
 				temp = *src_ptr;
 //				SwapBytes(&temp, CQSPI_FIFO_WIDTH);
 				CQSPI_WRITEL(temp, dest_ptr);
-				debug_print("[%s]dest_ptr=0x%x *src_ptr=0x%x\n",
+				debug_print("[%s]dest_ptr=0x%p *src_ptr=0x%x\n",
 					__func__, dest_ptr, temp);
 				remaining -= CQSPI_FIFO_WIDTH;
 			} else {
@@ -193,7 +193,7 @@ static void cadence_qspi_apb_write_fifo_data(void *dest_ahb_addr,
 				memcpy(&temp, src_ptr, remaining);
 //				SwapBytes(&temp, remaining);
 				CQSPI_WRITEL(temp, dest_ptr);
-				debug_print("[%s]dest_ptr=0x%x *src_ptr=0x%x\n",
+				debug_print("[%s]dest_ptr=0x%p *src_ptr=0x%x\n",
 					__func__, dest_ptr, temp);
 				break;
 			}
@@ -324,7 +324,7 @@ static int cadence_qspi_apb_exec_flash_cmd(void *reg_base, unsigned int reg)
 {
 	unsigned int timeout;
 
-	debug_print("cadence_qspi_apb_exec_flash_cmd: reg_base 0x%x reg 0x%x\n",
+	debug_print("cadence_qspi_apb_exec_flash_cmd: reg_base 0x%p reg 0x%x\n",
 		reg_base, reg);
 	/* Write the CMDCTRL without start execution. */
 	CQSPI_WRITEL(reg, reg_base + CQSPI_REG_CMDCTRL);
@@ -358,7 +358,6 @@ static int cadence_qspi_apb_command_read(void *reg_base,
 	unsigned int reg, i;
 	unsigned int addr_value;
 	int status;
-	unsigned char *tmp;
 
 	debug_print("%s txlen %d txbuf %p rxlen %d rxbuf %p\n",
 		__func__, txlen, txbuf, rxlen, rxbuf);
@@ -516,7 +515,7 @@ static int cadence_qspi_apb_indirect_read_setup(void *reg_base,
 	unsigned int dummy_clk;
 	unsigned int dummy_bytes;
 
-	debug_print("[%s]ahb_phy_addr=0x%x txlen=%d txbuf=0x%x "
+	debug_print("[%s]ahb_phy_addr=0x%x txlen=%d txbuf=0x%p "
 		"addr_bytes=%d addrlen=%d\n",
 		__func__, ahb_phy_addr, txlen, txbuf, addr_bytes, addrlen);
 	if (txlen == 6)
@@ -588,8 +587,6 @@ static int cadence_qspi_apb_indirect_read_execute(
 {
 	unsigned int reg = 0;
 	unsigned int timeout;
-	unsigned int watermark = CQSPI_REG_SRAM_THRESHOLD_BYTES;
-	unsigned int *irq_status = &(cadence_qspi->irq_status);
 	struct platform_device *pdev = cadence_qspi->pdev;
 	struct cqspi_platform_data *pdata = pdev->dev.platform_data;
 	void *reg_base = cadence_qspi->iobase;
@@ -630,37 +627,6 @@ static int cadence_qspi_apb_indirect_read_execute(
 							flash_type);
 			buf += reg;
 			remaining -= reg;
-#if 0
-			} else {
-			ret = wait_event_interruptible_timeout(cadence_qspi->waitqueue,
-				*irq_status, CQSPI_TIMEOUT_MS);
-			if (!ret) {
-				pr_err("QSPI: Indirect read timeout\n");
-				ret = -ETIMEDOUT;
-				goto failrd;
-			}
-			if (*irq_status & CQSPI_IRQ_STATUS_ERR) {
-				/* Error occurred */
-				pr_err("QSPI: Indirect read error IRQ status 0x%08x\n",
-					*irq_status);
-				ret = -EPERM;
-				goto failrd;
-			}
-			if (*irq_status & (CQSPI_REG_IRQ_IND_RD_OVERFLOW |
-				CQSPI_REG_IRQ_IND_COMP | CQSPI_REG_IRQ_WATERMARK)) {
-				reg = CQSPI_GET_RD_SRAM_LEVEL(reg_base);
-				/* convert to bytes */
-				reg *= CQSPI_FIFO_WIDTH;
-				reg = reg > remaining ? remaining : reg;
-				/* Read data from FIFO. */
-				cadence_qspi_apb_read_fifo_data(buf, ahb_base,
-								reg,
-								flash_type);
-				buf += reg;
-				remaining -= reg;
-			}
-		}
-#endif
 	}
 	/* Check indirect done status */
 	timeout = cadence_qspi_init_timeout(CQSPI_TIMEOUT_MS);
@@ -763,7 +729,6 @@ static int cadence_qspi_apb_indirect_write_execute(
 	int remaining = (int)txlen;
 	unsigned int write_bytes;
 	uint16_t fill_level = 0;
-	uint32_t retry = 0xffff;
 
 	debug_print("%s txlen %d txbuf %p\n", __func__, txlen, txbuf);
 #ifdef DEBUG
@@ -1018,7 +983,6 @@ int cadence_qspi_apb_process_queue(struct struct_cqspi *cadence_qspi,
 	void __iomem *iobase = cadence_qspi->iobase;
 	unsigned int sclk;
 	/* 1 byte coomand, 3 bytes address, 1 byte dummy */
-	unsigned char txbuffer[5];
 	unsigned int mode = DC_MODE;
 	int ret = 0;
 	struct cqspi_flash_pdata *f_pdata;
@@ -1028,9 +992,9 @@ int cadence_qspi_apb_process_queue(struct struct_cqspi *cadence_qspi,
 	debug_print("[%s] page_size=%d block_size=%d quad=%d\n", __func__, f_pdata->page_size, f_pdata->block_size, f_pdata->quad);
 	debug_print("[%s] n_trans=%d\n", __func__, n_trans);
 	debug_print("[%s] cmd_xfer->len=%d\n", __func__, cmd_xfer->len);
-	debug_print("[%s] cmd_xfer->tx_buf=0x%x\n", __func__, cmd_xfer->tx_buf);
-	debug_print("[%s] cmd_xfer->rx_buf=0x%x\n", __func__, cmd_xfer->rx_buf);
-	debug_print("[%s] data_xfer=0x%x\n", __func__, data_xfer);
+	debug_print("[%s] cmd_xfer->tx_buf=0x%p\n", __func__, cmd_xfer->tx_buf);
+	debug_print("[%s] cmd_xfer->rx_buf=0x%p\n", __func__, cmd_xfer->rx_buf);
+	debug_print("[%s] data_xfer=0x%p\n", __func__, data_xfer);
 
 	if (!cmd_xfer->len) {
 		pr_err("QSPI: SPI transfer length is 0.\n");
@@ -1114,8 +1078,8 @@ int cadence_qspi_apb_process_queue(struct struct_cqspi *cadence_qspi,
 		/* STIG read */
 		if ((n_trans == 3) && data_xfer && spi_xfer[2])
 			ret = cadence_qspi_apb_command_read(iobase,
-				cmd_xfer->len, cmd_xfer->tx_buf,
-				data_xfer->len, data_xfer->tx_buf,
+				cmd_xfer->len, (const unsigned char *)cmd_xfer->tx_buf,
+				data_xfer->len, (unsigned char *)data_xfer->tx_buf,
 				spi_xfer[2]->len, spi_xfer[2]->rx_buf, f_pdata->flash_type);
 		else if ((n_trans == 2) && data_xfer)
 			ret = cadence_qspi_apb_command_read(iobase,
diff --git a/drivers/spi/spi-cadence-qspi.c b/drivers/spi/spi-cadence-qspi.c
index f5fe312595ea..14573042638a 100644
--- a/drivers/spi/spi-cadence-qspi.c
+++ b/drivers/spi/spi-cadence-qspi.c
@@ -47,7 +47,6 @@ static irqreturn_t cadence_qspi_irq_handler(int this_irq, void *dev)
 {
 	struct struct_cqspi *cadence_qspi = dev;
 	u32 irq_status;
-	unsigned long flags;
 
 	/* Read interrupt status
 	 * We need to ignore those that comes with irq_status 0.
@@ -182,6 +181,8 @@ static int cadence_qspi_start_queue(struct struct_cqspi *cadence_qspi)
 	queue_work(cadence_qspi->workqueue, &cadence_qspi->work);
 	return 0;
 }
+
+#ifdef CONFIG_PM
 static int cadence_qspi_stop_queue(struct struct_cqspi *cadence_qspi)
 {
 	unsigned long flags;
@@ -205,6 +206,8 @@ static int cadence_qspi_stop_queue(struct struct_cqspi *cadence_qspi)
 	spin_unlock_irqrestore(&cadence_qspi->lock, flags);
 	return status;
 }
+#endif
+
 static int cadence_qspi_of_get_pdata(struct platform_device *pdev)
 {
 	struct device_node *np = pdev->dev.of_node;
@@ -348,9 +351,6 @@ static int cadence_qspi_probe(struct platform_device *pdev)
 	struct resource *res_ahb;
 	struct cqspi_platform_data *pdata;
 	int status;
-	struct device *dev = &pdev->dev;
-	struct device_node *np = dev->of_node;
-	struct cqspi_flash_pdata *f_pdata;
 
 	pr_debug("%s %s %s\n", __func__,
 		pdev->name, pdev->id_entry->name);
@@ -407,9 +407,9 @@ static int cadence_qspi_probe(struct platform_device *pdev)
 	cadence_qspi->res = res;
 
 	/* request and remap ahb */
-	status = devm_request_mem_region(&pdev->dev, pdata->qspi_ahb_phy,
+	res_ahb = devm_request_mem_region(&pdev->dev, pdata->qspi_ahb_phy,
 					 pdata->qspi_ahb_size, "ahb");
-	if (!status) {
+	if (!res_ahb) {
 		dev_err(&pdev->dev, "failed to request memory region\n");
 		status = -EADDRNOTAVAIL;
 		goto err_ahbremap;
