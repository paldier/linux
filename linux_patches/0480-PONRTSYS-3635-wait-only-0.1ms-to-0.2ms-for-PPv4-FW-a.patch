From 902c4565bb7dd2876ee63f3a5c9aa1130d6afc11 Mon Sep 17 00:00:00 2001
From: Hauke Mehrtens <hauke.mehrtens@intel.com>
Date: Wed, 20 Feb 2019 13:41:23 +0100
Subject: [PATCH] PONRTSYS-3635: wait only 0.1ms to 0.2ms for PPv4 FW answer

If the PPv4 FW didn't answer immediately to a request the PPv4 driver used
msleep(10) to wait for the next try. msleep() with values less than 20 is
not working well and mostly the CPU will wait around 20ms.
Use usleep_range() now and check for the answer ever 0.1ms to 0.2ms, this
is able to wait for such a short time. This way we get the answer from the
PPv4 FW much earlier and we can finish the operations much faster. This
gives a significant performance improvement to the OMCI configuration.

The number of tries was also increased so the max wait time should be similar to before.
---
 drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_fw.c | 9 ++++++---
 1 file changed, 6 insertions(+), 3 deletions(-)

diff --git a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_fw.c b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_fw.c
index 79e4e1cb704e..bcc02fa91694 100644
--- a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_fw.c
+++ b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_fw.c
@@ -2614,8 +2614,7 @@ static void post_process(struct pp_qos_dev *qdev, union driver_cmd *dcmd)
 }
 
 #define MAX_FW_CMD_SIZE 120U
-#define MS_SLEEP_BETWEEN_POLL 10U
-#define NUM_OF_POLLS	500U
+#define NUM_OF_POLLS	100000U
 
 /*
  * Go over all commands on pending queue until cmd id
@@ -2663,7 +2662,11 @@ void check_completion(struct pp_qos_dev *qdev)
 		val = qos_u32_from_uc(*pos);
 		while ((val &
 			(UC_CMD_FLAG_UC_DONE | UC_CMD_FLAG_UC_ERROR)) == 0) {
-			qos_sleep(MS_SLEEP_BETWEEN_POLL);
+#ifdef __KERNEL__
+			usleep_range(100, 200);
+#else
+			usleep(200);
+#endif
 			val = qos_u32_from_uc(*pos);
 			++i;
 			if (i == NUM_OF_POLLS) {
