From 9cb5613675974f2940ab3dc7889e70e6e5be25eb Mon Sep 17 00:00:00 2001
From: Hua Ma <hua.ma@linux.intel.com>
Date: Thu, 21 Jun 2018 17:37:38 +0800
Subject: [PATCH] Add support for mips common files

---
 arch/mips/Kbuild                            |   2 +
 arch/mips/Kconfig                           |  68 +++++++++++++--
 arch/mips/include/asm/addrspace.h           |  22 +++++
 arch/mips/include/asm/dma.h                 |   7 +-
 arch/mips/include/asm/irq_work.h            |  13 +++
 arch/mips/include/asm/mach-generic/irq.h    |   2 +
 arch/mips/include/asm/mach-generic/spaces.h |   2 +
 arch/mips/include/asm/mipsmtregs.h          |  16 ++++
 arch/mips/include/asm/pci.h                 |   1 +
 arch/mips/include/asm/pgtable-32.h          |   2 +
 arch/mips/include/asm/processor.h           |   4 +
 arch/mips/kernel/head.S                     |  10 ++-
 arch/mips/kernel/prom.c                     |   7 ++
 arch/mips/kernel/setup.c                    |  22 ++++-
 arch/mips/kernel/smp-cmp.c                  | 125 ++++++++++++++++++++++++++--
 arch/mips/mm/c-r4k.c                        |   1 +
 arch/mips/mm/cache.c                        |   2 +
 arch/mips/mm/dma-default.c                  |  53 ++----------
 arch/mips/pci/Makefile                      |   0
 arch/mips/pci/fixup-lantiq.c                |   7 +-
 arch/mips/pci/ops-lantiq.c                  |  23 ++---
 arch/mips/pci/pci-lantiq.c                  |  21 +++--
 arch/mips/pci/pci-legacy.c                  |  10 ++-
 23 files changed, 332 insertions(+), 88 deletions(-)

diff --git a/arch/mips/Kbuild b/arch/mips/Kbuild
index 5c3f688a5232..f1993963a704 100644
--- a/arch/mips/Kbuild
+++ b/arch/mips/Kbuild
@@ -3,6 +3,8 @@
 # CFLAGS_<file.o> := -Wno-error
 subdir-ccflags-y := -Werror
 
+generic-y += irq_work.h
+
 # platform specific definitions
 include arch/mips/Kbuild.platforms
 obj-y := $(platform-y)
diff --git a/arch/mips/Kconfig b/arch/mips/Kconfig
old mode 100644
new mode 100755
index 92bcde046b6b..bd84cb704996
--- a/arch/mips/Kconfig
+++ b/arch/mips/Kconfig
@@ -373,8 +373,6 @@ config LANTIQ
 	bool "Lantiq based platforms"
 	select DMA_NONCOHERENT
 	select IRQ_MIPS_CPU
-	select CEVT_R4K
-	select CSRC_R4K
 	select SYS_HAS_CPU_MIPS32_R1
 	select SYS_HAS_CPU_MIPS32_R2
 	select SYS_SUPPORTS_BIG_ENDIAN
@@ -383,8 +381,9 @@ config LANTIQ
 	select SYS_SUPPORTS_MULTITHREADING
 	select SYS_HAS_EARLY_PRINTK
 	select GPIOLIB
-	select SWAP_IO_SPACE
+##	select SWAP_IO_SPACE
 	select BOOT_RAW
+	select HAVE_MACH_CLKDEV
 	select CLKDEV_LOOKUP
 	select USE_OF
 	select PINCTRL
@@ -1758,6 +1757,27 @@ config CPU_MIPS32_3_5_EVA
 	  One of its primary benefits is an increase in the maximum size
 	  of lowmem (up to 3GB). If unsure, say 'N' here.
 
+config LTQ_EVA_2GB
+	bool "EVA support for 2GB memory"
+	depends on CPU_MIPS32_3_5_EVA
+	depends on SOC_GRX500
+	help
+	  Choose this for EVA 2GB support.
+
+config LTQ_EVA_1GB
+	bool "EVA support for 1GB memory"
+	depends on CPU_MIPS32_3_5_EVA
+	depends on SOC_GRX500
+	help
+	  Choose this for EVA 1GB support.
+
+config LTQ_EVA_LEGACY
+	bool "EVA setting for legacy operation"
+	depends on CPU_MIPS32_3_5_EVA
+	depends on SOC_GRX500
+	help
+	  Choose this for EVA legacy(512MB) support
+
 config CPU_MIPS32_R5_FEATURES
 	bool "MIPS32 Release 5 Features"
 	depends on SYS_HAS_CPU_MIPS32_R5
@@ -2177,6 +2197,14 @@ config PAGE_SIZE_64KB
 
 endchoice
 
+config MAX_ZONEDMA_SIZE
+	int "Maximum ZONE_DMA Size in (MB)"
+	depends on ZONE_DMA && SOC_GRX500
+	range 16 256
+	default "16"
+	help
+	  Allows to specify the MAX size of ZONE_DMA . By default it is 16MB.
+
 config FORCE_MAX_ZONEORDER
 	int "Maximum zone order"
 	range 14 64 if MIPS_HUGE_TLB_SUPPORT && PAGE_SIZE_64KB
@@ -2251,7 +2279,7 @@ config MIPS_MT_SMP
 	depends on SYS_SUPPORTS_MULTITHREADING && !CPU_MIPSR6
 	select CPU_MIPSR2_IRQ_VI
 	select CPU_MIPSR2_IRQ_EI
-	select SYNC_R4K
+	#select SYNC_R4K
 	select MIPS_MT
 	select SMP
 	select SMP_UP
@@ -2350,9 +2378,10 @@ config MIPS_CMP
 	bool "MIPS CMP framework support (DEPRECATED)"
 	depends on SYS_SUPPORTS_MIPS_CMP && !CPU_MIPSR6
 	select SMP
-	select SYNC_R4K
+	select SYNC_R4K if (CEVT_R4K || CSRC_R4K)
 	select SYS_SUPPORTS_SMP
 	select WEAK_ORDERING
+	select SYS_SUPPORTS_HOTPLUG_CPU
 	default n
 	help
 	  Select this if you are using a bootloader which implements the "CMP
@@ -2362,6 +2391,35 @@ config MIPS_CMP
 	  Unless you have a specific need, you should use CONFIG_MIPS_CPS
 	  instead of this.
 
+config LTQ_VMB
+	bool "Lantiq VPE Management Block (VMB)"
+	depends on MIPS_CMP && (SOC_GRX500 || MIPS_MALTA)
+	default n
+	help
+	 Lantiq VPE Management Block support to launch Secondary FW/Linux
+
+config LTQ_ITC
+	bool "Inter Thread Communication support (ITC)"
+	depends on MIPS_CMP && SOC_GRX500
+	default n
+	help
+	 Used to Synchronise Multiple TCs. Currently ITC cells are used a Semaphores.
+
+config LTQ_DYN_CPU_ALLOC
+	bool "Dynamic CPU allocation in vmb_cpu_alloc"
+	depends on LTQ_VMB
+	default n
+	help
+	 Option to select CPU dynamically using vmb_cpu_alloc. This overrides the mapping on CPU to FW/Linux.	
+
+
+config BOOTCORE_LOAD_ADDR
+	hex "Boot core start address"
+	depends on SOC_TYPE_GRX500_TEP
+	default 0xffffffff88000000
+	help
+		Used to give start address for Bootcore
+
 config MIPS_CPS
 	bool "MIPS Coherent Processing System support"
 	depends on SYS_SUPPORTS_MIPS_CPS
diff --git a/arch/mips/include/asm/addrspace.h b/arch/mips/include/asm/addrspace.h
old mode 100644
new mode 100755
index 4856adc8906e..9a1dadff5c14
--- a/arch/mips/include/asm/addrspace.h
+++ b/arch/mips/include/asm/addrspace.h
@@ -45,12 +45,16 @@
 /*
  * Returns the kernel segment base of a given address
  */
+#ifndef KSEGX
 #define KSEGX(a)		((_ACAST32_(a)) & _ACAST32_(0xe0000000))
+#endif
 
 /*
  * Returns the physical address of a CKSEGx / XKPHYS address
  */
+#ifndef CPHYSADDR
 #define CPHYSADDR(a)		((_ACAST32_(a)) & 0x1fffffff)
+#endif
 #define XPHYSADDR(a)		((_ACAST64_(a)) &			\
 				 _CONST64_(0x0000ffffffffffff))
 
@@ -77,23 +81,40 @@
 
 #else
 
+#ifndef CKSEG0ADDR
 #define CKSEG0ADDR(a)		(CPHYSADDR(a) | KSEG0)
+#endif
+#ifndef CKSEG1ADDR
 #define CKSEG1ADDR(a)		(CPHYSADDR(a) | KSEG1)
+#endif
+#ifndef CKSEG2ADDR
 #define CKSEG2ADDR(a)		(CPHYSADDR(a) | KSEG2)
+#endif
+#ifndef CKSEG3ADDR
 #define CKSEG3ADDR(a)		(CPHYSADDR(a) | KSEG3)
+#endif
 
 /*
  * Map an address to a certain kernel segment
  */
+#ifndef KSEG0ADDR
 #define KSEG0ADDR(a)		(CPHYSADDR(a) | KSEG0)
+#endif
+#ifndef KSEG1ADDR
 #define KSEG1ADDR(a)		(CPHYSADDR(a) | KSEG1)
+#endif
+#ifndef KSEG2ADDR
 #define KSEG2ADDR(a)		(CPHYSADDR(a) | KSEG2)
+#endif
+#ifndef KSEG3ADDR
 #define KSEG3ADDR(a)		(CPHYSADDR(a) | KSEG3)
+#endif
 
 /*
  * Memory segments (32bit kernel mode addresses)
  * These are the traditional names used in the 32-bit universe.
  */
+#ifndef KSEG
 #define KUSEG			0x00000000
 #define KSEG0			0x80000000
 #define KSEG1			0xa0000000
@@ -105,6 +126,7 @@
 #define CKSEG1			0xa0000000
 #define CKSEG2			0xc0000000
 #define CKSEG3			0xe0000000
+#endif
 
 #endif
 
diff --git a/arch/mips/include/asm/dma.h b/arch/mips/include/asm/dma.h
old mode 100644
new mode 100755
index 5b9ed1bffdbc..61cd7c6857c8
--- a/arch/mips/include/asm/dma.h
+++ b/arch/mips/include/asm/dma.h
@@ -83,11 +83,16 @@
  * Deskstations or Acer PICA but not the much more versatile DMA logic used
  * for the local devices on Acer PICA or Magnums.
  */
+#if defined(CONFIG_MAX_ZONEDMA_SIZE)
+#define ZONE_DMA_SIZE (CONFIG_MAX_ZONEDMA_SIZE * 1024 * 1024)
+#else
+#define ZONE_DMA_SIZE 0x1000000
+#endif
 #if defined(CONFIG_SGI_IP22) || defined(CONFIG_SGI_IP28)
 /* don't care; ISA bus master won't work, ISA slave DMA supports 32bit addr */
 #define MAX_DMA_ADDRESS		PAGE_OFFSET
 #else
-#define MAX_DMA_ADDRESS		(PAGE_OFFSET + 0x01000000)
+#define MAX_DMA_ADDRESS		(PAGE_OFFSET + ZONE_DMA_SIZE)
 #endif
 #define MAX_DMA_PFN		PFN_DOWN(virt_to_phys((void *)MAX_DMA_ADDRESS))
 
diff --git a/arch/mips/include/asm/irq_work.h b/arch/mips/include/asm/irq_work.h
new file mode 100644
index 000000000000..812f901c1d96
--- /dev/null
+++ b/arch/mips/include/asm/irq_work.h
@@ -0,0 +1,13 @@
+#ifndef _ASM_IRQ_WORK_H
+#define _ASM_IRQ_WORK_H
+
+static inline bool arch_irq_work_has_interrupt(void)
+{
+#ifndef CONFIG_SMP
+	return false;
+#else
+	return true;
+#endif
+}
+
+#endif /* _ASM_IRQ_WORK_H */
diff --git a/arch/mips/include/asm/mach-generic/irq.h b/arch/mips/include/asm/mach-generic/irq.h
index be546a0f65fa..7223abb7d6e2 100644
--- a/arch/mips/include/asm/mach-generic/irq.h
+++ b/arch/mips/include/asm/mach-generic/irq.h
@@ -42,4 +42,6 @@
 #endif
 #endif /* CONFIG_MIPS_GIC */
 
+#define MIPS_GIC_LOCAL_IRQ_BASE (MIPS_GIC_IRQ_BASE + GIC_MAX_INTRS)
+
 #endif /* __ASM_MACH_GENERIC_IRQ_H */
diff --git a/arch/mips/include/asm/mach-generic/spaces.h b/arch/mips/include/asm/mach-generic/spaces.h
old mode 100644
new mode 100755
index 952b0fdfda0e..3d6d3b0f4a6c
--- a/arch/mips/include/asm/mach-generic/spaces.h
+++ b/arch/mips/include/asm/mach-generic/spaces.h
@@ -22,11 +22,13 @@
 #endif
 
 #ifdef CONFIG_32BIT
+#ifndef CAC_BASE
 #ifdef CONFIG_KVM_GUEST
 #define CAC_BASE		_AC(0x40000000, UL)
 #else
 #define CAC_BASE		_AC(0x80000000, UL)
 #endif
+#endif
 #ifndef IO_BASE
 #define IO_BASE			_AC(0xa0000000, UL)
 #endif
diff --git a/arch/mips/include/asm/mipsmtregs.h b/arch/mips/include/asm/mipsmtregs.h
index 5f8052ce43bf..5bde13ce9107 100644
--- a/arch/mips/include/asm/mipsmtregs.h
+++ b/arch/mips/include/asm/mipsmtregs.h
@@ -31,6 +31,9 @@
 #define read_c0_vpeconf1()		__read_32bit_c0_register($1, 3)
 #define write_c0_vpeconf1(val)		__write_32bit_c0_register($1, 3, val)
 
+#define read_c0_yqmask()                __read_32bit_c0_register($1, 4)
+#define write_c0_yqmask(val)              __write_32bit_c0_register($1, 4, val)
+
 #define read_c0_tcstatus()		__read_32bit_c0_register($2, 1)
 #define write_c0_tcstatus(val)		__write_32bit_c0_register($2, 1, val)
 
@@ -368,6 +371,19 @@ do {									\
 	ehb();								\
 } while (0)
 
+#define mips_mt_yield(yq)                                       \
+({                                                              \
+        unsigned int __yq = (yq);                               \
+        unsigned int __res;                                     \
+        __asm__ __volatile__(                                   \
+        ".set  mips32r2\n"                                      \
+        ".set  mt\n"                                            \
+        "yield %0,%z1\n"                                        \
+        : "=d" (__res)                                          \
+        : "dJ" (__yq));                                         \
+                                                                \
+        __res;                                                  \
+})
 
 /* you *must* set the target tc (settc) before trying to use these */
 #define read_vpe_c0_vpecontrol()	mftc0(1, 1)
diff --git a/arch/mips/include/asm/pci.h b/arch/mips/include/asm/pci.h
old mode 100644
new mode 100755
index 30d1129d8624..cfda9fa53177
--- a/arch/mips/include/asm/pci.h
+++ b/arch/mips/include/asm/pci.h
@@ -33,6 +33,7 @@ struct pci_controller {
 	struct device_node *of_node;
 
 	struct pci_ops *pci_ops;
+	struct msi_controller *msi_ctr;
 	struct resource *mem_resource;
 	unsigned long mem_offset;
 	struct resource *io_resource;
diff --git a/arch/mips/include/asm/pgtable-32.h b/arch/mips/include/asm/pgtable-32.h
index c0be540e83cb..bae6ea9eddcd 100644
--- a/arch/mips/include/asm/pgtable-32.h
+++ b/arch/mips/include/asm/pgtable-32.h
@@ -68,11 +68,13 @@ extern int add_temporary_entry(unsigned long entrylo0, unsigned long entrylo1,
 #define PKMAP_END	((FIXADDR_START) & ~((LAST_PKMAP << PAGE_SHIFT)-1))
 #define PKMAP_BASE	(PKMAP_END - PAGE_SIZE * LAST_PKMAP)
 
+#ifndef VMALLOC_END
 #ifdef CONFIG_HIGHMEM
 # define VMALLOC_END	(PKMAP_BASE-2*PAGE_SIZE)
 #else
 # define VMALLOC_END	(FIXADDR_START-2*PAGE_SIZE)
 #endif
+#endif
 
 #ifdef CONFIG_PHYS_ADDR_T_64BIT
 #define pte_ERROR(e) \
diff --git a/arch/mips/include/asm/processor.h b/arch/mips/include/asm/processor.h
index ad6f019ff776..a8ae61345874 100644
--- a/arch/mips/include/asm/processor.h
+++ b/arch/mips/include/asm/processor.h
@@ -22,6 +22,10 @@
 #include <asm/mipsregs.h>
 #include <asm/prefetch.h>
 
+#ifdef CONFIG_SOC_GRX500
+#define ARCH_LOW_ADDRESS_LIMIT MAX_DMA_ADDRESS
+#endif
+
 /*
  * Return current * instruction pointer ("program counter").
  */
diff --git a/arch/mips/kernel/head.S b/arch/mips/kernel/head.S
old mode 100644
new mode 100755
index d1bb506adc10..b075fb2463b3
--- a/arch/mips/kernel/head.S
+++ b/arch/mips/kernel/head.S
@@ -169,6 +169,12 @@ dtb_found:
 NESTED(smp_bootstrap, 16, sp)
 	smp_slave_setup
 	setup_c0_status_sec
-	j	start_secondary
-	END(smp_bootstrap)
+#ifdef CONFIG_EVA
+	PTR_LA  t9, start_secondary
+	jr      t9
+	.align  8
+#else
+	j       start_secondary
+#endif /* CONFIG_EVA */
+        END(smp_bootstrap)
 #endif /* CONFIG_SMP */
diff --git a/arch/mips/kernel/prom.c b/arch/mips/kernel/prom.c
index 5fcec3032f38..0dbcd152a1a9 100644
--- a/arch/mips/kernel/prom.c
+++ b/arch/mips/kernel/prom.c
@@ -49,6 +49,13 @@ void * __init early_init_dt_alloc_memory_arch(u64 size, u64 align)
 	return __alloc_bootmem(size, align, __pa(MAX_DMA_ADDRESS));
 }
 
+int __init early_init_dt_reserve_memory_arch(phys_addr_t base,
+					phys_addr_t size, bool nomap)
+{
+	add_memory_region(base, size, BOOT_MEM_RESERVED);
+	return 0;
+}
+
 void __init __dt_setup_arch(void *bph)
 {
 	if (!early_init_dt_scan(bph))
diff --git a/arch/mips/kernel/setup.c b/arch/mips/kernel/setup.c
index 695950361d2a..0882d7e0b9d3 100644
--- a/arch/mips/kernel/setup.c
+++ b/arch/mips/kernel/setup.c
@@ -27,6 +27,7 @@
 #include <linux/device.h>
 #include <linux/dma-contiguous.h>
 #include <linux/decompress/generic.h>
+#include <linux/of_fdt.h>
 
 #include <asm/addrspace.h>
 #include <asm/bootinfo.h>
@@ -769,6 +770,7 @@ static void __init request_crashkernel(struct resource *res)
 
 static void __init arch_mem_init(char **cmdline_p)
 {
+	phys_addr_t dma_cma_limit;
 	struct memblock_region *reg;
 	extern void plat_mem_setup(void);
 
@@ -788,9 +790,6 @@ static void __init arch_mem_init(char **cmdline_p)
 			 PFN_DOWN(__pa_symbol(&__init_end)) << PAGE_SHIFT,
 			 BOOT_MEM_INIT_RAM);
 
-	pr_info("Determined physical RAM map:\n");
-	print_memory_map();
-
 #if defined(CONFIG_CMDLINE_BOOL) && defined(CONFIG_CMDLINE_OVERRIDE)
 	strlcpy(boot_command_line, builtin_cmdline, COMMAND_LINE_SIZE);
 #else
@@ -829,6 +828,12 @@ static void __init arch_mem_init(char **cmdline_p)
 		print_memory_map();
 	}
 
+	early_init_fdt_reserve_self();
+	early_init_fdt_scan_reserved_mem();
+
+	pr_info("Determined physical RAM map:\n");
+	print_memory_map();
+
 	bootmem_init();
 #ifdef CONFIG_PROC_VMCORE
 	if (setup_elfcorehdr && setup_elfcorehdr_size) {
@@ -850,7 +855,16 @@ static void __init arch_mem_init(char **cmdline_p)
 	sparse_init();
 	plat_swiotlb_setup();
 
-	dma_contiguous_reserve(PFN_PHYS(max_low_pfn));
+	/*
+	 * dma_alloc_coherent will return uncached address for most legacy MIPS,
+	 * the physical RAM is 256 MB for interaptiv, physical RAM is up to 3GB,
+	 * however, the system has only 256MB uncached address available 
+	 */
+	dma_cma_limit = PHYS_OFFSET + SZ_256M;
+	if (PFN_PHYS(max_low_pfn) < dma_cma_limit)
+		dma_cma_limit = PFN_PHYS(max_low_pfn);
+
+	dma_contiguous_reserve(dma_cma_limit);
 	/* Tell bootmem about cma reserved memblock section */
 	for_each_memblock(reserved, reg)
 		if (reg->size != 0)
diff --git a/arch/mips/kernel/smp-cmp.c b/arch/mips/kernel/smp-cmp.c
index 76923349b4fe..56767d74c2a0 100644
--- a/arch/mips/kernel/smp-cmp.c
+++ b/arch/mips/kernel/smp-cmp.c
@@ -38,6 +38,13 @@
 #include <asm/mipsmtregs.h>
 #include <asm/mips_mt.h>
 #include <asm/amon.h>
+#ifdef CONFIG_LTQ_VMB
+#include <asm/ltq_vmb.h>
+#endif
+
+#ifdef CONFIG_LTQ_ITC
+#include <asm/ltq_itc.h>
+#endif
 
 static void cmp_init_secondary(void)
 {
@@ -54,6 +61,10 @@ static void cmp_init_secondary(void)
 		c->vpe_id = (read_c0_tcbind() >> TCBIND_CURVPE_SHIFT) &
 			TCBIND_CURVPE;
 #endif
+
+#ifdef CONFIG_LTQ_ITC
+	itc_init();
+#endif
 }
 
 static void cmp_smp_finish(void)
@@ -72,8 +83,15 @@ static void cmp_smp_finish(void)
 	local_irq_enable();
 }
 
-/*
- * Setup the PC, SP, and GP of a secondary processor and start it running
+void play_dead(void)
+{
+	unsigned int cpu;
+
+	cpu = smp_processor_id();
+	pr_info("CPU%d going offline\n", cpu);
+}
+
+/* Setup the PC, SP, and GP of a secondary processor and start it running
  * smp_bootstrap is the place to resume from
  * __KSTK_TOS(idle) is apparently the stack pointer
  * (unsigned long)idle->thread_info the gp
@@ -84,28 +102,98 @@ static void cmp_boot_secondary(int cpu, struct task_struct *idle)
 	unsigned long sp = __KSTK_TOS(idle);
 	unsigned long pc = (unsigned long)&smp_bootstrap;
 	unsigned long a0 = 0;
+#ifdef CONFIG_LTQ_VMB
+	int ret;
+	struct CPU_launch_t cpu_launch;
+#endif
 
 	pr_debug("SMPCMP: CPU%d: %s cpu %d\n", smp_processor_id(),
 		__func__, cpu);
 
-#if 0
-	/* Needed? */
-	flush_icache_range((unsigned long)gp,
-			   (unsigned long)(gp + sizeof(struct thread_info)));
+#ifdef CONFIG_LTQ_VMB
+	ret = vmb_cpu_alloc(cpu, "LINUX");
+	if (ret == -VMB_EBUSY) {
+		pr_err("VPE %d is Busy !!!\n", cpu);
+		ret = vmb_cpu_alloc(MAX_CPU, "LINUX");
+		pr_err("[%s]:[%d] CPU ret = %d\n",
+		       __func__, __LINE__, ret);
+		if (ret == -VMB_EBUSY) {
+			pr_err("ALL the CPUs are Busy !\n");
+			return;
+		}
+	}
+
+	memset(&cpu_launch, 0, sizeof(struct CPU_launch_t));
+
+#ifdef CONFIG_EVA
+	cpu_launch.start_addr = CKSEG1ADDR(pc);
+#else
+	cpu_launch.start_addr = pc;
 #endif
+	cpu_launch.sp = sp;
+	cpu_launch.gp = (unsigned long)gp;
+	cpu_launch.a0 =  a0;
 
+	ret = vmb_cpu_start(ret, cpu_launch, 0, 0, 0);
+	if (ret == -VMB_ETIMEOUT || ret == -VMB_ENACK) {
+		pr_err("[%s]:[%d] FW %s could not be launched on CPU %d.",
+		       __func__, __LINE__, "LINUX", cpu);
+		pr_err("The CPU has been force reset. Please use alloc and then start.\n");
+		return;
+	}
+#else
 	amon_cpu_start(cpu, pc, sp, (unsigned long)gp, a0);
+#endif
 }
 
-/*
- * Common setup before any secondaries are started
+static unsigned int core_vpe_count(unsigned int core)
+{
+		unsigned int cfg;
+
+		if ((!IS_ENABLED(CONFIG_MIPS_MT_SMP) || !cpu_has_mipsmt) &&
+		    (!IS_ENABLED(CONFIG_CPU_MIPSR6) || !cpu_has_vp))
+			return 1;
+
+		mips_cm_lock_other(core, 0);
+		cfg = read_gcr_co_config() & CM_GCR_Cx_CONFIG_PVPE_MSK;
+		mips_cm_unlock_other();
+		return (cfg >> CM_GCR_Cx_CONFIG_PVPE_SHF) + 1;
+}
+
+/*Common setup before any secondaries are started
  */
 void __init cmp_smp_setup(void)
 {
 	int i;
 	int ncpu = 0;
+	unsigned int ncores, nvpes, core_vpes;
+	int c, v, v_min;
 
-	pr_debug("SMPCMP: CPU%d: %s\n", smp_processor_id(), __func__);
+	pr_info("SMPCMP: CPU%d: %s\n", smp_processor_id(), __func__);
+
+	/* Detect & record VPE topology */
+	ncores = mips_cm_numcores();
+	pr_info("%s topology ", cpu_has_mips_r6 ? "VP" : "VPE");
+
+	for (c = nvpes = 0; c < ncores; c++) {
+		core_vpes = core_vpe_count(c);
+		pr_cont("%c%u", c ? ',' : '{', core_vpes);
+
+	/* Use the number of VPEs in core 0 for smp_num_siblings */
+		if (!c)
+			smp_num_siblings = core_vpes;
+		v_min = NR_CPUS - nvpes;
+		v_min = min_t(int, core_vpes, v_min);
+		for (v = 0; v < v_min; v++) {
+			cpu_data[nvpes + v].core = c;
+#if defined(CONFIG_MIPS_MT_SMP) || defined(CONFIG_CPU_MIPSR6)
+			cpu_data[nvpes + v].vpe_id = v;
+#endif
+		}
+
+		nvpes += core_vpes;
+	}
+	pr_cont("} total %u\n", nvpes);
 
 #ifdef CONFIG_MIPS_MT_FPAFF
 	/* If we have an FPU, enroll ourselves in the FPU-full mask */
@@ -135,9 +223,28 @@ void __init cmp_smp_setup(void)
 
 void __init cmp_prepare_cpus(unsigned int max_cpus)
 {
+	unsigned int cca;
+	bool cca_unsuitable;
+
 	pr_debug("SMPCMP: CPU%d: %s max_cpus=%d\n",
 		 smp_processor_id(), __func__, max_cpus);
 
+	/* Detect whether the CCA is unsuited to multi-core SMP */
+	cca = read_c0_config() & CONF_CM_CMASK;
+	switch (cca) {
+	case 0x4: /* CWBE */
+	case 0x5: /* CWB */
+				pr_info("CCA is coherent, multi-core is fine\n");
+		/* The CCA is coherent, multi-core is fine */
+		cca_unsuitable = false;
+		break;
+
+	default:
+				pr_info("CCA is not coherent, multi-core is not usable\n");
+		/* CCA is not coherent, multi-core is not usable */
+		cca_unsuitable = true;
+	}
+
 #ifdef CONFIG_MIPS_MT
 	/*
 	 * FIXME: some of these options are per-system, some per-core and
diff --git a/arch/mips/mm/c-r4k.c b/arch/mips/mm/c-r4k.c
old mode 100644
new mode 100755
index 0ff379f0cc4a..df1c0d7ef391
--- a/arch/mips/mm/c-r4k.c
+++ b/arch/mips/mm/c-r4k.c
@@ -472,6 +472,7 @@ static inline void local_r4k___flush_cache_all(void * args)
 	case CPU_R12000:
 	case CPU_R14000:
 	case CPU_R16000:
+	case CPU_INTERAPTIV:
 		/*
 		 * These caches are inclusive caches, that is, if something
 		 * is not cached in the S-cache, we know it also won't be
diff --git a/arch/mips/mm/cache.c b/arch/mips/mm/cache.c
index 6db341347202..7478e59e786b 100644
--- a/arch/mips/mm/cache.c
+++ b/arch/mips/mm/cache.c
@@ -63,6 +63,8 @@ void (*_dma_cache_wback)(unsigned long start, unsigned long size);
 void (*_dma_cache_inv)(unsigned long start, unsigned long size);
 
 EXPORT_SYMBOL(_dma_cache_wback_inv);
+EXPORT_SYMBOL(_dma_cache_wback);
+EXPORT_SYMBOL(_dma_cache_inv);
 
 #endif /* CONFIG_DMA_NONCOHERENT || CONFIG_DMA_MAYBE_COHERENT */
 
diff --git a/arch/mips/mm/dma-default.c b/arch/mips/mm/dma-default.c
old mode 100644
new mode 100755
index 46d5696c4f27..daeffe5533a7
--- a/arch/mips/mm/dma-default.c
+++ b/arch/mips/mm/dma-default.c
@@ -76,7 +76,7 @@ static inline int cpu_needs_post_dma_flush(struct device *dev)
 		boot_cpu_type() == CPU_BMIPS5000);
 }
 
-static gfp_t massage_gfp_flags(const struct device *dev, gfp_t gfp)
+static gfp_t massage_gfp_flags(const struct device *dev, gfp_t gfp, int coherent)
 {
 	gfp_t dma_flag;
 
@@ -101,8 +101,10 @@ static gfp_t massage_gfp_flags(const struct device *dev, gfp_t gfp)
 	else
 #endif
 #if defined(CONFIG_ZONE_DMA) && !defined(CONFIG_ZONE_DMA32)
-	     if (dev == NULL ||
-		 dev->coherent_dma_mask < DMA_BIT_MASK(sizeof(phys_addr_t) * 8))
+	     if (coherent && !plat_device_is_coherent(dev))
+		dma_flag = __GFP_DMA;
+	else if (dev == NULL ||
+		dev->coherent_dma_mask < DMA_BIT_MASK(sizeof(phys_addr_t) * 8))
 		dma_flag = __GFP_DMA;
 	else
 #endif
@@ -114,23 +116,6 @@ static gfp_t massage_gfp_flags(const struct device *dev, gfp_t gfp)
 	return gfp | dma_flag;
 }
 
-static void *mips_dma_alloc_noncoherent(struct device *dev, size_t size,
-	dma_addr_t * dma_handle, gfp_t gfp)
-{
-	void *ret;
-
-	gfp = massage_gfp_flags(dev, gfp);
-
-	ret = (void *) __get_free_pages(gfp, get_order(size));
-
-	if (ret != NULL) {
-		memset(ret, 0, size);
-		*dma_handle = plat_map_dma_mem(dev, ret, size);
-	}
-
-	return ret;
-}
-
 static void *mips_dma_alloc_coherent(struct device *dev, size_t size,
 	dma_addr_t *dma_handle, gfp_t gfp, unsigned long attrs)
 {
@@ -138,15 +123,7 @@ static void *mips_dma_alloc_coherent(struct device *dev, size_t size,
 	struct page *page = NULL;
 	unsigned int count = PAGE_ALIGN(size) >> PAGE_SHIFT;
 
-	/*
-	 * XXX: seems like the coherent and non-coherent implementations could
-	 * be consolidated.
-	 */
-	if (attrs & DMA_ATTR_NON_CONSISTENT)
-		return mips_dma_alloc_noncoherent(dev, size, dma_handle, gfp);
-
-	gfp = massage_gfp_flags(dev, gfp);
-
+	gfp = massage_gfp_flags(dev, gfp, 1);
 	if (IS_ENABLED(CONFIG_DMA_CMA) && gfpflags_allow_blocking(gfp))
 		page = dma_alloc_from_contiguous(dev,
 					count, get_order(size));
@@ -159,7 +136,8 @@ static void *mips_dma_alloc_coherent(struct device *dev, size_t size,
 	ret = page_address(page);
 	memset(ret, 0, size);
 	*dma_handle = plat_map_dma_mem(dev, ret, size);
-	if (!plat_device_is_coherent(dev)) {
+	if (!(attrs & DMA_ATTR_NON_CONSISTENT) &&
+	    !plat_device_is_coherent(dev)) {
 		dma_cache_wback_inv((unsigned long) ret, size);
 		ret = UNCAC_ADDR(ret);
 	}
@@ -167,14 +145,6 @@ static void *mips_dma_alloc_coherent(struct device *dev, size_t size,
 	return ret;
 }
 
-
-static void mips_dma_free_noncoherent(struct device *dev, size_t size,
-		void *vaddr, dma_addr_t dma_handle)
-{
-	plat_unmap_dma_mem(dev, dma_handle, size, DMA_BIDIRECTIONAL);
-	free_pages((unsigned long) vaddr, get_order(size));
-}
-
 static void mips_dma_free_coherent(struct device *dev, size_t size, void *vaddr,
 	dma_addr_t dma_handle, unsigned long attrs)
 {
@@ -182,14 +152,9 @@ static void mips_dma_free_coherent(struct device *dev, size_t size, void *vaddr,
 	unsigned int count = PAGE_ALIGN(size) >> PAGE_SHIFT;
 	struct page *page = NULL;
 
-	if (attrs & DMA_ATTR_NON_CONSISTENT) {
-		mips_dma_free_noncoherent(dev, size, vaddr, dma_handle);
-		return;
-	}
-
 	plat_unmap_dma_mem(dev, dma_handle, size, DMA_BIDIRECTIONAL);
 
-	if (!plat_device_is_coherent(dev))
+	if (!(attrs & DMA_ATTR_NON_CONSISTENT) && !plat_device_is_coherent(dev))
 		addr = CAC_ADDR(addr);
 
 	page = virt_to_page((void *) addr);
diff --git a/arch/mips/pci/Makefile b/arch/mips/pci/Makefile
old mode 100644
new mode 100755
diff --git a/arch/mips/pci/fixup-lantiq.c b/arch/mips/pci/fixup-lantiq.c
old mode 100644
new mode 100755
index 2b5427d3f35c..30bdfac0b929
--- a/arch/mips/pci/fixup-lantiq.c
+++ b/arch/mips/pci/fixup-lantiq.c
@@ -4,19 +4,16 @@
  *  by the Free Software Foundation.
  *
  *  Copyright (C) 2012 John Crispin <john@phrozen.org>
+ *  Copyright (C) 2016 Intel Corporation
  */
-
+#include <linux/pci.h>
 #include <linux/of_irq.h>
 #include <linux/of_pci.h>
 
-int (*ltq_pci_plat_arch_init)(struct pci_dev *dev) = NULL;
 int (*ltq_pci_plat_dev_init)(struct pci_dev *dev) = NULL;
 
 int pcibios_plat_dev_init(struct pci_dev *dev)
 {
-	if (ltq_pci_plat_arch_init)
-		return ltq_pci_plat_arch_init(dev);
-
 	if (ltq_pci_plat_dev_init)
 		return ltq_pci_plat_dev_init(dev);
 
diff --git a/arch/mips/pci/ops-lantiq.c b/arch/mips/pci/ops-lantiq.c
index f51e10899cc2..039ec39e059b 100644
--- a/arch/mips/pci/ops-lantiq.c
+++ b/arch/mips/pci/ops-lantiq.c
@@ -26,21 +26,23 @@
 #define PCI_ACCESS_WRITE 1
 
 static int ltq_pci_config_access(unsigned char access_type, struct pci_bus *bus,
-	unsigned int devfn, unsigned int where, u32 *data)
+				 unsigned int devfn, unsigned int where,
+				 u32 *data)
 {
 	unsigned long cfg_base;
 	unsigned long flags;
 	u32 temp;
 
 	/* we support slot from 0 to 15 dev_fn & 0x68 (AD29) is the
-	   SoC itself */
-	if ((bus->number != 0) || ((devfn & 0xf8) > 0x78)
-		|| ((devfn & 0xf8) == 0) || ((devfn & 0xf8) == 0x68))
+	 * SoC itself
+	 */
+	if ((bus->number != 0) || ((devfn & 0xf8) > 0x78) ||
+	    ((devfn & 0xf8) == 0) || ((devfn & 0xf8) == 0x68))
 		return 1;
 
 	spin_lock_irqsave(&ebu_lock, flags);
 
-	cfg_base = (unsigned long) ltq_pci_mapped_cfg;
+	cfg_base = (unsigned long)ltq_pci_mapped_cfg;
 	cfg_base |= (bus->number << LTQ_PCI_CFG_BUSNUM_SHF) | (devfn <<
 			LTQ_PCI_CFG_FUNNUM_SHF) | (where & ~0x3);
 
@@ -51,14 +53,15 @@ static int ltq_pci_config_access(unsigned char access_type, struct pci_bus *bus,
 		*data = ltq_r32(((u32 *)(cfg_base)));
 		*data = swab32(*data);
 	}
+	/* Ensure configuration access enabled */
 	wmb();
 
 	/* clean possible Master abort */
-	cfg_base = (unsigned long) ltq_pci_mapped_cfg;
+	cfg_base = (unsigned long)ltq_pci_mapped_cfg;
 	cfg_base |= (0x0 << LTQ_PCI_CFG_FUNNUM_SHF) + 4;
 	temp = ltq_r32(((u32 *)(cfg_base)));
 	temp = swab32(temp);
-	cfg_base = (unsigned long) ltq_pci_mapped_cfg;
+	cfg_base = (unsigned long)ltq_pci_mapped_cfg;
 	cfg_base |= (0x68 << LTQ_PCI_CFG_FUNNUM_SHF) + 4;
 	ltq_w32(temp, ((u32 *)cfg_base));
 
@@ -71,7 +74,7 @@ static int ltq_pci_config_access(unsigned char access_type, struct pci_bus *bus,
 }
 
 int ltq_pci_read_config_dword(struct pci_bus *bus, unsigned int devfn,
-	int where, int size, u32 *val)
+			      int where, int size, u32 *val)
 {
 	u32 data = 0;
 
@@ -89,7 +92,7 @@ int ltq_pci_read_config_dword(struct pci_bus *bus, unsigned int devfn,
 }
 
 int ltq_pci_write_config_dword(struct pci_bus *bus, unsigned int devfn,
-	int where, int size, u32 val)
+			       int where, int size, u32 val)
 {
 	u32 data = 0;
 
@@ -97,7 +100,7 @@ int ltq_pci_write_config_dword(struct pci_bus *bus, unsigned int devfn,
 		data = val;
 	} else {
 		if (ltq_pci_config_access(PCI_ACCESS_READ, bus,
-				devfn, where, &data))
+					  devfn, where, &data))
 			return PCIBIOS_DEVICE_NOT_FOUND;
 
 		if (size == 1)
diff --git a/arch/mips/pci/pci-lantiq.c b/arch/mips/pci/pci-lantiq.c
old mode 100644
new mode 100755
index f18f887f481d..0aad5ab44b57
--- a/arch/mips/pci/pci-lantiq.c
+++ b/arch/mips/pci/pci-lantiq.c
@@ -142,7 +142,10 @@ static int ltq_pci_startup(struct platform_device *pdev)
 
 	/* busy, i.e. configuration is not done, PCI access has to be retried */
 	ltq_pci_w32(ltq_pci_r32(PCI_CR_PCI_MOD) & ~(1 << 24), PCI_CR_PCI_MOD);
+
+	/* enable master only after configuration is done */
 	wmb();
+
 	/* BUS Master/IO/MEM access */
 	ltq_pci_cfg_w32(ltq_pci_cfg_r32(PCI_CS_STS_CMD) | 7, PCI_CS_STS_CMD);
 
@@ -165,6 +168,8 @@ static int ltq_pci_startup(struct platform_device *pdev)
 	/* enable all external masters request */
 	temp_buffer &= (~(3 << PCI_MASTER2_REQ_MASK_2BITS));
 	ltq_pci_w32(temp_buffer, PCI_CR_PC_ARB);
+
+	/* Make sure external master enabled */
 	wmb();
 
 	/* setup BAR memory regions */
@@ -182,14 +187,16 @@ static int ltq_pci_startup(struct platform_device *pdev)
 	ltq_pci_w32(0, PCI_CS_BASE_ADDR1);
 	/* both TX and RX endian swap are enabled */
 	ltq_pci_w32(ltq_pci_r32(PCI_CR_PCI_EOI) | 3, PCI_CR_PCI_EOI);
+	/* Ensure endian setup done */
 	wmb();
 	ltq_pci_w32(ltq_pci_r32(PCI_CR_BAR12MASK) | 0x80000000,
-		PCI_CR_BAR12MASK);
+		    PCI_CR_BAR12MASK);
 	ltq_pci_w32(ltq_pci_r32(PCI_CR_BAR13MASK) | 0x80000000,
-		PCI_CR_BAR13MASK);
+		    PCI_CR_BAR13MASK);
 	/*use 8 dw burst length */
 	ltq_pci_w32(0x303, PCI_CR_FCI_BURST_LENGTH);
 	ltq_pci_w32(ltq_pci_r32(PCI_CR_PCI_MOD) | (1 << 24), PCI_CR_PCI_MOD);
+	/* enable irq only after configuration is done */
 	wmb();
 
 	/* setup irq line */
@@ -198,10 +205,11 @@ static int ltq_pci_startup(struct platform_device *pdev)
 
 	/* toggle reset pin */
 	if (gpio_is_valid(reset_gpio)) {
-		__gpio_set_value(reset_gpio, 0);
+		gpio_set_value(reset_gpio, 0);
+		/* Ensure reset takes effect */
 		wmb();
 		mdelay(1);
-		__gpio_set_value(reset_gpio, 1);
+		gpio_set_value(reset_gpio, 1);
 	}
 	return 0;
 }
@@ -244,10 +252,11 @@ static struct platform_driver ltq_pci_driver = {
 
 int __init pcibios_init(void)
 {
-	int ret = platform_driver_register(&ltq_pci_driver);
+	int ret;
+
+	ret = platform_driver_register(&ltq_pci_driver);
 	if (ret)
 		pr_info("pci-xway: Error registering platform driver!");
 	return ret;
 }
-
 arch_initcall(pcibios_init);
diff --git a/arch/mips/pci/pci-legacy.c b/arch/mips/pci/pci-legacy.c
old mode 100644
new mode 100755
index 2d6886f09ba3..af21d07f8fdd
--- a/arch/mips/pci/pci-legacy.c
+++ b/arch/mips/pci/pci-legacy.c
@@ -77,7 +77,7 @@ static void pcibios_scanbus(struct pci_controller *hose)
 	static int next_busno;
 	static int need_domain_info;
 	LIST_HEAD(resources);
-	struct pci_bus *bus;
+	struct pci_bus *bus, *child;
 
 	if (hose->get_busno && pci_has_flag(PCI_PROBE_ONLY))
 		next_busno = (*hose->get_busno)();
@@ -88,7 +88,13 @@ static void pcibios_scanbus(struct pci_controller *hose)
 				hose->io_resource, hose->io_offset);
 	pci_add_resource_offset(&resources,
 				hose->busn_resource, hose->busn_offset);
-	bus = pci_scan_root_bus(NULL, next_busno, hose->pci_ops, hose,
+
+	if (IS_ENABLED(CONFIG_PCI_MSI)) {
+		bus = pci_scan_root_bus_msi(NULL, next_busno,
+					hose->pci_ops, hose, &resources,
+					hose->msi_ctr);
+	} else
+		bus = pci_scan_root_bus(NULL, next_busno, hose->pci_ops, hose,
 				&resources);
 	hose->bus = bus;
 
