From b0308f001690a979d96c0bf724a90b7f78bdd1c5 Mon Sep 17 00:00:00 2001
From: shaoguoh <guohua.shao@intel.com>
Date: Wed, 4 Jul 2018 18:18:21 +0800
Subject: [PATCH] Jira DRVLIB_SW-803: dp prototype for falcon_mx ACA support

---
 include/net/datapath_api.h | 254 ++++++++++++++++++++++++++++++++++++++++++---
 1 file changed, 238 insertions(+), 16 deletions(-)

diff --git a/include/net/datapath_api.h b/include/net/datapath_api.h
index 6ee9556d6096..c80397a747a2 100644
--- a/include/net/datapath_api.h
+++ b/include/net/datapath_api.h
@@ -65,6 +65,11 @@
  *@brief  Datapath QOS Manager API
  */
 /*! @} */
+#define DP_INTERFACE_ID   1 /*!< @brief DP Interface ID:
+			     *   If there is interface change between DP and
+			     *   upper drivers, like DCDP/PON ethernet driver,
+			     *   this macro will increase
+			     */
 #define DP_MAX_INST  1  /*!< @brief maximum DP instance to support. It can be
 			 *  change as as needed
 			 */
@@ -79,6 +84,15 @@
 #define DP_MAX_ETH_ALEN 6  /*!< @brief MAC Header Size */
 #define DP_MAX_PMAC_LEN     8  /*!< @brief Maximum PMAC Header Size */
 
+#define DP_TXIN_RING_SIZE_DEF  4000 /*!< Default TXIN Ring size, upper driver
+				     *   can tune down via dp_register_dev_ext
+				     */
+#define DP_RXOUT_RING_SIZE_DEF 4000 /*!< Default RXOUT Ring size, upper driver
+				     *   can tune down via dp_register_dev_ext
+				     */
+#define DP_RXOUT_PKT_SIZE_DEF 2048 /*!< Default size of RXOUT normal pkt */
+#define DP_RXOUT_PKt_SIZE_DEF_JUMBO 10240 /*!< Default size of RXOUT jumbo pkt*/
+
 /*! @addtogroup Datapath_Driver_Structures */
 /*! @brief  PPA Sub-interface Data structure
  *@param port_id  Datapath Port Id corresponds to PMAC Port Id
@@ -113,7 +127,7 @@ enum DP_F_FLAG {
 	DP_F_SUBIF_LOGICAL = BIT(8), /*!< For logical device, like VLAN device
 				      *It is used by dp_register_subif
 				      */
-	DP_F_ACA =          BIT(9), /*!< For peripheral device with ACA*/
+	DP_F_5G       = BIT(9), /*!< For 5G modem support */
 	DP_F_ALLOC_EXPLICIT_SUBIFID = BIT(10), /*!< For logical device which
 						* need explicit subif/VAP
 						* request.
@@ -128,12 +142,11 @@ enum DP_F_FLAG {
 	DP_F_GPON     = BIT(12), /*!< For GPON device */
 	DP_F_EPON     = BIT(13), /*!< For EPON device */
 	DP_F_GINT     = BIT(14), /*!< For GINT device */
-	DP_F_NO_SWDEV = BIT(15), /*!< For those device which don't want
-				  *auto switchdev framework support,
-				  *like no need for auto-bridging via ip/brctl
-				  */
-	DP_F_SHARE_RES = BIT(16), /*!< Wave600 multiple radio share same ACA */
+	DP_F_DOCSIS   = BIT(15), /*!< For DOCSIS device support */
 
+	DP_F_SHARE_RES = BIT(22), /*!< Wave600 multiple radio share same ACA */
+	DP_F_ACA       = BIT(23), /*!< peripheral PCI device via ACA*/
+	DP_F_NON_ACA_PORT = BIT(24), /*!< ACA device but without ACA PORT */
 	/*Note Below Flags are ued by CBM/CQE driver only */
 	DP_F_MPE_ACCEL =   BIT(25), /*!< For MPE path config, used by CBM only*/
 	DP_F_CHECKSUM =    BIT(26), /*!< For HW chksum offload path config.
@@ -167,14 +180,15 @@ enum DP_F_FLAG {
 	DP_F_ENUM_OR_STRING(DP_F_LOOPBACK,      "Tunne_loop"),\
 	DP_F_ENUM_OR_STRING(DP_F_DIRECTLINK,    "DirectLink"),\
 	DP_F_ENUM_OR_STRING(DP_F_SUBIF_LOGICAL, "LogicalDev"), \
-	DP_F_ENUM_OR_STRING(DP_F_ACA,                 "ACA"),\
+	DP_F_ENUM_OR_STRING(DP_F_5G,            "5G"), \
 	DP_F_ENUM_OR_STRING(DP_F_ALLOC_EXPLICIT_SUBIFID, "Explicit_subif"), \
 	DP_F_ENUM_OR_STRING(DP_F_FAST_WLAN_EXT,       "EXT_WLAN"),\
 	DP_F_ENUM_OR_STRING(DP_F_GPON,                "GPON"),\
 	DP_F_ENUM_OR_STRING(DP_F_EPON,                "EPON"),\
 	DP_F_ENUM_OR_STRING(DP_F_GINT,                "GINT"),\
-	DP_F_ENUM_OR_STRING(DP_F_NO_SWDEV,            "NO_SWITCHDEV"),\
-	DP_F_ENUM_OR_STRING(DP_F_SHARE_RES,            "SHARE_ACA"),\
+	DP_F_ENUM_OR_STRING(DP_F_DOCSIS,              "DOCSIS"),\
+	DP_F_ENUM_OR_STRING(DP_F_SHARE_RES,           "SHARE_ACA"),\
+	DP_F_ENUM_OR_STRING(DP_F_ACA,                 "ACA"),\
 	DP_F_ENUM_OR_STRING(DP_F_MPE_ACCEL,     "MPE_FW"), \
 	DP_F_ENUM_OR_STRING(DP_F_CHECKSUM,      "HW Chksum"),\
 	DP_F_ENUM_OR_STRING(DP_F_DIRECTPATH_RX, "Directpath_RX"),\
@@ -196,8 +210,8 @@ enum DP_F_FLAG {
 /*! @brief pmapper mode */
 enum DP_PMAP_MODE {
 	DP_PMAP_PCP = 1,  /*!< PCP Mapper:with omci unmark frame option 1
-			    *    ie, derive pcp fields from default
-			    */
+			   *    ie, derive pcp fields from default
+			   */
 	DP_PMAP_DSCP,     /*!< PCP Mapper with omci unmark frame option 0,
 			   *    ie, derive pcp fields from dscp bits
 			   */
@@ -256,11 +270,14 @@ typedef struct dp_subif {
 			 *   the caller provided to DP during
 			 *   dp_alloc_port
 			 */
-	int subif_flag[DP_MAX_CTP_PER_DEV]; /*!< the flag is used during dp_register_subif_ext
+	int subif_flag[DP_MAX_CTP_PER_DEV]; /*!< the flag is used during
+					     *   dp_register_subif_ext
 					     *   output for dp_get_netif_subifid
-					     *   no use for dp_register_subif_ext
-					     *   This is requested by PPA/DCDP to get original flag
-					     *   the caller provided to DP during
+					     *   no use for
+					     *   dp_register_subif_ext.
+					     *   This is requested by PPA/DCDP
+					     *   to get original flag the caller
+					     *   provided to DP during
 					     *   dp_register_subif_ext
 					     */
 	u32 flag_bp : 1; /*!< output: flag to indicate whether this device is
@@ -293,6 +310,27 @@ typedef struct dp_drv_mib {
 	u64 tx_bytes; /*!< tx bytes */
 } dp_drv_mib_t;
 
+/*! @brief struct for dp_buffer */
+struct dp_buffer {
+	void *phy_addr; /*!< physical buffer address to free */
+	int policy; /*!< buffer's policy associated */
+	int pool; /*!< buffer's pood associated */
+};
+
+/*! @brief struct for dp_buffer */
+struct dp_dma_ch {
+	u32 ch; /*!< DMA CH ID */
+#define DP_DMA_IRQ_ENABLE  BIT(0)  /*!< enable DMA IRQ */
+#define DP_DMA_IRQ_DISABLE BIT(1)  /*!< dsiable DMA IRQ */
+	int flag; /*!< enable/disable flag */
+};
+
+/*! struct dp_aca_stop: dp stop ACA configuration */
+struct dp_aca_stop {
+	int inst; /*!< [in] DP instance ID */
+};
+
+
 typedef int32_t(*dp_rx_fn_t)(struct net_device *rxif, struct net_device *txif,
 	struct sk_buff *skb, int32_t len);/*!< @brief   Device Receive
 					   *   Function callback for packets
@@ -352,6 +390,14 @@ typedef struct dp_cb {
 	dp_get_mib_fn_t get_mib_fn; /*!< reset registered device's
 				     *network mib counters
 				     */
+	irqreturn_t (*dma_rx_irq)(int irq, void *dev_instance); /*!< DMA RX IRQ
+								 *   handler.
+								 *   For 5G only
+								 *   now.
+								 */
+	int (*aca_fw_stop)(struct dp_aca_stop *cfg, int flags); /*!< callback to
+								 *   stop ACA FW
+								 */
 #ifdef CONFIG_LTQ_DATAPATH_CPUFREQ
 	dp_coc_confirm_stat dp_coc_confirm_stat_fn; /*!< once COC confirm the
 						     *state changed, Datatpath
@@ -610,6 +656,28 @@ struct dp_subif_data {
 	struct net_device *ctp_dev; /*Optional CTP device if there is one bridge
 				     *port device
 				     */
+	dp_rx_fn_t rx_fn; /*!< [in] for subif level rx_fn callback.
+			   *   Mainly for docsis/voice special handling.
+			   *   For wave/VRX618/518, just set to NULL
+			   */
+	int txin_ring_size;  /*!< [in/out] ACA TXIN Ring size.
+			      *   if input value is not zero, DP try to tune
+			      *   down the pre-allocated TXIN ring buffer size.
+			      *   Only allowed to tune down.
+			      */
+	void *txin_ring_phy_addr; /*!< [out] ACA TXIN Ring Buffer physical
+				   *   address
+				   */
+	void *credit_add_phy_addr; /*!< [out] PPv4 credit add physical address
+				    *   which is valid only if flag
+				    *   DP_F_NON_ACA_PORT is set during
+				    *   dp_alloc_port_ext
+				    */
+	void *credit_left_phy_addr; /*!< [out] PPv4 credit left physical address
+				     *   which is valid only if flag
+				     *   DP_F_NON_ACA_PORT is set during
+				     *   dp_alloc_port_ext
+				     */
 };
 
 /*! @brief enum DP_F_DATA_RESV_CQM_PORT */
@@ -642,11 +710,127 @@ struct dp_port_data {
 	int deq_port_base; /*!< output: the CQM dequeue port base. Mainly for
 			    *          PON
 			    */
+	int enq_num;  /*!< [out] the number of enqueue port allcoated */
+	int deq_num;  /*!< [out] the number of dequeue port allocated */
 };
 
 /*! @brief typedef struct dp_dev_data */
 struct dp_dev_data {
-	int resv; /*!< just for reserve*/
+#define DP_RXOUT_RING_NUM 2  /*!< maximum number of ACA TXOUT ring support
+			      *   For GRX500/Falcon_mx, only support 1 ring
+			      *   For LGM, maximum up to 2 rings
+			      */
+	int rxout_ring_size[DP_RXOUT_RING_NUM]; /*!< [in/out]
+						 *   rxout ring buf size
+						 *   If 0, then auto set by DP
+						 *   otherwise try to set as
+						 *   requested. Only allowed to
+						 *   tune down.
+						 *   GRX350/Falcon_MX: 1 ring
+						 *   LGM: up to 2 rings
+						 */
+	void *rxout_phy_addr[DP_RXOUT_RING_NUM]; /*!< [out] rxout ring buf
+						  *   physical address
+						  *   GRX350/Falcon_MX: 1 ring
+						  *   LGM: up to 2 rings
+						  *   If NULL, it means no
+						  *   valid
+						  */
+	int rxout_pkt_num[DP_RXOUT_RING_NUM]; /*!< [in/out] the number of packet
+					       *   if input is zero, set by DP
+					       *   with DP_RXOUT_RING_SIZE_DEF
+					       */
+	int rxout_pkt_size[DP_RXOUT_RING_NUM]; /*!< [in/out] the size of each
+						*   packet buffer.
+						*   if input is zero, auto set
+						*   by DP
+						*/
+	void *rxout_pkt_phy_addr[DP_RXOUT_RING_NUM]; /*!< [out] packet buffer
+						      *   list's physical
+						      *   address which will be
+						      *   usedin rxout ring to
+						      *   store the packet
+						      *   content
+						      */
+	int rxin_ring_size[DP_RXOUT_RING_NUM]; /*!< [in/out]
+						*   rxin ring buf size
+						*   If 0, then auto set by DP
+						*   otherwise try to set as
+						*   requested. Only allowed to
+						*   tune down.
+						*   GRX350/Falcon_MX: 1 ring
+						*   LGM: up to 2 rings
+						*/
+	void *rxin_phy_addr[DP_RXOUT_RING_NUM]; /*!< [out] rxin ring buf
+						 *  physical address
+						 *  GRX350/Falcon_MX: 1 ring
+						 *  LGM: up to 2 rings
+						 *  If NULL, it means no
+						 *  valid
+						 */
+	void *umt_msg_phy_addr; /*!< [in] umt message physical address */
+	void *umt_msg_virt_addr; /*!< [in] umt message virtual address */
+	int  umt_msg_timer; /*!< [in/out] ACA UMT MSG Interval in us */
+#define DP_UMT_MSG_ENDIAN_LITTLE 0 /*!< umt msg endian mode when writing to
+				    *   peripheral side
+				    */
+#define DP_UMT_MSG_ENDIAN_BIG    1 /*!< umt msg endian when writing to
+				    *   peripheral side
+				    */
+	int umt_msg_endian; /*!< [in] UMT message endian */
+
+#define DP_UMT_MODE_AUTO    0 /*!< UMT setting auto set by DP */
+#define DP_UMT_MODE_HW_SELF 1 /*!< HW UMT self couting mode */
+#define DP_UMT_MODE_HW_USER 2 /*!< HW UMT user Mode */
+#define DP_UMT_MODE_SW      3 /*!< SW UMT */
+	int umt_mode; /*!< [in/out] UMT  mode: HW self couting, HW User, SW
+		       *   if input value == DP_UMT_MODE_AUTO, set by DP
+		       *   otherwise set as specified by caller if possible
+		       */
+#define DP_UMT_MSG_MODE_AUTO  0  /*!< UMT message mode auto set by DP */
+#define DP_UMT_MSG_MODE_ACCU  1  /*!< Accumulated msg mode */
+#define DP_UMT_MSG_MODE_INCRE 2  /*!< Incremental msg mode */
+	int umt_rx_msg_mode; /*!< [in/out] UMT RX MSG mode:
+			      *   if umt_rx_msg_mode == DP_UMT_MSG_MODE_AUTO,
+			      *      auto set by DP
+			      *   else set as specified by caller if possible
+			      */
+	int umt_tx_msg_mode; /*!< [in/out] UMT TX MSG mode:
+			      *   if umt_tx_msg_mode == DP_UMT_MSG_MODE_AUTO,
+			      *      auto set by DP
+			      *   else set as specified by caller if possible
+			      */
+
+	int txin_ring_size;  /*!< [in/out] ACA TXIN Ring Buffer size
+			      *   address (for legacy ACA back-compatible
+			      *   only, like wave500).
+			      *   For legacy ACA with CQM port: maximum 32
+			      *   For non ACA port based: like 5G,
+			      *         just pass zero here. Later can tune with
+			      *         dp_register_subif_ext
+			      *   For DP, here we just return first
+			      *   TXIN ring buffer size
+			      */
+	void *txin_ring_phy_addr; /*!< [out] ACA TXIN Ring Buffer physical
+				   *   address (for legacy ACA back-compatible
+				   *   only for wave500 case).
+				   *   For DP, here just return first
+				   *  TXIN ring buffer address
+				   */
+	int txout_ring_size;/*!< [out] ACA TXOUT Free Ring Buffer size */
+	void *txout_ring_base_phy_addr; /*!< [out] ACA TXOUT(Free) base register
+					 *   physical address
+					 */
+	int txout_policy_base; /*!< [out] For falcon_mx: For legacy ACA to free
+				*   BM buffer
+				*         for LGM, it is base policy.
+				*   Note: For LGM, each ACA device needs to
+				*   support 4 policy to let HW auto free/return
+				*   the buffer since its information may lost
+				*/
+	int txout_poolid; /*!< [out] For legacy ACA to free BM buffer in
+			   *   in falcon_mx
+			   */
 };
 
 /*! @addtogroup Datapath_Driver_API */
@@ -939,6 +1123,22 @@ int dp_get_gsw_parser(u8 *cpu, u8 *mpe1, u8 *mpe2, u8 *mpe3);
  */
 int dp_pmac_set(int inst, u32 port, dp_pmac_cfg_t *pmac_cfg);
 
+/*! struct dp_umt_cap_mode: dp UMT capability */
+struct dp_umt_cap_mode {
+	u32 enable:1;  /*!< UMT enable flag: 0-disable 1-eanbled */
+	u32 rx_accumulate:1; /*!< rx accumulated supported flag: 1 supported */
+	u32 rx_incremental:1; /*!< rx incremental supported flag: 1 supported */
+	u32 tx_accumulate:1; /*!< tx accumulated supported flag: 1 supported */
+	u32 tx_incremental:1; /*!< tx incremental supported flag: 1 supported */
+};
+
+/*! struct dp_umt_cap: dp UMT capability */
+struct dp_umt_cap {
+	struct dp_umt_cap_mode umt_hw_auto; /*!< HW UMT self mode */
+	struct dp_umt_cap_mode umt_hw_user; /*!< HW UMT: user mode */
+	struct dp_umt_cap_mode umt_sw; /*!< SW UMT mode */
+};
+
 #define DP_MAX_NAME  20 /*!< max name length in character */
 /*! struct dp_cap: dp capability per instance */
 struct dp_cap {
@@ -969,6 +1169,7 @@ struct dp_cap {
 	int max_num_subif; /*!< max number of subif supported. Maybe no meaning?
 			    */
 	int max_num_bridge_port; /*!< max number of bridge port */
+	struct dp_umt_cap umt; /*!< UMT cap */
 };
 
 /*!
@@ -1038,5 +1239,26 @@ int dp_set_pmapper(struct net_device *dev, struct dp_pmapper *mapper, u32 flag);
  */
 int dp_get_pmapper(struct net_device *dev, struct dp_pmapper *mapper, u32 flag);
 
+/*!
+ *@brief Datapath Manager buffer free API
+ *@param[in] inst: DP instance ID
+ *@param[in] buffer: buffer information which needed for buffer free
+ *@param[in] flag: reserve for future
+ *@return Returns DP_SUCCESS on succeed and DP_FAILURE on failure
+ *@Note: This API is mainly used for ACA 4 Ring case to free RXIN buffers
+ *       Maybe DP can do it internally and no need to export it.
+ *       Later it will be finalized for LGM case
+ */
+int dp_free_buffer(int inst, struct dp_buffer *buffer, u32 flag);
+
+/*!
+ *@brief Datapath Manager DMA RX IRQ enable/disable API
+ *@param[in] inst: DP instance ID
+ *@param[in] ch: DMA RX Channel information
+ *@param[in] flag: reserve for future
+ *@return Returns DP_SUCCESS on succeed and DP_FAILURE on failure
+ */
+int dp_dma_chan_irq_rx_enable(int inst, struct dp_dma_ch *ch, int flag);
+
 #endif /*DATAPATH_API_H */
 
