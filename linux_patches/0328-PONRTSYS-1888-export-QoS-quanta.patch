From e281318c69e866814934a6000a1a351126f1bbac Mon Sep 17 00:00:00 2001
From: Oren Bakshe <oren.bakshe@intel.com>
Date: Sun, 28 Oct 2018 14:21:02 +0200
Subject: [PATCH] PONRTSYS-1888 : export QoS quanta

---
 .../net/ethernet/lantiq/ppv4/qos/pp_qos_debugfs.c  | 369 +++++++++++----------
 drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_fw.c   |  65 ++--
 drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_fw.h   |  10 +-
 drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_main.c |  17 +
 .../net/ethernet/lantiq/ppv4/qos/pp_qos_utils.c    |   9 +-
 .../net/ethernet/lantiq/ppv4/qos/pp_qos_utils.h    |   8 +
 include/net/pp_qos_drv.h                           |  37 ++-
 7 files changed, 288 insertions(+), 227 deletions(-)

diff --git a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_debugfs.c b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_debugfs.c
index eefe96af29d7..40fdeba62e71 100644
--- a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_debugfs.c
+++ b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_debugfs.c
@@ -29,6 +29,8 @@
 #include <linux/device.h>
 #include <linux/platform_device.h>
 #include <linux/debugfs.h>
+#include <linux/slab.h>
+#include <linux/uaccess.h>
 #include "pp_qos_common.h"
 #include "pp_qos_utils.h"
 #include "pp_qos_fw.h"
@@ -40,6 +42,133 @@ static struct {
 } dbg_data = {NULL, };
 
 #define PP_QOS_DEBUGFS_DIR "ppv4_qos"
+#define PP_QOS_DBG_MAX_BUF	(1024)
+#define PP_QOS_DBG_MAX_INPUT	(64)
+
+static ssize_t add_shared_bwl_group(struct file *file, const char __user *buf,
+				size_t count, loff_t *pos)
+{
+	char *lbuf;
+	struct pp_qos_dev *qdev;
+	u32 limit;
+	struct platform_device *pdev;
+	struct pp_qos_drv_data *pdata;
+	u32 id = 0;
+
+	pdev = (struct platform_device *)(file->private_data);
+	pdata = platform_get_drvdata(pdev);
+	qdev = pdata->qdev;
+
+	if (count >= PP_QOS_DBG_MAX_INPUT)
+		return count;
+
+	lbuf = kzalloc(count, GFP_KERNEL);
+
+	if (copy_from_user(lbuf, buf, count))
+		goto add_shared_bwl_group_done;
+
+	lbuf[count-1] = '\0';
+
+	if (sscanf(lbuf, "%u", &limit) != 1) {
+		pr_err("sscanf err\n");
+		goto add_shared_bwl_group_done;
+	}
+
+	pp_qos_shared_limit_group_add(qdev, limit, &id);
+
+	dev_info(&pdev->dev, "id %u, limit %u\n", id, limit);
+
+	add_shared_bwl_group_done:
+	kfree(lbuf);
+	return count;
+}
+
+static ssize_t add_shared_bwl_group_help(struct file *file,
+			char __user *user_buf, size_t count, loff_t *ppos)
+{
+	char *buff;
+	u32  len = 0;
+	ssize_t ret = 0;
+
+	buff = kmalloc(PP_QOS_DBG_MAX_BUF, GFP_KERNEL);
+	if (!buff)
+		return -ENOMEM;
+
+	len = scnprintf(buff, PP_QOS_DBG_MAX_BUF, "<limit>\n");
+	ret = simple_read_from_buffer(user_buf, count, ppos, buff, len);
+	kfree(buff);
+
+	return ret;
+}
+
+static ssize_t remove_shared_bwl_group(struct file *file,
+			const char __user *buf, size_t count, loff_t *pos)
+{
+	char *lbuf;
+	struct pp_qos_dev *qdev;
+	u32 id = 0;
+	struct platform_device *pdev;
+	struct pp_qos_drv_data *pdata;
+
+	pdev = (struct platform_device *)(file->private_data);
+	pdata = platform_get_drvdata(pdev);
+	qdev = pdata->qdev;
+
+	if (count >= PP_QOS_DBG_MAX_INPUT)
+		return count;
+
+	lbuf = kzalloc(count, GFP_KERNEL);
+
+	if (copy_from_user(lbuf, buf, count))
+		goto remove_shared_bwl_group_done;
+
+	lbuf[count-1] = '\0';
+
+	if (sscanf(lbuf, "%u", &id) != 1) {
+		pr_err("sscanf err\n");
+		goto remove_shared_bwl_group_done;
+	}
+
+	pp_qos_shared_limit_group_remove(qdev, id);
+
+	dev_info(&pdev->dev, "id %u\n", id);
+
+remove_shared_bwl_group_done:
+	kfree(lbuf);
+	return count;
+}
+
+static ssize_t remove_shared_bwl_group_help(struct file *file,
+			char __user *user_buf, size_t count, loff_t *ppos)
+{
+	char *buff;
+	u32 len = 0;
+	ssize_t ret = 0;
+
+	buff = kmalloc(PP_QOS_DBG_MAX_BUF, GFP_KERNEL);
+	if (!buff)
+		return -ENOMEM;
+
+	len = scnprintf(buff, PP_QOS_DBG_MAX_BUF, "<bwl group id to remove>\n");
+	ret = simple_read_from_buffer(user_buf, count, ppos, buff, len);
+	kfree(buff);
+
+	return ret;
+}
+
+static const struct file_operations debug_add_shared_bwl_group_fops = {
+	.open    = simple_open,
+	.read    = add_shared_bwl_group_help,
+	.write   = add_shared_bwl_group,
+	.llseek  = default_llseek,
+};
+
+static const struct file_operations debug_remove_shared_bwl_group_fops = {
+	.open    = simple_open,
+	.read    = remove_shared_bwl_group_help,
+	.write   = remove_shared_bwl_group,
+	.llseek  = default_llseek,
+};
 
 static int pp_qos_dbg_node_show(struct seq_file *s, void *unused)
 {
@@ -553,98 +682,91 @@ static void print_fw_log(struct platform_device *pdev)
 	addr[1] = num;
 }
 
-static int ctrl_set(void *data, u64 val)
+static int phy2id_get(void *data, u64 *val)
 {
+	uint16_t id;
 	struct platform_device *pdev;
 	struct pp_qos_drv_data *pdata;
+	struct pp_qos_dev *qdev;
 
 	pdev = data;
-	dev_info(&pdev->dev, "ctrl got %llu", val);
 	pdata = platform_get_drvdata(pdev);
-
-	switch (val) {
-#ifdef PP_QOS_TEST
-	case 0:
-		QOS_LOG_INFO("running basic tests\n");
-		basic_tests();
-		break;
-	case 1:
-		QOS_LOG_INFO("running advance tests\n");
-		advance_tests();
-		break;
-	case 2:
-		QOS_LOG_INFO("running all tests\n");
-		tests();
-		break;
-	case 7:
-		QOS_LOG_INFO("running falcon test\n");
-		falcon_test();
-		break;
-	case 8:
-		QOS_LOG_INFO("running simple test\n");
-		stat_test();
-		break;
-	case 9:
-		QOS_LOG_INFO("running load fw test\n");
-		load_fw_test();
-		break;
-	case 10:
-		QOS_LOG_INFO("running stat test\n");
-		stat_test();
-		break;
-	case 11:
-		QOS_LOG_INFO("running info test\n");
-		info_test();
-		break;
-
-#endif
-	case 14:
-		QOS_LOG_INFO("printing logger\n");
-		print_fw_log(pdev);
-		break;
-
-
-	default:
-		QOS_LOG_INFO("unknown test\n");
-		break;
+	qdev = pdata->qdev;
+	if (!qdev->initialized) {
+		dev_err(&pdev->dev, "Device is not initialized\n");
+		id =  QOS_INVALID_ID;
+		goto out;
 	}
 
+	id = get_id_from_phy(qdev->mapping, pdata->dbg.node);
+out:
+	*val = id;
 	return 0;
 }
 
-static int phy2id_get(void *data, u64 *val)
+static int fw_logger_get(void *data, u64 *val)
 {
-	uint16_t id;
-	struct platform_device *pdev;
+	struct platform_device *pdev = data;
+
+	print_fw_log(pdev);
+
+	return 0;
+}
+
+static int check_sync_get(void *data, u64 *val)
+{
+	struct platform_device *pdev = data;
 	struct pp_qos_drv_data *pdata;
 	struct pp_qos_dev *qdev;
 
+	QOS_LOG_INFO("Checking sync with FW\n");
+
 	pdev = data;
 	pdata = platform_get_drvdata(pdev);
 	qdev = pdata->qdev;
 	if (!qdev->initialized) {
 		dev_err(&pdev->dev, "Device is not initialized\n");
-		id =  QOS_INVALID_ID;
 		goto out;
 	}
 
-	id = get_id_from_phy(qdev->mapping, pdata->dbg.node);
+	check_sync_with_fw(pdata->qdev);
 out:
-	*val = id;
 	return 0;
 }
 
-DEFINE_SIMPLE_ATTRIBUTE(dbg_ctrl_fops, NULL, ctrl_set, "%llu\n");
+DEFINE_SIMPLE_ATTRIBUTE(dbg_fw_logger_fops, fw_logger_get, NULL, "%llu\n");
+DEFINE_SIMPLE_ATTRIBUTE(dbg_check_sync_fops, check_sync_get, NULL, "%llu\n");
 DEFINE_SIMPLE_ATTRIBUTE(dbg_phy2id_fops, phy2id_get, NULL, "%llu\n");
 
 #define MAX_DIR_NAME 11
+
+struct debugfs_file {
+	const char			*name;
+	const struct file_operations	*fops;
+	mode_t				mode;
+};
+
+static struct debugfs_file qos_debugfs_files[] = {
+	{"nodeinfo", &debug_node_fops, 0400},
+	{"stat", &debug_stat_fops, 0400},
+	{"phy2id", &dbg_phy2id_fops, 0400},
+	{"fw_logger", &dbg_fw_logger_fops, 0400},
+	{"check_fw_sync", &dbg_check_sync_fops, 0400},
+	{"geninfo", &debug_gen_fops, 0400},
+	{"qstat", &debug_qstat_fops, 0400},
+	{"pstat", &debug_pstat_fops, 0400},
+	{"cmd", &debug_cmd_fops, 0200},
+	{"add_shared_bwl_group", &debug_add_shared_bwl_group_fops, 0400},
+	{"remove_shared_bwl_group", &debug_remove_shared_bwl_group_fops, 0400},
+};
+
 int qos_dbg_dev_init(struct platform_device *pdev)
 {
-
 	struct pp_qos_drv_data *pdata;
 	char   dirname[MAX_DIR_NAME];
 	struct dentry *dent;
 	int err;
+	u32 idx;
 
 	if (!pdev) {
 		dev_err(&pdev->dev, "Invalid platform device\n");
@@ -662,36 +784,17 @@ int qos_dbg_dev_init(struct platform_device *pdev)
 	}
 
 	pdata->dbg.dir = dent;
-	dent = debugfs_create_file(
-			"nodeinfo",
-			0400,
-			pdata->dbg.dir,
-			pdev,
-			&debug_node_fops
-			);
 
-	if (IS_ERR_OR_NULL(dent)) {
-		err = (int) PTR_ERR(dent);
-		dev_err(&pdev->dev,
-			"debugfs_create_file failed creating nodeinfo with %d\n",
-			err);
-		goto fail;
-	}
-
-	dent = debugfs_create_file(
-			"stat",
-			0400,
-			pdata->dbg.dir,
-			pdev,
-			&debug_stat_fops
-			);
-
-	if (IS_ERR_OR_NULL(dent)) {
-		err = (int) PTR_ERR(dent);
-		dev_err(&pdev->dev,
-			"debugfs_create_file failed creating stat with %d\n",
-			err);
-		goto fail;
+	for (idx = 0 ; idx < ARRAY_SIZE(qos_debugfs_files) ; idx++) {
+		dent = debugfs_create_file(qos_debugfs_files[idx].name,
+					   qos_debugfs_files[idx].mode,
+					   pdata->dbg.dir,
+					   pdev,
+					   qos_debugfs_files[idx].fops);
+		if (unlikely(IS_ERR_OR_NULL(dent))) {
+			err = (int) PTR_ERR(dent);
+			goto fail;
+		}
 	}
 
 	dent = debugfs_create_u16("node",
@@ -706,107 +809,11 @@ int qos_dbg_dev_init(struct platform_device *pdev)
 		goto fail;
 	}
 
-	dent = debugfs_create_file(
-			"ctrl",
-			0200,
-			pdata->dbg.dir,
-			pdev,
-			&dbg_ctrl_fops
-			);
-	if (IS_ERR_OR_NULL(dent)) {
-		err = (int) PTR_ERR(dent);
-		dev_err(&pdev->dev,
-			"debugfs_create_file failed creating ctrl with %d\n",
-			err);
-		goto fail;
-	}
-
-	dent = debugfs_create_file(
-			"phy2id",
-			0400,
-			pdata->dbg.dir,
-			pdev,
-			&dbg_phy2id_fops
-			);
-	if (IS_ERR_OR_NULL(dent)) {
-		err = (int) PTR_ERR(dent);
-		dev_err(&pdev->dev,
-			"debugfs_create_file failed creating phy2id with %d\n",
-			err);
-		goto fail;
-	}
-
-	dent = debugfs_create_file(
-			"geninfo",
-			0400,
-			pdata->dbg.dir,
-			pdev,
-			&debug_gen_fops
-			);
-
-	if (IS_ERR_OR_NULL(dent)) {
-		err = (int) PTR_ERR(dent);
-		dev_err(&pdev->dev,
-			"debugfs_create_file failed creating geninfo with %d\n",
-			err);
-		goto fail;
-	}
-
-	dent = debugfs_create_file(
-			"qstat",
-			0400,
-			pdata->dbg.dir,
-			pdev,
-			&debug_qstat_fops
-			);
-
-	if (IS_ERR_OR_NULL(dent)) {
-		err = (int) PTR_ERR(dent);
-		dev_err(&pdev->dev,
-			"debugfs_create_file failed creating qstat with %d\n",
-			err);
-		goto fail;
-	}
-
-	dent = debugfs_create_file(
-			"pstat",
-			0400,
-			pdata->dbg.dir,
-			pdev,
-			&debug_pstat_fops
-			);
-
-	if (IS_ERR_OR_NULL(dent)) {
-		err = (int) PTR_ERR(dent);
-		dev_err(&pdev->dev,
-			"debugfs_create_file failed creating pstat with %d\n",
-			err);
-		goto fail;
-	}
-
-
-	dent = debugfs_create_file(
-			"cmd",
-			0200,
-			pdata->dbg.dir,
-			pdev,
-			&debug_cmd_fops
-			);
-
-	if (IS_ERR_OR_NULL(dent)) {
-		err = (int) PTR_ERR(dent);
-		dev_err(&pdev->dev,
-			"debugfs_create_file failed creating cmds with %d\n",
-			err);
-		goto fail;
-	}
-
 	return 0;
 
 fail:
 	debugfs_remove_recursive(pdata->dbg.dir);
 	return err;
-
 }
 
 void qos_dbg_dev_clean(struct platform_device *pdev)
diff --git a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_fw.c b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_fw.c
index 0fd36de3d39b..aabe7dab58b5 100644
--- a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_fw.c
+++ b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_fw.c
@@ -67,7 +67,7 @@
 	OP(CMD_TYPE_REMOVE_SHARED_GROUP)	\
 	OP(CMD_TYPE_SET_SHARED_GROUP)		\
 	OP(CMD_TYPE_FLUSH_QUEUE)		\
-	OP(CMD_TYPE_GET_NUM_USED_NODES)		\
+	OP(CMD_TYPE_GET_SYSTEM_INFO)		\
 	OP(CMD_TYPE_INTERNAL)
 
 enum cmd_type {
@@ -405,10 +405,13 @@ struct cmd_remove_shared_group {
 	unsigned int id;
 };
 
-struct cmd_get_num_used_nodes {
+struct cmd_get_system_info {
 	struct cmd base;
 	unsigned int addr;
-	uint32_t *num;
+	uint32_t *num_used;
+	uint32_t *infinite_loop_error_occurred;
+	uint32_t *bwl_update_error_occurred;
+	uint32_t *quanta;
 };
 
 union driver_cmd {
@@ -433,7 +436,7 @@ union driver_cmd {
 	struct cmd_push_desc	pushd;
 	struct cmd_get_node_info node_info;
 	struct cmd_flush_queue flush_queue;
-	struct cmd_get_num_used_nodes num_used;
+	struct cmd_get_system_info sys_info;
 	struct cmd_internal	internal;
 };
 
@@ -1064,26 +1067,29 @@ void create_get_node_info_cmd(
 	qdev->drvcmds.cmd_fw_id++;
 }
 
-void create_num_used_nodes_cmd(
-		struct pp_qos_dev *qdev,
-		unsigned int addr,
-		uint32_t *num)
+void create_get_sys_info_cmd(struct pp_qos_dev *qdev,
+			     unsigned int addr,
+			     struct qos_hw_info *info)
 {
-	struct cmd_get_num_used_nodes cmd;
+	struct cmd_get_system_info cmd;
 
 	if (PP_QOS_DEVICE_IS_ASSERT(qdev))
 		return;
 
 	memset(&cmd, 0, sizeof(cmd));
-	cmd_init(
-			qdev,
-			&(cmd.base),
-			CMD_TYPE_GET_NUM_USED_NODES,
-			sizeof(cmd),
-			CMD_FLAGS_POST_PROCESS);
+	cmd_init(qdev,
+		 &(cmd.base),
+		 CMD_TYPE_GET_SYSTEM_INFO,
+		 sizeof(cmd),
+		 CMD_FLAGS_POST_PROCESS);
 	cmd.addr =  addr;
-	cmd.num = num;
-	QOS_LOG_DEBUG("cmd %u:%u CMD_TYPE_GET_NUM_USED_NODES\n",
+	cmd.num_used = &(info->num_used);
+	cmd.infinite_loop_error_occurred =
+			&(info->infinite_loop_error_occurred);
+	cmd.bwl_update_error_occurred = &(info->bwl_update_error_occurred);
+	cmd.quanta = &(info->quanta);
+
+	QOS_LOG_DEBUG("cmd %u:%u CMD_TYPE_GET_SYSTEM_INFO\n",
 			qdev->drvcmds.cmd_id,
 			qdev->drvcmds.cmd_fw_id);
 	cmd_queue_put(qdev->drvcmds.cmdq, &cmd, sizeof(cmd));
@@ -1701,7 +1707,7 @@ static uint32_t *fw_write_get_port_stats(
 
 static uint32_t *fw_write_get_system_info(
 		uint32_t *buf,
-		const struct cmd_get_num_used_nodes *cmd,
+		const struct cmd_get_system_info *cmd,
 		uint32_t flags)
 {
 	*buf++ = qos_u32_to_uc(UC_QOS_COMMAND_GET_SYSTEM_STATS);
@@ -2424,9 +2430,15 @@ static void post_process(struct pp_qos_dev *qdev, union driver_cmd *dcmd)
 		pstat->total_yellow_bytes = fw_pstat->total_yellow_bytes;
 		break;
 
-	case CMD_TYPE_GET_NUM_USED_NODES:
+	case CMD_TYPE_GET_SYSTEM_INFO:
 		fw_sys_stat = (struct system_stats_s *)qdev->stat;
-		*(dcmd->num_used.num) = fw_sys_stat->tscd_num_of_used_nodes;
+		*(dcmd->sys_info.num_used) =
+				fw_sys_stat->tscd_num_of_used_nodes;
+		*(dcmd->sys_info.infinite_loop_error_occurred) =
+				fw_sys_stat->tscd_infinite_loop_error_occurred;
+		*(dcmd->sys_info.bwl_update_error_occurred) =
+				fw_sys_stat->tscd_bwl_update_error_occurred;
+		*(dcmd->sys_info.quanta) = fw_sys_stat->tscd_quanta;
 		break;
 
 	case CMD_TYPE_GET_NODE_INFO:
@@ -2554,6 +2566,7 @@ void enqueue_cmds(struct pp_qos_dev *qdev)
 	struct fw_set_common common = {0};
 	struct fw_set_parent parent = {0};
 	struct fw_set_port port = {0};
+	unsigned int id;
 
 	if (PP_QOS_DEVICE_IS_ASSERT(qdev))
 		return;
@@ -2749,9 +2762,9 @@ void enqueue_cmds(struct pp_qos_dev *qdev)
 					prev, &dcmd.port_stats, flags);
 			break;
 
-		case CMD_TYPE_GET_NUM_USED_NODES:
+		case CMD_TYPE_GET_SYSTEM_INFO:
 			cur = fw_write_get_system_info(
-					prev, &dcmd.num_used, flags);
+					prev, &dcmd.sys_info, flags);
 			break;
 
 		case CMD_TYPE_ADD_SHARED_GROUP:
@@ -2820,6 +2833,14 @@ void enqueue_cmds(struct pp_qos_dev *qdev)
 
 		common.suspend = 0;
 		for (i = 0; i < internals->suspend_port_index; ++i) {
+			/* In case port was suspended, and it was removed,
+			 * don't Resume it (Otherwise driver and fw will be
+			 * out of sync) */
+			id = get_id_from_phy(qdev->mapping,
+					     internals->suspend_ports[i]);
+			if (!QOS_ID_VALID(id))
+				continue;
+
 			prev = cur;
 			QOS_LOG_DEBUG("CMD_INTERNAL_RESUME_PORT port: %u\n",
 					internals->suspend_ports[i]);
diff --git a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_fw.h b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_fw.h
index bd1b97fd5e82..c75b01819011 100644
--- a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_fw.h
+++ b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_fw.h
@@ -103,9 +103,9 @@ int do_load_firmware(
 
 void add_suspend_port(struct pp_qos_dev *qdev, unsigned int port);
 void signal_uc(struct pp_qos_dev *qdev);
-void create_num_used_nodes_cmd(struct pp_qos_dev *qdev,
-		unsigned int addr,
-		uint32_t *num);
+void create_get_sys_info_cmd(struct pp_qos_dev *qdev,
+			     unsigned int addr,
+			     struct qos_hw_info *sys_info);
 #elif defined(PRINT_CREATE_CMD)
 #define create_move_cmd(qdev, dst, src, dst_port)\
 	QOS_LOG_DEBUG("MOVE: %u ==> %u\n", src, dst)
@@ -135,7 +135,7 @@ void create_num_used_nodes_cmd(struct pp_qos_dev *qdev,
 #define create_get_port_stats_cmd(qdev, phy, addr, pstat)
 #define create_get_node_info_cmd(qdev, phy, addr, info)
 #define create_push_desc_cmd(qdev, queue, size, color, addr)
-#define create_num_used_nodes_cmd(qdev, addr, num)
+#define create_get_sys_info_cmd(qdev, addr, sys_info)
 #define add_suspend_port(qdev, port)
 #define create_flush_queue_cmd(qdev, rlm)
 #else
@@ -161,7 +161,7 @@ void create_num_used_nodes_cmd(struct pp_qos_dev *qdev,
 #define create_get_node_info_cmd(qdev, phy, addr, info)
 #define create_push_desc_cmd(qdev, queue, size, color, addr)
 #define create_flush_queue_cmd(qdev, rlm)
-#define create_num_used_nodes_cmd(qdev, addr, num)
+#define create_get_sys_info_cmd(qdev, addr, sys_info)
 #define add_suspend_port(qdev, port)
 #endif
 #endif
diff --git a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_main.c b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_main.c
index 3bb691d32d69..26097d69c403 100644
--- a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_main.c
+++ b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_main.c
@@ -2164,3 +2164,20 @@ void qos_module_init(void)
 
 	QOS_LOG_INFO("qos_module_init completed\n");
 }
+
+int pp_qos_get_quanta(struct pp_qos_dev *qdev, unsigned int *quanta)
+{
+	struct qos_hw_info info = {0};
+
+	QOS_LOCK(qdev);
+	PP_QOS_ENTER_FUNC();
+
+	create_get_sys_info_cmd(qdev, qdev->hwconf.fw_stat, &info);
+	update_cmd_id(&qdev->drvcmds);
+	transmit_cmds(qdev);
+
+	*quanta = info.quanta;
+
+	QOS_UNLOCK(qdev);
+	return 0;
+}
diff --git a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_utils.c b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_utils.c
index 4b53f9bf9dce..2ec6d71d5e31 100644
--- a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_utils.c
+++ b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_utils.c
@@ -2635,7 +2635,7 @@ int check_sync_with_fw(struct pp_qos_dev *qdev)
 {
 	unsigned int i;
 	unsigned int used;
-	unsigned int res;
+	struct qos_hw_info hw_info = {0};
 	unsigned int id;
 	int rc;
 	const struct qos_node *node;
@@ -2643,7 +2643,6 @@ int check_sync_with_fw(struct pp_qos_dev *qdev)
 	struct pp_qos_node_info info;
 
 	rc = 0;
-	res = 0;
 	pool = pp_pool_init(NUM_OF_NODES, QOS_INVALID_ID);
 	if (pool == NULL) {
 		QOS_LOG_ERR("Can't create pool for firmware sync check\n");
@@ -2663,13 +2662,13 @@ int check_sync_with_fw(struct pp_qos_dev *qdev)
 		++node;
 	}
 
-	create_num_used_nodes_cmd(qdev, qdev->hwconf.fw_stat, &res);
+	create_get_sys_info_cmd(qdev, qdev->hwconf.fw_stat, &hw_info);
 	update_cmd_id(&qdev->drvcmds);
 	transmit_cmds(qdev);
-	QOS_ASSERT(res == used,
+	QOS_ASSERT(hw_info.num_used == used,
 		   "Driver's DB has %u used nodes, while firmware reports %u\n",
 		   used,
-		   res);
+		   hw_info.num_used);
 
 	id = pp_pool_get(pool);
 	while (QOS_ID_VALID(id)) {
diff --git a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_utils.h b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_utils.h
index 4dfb9fa05bc0..4c03fd76e11d 100644
--- a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_utils.h
+++ b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_utils.h
@@ -178,6 +178,13 @@ struct shared_bandwidth_group {
 	uint8_t		reserved;
 };
 
+struct qos_hw_info {
+	uint32_t	num_used;
+	uint32_t	infinite_loop_error_occurred;
+	uint32_t	bwl_update_error_occurred;
+	uint32_t	quanta;
+};
+
 struct driver_cmds {
 	struct cmd_queue	*cmdq;
 	struct cmd_queue	*pendq;
@@ -639,6 +646,7 @@ void update_children_position(
 			struct qos_node *node_src);
 int allocate_ddr_for_qm(struct pp_qos_dev *qdev);
 int allocate_ddr_for_qm_on_platform(struct pp_qos_dev *qdev);
+int check_sync_with_fw(struct pp_qos_dev *qdev);
 
 #ifdef PP_QOS_TEST
 void test_cmd_queue(void);
diff --git a/include/net/pp_qos_drv.h b/include/net/pp_qos_drv.h
index 72a25a25c521..6dce721fe251 100644
--- a/include/net/pp_qos_drv.h
+++ b/include/net/pp_qos_drv.h
@@ -140,7 +140,7 @@ struct pp_qos_parent_node_properties {
  * @parent:		parent's id
  * @priority:		strict priority, relevant only if parent uses wsp
  *                      arbitration
- * @bandwidth_share:	bandwidth precentage from parent
+ * @bandwidth_share:	bandwidth percentage from parent
  */
 struct pp_qos_child_node_properties {
 	unsigned int	parent;
@@ -179,7 +179,7 @@ struct pp_qos_port_stat {
  * @credit:		        amount of credit to add to the port.
  *                              when packet_credit is enabled this designates
  *                              packet credit, otherwise byte credit
- * @disable			disable port transmition
+ * @disable			disable port transmission
  */
 struct pp_qos_port_conf {
 	struct pp_qos_common_node_properties common_prop;
@@ -376,7 +376,7 @@ int pp_qos_port_stat_get(struct pp_qos_dev *qos_dev, unsigned int id,
 /**
  * @struct pp_qos_queue_stat - Statistics per queue
  * @reset:		       Should statistics be reset after reading
- * @queue_packets_occupancy:   Packetes currently in queue
+ * @queue_packets_occupancy:   Packets currently in queue
  * @queue_bytes_occupancy:     Bytes currently in queue
  * @total_packets_accepted:    Packets accepted by WRED
  * @total_packets_dropped:     Packets dropped by WRED due any reason
@@ -406,16 +406,16 @@ struct pp_qos_queue_stat {
  *                              min and max values are used
  * @wred_fixed_drop_prob_enable:use fixed drop probability for WRED instead of
  *                              slope
- * @queue_wred_min_avg_green:
- * @queue_wred_max_avg_green:
- * @queue_wred_slope_green:
- * @queue_wred_fixed_drop_prob_green:
- * @queue_wred_min_avg_yellow:
- * @queue_wred_max_avg_yellow:
- * @queue_wred_slope_yellow:
- * @queue_wred_fixed_drop_prob_yellow:
- * @queue_wred_min_guaranteed:
- * @queue_wred_max_allowed:
+ * @queue_wred_min_avg_green:	Start of the slope area (Below that no drops)
+ * @queue_wred_max_avg_green:	End of the slope area (Above that 100% drops)
+ * @queue_wred_slope_green:	0-90 degrees scale
+ * @queue_wred_fixed_drop_prob_green:	Fixed drop rate in between min & max
+ * @queue_wred_min_avg_yellow:	Start of the slope area (Below that no drops)
+ * @queue_wred_max_avg_yellow:	End of the slope area (Above that 100% drops)
+ * @queue_wred_slope_yellow:	0-90 degrees scale
+ * @queue_wred_fixed_drop_prob_yellow:	Fixed drop rate in between min & max
+ * @queue_wred_min_guaranteed:	Minimum descriptors guaranteed
+ * @queue_wred_max_allowed:	Maximum descriptors allowed in this queue
  */
 struct pp_qos_queue_conf {
 	struct pp_qos_common_node_properties common_prop;
@@ -903,6 +903,15 @@ int pp_qos_get_node_info(
 		unsigned int id,
 		struct pp_qos_node_info *info);
 
-
+/**
+ * pp_qos_get_quanta() - Gets QoS quanta (In MB). QoS credits calculations are done
+ *			 in Quanta scale. QoS will transmit a multiplication
+ *			 of a quanta in one iteration
+ * @qos_dev: handle to qos device instance obtained from pp_qos_dev_open
+ * @quanta: pointer which the quanta value will be written to
+ *
+ * Return: 0 on success
+ */
+int pp_qos_get_quanta(struct pp_qos_dev *qdev, unsigned int *quanta);
 
 #endif
