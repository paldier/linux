From 312d63a59c9a0acec3ca44505ff396a9a390e575 Mon Sep 17 00:00:00 2001
From: Oren Bakshe <oren.bakshe@intel.com>
Date: Mon, 3 Jun 2019 14:51:20 +0300
Subject: [PATCH] PONRTSYS-4407: Use QoS FW Ver. 1.3.21. Supports B Step +
 Align with LGM driver code

---
 .../net/ethernet/lantiq/ppv4/qos/pp_qos_debugfs.c  | 11 ++--
 drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_fw.c   | 75 +++++++++++++---------
 .../net/ethernet/lantiq/ppv4/qos/pp_qos_uc_defs.h  | 63 +++++++++---------
 3 files changed, 84 insertions(+), 65 deletions(-)

diff --git a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_debugfs.c b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_debugfs.c
index 63cfcc998284..9e11294a54b1 100644
--- a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_debugfs.c
+++ b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_debugfs.c
@@ -200,6 +200,7 @@ static ssize_t qos_dbg_props(struct file *fp,
 	char *pval;
 	u16 ind;
 	u16 num_changed = 0;
+	u16 len;
 
 	pdev = (struct platform_device *)(fp->private_data);
 	pdata = platform_get_drvdata(pdev);
@@ -249,8 +250,8 @@ static ssize_t qos_dbg_props(struct file *fp,
 		}
 
 		for (ind = 0; ind < num_props ; ind++) {
-			if (!strncmp(field, props[ind].field,
-				strlen(props[ind].field))) {
+			len = max(strlen(props[ind].field), strlen(field));
+			if (!strncmp(field, props[ind].field, len)) {
 				*(props[ind].dest) = res;
 				num_changed++;
 				break;
@@ -598,7 +599,7 @@ static u16 create_queue_props(struct dbg_prop *props, u16 size,
 	dbg_add_prop(props, &num, size, "wred_max_avg_green",
 		"End of the slope area",
 		&pconf->queue_wred_max_avg_green);
-	dbg_add_prop(props, &num, size, "wred_slope_green", "0-90 scale",
+	dbg_add_prop(props, &num, size, "wred_slope_green", "0-100 scale",
 		&pconf->queue_wred_slope_green);
 	dbg_add_prop(props, &num, size, "wred_fixed_drop_prob_green",
 		"fixed drop rate",
@@ -609,7 +610,7 @@ static u16 create_queue_props(struct dbg_prop *props, u16 size,
 	dbg_add_prop(props, &num, size, "wred_max_avg_yellow",
 		"End of the slope area",
 		&pconf->queue_wred_max_avg_yellow);
-	dbg_add_prop(props, &num, size, "wred_slope_yellow", "0-90 scale",
+	dbg_add_prop(props, &num, size, "wred_slope_yellow", "0-100 scale",
 		&pconf->queue_wred_slope_yellow);
 	dbg_add_prop(props, &num, size, "wred_fixed_drop_prob_yellow",
 		"fixed drop rate",
@@ -1062,7 +1063,7 @@ static int pp_qos_dbg_qstat_show(struct seq_file *s, void *unused)
 	seq_puts(s, "Queue\t\tQocc(p)\t\tAccept(p)\tDrop(p)\t\tRed dropped(p)\n");
 	dst = (uint32_t *)(qdev->fwcom.cmdbuf);
 	*dst++ = qos_u32_to_uc(
-			UC_QOS_COMMAND_GET_ACTIVE_QUEUES_STATS);
+			UC_QOS_CMD_GET_ACTIVE_QUEUES_STATS);
 	pos = dst;
 	*dst++ = qos_u32_to_uc(UC_CMD_FLAG_IMMEDIATE);
 	*dst++ = qos_u32_to_uc(3);
diff --git a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_fw.c b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_fw.c
index 78aa3f17ce27..b55b2752744c 100644
--- a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_fw.c
+++ b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_fw.c
@@ -30,6 +30,7 @@
 #include "pp_qos_uc_wrapper.h"
 #include "pp_qos_fw.h"
 #include "pp_qos_elf.h"
+#include "lantiq.h"
 #include <linux/dma-mapping.h>
 #include <linux/platform_device.h>
 #include <linux/slab.h>
@@ -293,7 +294,14 @@ int do_load_firmware(struct pp_qos_dev *qdev, const struct ppv4_qos_fw *fw,
 		}
 	} while (val != FW_OK_SIGN);
 
-	QOS_LOG_INFO("PPV4 QoS FW is running (%d polls) :)\n", poll);
+	val = *((uint32_t *)(qdev->fwcom.cmdbuf+4));
+
+	qdev->fwver.major = val & 0xF;
+	qdev->fwver.minor = (val & 0xFF00) >> 8;
+	qdev->fwver.build = (val & 0xFF0000) >> 16;
+	QOS_LOG_INFO("PPV4 QoS FW [ver %u.%u.%u] is running (%d polls) soc rev %d :)\n",
+		     qdev->fwver.major, qdev->fwver.minor,
+		     qdev->fwver.build, poll, ltq_get_soc_rev());
 
 	*((uint32_t *)(qdev->fwcom.cmdbuf)) = 0;
 	return 0;
@@ -1497,7 +1505,7 @@ static uint32_t *fw_write_init_logger_cmd(
 		const struct cmd_init_logger *cmd,
 		uint32_t flags)
 {
-	*buf++ = qos_u32_to_uc(UC_QOS_COMMAND_INIT_UC_LOGGER);
+	*buf++ = qos_u32_to_uc(UC_QOS_CMD_INIT_UC_LOGGER);
 	*buf++ = qos_u32_to_uc(flags);
 	*buf++ = qos_u32_to_uc(4);
 	*buf++ = qos_u32_to_uc((uintptr_t)cmd->addr & 0xFFFFFFFF);
@@ -1512,9 +1520,9 @@ static uint32_t *fw_write_init_qos_cmd(
 		const struct cmd_init_qos *cmd,
 		uint32_t flags)
 {
-	*buf++ = qos_u32_to_uc(UC_QOS_COMMAND_INIT_QOS);
+	*buf++ = qos_u32_to_uc(UC_QOS_CMD_INIT_QOS);
 	*buf++ = qos_u32_to_uc(flags);
-	*buf++ = qos_u32_to_uc(8);
+	*buf++ = qos_u32_to_uc(10);
 	*buf++ = qos_u32_to_uc(cmd->qm_ddr_start & 0xFFFFFFFF);
 	*buf++ = qos_u32_to_uc(cmd->qm_num_pages);
 	*buf++ = qos_u32_to_uc(cmd->wred_total_avail_resources);
@@ -1523,6 +1531,8 @@ static uint32_t *fw_write_init_qos_cmd(
 	*buf++ = qos_u32_to_uc(cmd->wred_max_q_size);
 	*buf++ = qos_u32_to_uc(cmd->num_of_ports);
 	*buf++ = qos_u32_to_uc(cmd->qos_clock);
+	*buf++ = qos_u32_to_uc(0); /* BM push address for CoDel. LGM ONLY */
+	*buf++ = qos_u32_to_uc(ltq_get_soc_rev());
 	return buf;
 }
 
@@ -1531,9 +1541,9 @@ static uint32_t *fw_write_add_port_cmd(
 		const struct cmd_add_port *cmd,
 		uint32_t flags)
 {
-	*buf++ = qos_u32_to_uc(UC_QOS_COMMAND_ADD_PORT);
+	*buf++ = qos_u32_to_uc(UC_QOS_CMD_ADD_PORT);
 	*buf++ = qos_u32_to_uc(flags);
-	*buf++ = qos_u32_to_uc(13);
+	*buf++ = qos_u32_to_uc(15);
 	*buf++ = qos_u32_to_uc(cmd->phy);
 	*buf++ = qos_u32_to_uc(!cmd->prop.disable);
 	*buf++ = qos_u32_to_uc(0);
@@ -1547,6 +1557,8 @@ static uint32_t *fw_write_add_port_cmd(
 	*buf++ = qos_u32_to_uc(GET_ADDRESS_HIGH(cmd->prop.ring_addr));
 	*buf++ = qos_u32_to_uc(((uintptr_t)cmd->prop.ring_addr) & 0xFFFFFFFF);
 	*buf++ = qos_u32_to_uc(cmd->prop.credit);
+	*buf++ = qos_u32_to_uc(0xFFFFFFFF); /* Egress Port green Threshold */
+	*buf++ = qos_u32_to_uc(0xFFFFFFFF); /* Egress Port yellow Threshold */
 	return buf;
 }
 
@@ -1558,7 +1570,7 @@ static uint32_t *fw_write_set_port_cmd(
 		struct fw_set_parent *parent,
 		const struct fw_set_port *port)
 {
-	*buf++ = qos_u32_to_uc(UC_QOS_COMMAND_SET_PORT);
+	*buf++ = qos_u32_to_uc(UC_QOS_CMD_SET_PORT);
 	*buf++ = qos_u32_to_uc(flags);
 	*buf++ = qos_u32_to_uc(14);
 	*buf++ = qos_u32_to_uc(phy);
@@ -1589,7 +1601,7 @@ static uint32_t *fw_write_add_sched_cmd(
 {
 	unsigned int i;
 
-	*buf++ = qos_u32_to_uc(UC_QOS_COMMAND_ADD_SCHEDULER);
+	*buf++ = qos_u32_to_uc(UC_QOS_CMD_ADD_SCHEDULER);
 	*buf++ = qos_u32_to_uc(flags);
 	*buf++ = qos_u32_to_uc(13);
 	*buf++ = qos_u32_to_uc(cmd->phy);
@@ -1616,7 +1628,7 @@ static uint32_t *fw_write_set_sched_cmd(
 {
 	unsigned int i;
 
-	*buf++ = qos_u32_to_uc(UC_QOS_COMMAND_SET_SCHEDULER);
+	*buf++ = qos_u32_to_uc(UC_QOS_CMD_SET_SCHEDULER);
 	*buf++ = qos_u32_to_uc(flags);
 	*buf++ = qos_u32_to_uc(16);
 	*buf++ = qos_u32_to_uc(phy);
@@ -1649,9 +1661,9 @@ static uint32_t *fw_write_add_queue_cmd(
 	unsigned int i;
 	uint32_t disable;
 
-	*buf++ = qos_u32_to_uc(UC_QOS_COMMAND_ADD_QUEUE);
+	*buf++ = qos_u32_to_uc(UC_QOS_CMD_ADD_QUEUE);
 	*buf++ = qos_u32_to_uc(flags);
-	*buf++ = qos_u32_to_uc(24);
+	*buf++ = qos_u32_to_uc(25);
 	*buf++ = qos_u32_to_uc(cmd->phy);
 	*buf++ = qos_u32_to_uc(cmd->port);
 	*buf++ = qos_u32_to_uc(cmd->prop.rlm);
@@ -1682,6 +1694,7 @@ static uint32_t *fw_write_add_queue_cmd(
 	else
 		*buf++ = qos_u32_to_uc(cmd->prop.queue_wred_max_allowed);
 	*buf++ = qos_u32_to_uc(cmd->is_alias_slave);
+	*buf++ = qos_u32_to_uc(0); /* Disable Codel. LGM ONLY */
 	return buf;
 }
 
@@ -1695,9 +1708,9 @@ static uint32_t *fw_write_set_queue_cmd(
 {
 	unsigned int i;
 
-	*buf++ = qos_u32_to_uc(UC_QOS_COMMAND_SET_QUEUE);
+	*buf++ = qos_u32_to_uc(UC_QOS_CMD_SET_QUEUE);
 	*buf++ = qos_u32_to_uc(flags);
-	*buf++ = qos_u32_to_uc(28);
+	*buf++ = qos_u32_to_uc(29);
 	*buf++ = qos_u32_to_uc(phy);
 	*buf++ = qos_u32_to_uc(queue->rlm);
 	*buf++ = qos_u32_to_uc(common->valid | child->valid);
@@ -1723,6 +1736,7 @@ static uint32_t *fw_write_set_queue_cmd(
 	*buf++ = qos_u32_to_uc(queue->queue_wred_min_guaranteed);
 	*buf++ = qos_u32_to_uc(queue->queue_wred_max_allowed);
 	*buf++ = qos_u32_to_uc(queue->is_alias_slave);
+	*buf++ = qos_u32_to_uc(0); /* Disable Codel. LGM ONLY */
 
 	return buf;
 }
@@ -1732,7 +1746,7 @@ static uint32_t *fw_write_flush_queue_cmd(
 		const struct cmd_flush_queue *cmd,
 		uint32_t flags)
 {
-	*buf++ = qos_u32_to_uc(UC_QOS_COMMAND_FLUSH_QUEUE);
+	*buf++ = qos_u32_to_uc(UC_QOS_CMD_FLUSH_QUEUE);
 	*buf++ = qos_u32_to_uc(flags);
 	*buf++ = qos_u32_to_uc(1);
 	*buf++ = qos_u32_to_uc(cmd->rlm);
@@ -1746,7 +1760,7 @@ static uint32_t *fw_write_move_sched_cmd(
 {
 	unsigned int i;
 
-	*buf++ = qos_u32_to_uc(UC_QOS_COMMAND_MOVE_SCHEDULER);
+	*buf++ = qos_u32_to_uc(UC_QOS_CMD_MOVE_SCHEDULER);
 	*buf++ = qos_u32_to_uc(flags);
 	*buf++ = qos_u32_to_uc(8);
 	*buf++ = qos_u32_to_uc(cmd->src);
@@ -1765,7 +1779,7 @@ static uint32_t *fw_write_move_queue_cmd(
 {
 	unsigned int i;
 
-	*buf++ = qos_u32_to_uc(UC_QOS_COMMAND_MOVE_QUEUE);
+	*buf++ = qos_u32_to_uc(UC_QOS_CMD_MOVE_QUEUE);
 	*buf++ = qos_u32_to_uc(flags);
 	*buf++ = qos_u32_to_uc(10);
 	*buf++ = qos_u32_to_uc(cmd->src);
@@ -1784,7 +1798,7 @@ static uint32_t *fw_write_remove_queue_cmd(
 		const struct cmd_remove_node *cmd,
 		uint32_t flags)
 {
-	*buf++ = qos_u32_to_uc(UC_QOS_COMMAND_REMOVE_QUEUE);
+	*buf++ = qos_u32_to_uc(UC_QOS_CMD_REM_QUEUE);
 	*buf++ = qos_u32_to_uc(flags);
 	*buf++ = qos_u32_to_uc(3);
 	*buf++ = qos_u32_to_uc(cmd->phy);
@@ -1798,7 +1812,7 @@ static uint32_t *fw_write_remove_sched_cmd(
 		const struct cmd_remove_node *cmd,
 		uint32_t flags)
 {
-	*buf++ = qos_u32_to_uc(UC_QOS_COMMAND_REMOVE_SCHEDULER);
+	*buf++ = qos_u32_to_uc(UC_QOS_CMD_REM_SCHEDULER);
 	*buf++ = qos_u32_to_uc(flags);
 	*buf++ = qos_u32_to_uc(1);
 	*buf++ = qos_u32_to_uc(cmd->phy);
@@ -1810,7 +1824,7 @@ static uint32_t *fw_write_remove_port_cmd(
 		const struct cmd_remove_node *cmd,
 		uint32_t flags)
 {
-	*buf++ = qos_u32_to_uc(UC_QOS_COMMAND_REMOVE_PORT);
+	*buf++ = qos_u32_to_uc(UC_QOS_CMD_REM_PORT);
 	*buf++ = qos_u32_to_uc(flags);
 	*buf++ = qos_u32_to_uc(1);
 	*buf++ = qos_u32_to_uc(cmd->phy);
@@ -1824,7 +1838,7 @@ static uint32_t *fw_write_get_queue_stats(
 {
 	uint32_t reset;
 
-	*buf++ = qos_u32_to_uc(UC_QOS_COMMAND_GET_QUEUE_STATS);
+	*buf++ = qos_u32_to_uc(UC_QOS_CMD_GET_QUEUE_STATS);
 	*buf++ = qos_u32_to_uc(flags);
 	*buf++ = qos_u32_to_uc(4);
 	*buf++ = qos_u32_to_uc(cmd->phy);
@@ -1853,7 +1867,7 @@ static uint32_t *fw_write_get_port_stats(
 {
 	uint32_t reset;
 
-	*buf++ = qos_u32_to_uc(UC_QOS_COMMAND_GET_PORT_STATS);
+	*buf++ = qos_u32_to_uc(UC_QOS_CMD_GET_PORT_STATS);
 	*buf++ = qos_u32_to_uc(flags);
 	*buf++ = qos_u32_to_uc(3);
 	*buf++ = qos_u32_to_uc(cmd->phy);
@@ -1871,10 +1885,11 @@ static uint32_t *fw_write_get_system_info(
 		const struct cmd_get_system_info *cmd,
 		uint32_t flags)
 {
-	*buf++ = qos_u32_to_uc(UC_QOS_COMMAND_GET_SYSTEM_STATS);
+	*buf++ = qos_u32_to_uc(UC_QOS_CMD_GET_SYSTEM_STATS);
 	*buf++ = qos_u32_to_uc(flags);
-	*buf++ = qos_u32_to_uc(1);
+	*buf++ = qos_u32_to_uc(2);
 	*buf++ = qos_u32_to_uc((uintptr_t)cmd->addr & 0xFFFFFFFF);
+	*buf++ = qos_u32_to_uc(0);
 	return buf;
 }
 
@@ -1887,9 +1902,9 @@ static uint32_t *fw_write_set_shared_group(
 	uint32_t uc_cmd;
 
 	if (ctype == CMD_TYPE_ADD_SHARED_GROUP)
-		uc_cmd = UC_QOS_COMMAND_ADD_SHARED_BW_LIMIT_GROUP;
+		uc_cmd = UC_QOS_CMD_ADD_SHARED_BW_LIMIT_GROUP;
 	else
-		uc_cmd = UC_QOS_COMMAND_SET_SHARED_BW_LIMIT_GROUP;
+		uc_cmd = UC_QOS_CMD_SET_SHARED_BW_LIMIT_GROUP;
 
 	*buf++ = qos_u32_to_uc(uc_cmd);
 	*buf++ = qos_u32_to_uc(flags);
@@ -1903,7 +1918,7 @@ static uint32_t *fw_write_remove_shared_group(uint32_t *buf,
 		const struct cmd_remove_shared_group *cmd,
 		uint32_t flags)
 {
-	*buf++ = qos_u32_to_uc(UC_QOS_COMMAND_REMOVE_SHARED_BW_LIMIT_GROUP);
+	*buf++ = qos_u32_to_uc(UC_QOS_CMD_REM_SHARED_BW_LIMIT_GROUP);
 	*buf++ = qos_u32_to_uc(flags);
 	*buf++ = qos_u32_to_uc(1);
 	*buf++ = qos_u32_to_uc(cmd->id);
@@ -1915,7 +1930,7 @@ static uint32_t *fw_write_push_desc(
 		const struct cmd_push_desc *cmd,
 		uint32_t flags)
 {
-	*buf++ = qos_u32_to_uc(UC_QOS_COMMAND_DEBUG_PUSH_DESC);
+	*buf++ = qos_u32_to_uc(UC_QOS_CMD_DEBUG_PUSH_DESC);
 	*buf++ = qos_u32_to_uc(flags);
 	*buf++ = qos_u32_to_uc(6);
 	*buf++ = qos_u32_to_uc(cmd->queue);
@@ -1932,7 +1947,7 @@ static uint32_t *fw_write_get_node_info(
 		const struct cmd_get_node_info *cmd,
 		uint32_t flags)
 {
-	*buf++ = qos_u32_to_uc(UC_QOS_COMMAND_GET_NODE_INFO);
+	*buf++ = qos_u32_to_uc(UC_QOS_CMD_GET_NODE_INFO);
 	*buf++ = qos_u32_to_uc(flags);
 	*buf++ = qos_u32_to_uc(2);
 	*buf++ = qos_u32_to_uc(cmd->phy);
@@ -1969,7 +1984,7 @@ static uint32_t *fw_update_tree_cmd(uint32_t* buf, u32 phy, u32 flags,
 		queues++;
 	}
 
-	*buf++ = qos_u32_to_uc(UC_QOS_COMMAND_UPDATE_PORT_TREE);
+	*buf++ = qos_u32_to_uc(UC_QOS_CMD_UPDATE_PORT_TREE);
 	*buf++ = qos_u32_to_uc(flags);
 	*buf++ = qos_u32_to_uc(2 + bitmap_words);
 	*buf++ = qos_u32_to_uc(phy);
@@ -2803,7 +2818,7 @@ void enqueue_cmds(struct pp_qos_dev *qdev)
 	pushed = 0;
 	cur = start;
 	prev = start;
-	*cur++ = qos_u32_to_uc(UC_QOS_COMMAND_MULTIPLE_COMMANDS);
+	*cur++ = qos_u32_to_uc(UC_QOS_CMD_MULTIPLE_COMMANDS);
 	*cur++ = qos_u32_to_uc(UC_CMD_FLAG_IMMEDIATE);
 	*cur++ = qos_u32_to_uc(1);
 	*cur = qos_u32_to_uc(((uintptr_t)(cur) - (uintptr_t)start +
diff --git a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_uc_defs.h b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_uc_defs.h
index 38c5685953a9..15c138e400dd 100644
--- a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_uc_defs.h
+++ b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_uc_defs.h
@@ -491,42 +491,45 @@ struct system_stats_s {
 };
 
 /**************************************************************************
- *! @enum	UC_QOS_COMMAND
+ *! @enum	UC_QOS_CMD
  **************************************************************************
  *
  * @brief UC QOS command enum. Must be synced with the Host definition
  *
  **************************************************************************/
 enum uc_qos_command {
-	UC_QOS_COMMAND_GET_FW_VERSION,
-	UC_QOS_COMMAND_MULTIPLE_COMMANDS,
-	UC_QOS_COMMAND_INIT_UC_LOGGER,
-	UC_QOS_COMMAND_SET_UC_LOGGER_LEVEL,
-	UC_QOS_COMMAND_INIT_QOS,
-	UC_QOS_COMMAND_ADD_PORT,
-	UC_QOS_COMMAND_REMOVE_PORT,
-	UC_QOS_COMMAND_ADD_SCHEDULER,
-	UC_QOS_COMMAND_REMOVE_SCHEDULER,
-	UC_QOS_COMMAND_ADD_QUEUE,
-	UC_QOS_COMMAND_REMOVE_QUEUE,
-	UC_QOS_COMMAND_FLUSH_QUEUE,
-	UC_QOS_COMMAND_SET_PORT,
-	UC_QOS_COMMAND_SET_SCHEDULER,
-	UC_QOS_COMMAND_SET_QUEUE,
-	UC_QOS_COMMAND_MOVE_SCHEDULER,
-	UC_QOS_COMMAND_MOVE_QUEUE,
-	UC_QOS_COMMAND_GET_PORT_STATS,
-	UC_QOS_COMMAND_GET_QUEUE_STATS,
-	UC_QOS_COMMAND_GET_SYSTEM_STATS,
-	UC_QOS_COMMAND_ADD_SHARED_BW_LIMIT_GROUP,
-	UC_QOS_COMMAND_REMOVE_SHARED_BW_LIMIT_GROUP,
-	UC_QOS_COMMAND_SET_SHARED_BW_LIMIT_GROUP,
-	UC_QOS_COMMAND_GET_NODE_INFO,
-	UC_QOS_COMMAND_DEBUG_READ_NODE,
-	UC_QOS_COMMAND_DEBUG_PUSH_DESC,
-	UC_QOS_COMMAND_DEBUG_ADD_CREDIT_TO_PORT,
-	UC_QOS_COMMAND_GET_ACTIVE_QUEUES_STATS,
-	UC_QOS_COMMAND_UPDATE_PORT_TREE,
+	UC_QOS_CMD_GET_FW_VERSION,
+	UC_QOS_CMD_MULTIPLE_COMMANDS,
+	UC_QOS_CMD_INIT_UC_LOGGER,
+	UC_QOS_CMD_SET_UC_LOGGER_LEVEL,
+	UC_QOS_CMD_INIT_QOS,
+	UC_QOS_CMD_ADD_PORT,
+	UC_QOS_CMD_REM_PORT,
+	UC_QOS_CMD_ADD_SCHEDULER,
+	UC_QOS_CMD_REM_SCHEDULER,
+	UC_QOS_CMD_ADD_QUEUE,
+	UC_QOS_CMD_REM_QUEUE,
+	UC_QOS_CMD_FLUSH_QUEUE,
+	UC_QOS_CMD_SET_PORT,
+	UC_QOS_CMD_SET_SCHEDULER,
+	UC_QOS_CMD_SET_QUEUE,
+	UC_QOS_CMD_MOVE_SCHEDULER,
+	UC_QOS_CMD_MOVE_QUEUE,
+	UC_QOS_CMD_GET_PORT_STATS,
+	UC_QOS_CMD_GET_QUEUE_STATS,
+	UC_QOS_CMD_GET_SYSTEM_STATS,
+	UC_QOS_CMD_ADD_SHARED_BW_LIMIT_GROUP,
+	UC_QOS_CMD_REM_SHARED_BW_LIMIT_GROUP,
+	UC_QOS_CMD_SET_SHARED_BW_LIMIT_GROUP,
+	UC_QOS_CMD_GET_NODE_INFO,
+	UC_QOS_CMD_DEBUG_READ_NODE,
+	UC_QOS_CMD_DEBUG_PUSH_DESC,
+	UC_QOS_CMD_DEBUG_ADD_CREDIT_TO_PORT,
+	UC_QOS_CMD_GET_ACTIVE_QUEUES_STATS,
+	UC_QOS_CMD_UPDATE_PORT_TREE,
+	UC_QOS_CMD_SET_AQM_SF,
+	UC_QOS_CMD_SET_CODEL_CFG,
+	UC_QOS_CMD_GET_CODEL_QUEUE_STATS,
 };
 
 #define UC_MAX_PARAMS	(30)
