From 1fa1f521e1bafa93876646d163d5b3eba13ea1b2 Mon Sep 17 00:00:00 2001
From: arathinx <ayyappanx.rathinam@intel.com>
Date: Tue, 9 Jul 2019 13:53:54 +0800
Subject: [PATCH] DRVLIB_SW-2544: Remove module param input to the Ethernet
 driver

---
 drivers/net/ethernet/lantiq/ltq_eth_drv_xrx500.c | 42 +++---------------------
 1 file changed, 5 insertions(+), 37 deletions(-)

diff --git a/drivers/net/ethernet/lantiq/ltq_eth_drv_xrx500.c b/drivers/net/ethernet/lantiq/ltq_eth_drv_xrx500.c
index a6efd3ca4931..2dcaa91dddb0 100644
--- a/drivers/net/ethernet/lantiq/ltq_eth_drv_xrx500.c
+++ b/drivers/net/ethernet/lantiq/ltq_eth_drv_xrx500.c
@@ -96,9 +96,6 @@ static int32_t dp_fp_rx(struct net_device *, struct net_device *,
 static struct xrx500_hw xrx500_hw;
 
 static char wan_iface[IFNAMSIZ] = "eth1";
-static char *macaddr0;
-static char *macaddr1;
-static int multimac = 1;
 static int dev_num;
 
 static struct module g_ltq_eth_module[NUM_ETH_INF];
@@ -1158,37 +1155,16 @@ static int ltq_gsw_pmac_init(void)
 }
 
 static void
-ltq_eth_drv_eth_addr_setup(struct net_device *dev, int port, int wan)
+ltq_eth_drv_eth_addr_setup(struct net_device *dev, int port)
 {
-	int i = 0;
-	u8 *macaddr_param = NULL;
-	u8 values[ETH_ALEN] = {0};
 	struct ltq_eth_priv *priv = netdev_priv(dev);
 
 	if (is_valid_ether_addr(dev->dev_addr))
 		return;
 
-	if (wan)
-		macaddr_param = macaddr1;
-	else
-		macaddr_param = macaddr0;
-
-	if (macaddr_param) {
-		mac_pton(macaddr_param, values);
-		pr_debug("mac addr %s\n", macaddr_param);
-	}
+	eth_hw_addr_random(dev);
+	pr_debug("using random mac for port %d.\n", port);
 
-	/* read MAC address from the MAC table and put them into device */
-	if (is_valid_ether_addr(values)) {
-		pr_debug("using module param for port %d.\n", port);
-		for (i = 0; i < ETH_ALEN; i++)
-			dev->dev_addr[i] = values[i];
-		if (multimac)
-			dev->dev_addr[ETH_ALEN - 1] += port;
-	} else {
-		eth_hw_addr_random(dev);
-		pr_debug("using random mac for port %d.\n", port);
-	}
 	if (priv->xgmac_id >= 0) {
 		struct mac_ops *ops;
 
@@ -1633,7 +1609,7 @@ static int ltq_eth_dev_reg(struct xrx500_hw *hw, u32 xgmac_id_param,
 		strcpy(eth_dev[i]->name, name);
 
 		eth_dev[i]->netdev_ops = &ltq_eth_drv_ops;
-		ltq_eth_drv_eth_addr_setup(eth_dev[i], priv->id, priv->wan);
+		ltq_eth_drv_eth_addr_setup(eth_dev[i], priv->id);
 		err = register_netdev(eth_dev[i]);
 		if (err) {
 			pr_err("%s: failed to register netdevice: %p %d\n",
@@ -1882,7 +1858,7 @@ static int xrx500_of_iface(struct xrx500_hw *hw, struct device_node *iface,
 	} else {
 		pr_info("%s: rx csum offload is disabled !\n", __func__);
 	}
-	ltq_eth_drv_eth_addr_setup(hw->devs[hw->num_devs], priv->id, priv->wan);
+	ltq_eth_drv_eth_addr_setup(hw->devs[hw->num_devs], priv->id);
 
 	/* register the actual device */
 	if (!register_netdev(hw->devs[hw->num_devs]))
@@ -2455,14 +2431,6 @@ static struct platform_driver ltq_eth_driver = {
 };
 
 module_platform_driver(ltq_eth_driver);
-
-module_param(macaddr0, charp, 0644);
-module_param(macaddr1, charp, 0644);
-module_param(multimac, int, 0644);
-MODULE_PARM_DESC(macaddr0, "eth0 MAC address");
-MODULE_PARM_DESC(macaddr1, "eth1 MAC address");
-MODULE_PARM_DESC(multimac, "Multi MAC address for ports");
-
 MODULE_DESCRIPTION("Intel ethernet driver");
 MODULE_LICENSE("GPL v2");
 MODULE_VERSION(DRV_MODULE_VERSION);
