From d5bea1e728c7b33df785687bb7b3597d7da7fa7b Mon Sep 17 00:00:00 2001
From: thampan <joby.thampan@intel.com>
Date: Wed, 30 Jan 2019 18:34:54 +0800
Subject: [PATCH] DRVLIB_SW-1203: Get Tracelength params from device tree for
 pre, post, main for all 3 Xpcs

---
 drivers/net/ethernet/lantiq/xpcs/xpcs.c | 88 +++++++++++++++++++++------------
 1 file changed, 57 insertions(+), 31 deletions(-)

diff --git a/drivers/net/ethernet/lantiq/xpcs/xpcs.c b/drivers/net/ethernet/lantiq/xpcs/xpcs.c
index 2e5ea2a85dc5..7f4865441cd7 100644
--- a/drivers/net/ethernet/lantiq/xpcs/xpcs.c
+++ b/drivers/net/ethernet/lantiq/xpcs/xpcs.c
@@ -59,8 +59,8 @@ struct xpcs_mode_cfg mode_cfg[MAX_XPCS_MODE] = {
 		.cont_adapt0 = 1,
 		.tx_rate[0] = 0,
 		.rx_rate[0] = 0,
-		.tx_width[0] = 2,	//2'b10 - 16 bit
-		.rx_width[0] = 2,	//2'b10 - 16 bit
+		.tx_width[0] = 2,	/* 2'b10 - 16 bit */
+		.rx_width[0] = 2,	/* 2'b10 - 16 bit */
 		.mplla_div165_clk_en = 1,
 		.mplla_div10_clk_en = 0,
 		.mplla_div8_clk_en = 1,
@@ -92,8 +92,8 @@ struct xpcs_mode_cfg mode_cfg[MAX_XPCS_MODE] = {
 		.dfe_en = 0,
 		.dfe_en_31 = 0,
 		.cont_adapt0 = 0,
-		.tx_rate[0] = 2,	//2'b10
-		.rx_rate[0] = 2,	//2'b10
+		.tx_rate[0] = 2,	/* 2'b10 */
+		.rx_rate[0] = 2,	/* 2'b10 */
 		.tx_width[0] = 1,
 		.rx_width[0] = 1,
 		.mplla_div165_clk_en = 0,
@@ -109,7 +109,7 @@ struct xpcs_mode_cfg mode_cfg[MAX_XPCS_MODE] = {
 		.ref_clk_ctrl = 0,
 		.los_thr = 1,
 		.phy_boost_gain_val = 0x7706,
-		.rx_vref_ctrl = 0xF,	//Setting BIT12:8 = 5'd15
+		.rx_vref_ctrl = 0xF,	/* Setting BIT12:8 = 5'd15 */
 		.vboost_lvl = 0x5,
 		.tx_iboost[0] = 0xF,
 		.set_mode = xpcs_teng_xaui_mode,
@@ -128,8 +128,8 @@ struct xpcs_mode_cfg mode_cfg[MAX_XPCS_MODE] = {
 		.cont_adapt0 = 0,
 		.tx_rate[0] = 3,
 		.rx_rate[0] = 3,
-		.tx_width[0] = 1,	//2'b01 - 10 bit
-		.rx_width[0] = 1,	//2'b01 - 10 bit
+		.tx_width[0] = 1,	/* 2'b01 - 10 bit */
+		.rx_width[0] = 1,	/* 2'b01 - 10 bit */
 		.mplla_div165_clk_en = 0,
 		.mplla_div10_clk_en = 1,
 		.mplla_div8_clk_en = 0,
@@ -141,7 +141,7 @@ struct xpcs_mode_cfg mode_cfg[MAX_XPCS_MODE] = {
 		.ref_clk_ctrl = 0,
 		.los_thr = 4,
 		.phy_boost_gain_val = 0x7706,
-		.rx_vref_ctrl = 0xF,	//Setting BIT12:8 = 5'd15
+		.rx_vref_ctrl = 0xF,	/* Setting BIT12:8 = 5'd15 */
 		.vboost_lvl = 0x5,
 		.tx_iboost[0] = 0xF,
 		.set_mode = xpcs_oneg_xaui_mode,
@@ -191,13 +191,13 @@ static int xpcs_rxtx_stable(struct xpcs_prv_data *pdata)
 		if (pseq_state == 4) {
 			if (pdata->mode == TENG_KR_MODE)
 				pr_debug("%s: Tx/Rx stable (Power_Good State) "
-					"Speed: 10G\n", pdata->name);
+					 "Speed: 10G\n", pdata->name);
 			else if (pdata->mode == ONEG_XAUI_MODE)
 				pr_debug("%s: Tx/Rx stable (Power_Good State) "
-					"Speed: 1G\n", pdata->name);
+					 "Speed: 1G\n", pdata->name);
 			else if (pdata->mode == TWOP5G_GMII_MODE)
 				pr_debug("%s: Tx/Rx stable (Power_Good State) "
-					"Speed: 2.5G\n", pdata->name);
+					 "Speed: 2.5G\n", pdata->name);
 
 			break;
 		}
@@ -856,33 +856,51 @@ static void xpcs_cl72_startup(struct xpcs_prv_data *pdata)
 	XPCS_RGWR_VAL(pdata, PMA_KR_PMD_CTRL, TR_EN, 1);
 }
 
+static struct xpcs_mode_cfg *xpcs_get_cfg(u32 mode)
+{
+	int i = 0;
+
+	for (i = 0; i < MAX_XPCS_MODE; i++) {
+		if (mode_cfg[i].id == mode)
+			return &mode_cfg[i];
+	}
+
+	return NULL;
+}
+
 static int xpcs_init(struct xpcs_prv_data *pdata)
 {
-	int ret = XPCS_SUCCESS, i = 0;
+	int ret = XPCS_SUCCESS;
 
 	pdata->pcs_mode = BACKPL_ETH_PCS;
 
-	/* Default all 3 XPCS in 10G KR Mode, if need to change, Change DT */
-	for (i = 0; i < MAX_XPCS_MODE; i++) {
-		if (mode_cfg[i].id == pdata->mode) {
-			pdata->mode_cfg = &mode_cfg[i];
-			ret = pdata->mode_cfg->set_mode(pdata);
+	pdata->mode_cfg = xpcs_get_cfg(pdata->mode);
 
-			if (ret != XPCS_SUCCESS)
-				dev_info(pdata->dev, "%s: %d :: Failed ::\n",
-					 pdata->name, pdata->mode);
+	ret = pdata->mode_cfg->set_mode(pdata);
 
-			break;
-		}
-	}
+	if (ret != XPCS_SUCCESS)
+		dev_info(pdata->dev, "%s: %d :: Failed ::\n",
+			 pdata->name, pdata->mode);
 
-	if (i >= MAX_XPCS_MODE) {
-		dev_dbg(pdata->dev, "%s: Invalid Mode Selection!\n",
-			pdata->name);
-		return -EINVAL;
+	return ret;
+}
+
+static int xpcs_update_cfg(struct device *dev, struct xpcs_mode_cfg *xpcs_cfg,
+			   char *mode_name)
+{
+	struct of_phandle_args args;
+
+	if (of_parse_phandle_with_fixed_args(dev->of_node, mode_name,
+					     3, 0, &args) < 0) {
+		pr_err("Cannot get config args from device tree\n");
+		return -1;
 	}
 
-	return ret;
+	xpcs_cfg->tx_eq_pre = args.args[0];
+	xpcs_cfg->tx_eq_post = args.args[1];
+	xpcs_cfg->tx_eq_main = args.args[2];
+
+	return 0;
 }
 
 #ifdef CONFIG_OF
@@ -890,6 +908,7 @@ static int xpcs_parse_dts(struct platform_device *pdev,
 			  struct xpcs_prv_data **pdata)
 {
 	struct device *dev = &pdev->dev;
+	struct xpcs_mode_cfg *xpcs_cfg = NULL;
 	u32 prop = 0;
 
 	(*pdata) = devm_kzalloc(dev, sizeof(pdata), GFP_KERNEL);
@@ -906,6 +925,7 @@ static int xpcs_parse_dts(struct platform_device *pdev,
 	/* Retrieve the xpcs mode */
 	if (!device_property_read_u32(dev, XPCS_MODE_NAME, &prop)) {
 		(*pdata)->mode = prop;
+
 		if ((*pdata)->mode >= MAX_XPCS_MODE) {
 			dev_err(dev, "Xpcs mode: %u is invalid\n",
 				(*pdata)->mode);
@@ -937,6 +957,12 @@ static int xpcs_parse_dts(struct platform_device *pdev,
 		return -EINVAL;
 	}
 
+	xpcs_cfg = xpcs_get_cfg(ONEG_XAUI_MODE);
+	xpcs_update_cfg(dev, xpcs_cfg, "serdes_1g_cfg");
+
+	xpcs_cfg = xpcs_get_cfg(TENG_KR_MODE);
+	xpcs_update_cfg(dev, xpcs_cfg, "serdes_10g_cfg");
+
 	platform_set_drvdata(pdev, (void *)(*pdata));
 
 	return XPCS_SUCCESS;
@@ -968,7 +994,7 @@ void xpcs_ethtool_ksettings_get(struct device *dev,
 	struct xpcs_prv_data *pdata = dev_get_drvdata(dev);
 
 	if (!pdata) {
-		pr_err("XPCS %s is not initialized\n",pdata->name);
+		dev_err(dev, "XPCS is not initialized\n");
 		return;
 	}
 
@@ -989,7 +1015,7 @@ int xpcs_ethtool_ksettings_set(struct device *dev,
 	struct xpcs_prv_data *pdata = dev_get_drvdata(dev);
 
 	if (!pdata) {
-		pr_err("XPCS %s is not initialized\n",pdata->name);
+		dev_err(dev, "XPCS is not initialized\n");
 		return -1;
 	}
 
@@ -1018,7 +1044,7 @@ int xpcs_reinit(struct device *dev, u32 mode)
 	int ret = 0;
 
 	if (!dev || !phy) {
-		printk("Cannot get phy or dev\n");
+		dev_err(dev, "XPCS Reinit: Cannot get phy or dev\n");
 		return -1;
 	}
 
