From 9ac242d519ca335d640a8a914ab70428b3229761 Mon Sep 17 00:00:00 2001
From: Rekha Eswaran <rekha.eswaran@intel.com>
Date: Thu, 22 Aug 2019 15:06:10 +0800
Subject: [PATCH] DRV_DPM_SW-21 - datapath to return vUNI device pointer in
 case of VANI using dp_get_netif_subifid

---
 drivers/net/datapath/dpm/datapath.h      |  3 +++
 drivers/net/datapath/dpm/datapath_api.c  | 17 +++++++++++++++--
 drivers/net/datapath/dpm/datapath_proc.c |  5 ++---
 include/net/datapath_api.h               |  9 ++++++++-
 4 files changed, 28 insertions(+), 6 deletions(-)

diff --git a/drivers/net/datapath/dpm/datapath.h b/drivers/net/datapath/dpm/datapath.h
index dcebcae636de..e1863d464026 100644
--- a/drivers/net/datapath/dpm/datapath.h
+++ b/drivers/net/datapath/dpm/datapath.h
@@ -429,6 +429,9 @@ struct dp_subif_info {
 	u32 subif_flag; /* To store original flag from caller during
 			 * dp_register_subif
 			 */
+	u32 data_flag_ops; /* To store original flag from caller during
+			    * dp_register_subif under data->flag_ops
+			    */
 	u16 mac_learn_dis; /* To store mac learning capability of subif from
 			    * caller during dp_register_subif
 			    */
diff --git a/drivers/net/datapath/dpm/datapath_api.c b/drivers/net/datapath/dpm/datapath_api.c
index 2113dcd9565b..b3b9fa46a7cb 100644
--- a/drivers/net/datapath/dpm/datapath_api.c
+++ b/drivers/net/datapath/dpm/datapath_api.c
@@ -630,9 +630,9 @@ int32_t dp_register_subif_private(int inst, struct module *owner,
 			sif->subif =
 			    subif_id->subif;
 		strncpy(sif->device_name,
-			subif_name,
-		       sizeof(sif->device_name) - 1);
+			subif_name, sizeof(sif->device_name) - 1);
 		sif->subif_flag = flags;
+		sif->data_flag_ops = data->flag_ops;
 		STATS_SET(sif->rx_flag, 1);
 		port_info->status = PORT_SUBIF_REGISTERED;
 		subif_id->port_id = port_id;
@@ -1235,6 +1235,8 @@ int32_t dp_get_netif_subifid(struct net_device *netif, struct sk_buff *skb,
 			     dp_subif_t *subif, uint32_t flags)
 {
 	struct dp_subif_cache *dp_subif;
+	struct dp_subif_info *sif;
+	struct pmac_port_info *port_info;
 	u32 idx;
 	dp_get_netif_subifid_fn_t subifid_fn_t;
 	int res = DP_FAILURE;
@@ -1251,6 +1253,14 @@ int32_t dp_get_netif_subifid(struct net_device *netif, struct sk_buff *skb,
 	}
 	memcpy(subif, &dp_subif->subif, sizeof(*subif));
 	subifid_fn_t = dp_subif->subif_fn;
+	/* To return associate VUNI device if subif is VANI
+	 */
+	if (subif->data_flag & DP_SUBIF_VANI) {
+		port_info = get_dp_port_info(subif->inst, subif->port_id);
+		sif = get_dp_port_subif(port_info, !subif->subif);
+		if ((sif->netif) && (sif->flags))
+			subif->associate_netif = sif->netif;
+	}
 	rcu_read_unlock_bh();
 	if (subifid_fn_t) {
 		/*subif->subif will be set by callback api itself */
@@ -1355,6 +1365,7 @@ int32_t dp_get_netif_subifid_priv(struct net_device *netif, struct sk_buff *skb,
 				}
 				subifs[num] = sif->subif;
 				subif_flag[num] = sif->subif_flag;
+				subif->data_flag = sif->data_flag_ops;
 				bport = sif->bp;
 				subif->flag_bp = 0;
 				gpid = sif->gpid;
@@ -1390,6 +1401,7 @@ int32_t dp_get_netif_subifid_priv(struct net_device *netif, struct sk_buff *skb,
 					memcpy(subif->def_qlist, sif->qid_list,
 					       sizeof(sif->qid_list));
 					subif_flag[num] = sif->subif_flag;
+					subif->data_flag = sif->data_flag_ops;
 					if (sif->ctp_dev)
 						subif->flag_pmapper = 1;
 					bport = sif->bp;
@@ -1412,6 +1424,7 @@ int32_t dp_get_netif_subifid_priv(struct net_device *netif, struct sk_buff *skb,
 					subif->bport = tmp->bp;
 					subif->gpid = sif->gpid;
 					subif->num_q = sif->num_qid;
+					subif->data_flag = sif->data_flag_ops;
 					memcpy(subif->def_qlist, sif->qid_list,
 					       sizeof(sif->qid_list));
 					res = 0;
diff --git a/drivers/net/datapath/dpm/datapath_proc.c b/drivers/net/datapath/dpm/datapath_proc.c
index decaffd7169d..59ca068120d1 100644
--- a/drivers/net/datapath/dpm/datapath_proc.c
+++ b/drivers/net/datapath/dpm/datapath_proc.c
@@ -153,9 +153,9 @@ int proc_port_dump(struct seq_file *s, int pos)
 						  * CPU port no ctp/bridge port
 						  */
 				print_ctp_bp(s, tmp_inst, port, 0, 0);
-			seq_printf(s, "           qid/node:     %d/%d\n",
+			seq_printf(s, "           qid/node:       %d/%d\n",
 				   sif->qid, sif->q_node[0]);
-			seq_printf(s, "           port/node:    %d/%d\n",
+			seq_printf(s, "           port/node:      %d/%d\n",
 				   sif->cqm_deq_port[0], sif->qos_deq_port[0]);
 		} else
 			seq_printf(s, "%02d: rx_err_drop=0x%08x  tx_err_drop=0x%08x\n",
@@ -283,7 +283,6 @@ int proc_port_dump(struct seq_file *s, int pos)
 		}
 		seq_printf(s, "           mac_learn_dis:  %d\n",
 			   sif->mac_learn_dis);
-
 		seq_printf(s, "           gpid:           %d\n", sif->gpid);
 		seq_puts(s, "           ctp_dev:        ");
 		if (sif->ctp_dev && sif->ctp_dev->name)
diff --git a/include/net/datapath_api.h b/include/net/datapath_api.h
index 3b5e02901197..8599c26bff5e 100644
--- a/include/net/datapath_api.h
+++ b/include/net/datapath_api.h
@@ -249,7 +249,8 @@ enum DP_F_FLAG {
 	DP_F_ENUM_OR_STRING(DP_F_DONTCARE,      "DontCare"),\
 	DP_F_ENUM_OR_STRING(DP_F_LRO,           "LRO"), \
 	DP_F_ENUM_OR_STRING(DP_F_FAST_DSL_DOWNSTREAM, "DSL_Down"),\
-	DP_F_ENUM_OR_STRING(DP_F_DSL_BONDING,         "DSL_Bonding") \
+	DP_F_ENUM_OR_STRING(DP_F_DSL_BONDING,         "DSL_Bonding"),\
+	DP_F_ENUM_OR_STRING(DP_F_VUNI,         "VUNI") \
 }
 
 #define DP_F_PORT_TUNNEL_DECAP  DP_F_LOOPBACK /*!< @brief Just for
@@ -411,6 +412,12 @@ typedef struct dp_subif {
 	u16 dfl_eg_sess[DP_DFL_SESS_NUM]; /*!< [out] default egress session id
 					   *   This is for CPU TX to DC only
 					   */
+	u32 data_flag; /*!< [out] return the caller provided data->flag_ops
+			* during dp_register_subif
+			*/
+	struct net_device *associate_netif; /*!< [out] return vUNI dev pointer,
+					     * valid for VANI device only
+					     */
 } dp_subif_t;
 
 typedef dp_subif_t PPA_SUBIF; /*!< @brief structure type dp_subif PPA_SUBIF*/
