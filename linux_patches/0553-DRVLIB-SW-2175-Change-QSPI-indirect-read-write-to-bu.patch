From fee1104fc1fc54057f826889b5c0d972efe1da39 Mon Sep 17 00:00:00 2001
From: Peter Harliman Liem <peter.harliman.liem@intel.com>
Date: Tue, 16 Apr 2019 14:49:25 +0800
Subject: [PATCH] DRVLIB_SW-2175 - Change QSPI indirect read/write to burst
 mode

Change the read/write to burst mode(instead of per-words loop),
as the controller support it. This reduces the overhead of
read/write access.
---
 drivers/spi/spi-cadence-qspi-apb.c | 115 +++----------------------------------
 1 file changed, 8 insertions(+), 107 deletions(-)

diff --git a/drivers/spi/spi-cadence-qspi-apb.c b/drivers/spi/spi-cadence-qspi-apb.c
index 490d8d67fd31..92b56c9bdc29 100644
--- a/drivers/spi/spi-cadence-qspi-apb.c
+++ b/drivers/spi/spi-cadence-qspi-apb.c
@@ -116,103 +116,6 @@ void enable_qspi_direct_access(void *reg_base)
 	return;
 }
 
-
-static void cadence_qspi_apb_read_fifo_data(void *dest,
-			const void *src_ahb_addr, unsigned int bytes,
-			unsigned int flash_type)
-{
-	unsigned int temp;
-	int remaining = bytes;
-	unsigned int *dest_ptr = (unsigned int *)dest;
-	unsigned int *src_ptr = (unsigned int *)src_ahb_addr;
-
-	debug_print("[%s]dest=0x%p src_ahb_addr=0x%p bytes=0x%x\n",
-		__func__, dest, src_ahb_addr, bytes);
-	if (bytes == 0)
-		return;
-	while (remaining > 0) {
-		if (flash_type == QSPI_FLASH_TYPE_NOR) {
-			if (remaining >= CQSPI_FIFO_WIDTH) {
-				temp = CQSPI_READL(src_ptr);
-//				SwapBytes(&temp, CQSPI_FIFO_WIDTH);
-				(*(u32 *)(dest_ptr)) = temp;
-//				debug_print("[%s]dest_ptr=0x%x *src_ptr=0x%x\n",
-//					__func__, dest_ptr, temp);
-				remaining -= CQSPI_FIFO_WIDTH;
-			} else {
-				/* dangling bytes */
-				temp = CQSPI_READL(src_ptr);
-//				SwapBytes(&temp, remaining);
-				(*(u32 *)(dest_ptr)) = temp;
-				debug_print("[%s]dest_ptr=0x%p *src_ptr=0x%x\n",
-					__func__, dest_ptr, temp);
-				remaining = 0;
-				break;
-			}
-		} else {
-			if (remaining >= CQSPI_FIFO_WIDTH) {
-				(*(u32 *)(dest_ptr)) = CQSPI_READL(src_ptr);
-				remaining -= CQSPI_FIFO_WIDTH;
-			} else {
-				/* dangling bytes */
-				(*(u32 *)(dest_ptr)) = CQSPI_READL(src_ptr);
-				remaining = 0;
-				break;
-			}
-		}
-		src_ptr++;
-		dest_ptr++;
-	}
-	return;
-}
-static void cadence_qspi_apb_write_fifo_data(void *dest_ahb_addr,
-					const void *src, unsigned int bytes,
-					unsigned int flash_type)
-{
-	unsigned int temp;
-	int remaining = bytes;
-	unsigned int *dest_ptr = (unsigned int *)dest_ahb_addr;
-	unsigned int *src_ptr = (unsigned int *)src;
-
-	debug_print("[%s]dest_ahb_addr=0x%p src=0x%p bytes=0x%x\n",
-		__func__, dest_ahb_addr, src, bytes);
-	debug_print("[%s]*dest_ahb_addr=0x%x *src=0x%x\n",
-		__func__, *(unsigned int *)dest_ahb_addr,
-		*(unsigned int *)src);
-	while (remaining > 0) {
-		if (flash_type == QSPI_FLASH_TYPE_NOR) {
-			if (remaining >= CQSPI_FIFO_WIDTH) {
-				temp = *src_ptr;
-//				SwapBytes(&temp, CQSPI_FIFO_WIDTH);
-				CQSPI_WRITEL(temp, dest_ptr);
-				debug_print("[%s]dest_ptr=0x%p *src_ptr=0x%x\n",
-					__func__, dest_ptr, temp);
-				remaining -= CQSPI_FIFO_WIDTH;
-			} else {
-				/* dangling bytes */
-				memcpy(&temp, src_ptr, remaining);
-//				SwapBytes(&temp, remaining);
-				CQSPI_WRITEL(temp, dest_ptr);
-				debug_print("[%s]dest_ptr=0x%p *src_ptr=0x%x\n",
-					__func__, dest_ptr, temp);
-				break;
-			}
-		} else {
-			if (remaining >= CQSPI_FIFO_WIDTH) {
-				CQSPI_WRITEL(*src_ptr, dest_ptr);
-				remaining -= CQSPI_FIFO_WIDTH;
-			} else {
-				/* dangling bytes */
-				memcpy(&temp, src_ptr, remaining);
-				CQSPI_WRITEL(temp, dest_ptr);
-				break;
-			}
-		}
-		src_ptr++;
-		dest_ptr++;
-	}
-	return;
-}
 /* Return 1 if idle, otherwise return 0 (busy). */
 static unsigned int cadence_qspi_wait_idle(void *reg_base)
 {
@@ -590,7 +493,7 @@ static int cadence_qspi_apb_indirect_read_execute(
 	struct platform_device *pdev = cadence_qspi->pdev;
 	struct cqspi_platform_data *pdata = pdev->dev.platform_data;
 	void *reg_base = cadence_qspi->iobase;
-	void *ahb_base = cadence_qspi->qspi_ahb_virt;
+	void __iomem *ahb_base = cadence_qspi->qspi_ahb_virt;
 	int remaining = (int)rxlen;
 	int ret = 0;
 	unsigned char *buf = rxbuf;
@@ -612,19 +515,17 @@ static int cadence_qspi_apb_indirect_read_execute(
 	CQSPI_WRITEL(CQSPI_IRQ_MASK_RD, reg_base + CQSPI_REG_IRQMASK);
 
 	/* Start the indirect read transfer */
-//	reg = CQSPI_READL(reg_base + CQSPI_REG_INDIRECTRD);
-//	reg |= CQSPI_REG_INDIRECTRD_START_MASK;
 	CQSPI_WRITEL(CQSPI_REG_INDIRECTRD_START_MASK, reg_base + CQSPI_REG_INDIRECTRD);
 	debug_print("[%s]CQSPI_REG_INDIRECTRD=0x%x\n", __func__, CQSPI_READL(reg_base + CQSPI_REG_INDIRECTRD));
 	while (remaining > 0) {
-//		if (flash_type == QSPI_FLASH_TYPE_NOR) {
 			reg = CQSPI_GET_RD_SRAM_LEVEL(reg_base);
 			/* convert to bytes */
 			reg *= CQSPI_FIFO_WIDTH;
 			reg = reg > remaining ? remaining : reg;
-			/* Read data from FIFO. */
-			cadence_qspi_apb_read_fifo_data(buf, ahb_base, reg,
-							flash_type);
+
+			/* Read data from FIFO in page burst */
+			memcpy_fromio(buf, ahb_base, reg);
+
 			buf += reg;
 			remaining -= reg;
 	}
@@ -720,7 +621,7 @@ static int cadence_qspi_apb_indirect_write_execute(
 	unsigned int reg = 0;
 	unsigned int *irq_status = &(cadence_qspi->irq_status);
 	void *reg_base = cadence_qspi->iobase;
-	void *ahb_base = cadence_qspi->qspi_ahb_virt;
+	void __iomem *ahb_base = cadence_qspi->qspi_ahb_virt;
 	struct platform_device *pdev = cadence_qspi->pdev;
 	struct cqspi_platform_data *pdata = pdev->dev.platform_data;
 	struct cqspi_flash_pdata *f_pdata =
@@ -757,9 +658,9 @@ static int cadence_qspi_apb_indirect_write_execute(
 	while (remaining > 0) {
 		/* Calculate number of bytes to write. */
 		write_bytes = remaining > page_size ? page_size : remaining;
-		cadence_qspi_apb_write_fifo_data(ahb_base, txbuf, write_bytes,
-						 flash_type);
 
+		/* Write in page burst */
+		memcpy_toio(ahb_base, txbuf, write_bytes);
 		ret = wait_event_interruptible_timeout(cadence_qspi->waitqueue,
 						       *irq_status & CQSPI_IRQ_MASK_WR,
 						       CQSPI_TIMEOUT_MS);
