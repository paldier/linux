From 230278126b7f4d3e2165c66c9aef0c181356c44f Mon Sep 17 00:00:00 2001
From: arathinx <ayyappanx.rathinam@intel.com>
Date: Wed, 4 Jul 2018 14:00:42 +0800
Subject: [PATCH] DRVLIB_SW-756: Get BM buffer info from dts

---
 drivers/net/ethernet/lantiq/cqm/cqm_dev.c          |  16 +-
 drivers/net/ethernet/lantiq/cqm/cqm_dev.h          |   4 +
 drivers/net/ethernet/lantiq/cqm/falconmx/Kconfig   |  58 +------
 drivers/net/ethernet/lantiq/cqm/falconmx/cqm.c     | 175 ++++++++++-----------
 drivers/net/ethernet/lantiq/cqm/falconmx/cqm.h     |   9 ++
 .../net/ethernet/lantiq/cqm/falconmx/cqm_config.c  |  31 ----
 .../net/ethernet/lantiq/cqm/falconmx/cqm_config.h  |   1 -
 7 files changed, 116 insertions(+), 178 deletions(-)

diff --git a/drivers/net/ethernet/lantiq/cqm/cqm_dev.c b/drivers/net/ethernet/lantiq/cqm/cqm_dev.c
index a95d8e72a5ec..25913426a7bb 100644
--- a/drivers/net/ethernet/lantiq/cqm/cqm_dev.c
+++ b/drivers/net/ethernet/lantiq/cqm/cqm_dev.c
@@ -22,6 +22,10 @@ struct device_node *parse_dts(int j, void **pdata, struct resource **res,
 	struct cqm_data *cqm_pdata = NULL;
 	unsigned int intr[MAX_NUM_INTR];
 	struct resource resource[MAX_NUM_BASE_ADDR];
+	struct property *prop;
+	const __be32 *p;
+	unsigned int buf_num;
+	unsigned int *pool_size;
 
 	pr_info("[%s] .. [%d]\n", __func__, __LINE__);
 
@@ -80,6 +84,16 @@ struct device_node *parse_dts(int j, void **pdata, struct resource **res,
 		cqm_pdata->syscfg = NULL;
 	}
 	cqm_pdata->force_xpcs = of_property_read_bool(node, "intel,force-xpcs");
+	of_property_for_each_u32(node, "intel,bm-buff-num", prop, p, buf_num) {
+		cqm_pdata->pool_ptrs[cqm_pdata->num_pools] = buf_num;
+		cqm_pdata->num_pools++;
+	}
+
+	pool_size = cqm_pdata->pool_size;
+	of_property_for_each_u32(node, "intel,bm-buff-size", prop, p, buf_num) {
+		*pool_size = buf_num;
+		pool_size++;
+	}
 	ret_node = node;
 	return ret_node;
 
@@ -99,7 +113,7 @@ int add_cqm_dev(int i)
 	node = parse_dts(i, &pdata, &res, &num_res);
 	if (!node) {
 		pr_err("%s(#%d): parse_dts fail for %s\n",
-		 __func__, __LINE__, dev_node_name[i].dev_name);
+		       __func__, __LINE__, dev_node_name[i].dev_name);
 		return CBM_FAILURE;
 	}
 	pr_info("parse dts done\n");
diff --git a/drivers/net/ethernet/lantiq/cqm/cqm_dev.h b/drivers/net/ethernet/lantiq/cqm/cqm_dev.h
index 647797331ce5..09482baee91e 100644
--- a/drivers/net/ethernet/lantiq/cqm/cqm_dev.h
+++ b/drivers/net/ethernet/lantiq/cqm/cqm_dev.h
@@ -22,6 +22,7 @@
 
 #define FALCON_DEV_NAME "falcon-cqm"
 #define GRX500_DEV_NAME "grx500-cbm"
+#define MAX_NUM_POOLS 16
 
 struct dt_node_inst {
 	char *dev_name;
@@ -37,5 +38,8 @@ struct cqm_data {
 	struct reset_control *rcu_reset;
 	struct regmap *syscfg;
 	bool force_xpcs;
+	int num_pools;
+	unsigned int pool_ptrs[MAX_NUM_POOLS];
+	unsigned int pool_size[MAX_NUM_POOLS];
 };
 #endif
diff --git a/drivers/net/ethernet/lantiq/cqm/falconmx/Kconfig b/drivers/net/ethernet/lantiq/cqm/falconmx/Kconfig
index 71d610561813..a82b9e2094e0 100644
--- a/drivers/net/ethernet/lantiq/cqm/falconmx/Kconfig
+++ b/drivers/net/ethernet/lantiq/cqm/falconmx/Kconfig
@@ -2,62 +2,6 @@
 # Central Buffer Manager(CBM) configuration
 #
 menu "CQM_FALCONMX"
-config CQM_QMGR_NUM_DESC
-	hex "Number of QMGR Descriptors supported "
-	depends on LTQ_CBM
-	default 0x2000
-	---help---
-	Number of descriptors to be supported.128 bits of memory for each descriptor will be allocated
-	e.g 8192 descriptors * 128 bits (size of each descriptor)
-
-config CQM_SIZE0_BUF_SIZE
-	hex "CQM size0 Buffer size"
-	depends on LTQ_CBM
-	default 0x800
-	---help---
-	possible sizes are 128B, 256B, 512B, 1KB, 2KB, 4KB, 8KB, 10KB
-
-config CQM_NUM_SIZE0_BUF
-	hex "number of size0 buffers"
-	depends on LTQ_CBM
-	default 0x80
-
-config CQM_SIZE1_BUF_SIZE 
-	hex "CQM size1 Buffer size"
-	depends on LTQ_CBM
-	default 0x800
-	---help---
-	possible sizes are 128B, 256B, 512B, 1KB, 2KB, 4KB, 8KB, 10KB
-
-config CQM_NUM_SIZE1_BUF
-	hex "number of size1 buffers"
-	depends on LTQ_CBM
-	default 0x80
-
-config CQM_SIZE2_BUF_SIZE 
-	hex "CQM size2 Buffer size"
-	depends on LTQ_CBM
-	default 0x800
-	---help---
-	possible sizes are 128B, 256B, 512B, 1KB, 2KB, 4KB, 8KB, 10KB
-
-config CQM_NUM_SIZE2_BUF
-	hex "number of size2 buffers"
-	depends on LTQ_CBM
-	default 0x80
-
-config CQM_SIZE3_BUF_SIZE 
-	hex "CQM size3 Buffer size"
-	depends on LTQ_CBM
-	default 0x800
-	---help---
-	possible sizes are 128B, 256B, 512B, 1KB, 2KB, 4KB, 8KB, 10KB
-
-config CQM_NUM_SIZE3_BUF
-	hex "number of size3 buffers"
-	depends on LTQ_CBM
-	default 0x80
-
 config CBM_LS_ENABLE
 	tristate "CBM loadspreader"
 	depends on LTQ_CBM
@@ -65,4 +9,4 @@ config CBM_LS_ENABLE
 	---help---
 	Turn on this option to enable CBM LS and TCP packet Marking
 	in HW.
-endmenu
+endmenu 
diff --git a/drivers/net/ethernet/lantiq/cqm/falconmx/cqm.c b/drivers/net/ethernet/lantiq/cqm/falconmx/cqm.c
index 8aa8683e4c07..720b9cb9e71f 100644
--- a/drivers/net/ethernet/lantiq/cqm/falconmx/cqm.c
+++ b/drivers/net/ethernet/lantiq/cqm/falconmx/cqm.c
@@ -4,22 +4,12 @@
 #include <net/datapath_proc_api.h>
 #include <net/switch_api/gsw_flow_ops.h>
 
-#ifdef CONFIG_LTQ_PPV4_BM_SLIM
-#define CONFIG_CQM_SIZE0_BUF_SIZE 2048
-#define CONFIG_CQM_SIZE1_BUF_SIZE 2048
-#define CONFIG_CQM_SIZE2_BUF_SIZE 2048
-#define CONFIG_CQM_SIZE3_BUF_SIZE 2048
-#define CONFIG_CQM_NUM_SIZE0_BUF 0x80
-#define CONFIG_CQM_NUM_SIZE1_BUF 0x80
-#define CONFIG_CQM_NUM_SIZE2_BUF 0x80
-#define CONFIG_CQM_NUM_SIZE3_BUF 0x80
-#endif
 #define OWN_BIT  BIT(31)
 #define COMPLETE_BIT  BIT(30)
 #define FMX_CQM_DROP_INIT ((FMX_CQM_DROP_Q << 24) | \
-						   (FMX_CQM_DROP_Q << 16) | \
-						   (FMX_CQM_DROP_Q << 8) | \
-						   FMX_CQM_DROP_Q)
+			   (FMX_CQM_DROP_Q << 16) | \
+			   (FMX_CQM_DROP_Q << 8) | \
+			   FMX_CQM_DROP_Q)
 static const char cqm_name[] = "cqm";
 static void __iomem *bufreq[CQM_FMX_NUM_POOLS];
 static void __iomem *eqmdesc[4];
@@ -37,6 +27,7 @@ static struct cbm_q_info  cbm_qtable[MAX_QOS_QUEUES] = { {0} };
 static spinlock_t cqm_qidt_lock;
 static spinlock_t cqm_port_map;
 static spinlock_t cpu_pool_enq;
+static struct bmgr_policy_params p_param[CQM_FMX_NUM_BM_POLICY];
 
 LIST_HEAD(pmac_mapping_list);
 static struct cqm_ctrl *cqm_ctrl;
@@ -67,26 +58,13 @@ static int get_buff_resv_bytes(int cbm_inst, int size)
 {
 	int bsl_thr_val = 0;
 
-	dev_info(cqm_ctrl->dev, "BSL thres %d\n", BSL_THRES);
+	dev_info(cqm_ctrl->dev, "BSL thres %d size %d\n", BSL_THRES, size);
 
-	switch (size) {
-	case 0:
-		bsl_thr_val = CONFIG_CQM_SIZE0_BUF_SIZE - BSL_THRES;
-		break;
-	case 1:
-		bsl_thr_val = CONFIG_CQM_SIZE1_BUF_SIZE - BSL_THRES;
-		break;
-	case 2:
-		bsl_thr_val = CONFIG_CQM_SIZE2_BUF_SIZE - BSL_THRES;
-		break;
-	case 3:
-		bsl_thr_val = CONFIG_CQM_SIZE3_BUF_SIZE - BSL_THRES;
-		break;
-	default:
+	if (size < CQM_FMX_NUM_BM_POOLS)
+		bsl_thr_val = cqm_ctrl->fmx_pool_size[size] - BSL_THRES;
+	else
 		dev_err(cqm_ctrl->dev, "%s: unsupported size %d\n", __func__,
 			size);
-		break;
-	}
 	return bsl_thr_val;
 }
 
@@ -2862,41 +2840,6 @@ static int init_cqm_basic(struct platform_device *pdev)
 	return CBM_SUCCESS;
 }
 
-static int qos_init(struct platform_device *pdev)
-{
-#ifdef CONFIG_LTQ_PPV4_QOS_SLIM
-	u32 adj_size;
-	u32 adjusted_qos_ram_base;
-	u32 size = CONFIG_CQM_QMGR_NUM_DESC * 16;
-
-	cqm_ctrl->max_mem_alloc += size;
-	/*This is not a fool proof check, because there could be other users
-	 *allocating from CMA zone
-	 */
-	if (cqm_ctrl->max_mem_alloc >= CONFIG_CMA_SIZE_MBYTES * 1024 * 1024)
-		panic("Total mem alloc exceeds CMA zone\n");
-	cqm_ctrl->cqm_qmgr_buf_base = dma_alloc_attrs(&pdev->dev, size,
-						      &cqm_ctrl->dma_hndl_qos,
-						      GFP_KERNEL,
-						      DMA_ATTR_NON_CONSISTENT);
-	dev_dbg(cqm_ctrl->dev, "qos descbuf 0x%p",
-		cqm_ctrl->cqm_qmgr_buf_base);
-	if (!cqm_ctrl->cqm_qmgr_buf_base) {
-		dev_err(cqm_ctrl->dev, "Error in QMGR buffer allocation\n");
-		return CBM_FAILURE;
-	}
-	buf_addr_adjust((u32)cqm_ctrl->cqm_qmgr_buf_base,
-			size,
-			&adjusted_qos_ram_base,
-			&adj_size,
-			64);
-	qos_config((void *)__pa(adjusted_qos_ram_base));
-#else
-#warning Updated "qos_init" implementation needed!
-#endif
-	return CBM_SUCCESS;
-}
-
 static int get_bufsize(int size)
 {
 	switch (size) {
@@ -2970,30 +2913,16 @@ static int bm_init(struct platform_device *pdev)
 {
 	struct bmgr_pool_params p_params;
 	u8 i, j;
-	int result, pool = 0;
+	int result;
 	u32 buf_size;
 	u32 start_low;
 
-	result = pool_config(pdev, pool, CONFIG_CQM_SIZE0_BUF_SIZE,
-			     CONFIG_CQM_NUM_SIZE0_BUF);
-	if (result)
-		panic("pool %d allocation failed\n", pool);
-	pool++;
-	pool_config(pdev, pool, CONFIG_CQM_SIZE1_BUF_SIZE,
-		    CONFIG_CQM_NUM_SIZE1_BUF);
-	if (result)
-		panic("pool %d allocation failed\n", pool);
-	pool++;
-	pool_config(pdev, pool, CONFIG_CQM_SIZE2_BUF_SIZE,
-		    CONFIG_CQM_NUM_SIZE2_BUF);
-	if (result)
-		panic("pool %d allocation failed\n", pool);
-	pool++;
-	pool_config(pdev, pool, CONFIG_CQM_SIZE3_BUF_SIZE,
-		    CONFIG_CQM_NUM_SIZE3_BUF);
-	if (result)
-		panic("pool %d allocation failed\n", pool);
-	pool++;
+	for (i = 0; i < CQM_FMX_NUM_BM_POOLS; i++) {
+		result = pool_config(pdev, i, cqm_ctrl->fmx_pool_size[i],
+				     cqm_ctrl->fmx_pool_ptrs[i]);
+		if (result)
+			panic("pool %d allocation failed\n", i);
+	}
 
 	bmgr_driver_init();
 
@@ -3017,7 +2946,7 @@ static int bm_init(struct platform_device *pdev)
 	}
 
 	for (j = 0; j < CQM_FMX_NUM_BM_POLICY; j++)
-		bmgr_policy_configure(&policy_params[j], &i);
+		bmgr_policy_configure(&p_param[j], &i);
 
 #ifdef CONFIG_LTQ_PPV4_BM_SLIM
 	new_init_bm();
@@ -3611,6 +3540,65 @@ static int check_base_addr(void)
 	return CBM_SUCCESS;
 }
 
+static int conf_bm(struct cqm_data *pdata)
+{
+	int i, j, result = CBM_FAILURE;
+
+	/* copy BM pool and policy from dts*/
+	memcpy(cqm_ctrl->fmx_pool_ptrs, pdata->pool_ptrs
+		, sizeof(cqm_ctrl->fmx_pool_ptrs));
+	memcpy(cqm_ctrl->fmx_pool_size, pdata->pool_size
+		, sizeof(cqm_ctrl->fmx_pool_size));
+
+	/* Pool Index loop*/
+	for (i = 0; i < pdata->num_pools; i++) {
+		/* Validate pool and policy */
+		if ((pdata->pool_ptrs[i] <= 0) ||
+		    (pdata->pool_size[i] <= 0)) {
+			pr_err("Idx %u 0x%x 0x%x\n"
+				, i, pdata->pool_ptrs[i], pdata->pool_ptrs[i]);
+			return result;
+		}
+
+		/* Config pool size */
+		switch (i) {
+		case CQM_SIZE0_BUF_SIZE:
+			p_param[i].max_allowed = cqm_ctrl->fmx_pool_ptrs[i];
+			p_param[i].min_guaranteed = cqm_ctrl->fmx_pool_ptrs[i];
+			break;
+		case CQM_SIZE1_BUF_SIZE:
+			p_param[i].max_allowed = (cqm_ctrl->fmx_pool_ptrs[i]
+						  * 4) / 5;
+			p_param[i].min_guaranteed = 0x100;
+			break;
+		case CQM_SIZE2_BUF_SIZE:
+			p_param[i].max_allowed = (cqm_ctrl->fmx_pool_ptrs[i]
+						  * 4) / 5;
+			p_param[i].min_guaranteed = 0x80;
+			break;
+		case CQM_SIZE3_BUF_SIZE:
+			p_param[i].max_allowed = (cqm_ctrl->fmx_pool_ptrs[i]
+						  * 4) / 5;
+			p_param[i].min_guaranteed = 0x40;
+			break;
+		}
+
+		/* Config no of policy */
+		p_param[i].num_pools_in_policy = pdata->num_pools - i;
+
+		/* group_id default value */
+		p_param[i].group_id = 0;
+
+		 /* Pool size loop*/
+		for (j = 0; j < p_param[i].num_pools_in_policy; j++) {
+			p_param[i].pools_in_policy[j].pool_id = (i + j);
+			p_param[i].pools_in_policy[j].max_allowed =
+			cqm_ctrl->fmx_pool_ptrs[i + j];
+		}
+	}
+	return CBM_SUCCESS;
+}
+
 static int cqm_falconmx_probe(struct platform_device *pdev)
 {
 	struct resource *res[FMX_MAX_RESOURCE] = {NULL};
@@ -3681,6 +3669,18 @@ static int cqm_falconmx_probe(struct platform_device *pdev)
 #endif
 	cqm_ctrl->syscfg = pdata->syscfg;
 	cqm_ctrl->force_xpcs = pdata->force_xpcs;
+
+	/* check fmx pool and policy */
+	if (pdata->num_pools != CQM_FMX_NUM_BM_POOLS) {
+		pr_err("fmx pools %u\n", pdata->num_pools);
+		return CBM_FAILURE;
+	}
+
+	if (conf_bm(pdata) != CBM_SUCCESS) {
+		pr_err("conf_BMpool_and_policy failed\n");
+		return CBM_FAILURE;
+	}
+
 	spin_lock_irqsave(&cqm_qidt_lock, sys_flag);
 	for (i = 0; i < CQM_QIDT_DW_NUM; i++) {
 		g_cbm_qidt_mirror[i].qidt_shadow = FMX_CQM_DROP_INIT;
@@ -3692,7 +3692,6 @@ static int cqm_falconmx_probe(struct platform_device *pdev)
 		cbm_w32((cqm_ctrl->pon_dqm_cntr + i * 4), 0x0);
 	spin_unlock_irqrestore(&cqm_qidt_lock, sys_flag);
 	bm_init(pdev);
-	qos_init(pdev);
 	if (cbm_hw_init(pdev))
 		return -1;
 	configure_ports(cqm_ctrl->cqm_cfg);
diff --git a/drivers/net/ethernet/lantiq/cqm/falconmx/cqm.h b/drivers/net/ethernet/lantiq/cqm/falconmx/cqm.h
index 2d387f1178e5..d73482010ab3 100644
--- a/drivers/net/ethernet/lantiq/cqm/falconmx/cqm.h
+++ b/drivers/net/ethernet/lantiq/cqm/falconmx/cqm.h
@@ -155,6 +155,13 @@ enum CQM_QIDT_STATE {
 	STATE_NONE = 0xffff
 };
 
+enum CQM_BUFF_SIZE {
+	CQM_SIZE0_BUF_SIZE = 0,
+	CQM_SIZE1_BUF_SIZE,
+	CQM_SIZE2_BUF_SIZE,
+	CQM_SIZE3_BUF_SIZE,
+};
+
 /**************************************************
  *
  * Macros
@@ -582,6 +589,8 @@ struct cqm_ctrl {
 	dma_addr_t dma_hndl_p[TOT_DMA_HNDL];
 	struct dentry *debugfs;
 	const char *name;
+	u32 fmx_pool_ptrs[CQM_FMX_NUM_BM_POOLS];
+	u32 fmx_pool_size[CQM_FMX_NUM_BM_POOLS];
 };
 
 struct cqm_buf_dbg_cnt {
diff --git a/drivers/net/ethernet/lantiq/cqm/falconmx/cqm_config.c b/drivers/net/ethernet/lantiq/cqm/falconmx/cqm_config.c
index a9ef21da6884..fc91221bbbbe 100644
--- a/drivers/net/ethernet/lantiq/cqm/falconmx/cqm_config.c
+++ b/drivers/net/ethernet/lantiq/cqm/falconmx/cqm_config.c
@@ -43,37 +43,6 @@ struct cqm_bm_pool_config bm_pool_conf[CQM_FMX_NUM_POOLS] = {
 	},
 };
 
-struct bmgr_policy_params policy_params[CQM_FMX_NUM_BM_POLICY] = {
-	{
-	.group_id = 0,
-	.max_allowed = 0x280,
-	.min_guaranteed = 0x40,
-	.pools_in_policy = {{0, 0x80}, {1, 0x80}, {2, 0x80}, {3, 0x80} },
-	.num_pools_in_policy = 4,
-	},
-	{
-	.group_id = 0,
-	.max_allowed = 0x280,
-	.min_guaranteed = 0x40,
-	.pools_in_policy = {{1, 0x80}, {2, 0x80}, {3, 0x80} },
-	.num_pools_in_policy = 3,
-	},
-	{
-	.group_id = 0,
-	.max_allowed = 0x280,
-	.min_guaranteed = 0x40,
-	.pools_in_policy = {{2, 0x80}, {3, 0x80} },
-	.num_pools_in_policy = 2,
-	},
-	{
-	.group_id = 0,
-	.max_allowed = 0x280,
-	.min_guaranteed = 0x40,
-	.pools_in_policy = {{3, 0x80} },
-	.num_pools_in_policy = 1,
-	}
-};
-
 const struct cqm_config falcon_cqm_config[] = {
 	{
 	.type = DQM_CPU_TYPE,
diff --git a/drivers/net/ethernet/lantiq/cqm/falconmx/cqm_config.h b/drivers/net/ethernet/lantiq/cqm/falconmx/cqm_config.h
index 931e4741a70f..3c7160c0de01 100644
--- a/drivers/net/ethernet/lantiq/cqm/falconmx/cqm_config.h
+++ b/drivers/net/ethernet/lantiq/cqm/falconmx/cqm_config.h
@@ -121,6 +121,5 @@ struct cqm_bm_pool_config {
 extern const struct cqm_config falcon_cqm_config[];
 extern struct cqm_ctrl g_fmx_ctrl;
 extern struct cqm_bm_pool_config bm_pool_conf[CQM_FMX_NUM_POOLS];
-extern struct bmgr_policy_params policy_params[CQM_FMX_NUM_BM_POLICY];
 
 #endif /* __CQM_CONFIG_H__ */
