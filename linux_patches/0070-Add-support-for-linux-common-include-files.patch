From 3b12b71c627277156d28994a19e5cbccb9e72772 Mon Sep 17 00:00:00 2001
From: Hua Ma <hua.ma@linux.intel.com>
Date: Thu, 21 Jun 2018 17:38:19 +0800
Subject: [PATCH] Add support for linux common include files

---
 include/asm-generic/vmlinux.lds.h |   0
 include/linux/cpuhotplug.h        |   2 +
 include/linux/extmark.h           |  52 ++++++++++++++++
 include/linux/klogging.h          | 126 ++++++++++++++++++++++++++++++++++++++
 include/linux/msi.h               |   1 +
 include/linux/of.h                |   1 +
 6 files changed, 182 insertions(+)

diff --git a/include/asm-generic/vmlinux.lds.h b/include/asm-generic/vmlinux.lds.h
old mode 100644
new mode 100755
diff --git a/include/linux/cpuhotplug.h b/include/linux/cpuhotplug.h
old mode 100644
new mode 100755
index 1ab0273560ae..f6e9568d6de0
--- a/include/linux/cpuhotplug.h
+++ b/include/linux/cpuhotplug.h
@@ -87,6 +87,7 @@ enum cpuhp_state {
 	CPUHP_AP_ARMADA_TIMER_STARTING,
 	CPUHP_AP_MARCO_TIMER_STARTING,
 	CPUHP_AP_MIPS_GIC_TIMER_STARTING,
+	CPUHP_AP_INTEL_GPTC_TIMER_STARTING,
 	CPUHP_AP_ARC_TIMER_STARTING,
 	CPUHP_AP_KVM_STARTING,
 	CPUHP_AP_KVM_ARM_VGIC_INIT_STARTING,
@@ -99,6 +100,7 @@ enum cpuhp_state {
 	CPUHP_AP_ARM_CORESIGHT4_STARTING,
 	CPUHP_AP_ARM64_ISNDEP_STARTING,
 	CPUHP_AP_SMPCFD_DYING,
+	CPUHP_AP_INTEL_VMB_ONLINE,
 	CPUHP_AP_X86_TBOOT_DYING,
 	CPUHP_AP_ONLINE,
 	CPUHP_TEARDOWN_CPU,
diff --git a/include/linux/extmark.h b/include/linux/extmark.h
new file mode 100644
index 000000000000..789c45c56d24
--- /dev/null
+++ b/include/linux/extmark.h
@@ -0,0 +1,52 @@
+#ifndef _LINUX_EXTMARK_H
+#define _LINUX_EXTMARK_H
+
+/* Bit counting starts from Least significant bit, 0..31*/
+
+#define CPEID_START_BIT_POS 0
+#define CPEID_NO_OF_BITS 6
+#define CPEID_MASK 0x3f
+
+#define QUEPRIO_START_BIT_POS 6
+#define QUEPRIO_NO_OF_BITS 4
+#define QUEPRIO_MASK 0x3c0
+
+#define SUBQUEUE_START_BIT_POS 10
+#define SUBQUEUE_NO_OF_BITS 3
+#define SUBQUEUE_MASK 0x1c00
+
+#define ACCELSEL_START_BIT_POS 13
+#define ACCELSEL_NO_OF_BITS 1
+#define ACCELSEL_MASK 0x2000
+
+#define VPRIO_START_BIT_POS 14
+#define VPRIO_NO_OF_BITS 3
+#define VPRIO_MASK 0x1c000
+
+#define VLANID_START_BIT_POS 17
+#define VLANID_NO_OF_BITS 12
+#define VLANID_MASK 0x1ffe0000
+
+#define PPE_START_BIT_POS 29
+#define PPE_NO_OF_BITS 1
+#define PPE_MASK 0x20000000
+
+#define LROSESS_START_BIT_POS 31
+#define LROSESS_NO_OF_BITS 1
+#define LROSESS_MASK 0x80000000
+
+#endif
+
+#define GET_DATA_FROM_MARK_OPT(mark, mask, pos, value) \
+	(value = ((mark & mask) >> pos))
+#define SET_DATA_FROM_MARK_OPT(mark, mask, pos, value) \
+	do { \
+		mark &= ~mask; \
+		mark |= ((value << pos) & mask); \
+	} while (0)
+
+#define MASK(pos, len) (((1<<len)-1)<<pos)
+#define GET_DATA_FROM_MARK(mark, pos, len, value) \
+	GET_DATA_FROM_MARK_OPT(mark, MASK(pos, len), pos, value)
+#define SET_DATA_FROM_MARK(mark, pos, len, value) \
+	SET_DATA_FROM_MARK_OPT(mark, MASK(pos, len), pos, value)
diff --git a/include/linux/klogging.h b/include/linux/klogging.h
new file mode 100644
index 000000000000..8916687f7873
--- /dev/null
+++ b/include/linux/klogging.h
@@ -0,0 +1,126 @@
+#ifndef KLOGGING_H
+#define KLOGGING_H
+#include <linux/printk.h>
+#include <linux/ratelimit.h>
+#include <linux/kernel.h>
+#include <linux/device.h>
+#include <linux/netdevice.h>
+
+#define KER_LOG_EMERG 0
+#define KER_LOG_ALERT 1
+#define KER_LOG_CRIT 2
+#define KER_LOG_ERR 3
+#define KER_LOG_WARNING 4
+#define KER_LOG_NOTICE 5
+#define KER_LOG_INFO 6
+#define KER_LOG_DEBUG 7
+
+#undef pr_fmt
+
+#define pr_fmt(fmt) "[" KBUILD_MODNAME "] { %s : %d }" fmt, __func__, __LINE__
+
+#define LOGF_KLOG_EMERG(fmt, args...)		pr_emerg(fmt, ##args)
+#define LOGF_KLOG_ALERT(fmt, args...)		pr_alert(fmt, ##args)
+#define LOGF_KLOG_CRITICAL(fmt, args...)	pr_crit(fmt, ##args)
+#define LOGF_KLOG_ERROR(fmt, args...)		pr_err(fmt, ##args)
+#define LOGF_KLOG_WARNING(fmt, args...)		pr_warn(fmt, ##args)
+#define LOGF_KLOG_NOTICE(fmt, args...)		pr_notice(fmt, ##args)
+#define LOGF_KLOG_INFO(fmt, args...)		pr_info(fmt, ##args)
+#define LOGF_KLOG_DEBUG(fmt, args...)		pr_debug(fmt, ##args)
+#define LOGF_KLOG_CONT(fmt, args...)		printk(fmt, ##args)
+#define LOGF_KLOG_DEVEL(fmt, args...)		pr_devel(fmt, ##args)
+#define LOGF_KLOG_ONCE(fmt, args...)		printk_once(fmt, ##args)
+#define LOGF_KLOG_EMERG_ONCE(fmt, args...)	pr_emerg_once(fmt, ##args)
+#define LOGF_KLOG_ALERT_ONCE(fmt, args...)	pr_alert_once(fmt, ##args)
+#define LOGF_KLOG_CRIT_ONCE(fmt, args...)	pr_crit_once(fmt, ##args)
+#define LOGF_KLOG_ERR_ONCE(fmt, args...)	pr_err_once(fmt, ##args)
+#define LOGF_KLOG_NOTICE_ONCE(fmt, args...)	pr_notice_once(fmt, ##args)
+#define LOGF_KLOG_WARN_ONCE(fmt, args...)	pr_warn_once(fmt, ##args)
+#define LOGF_KLOG_INFO_ONCE(fmt, args...)	pr_info_once(fmt, ##args)
+#define LOGF_KLOG_CONT_ONCE(fmt, args...)	pr_cont_once(fmt, ##args)
+#define LOGF_KLOG_DEVEL_ONCE(fmt, args...)	pr_devel_once(fmt, ##args)
+#define LOGF_KLOG_DEBUG_ONCE(fmt, args...)	pr_debug_once(fmt, ##args)
+
+#define LOGF_KLOG_RATELIMITED(fmt, args...)  printk_ratelimited(fmt, ##args)
+
+#define LOGF_KLOG_ERR_RATELIMITED(fmt, args...) \
+	pr_err_ratelimited(fmt, ##args)
+
+#define LOGF_KLOG_ALERT_RATELIMITED(fmt, args...) \
+	pr_alert_ratelimited(fmt, ##args)
+
+#define LOGF_KLOG_CRIT_RATELIMITED(fmt, args...) \
+	pr_crit_ratelimited(fmt, ##args)
+
+#define LOGF_KLOG_WARN_RATELIMITED(fmt, args...) \
+	pr_warn_ratelimited(fmt, ##args)
+
+#define LOGF_KLOG_NOTICE_RATELIMITED(fmt, args...) \
+	pr_notice_ratelimited(fmt, ##args)
+
+#define LOGF_KLOG_INFO_RATELIMITED(fmt, args...) \
+	pr_info_ratelimited(fmt, ##args)
+
+#define LOGF_KLOG_CONT_RATELIMITED(fmt, args...) \
+	printk(fmt, ##args)
+
+#define LOGF_KLOG_DEVEL_RATELIMITED(fmt, args...) \
+	pr_devel_ratelimited(fmt, ##args)
+
+#define LOGF_KLOG_DEBUG_RATELIMITED(fmt, args...) \
+	pr_debug_ratelimited(fmt, ##args)
+
+#define LOGF_KLOG_DEV_DBG(dev , fmt, args...)	dev_dbg(dev , fmt , ##args)
+
+#define LOGF_KLOG_DEV_EMERG(dev , fmt, args...)	\
+	dev_emerg(dev , fmt , ##args)
+
+#define LOGF_KLOG_DEV_ALERT(dev , fmt, args...)	\
+	dev_alert(dev , fmt , ##args)
+
+#define LOGF_KLOG_DEV_CRITICAL(dev , fmt, args...)	\
+	dev_crit(dev , fmt , ##args)
+
+#define LOGF_KLOG_DEV_ERROR(dev , fmt, args...)	\
+	dev_err(dev , fmt , ##args)
+
+#define LOGF_KLOG_DEV_WARNING(dev , fmt, args...)	\
+	dev_warn(dev , fmt , ##args)
+
+#define LOGF_KLOG_DEV_NOTICE(dev , fmt, args...)	\
+	 dev_notice(dev , fmt , ##args)
+
+#define LOGF_KLOG_DEV_INFO(dev , fmt, args...)	\
+	dev_info(dev , fmt , ##args)
+
+#define LOGF_KLOG_NET_DEV_DBG(dev , fmt, args...) \
+	netdev_dbg(dev, fmt, ##args)
+
+#define LOGF_KLOG_NET_DEV_EMERG(dev , fmt, args...) \
+	netdev_printk(KERN_EMERG , dev , fmt , ##args)
+
+#define LOGF_KLOG_NET_DEV_ALERT(dev , fmt, args...) \
+	netdev_printk(KERN_ALERT , dev , fmt , ##args)
+
+#define LOGF_KLOG_NET_DEV_CRITICAL(dev , fmt, args...) \
+	netdev_printk(KERN_CRIT , dev , fmt , ##args)
+
+#define LOGF_KLOG_NET_DEV_ERROR(dev , fmt, args...) \
+	netdev_printk(KERN_ERR , dev , fmt , ##args)
+
+#define LOGF_KLOG_NET_DEV_WARNING(dev , fmt, args...) \
+	netdev_printk(KERN_WARNING , dev , fmt , ##args)
+
+#define LOGF_KLOG_NET_DEV_NOTICE(dev , fmt, args...) \
+	netdev_printk(KERN_NOTICE , dev , fmt , ##args)
+
+#define LOGF_KLOG_NET_DEV_INFO(dev , fmt, args...) \
+	netdev_printk(KERN_INFO, dev , fmt , ##args)
+
+#define LOGF_KLOG_DEV_DBG_RATELIMITED(dev , fmt, args...) \
+	pr_dbg_ratelimited(dev , fmt , ##args)
+
+#define LOGF_KLOG_NETIF_DBG(priv, type, dev, fmt, args...) \
+	netif_dbg(priv, type, dev, fmt, ##args)
+
+#endif
diff --git a/include/linux/msi.h b/include/linux/msi.h
old mode 100644
new mode 100755
index debc8aa4ec19..bff30d8ac17e
--- a/include/linux/msi.h
+++ b/include/linux/msi.h
@@ -180,6 +180,7 @@ struct msi_controller {
 	int (*setup_irqs)(struct msi_controller *chip, struct pci_dev *dev,
 			  int nvec, int type);
 	void (*teardown_irq)(struct msi_controller *chip, unsigned int irq);
+	void (*teardown_irqs)(struct msi_controller *chip, struct pci_dev *dev);
 };
 
 #ifdef CONFIG_GENERIC_MSI_IRQ_DOMAIN
diff --git a/include/linux/of.h b/include/linux/of.h
old mode 100644
new mode 100755
index 56d83c2a6bbb..7b49256d7a46
--- a/include/linux/of.h
+++ b/include/linux/of.h
@@ -1132,6 +1132,7 @@ static inline int of_get_available_child_count(const struct device_node *np)
 #define _OF_DECLARE(table, name, compat, fn, fn_type)			\
 	static const struct of_device_id __of_table_##name		\
 		__used __section(__##table##_of_table)			\
+		__aligned(4)						\
 		 = { .compatible = compat,				\
 		     .data = (fn == (fn_type)NULL) ? fn : fn  }
 #else
