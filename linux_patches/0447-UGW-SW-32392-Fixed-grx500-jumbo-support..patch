From ca67f0fa6dd9e91629abb37f7abf7cdf5be747b4 Mon Sep 17 00:00:00 2001
From: agaraix <anath.bandux.garai@intel.com>
Date: Thu, 27 Dec 2018 15:59:34 +0530
Subject: [PATCH] UGW_SW-32392 : Fixed grx500 jumbo support.

---
 drivers/net/ethernet/lantiq/cqm/cqm_common.c     |  2 +-
 drivers/net/ethernet/lantiq/cqm/grx500/cbm.c     |  1 +
 drivers/net/ethernet/lantiq/ltq_eth_drv_xrx500.c | 10 +++++-----
 3 files changed, 7 insertions(+), 6 deletions(-)

diff --git a/drivers/net/ethernet/lantiq/cqm/cqm_common.c b/drivers/net/ethernet/lantiq/cqm/cqm_common.c
index 8759cfd5ed16..795733898ea0 100644
--- a/drivers/net/ethernet/lantiq/cqm/cqm_common.c
+++ b/drivers/net/ethernet/lantiq/cqm/cqm_common.c
@@ -62,7 +62,7 @@ int cbm_linearise_buf(struct sk_buff *skb, struct cbm_tx_data *data,
 			frag = &skb_shinfo(skb)->frags[i];
 			len = skb_frag_size(frag);
 			frag_addr = skb_frag_address(frag);
-			if (len < (buf_size - copy_len)) {
+			if (len <= (buf_size - copy_len)) {
 				memcpy((u8 *)tmp_buf, (u8 *)frag_addr, len);
 				tmp_buf += len;
 				copy_len += len;
diff --git a/drivers/net/ethernet/lantiq/cqm/grx500/cbm.c b/drivers/net/ethernet/lantiq/cqm/grx500/cbm.c
index d25368e0e076..c10c1fe63972 100644
--- a/drivers/net/ethernet/lantiq/cqm/grx500/cbm.c
+++ b/drivers/net/ethernet/lantiq/cqm/grx500/cbm.c
@@ -1749,6 +1749,7 @@ cbm_cpu_pkt_tx_grx500(
 		tot_len = skb->len + data->pmac_len;
 	}
 	if (!check_ptr_validation_grx500((u32)(skb->head)) || clone_f || no_hdr_room_f) {
+		tot_len += CBM_FIXED_RX_OFFSET;
 		if (tot_len <= CBM_STD_BUF_SIZE) {
 			new_buf = (u32)cbm_buffer_alloc_grx500(smp_processor_id(), CBM_PORT_F_STANDARD_BUF);
 			buf_size = CBM_STD_BUF_SIZE;
diff --git a/drivers/net/ethernet/lantiq/ltq_eth_drv_xrx500.c b/drivers/net/ethernet/lantiq/ltq_eth_drv_xrx500.c
index 8f406d83d089..6e95fd696281 100644
--- a/drivers/net/ethernet/lantiq/ltq_eth_drv_xrx500.c
+++ b/drivers/net/ethernet/lantiq/ltq_eth_drv_xrx500.c
@@ -597,7 +597,7 @@ static int ltq_enable_gsw_l_jumbo(struct net_device *dev)
 	pr_info("doing the PMAC configuration for jumbo at GSW-L\n");
 	gsw_reg_set_bit(ops, 0xd05, 0x8);
 
-	/* Set the frame length */
+	/* Set the jumbo frame length threshold */
 	gsw_reg_set_val(ops, 0xd06, 9216);
 
 	return 0;
@@ -619,7 +619,7 @@ static int ltq_disable_gsw_l_jumbo(struct net_device *dev)
 		return -EIO;
 	}
 
-	/* Set the MAC control register 2 to enable Jumbo frames */
+	/* Set the MAC control register 2 to disable Jumbo frames */
 	gsw_reg_clr_bit(ops, (0x8f9 + (0xc * (priv->id + 1))), 0x8);
 
 	return 0;
@@ -639,8 +639,8 @@ static int ltq_enable_gsw_r_pmac_jumbo(struct net_device *dev)
 	pr_info("doing the PMAC configuration for jumbo at GSW-R\n");
 	gsw_reg_set_bit(ops, 0xd05, 0x8);
 
-	/* Set the frame length */
-	gsw_reg_set_val(ops, 0xd06, 1630);
+	/* Set the jumbo frame length threshold */
+	gsw_reg_set_val(ops, 0xd06, 1694);
 
 	return 0;
 }
@@ -711,7 +711,7 @@ static int ltq_change_mtu(struct net_device *dev, int new_mtu)
 
 			ltq_enable_gsw_r_pmac_jumbo(dev);
 			priv->jumbo_enabled = 1;
-		} else if (priv->jumbo_enabled) {
+		} else if (new_mtu <= ETH_DATA_LEN && priv->jumbo_enabled) {
 			if (priv->wan)
 				ltq_disable_gsw_r_jumbo(dev);
 			else
