From 4815abf3a3f239a7cb5f56f995284dbd7cf1c7db Mon Sep 17 00:00:00 2001
From: Oren Bakshe <oren.bakshe@intel.com>
Date: Thu, 7 Feb 2019 13:36:02 +0200
Subject: [PATCH] PONRTSYS-2639: Remove assert on illegal inputs

---
 .../net/ethernet/lantiq/ppv4/qos/pp_qos_debugfs.c    |  6 ++++++
 drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_fw.c     |  8 ++++----
 drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_linux.c  |  2 +-
 drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_main.c   | 20 ++++++++++++++++++--
 drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_utils.h  |  7 +++++++
 5 files changed, 36 insertions(+), 7 deletions(-)

diff --git a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_debugfs.c b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_debugfs.c
index e0d51457e256..3f17deeeeeb3 100644
--- a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_debugfs.c
+++ b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_debugfs.c
@@ -998,6 +998,12 @@ static int pp_qos_dbg_gen_show(struct seq_file *s, void *unused)
 				   qdev->hwconf.wred_const_p);
 			seq_printf(s, "max q size:\t%u\n",
 				   qdev->hwconf.wred_max_q_size);
+			seq_printf(s, "fw in dccm:\t%u\n",
+				   pdata->fw_sec_data_stack.is_in_dccm);
+			seq_printf(s, "fw dccm offset:\t%u\n",
+				   pdata->fw_sec_data_stack.dccm_offset);
+			seq_printf(s, "fw stack max size:\t%u\n",
+				   pdata->fw_sec_data_stack.max_size);
 		} else {
 			seq_puts(s, "Device is not ready !!!!\n");
 		}
diff --git a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_fw.c b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_fw.c
index a0ae04150caa..962688e5fcbe 100644
--- a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_fw.c
+++ b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_fw.c
@@ -231,10 +231,10 @@ int do_load_firmware(struct pp_qos_dev *qdev, const struct ppv4_qos_fw *fw,
 		return -ENOMEM;
 	}
 
-	QOS_LOG_INFO("=====> fw_data_stack_off %d, %d, %d\n",
-		     pdata->fw_sec_data_stack.is_in_dccm,
-		     pdata->fw_sec_data_stack.dccm_offset,
-		     pdata->fw_sec_data_stack.max_size);
+	QOS_LOG_DEBUG("do_load_firmware: fw_data_stack_off %d, %d, %d\n",
+		      pdata->fw_sec_data_stack.is_in_dccm,
+		      pdata->fw_sec_data_stack.dccm_offset,
+		      pdata->fw_sec_data_stack.max_size);
 
 	/* Is data stack sections in DCCM */
 	if (pdata->fw_sec_data_stack.is_in_dccm) {
diff --git a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_linux.c b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_linux.c
index c0066aae3f3c..c00b02c8427f 100644
--- a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_linux.c
+++ b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_linux.c
@@ -56,7 +56,7 @@ void stop_run(void)
 	struct pp_qos_drv_data *pdata;
 
 	if (cur_dev) {
-		dev_crit(cur_dev, "!!!!! Qos driver in unstable mode !!!!!\n");
+		dev_err(cur_dev, "!!!!! Qos driver in unstable mode !!!!!\n");
 		pdata = dev_get_drvdata(cur_dev);
 		QOS_BITS_SET(pdata->qdev->flags, PP_QOS_FLAGS_ASSERT);
 	}
diff --git a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_main.c b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_main.c
index f52903ce9f6b..474f39704bbf 100644
--- a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_main.c
+++ b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_main.c
@@ -117,14 +117,20 @@ struct qos_node *get_conform_node(const struct pp_qos_dev *qdev,
 	struct qos_node *node;
 	unsigned int phy;
 
+	if (!QOS_ID_VALID(id)) {
+		QOS_LOG_ERR("Illegal id %u\n", id);
+		return NULL;
+	}
+
 	phy = get_phy_from_id(qdev->mapping, id);
 	if (!QOS_PHY_VALID(phy)) {
-		QOS_LOG_ERR("Illegal id %u\n", id);
+		QOS_LOG_ERR("Illegal phy (id %u)\n", id);
 		return NULL;
 	}
+
 	node = get_node_from_phy(qdev->nodes, phy);
 	if (conform && !conform(node)) {
-		QOS_LOG_ERR("Illegal id %u\n", id);
+		QOS_LOG_ERR("Illegal node (id %u)\n", id);
 		return NULL;
 	}
 
@@ -747,6 +753,11 @@ static int check_queue_conf_validity(
 	 */
 	unsigned int prev_virt_parent_phy;
 
+	if (!QOS_ID_VALID(id)) {
+		QOS_LOG_ERR("Illegal id %u\n", id);
+		return -EINVAL;
+	}
+
 	/* Check if node id is valid */
 	phy = get_phy_from_id(qdev->mapping, id);
 	if (!QOS_PHY_VALID(phy)) {
@@ -1433,6 +1444,11 @@ static int check_sched_conf_validity(
 	struct qos_node *nodep;
 	unsigned int prev_virt_parent_phy_phy;
 
+	if (!QOS_ID_VALID(id)) {
+		QOS_LOG_ERR("Illegal id %u\n", id);
+		return -EINVAL;
+	}
+
 	/* Check if node id is valid */
 	phy = get_phy_from_id(qdev->mapping, id);
 	if (!QOS_PHY_VALID(phy)) {
diff --git a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_utils.h b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_utils.h
index a1992977be0a..9b394845ce22 100644
--- a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_utils.h
+++ b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_utils.h
@@ -274,6 +274,12 @@ struct qos_dev_init_info {
 /******************************************************************************/
 #define QOS_LOG(format, arg...) QOS_LOG_DEBUG(format, ##arg)
 void stop_run(void);
+
+#ifdef __KERNEL__
+#define QOS_ASSERT(condition, format... )				\
+if (WARN(!(condition), format))						\
+	stop_run();
+#else
 #define QOS_ASSERT(condition, format, arg...)				\
 do {									\
 	if (!(condition)) {						\
@@ -282,6 +288,7 @@ do {									\
 		stop_run();						\
 	}								\
 } while (0)
+#endif
 
 #define QOS_BITS_SET(flags, bits)	((flags) |= (bits))
 #define QOS_BITS_CLEAR(flags, bits)	((flags) &= ~(bits))
