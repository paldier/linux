From 4b4c2b92cdcae2f67d256b4a089ca01ce444b82f Mon Sep 17 00:00:00 2001
From: Li Yin <yin1.li@intel.com>
Date: Tue, 7 May 2019 16:29:07 +0800
Subject: [PATCH] datapath: add dp_register_ops() and dp_get_ops()

---
 drivers/net/datapath/dpm/datapath_api.c | 22 ++++++++++++++++++++++
 include/net/datapath_api.h              | 28 +++++++++++++++++++++++++++-
 2 files changed, 49 insertions(+), 1 deletion(-)

diff --git a/drivers/net/datapath/dpm/datapath_api.c b/drivers/net/datapath/dpm/datapath_api.c
index 1e49e2603d3f..1ca6c994241e 100644
--- a/drivers/net/datapath/dpm/datapath_api.c
+++ b/drivers/net/datapath/dpm/datapath_api.c
@@ -117,6 +117,28 @@ static struct net_device aca_dev;
 int aca_portid = -1;
 #endif
 
+static void *dp_ops[DP_MAX_INST][DP_OPS_CNT];
+
+void dp_register_ops(int inst, enum DP_OPS_TYPE type, void *ops)
+{
+	if (inst < 0 || inst >= DP_MAX_INST || type >= DP_OPS_CNT) {
+		DP_DEBUG(DP_DBG_FLAG_REG, "wrong index\n");
+		return DP_FAILURE;
+	}
+	dp_ops[inst][type] = ops;
+}
+EXPORT_SYMBOL(dp_register_ops);
+
+void *dp_get_ops(int inst, enum DP_OPS_TYPE type)
+{
+	if (inst < 0 || inst >= DP_MAX_INST || type >= DP_OPS_CNT) {
+		DP_DEBUG(DP_DBG_FLAG_REG, "wrong index\n");
+		return NULL;
+	}
+	return dp_ops[inst][type];
+}
+EXPORT_SYMBOL(dp_get_ops);
+
 char *get_dp_port_type_str(int k)
 {
 	return dp_port_type_str[k];
diff --git a/include/net/datapath_api.h b/include/net/datapath_api.h
index fca74cddac35..e04366e00e79 100644
--- a/include/net/datapath_api.h
+++ b/include/net/datapath_api.h
@@ -1770,5 +1770,31 @@ struct dp_spl_conn {
  */
 int dp_connect_spl_path(int inst, struct dp_spl_conn *conn);
 
-#endif /*DATAPATH_API_H */
+/*! @brief Enumerator DP_OPS_TYPE */
+enum DP_OPS_TYPE {
+	DP_OPS_BM, /*!< BM ops type */
+	DP_OPS_QOS, /*!< QOS ops type */
+	DP_OPS_GSW, /*!< GSWIP ops type */
+	DP_OPS_UMT, /*!< UMT ops type */
+	DP_OPS_LRO, /*!< LRO ops type */
+	DP_OPS_CNT,  /*!< total ops type count */
+};
+
+/*!
+ *@brief Datapath Manager ops registration
+ *@param[in] inst: DP instance ID
+ *@param[in] type: ops type
+ *@param[in] ops: pointer to ops structure
+ *@note  set to NULL to deregister
+ */
+void dp_register_ops(int inst, enum DP_OPS_TYPE type, void *ops);
 
+/*!
+ *@brief get ops registration
+ *@param[in] inst: DP instance ID
+ *@param[in] type: ops type
+ *@return ops pointer if registered, or NULL if not registered
+ */
+void *dp_get_ops(int inst, enum DP_OPS_TYPE type);
+
+#endif /*DATAPATH_API_H */
