From 17ac96fd4fea23c9ab924c03b0ced4b205ffdfdc Mon Sep 17 00:00:00 2001
From: Rekha Eswaran <rekha.eswaran@intel.com>
Date: Mon, 3 Sep 2018 14:57:55 +0800
Subject: [PATCH] DRVLIB_SW-853: ctp_tc review comments addressed

---
 .../net/ethernet/lantiq/datapath/datapath_misc.c   | 15 ++++++-----
 .../lantiq/datapath/gswip31/datapath_misc.c        | 31 +++++++++++-----------
 .../lantiq/datapath/gswip31/datapath_proc.c        | 22 ++++++++++-----
 include/net/datapath_inst.h                        |  5 ++--
 4 files changed, 43 insertions(+), 30 deletions(-)

diff --git a/drivers/net/ethernet/lantiq/datapath/datapath_misc.c b/drivers/net/ethernet/lantiq/datapath/datapath_misc.c
index bae62a4f3fdd..4186b73e075d 100644
--- a/drivers/net/ethernet/lantiq/datapath/datapath_misc.c
+++ b/drivers/net/ethernet/lantiq/datapath/datapath_misc.c
@@ -1124,18 +1124,19 @@ int print_symbol_name(unsigned long addr)
 int dp_ctp_tc_map_set(struct dp_tc_cfg *tc, int flag)
 
 {
-	dp_subif_t subif = {0};
+	struct dp_meter_subif mtr_subif = {0};
 
-	if (dp_get_netif_subifid(tc->dev, NULL, NULL, NULL, &subif, 0)) {
+	if (dp_get_netif_subifid(tc->dev, NULL, NULL, NULL,
+				 &mtr_subif.subif, 0)) {
 		DP_DEBUG(DP_DBG_FLAG_DBG, "get subifid fail(%s)\n",
 			 tc->dev ? tc->dev->name : "NULL");
 		return DP_FAILURE;
-	} else {
-		if (!dp_port_prop[subif.inst].info.dp_ctp_tc_map_set)
-			return DP_FAILURE;
-		return dp_port_prop[subif.inst].info.
-					dp_ctp_tc_map_set(tc, flag);
 	}
+	mtr_subif.inst =  mtr_subif.subif.inst;
+	if (!dp_port_prop[mtr_subif.inst].info.dp_ctp_tc_map_set)
+		return DP_FAILURE;
+	return dp_port_prop[mtr_subif.inst].info.
+		dp_ctp_tc_map_set(tc, flag, &mtr_subif);
 }
 EXPORT_SYMBOL(dp_ctp_tc_map_set);
 
diff --git a/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_misc.c b/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_misc.c
index f195cddc3798..5a77e819fa92 100644
--- a/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_misc.c
+++ b/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_misc.c
@@ -1325,31 +1325,32 @@ static int subif_platform_set_unexplicit(int inst, int port_id,
 	return 0;
 }
 
-static int ctp_tc_map_set(struct dp_tc_cfg *tc, int flag)
+static int dp_ctp_tc_map_set_31(struct dp_tc_cfg *tc, int flag,
+				struct dp_meter_subif *mtr_subif)
 {
-	struct dp_dev *dp_dev;
 	struct core_ops *gsw_handle;
 	GSW_CTP_portConfig_t ctp_tc_cfg;
-	dp_subif_t subif = {0};
 
 	memset(&ctp_tc_cfg, 0, sizeof(ctp_tc_cfg));
 
-	if (dp_get_netif_subifid(tc->dev, NULL, NULL, NULL, &subif, 0)) {
-		DP_DEBUG(DP_DBG_FLAG_DBG, "get subifid fail(%s)\n",
-			 tc->dev ? tc->dev->name : "NULL");
-	} else {
-	if (subif.flag_pmapper) {
+	if (!mtr_subif) {
+		PR_ERR("mtr_subif struct NULL\n");
+		return -1;
+	}
+	if (mtr_subif->subif.flag_pmapper) {
 		PR_ERR("Cannot support ctp tc set for pmmapper dev(%s)\n",
 		       tc->dev ? tc->dev->name : "NULL");
 		return -1;
 	}
-	gsw_handle = dp_port_prop[subif.inst].ops[GSWIP_L];
-	ctp_tc_cfg.nLogicalPortId = subif.port_id;
-	ctp_tc_cfg.nSubIfIdGroup = subif.subif;
+	gsw_handle = dp_port_prop[mtr_subif->inst].ops[GSWIP_L];
+	ctp_tc_cfg.nLogicalPortId = mtr_subif->subif.port_id;
+	ctp_tc_cfg.nSubIfIdGroup = mtr_subif->subif.subif;
+		PR_ERR("Failed to get CTP info for ep=%d subif=%d\n",
+		       mtr_subif->subif.port_id, mtr_subif->subif.subif);
 	if (gsw_core_api((dp_gsw_cb)gsw_handle->gsw_ctp_ops.CTP_PortConfigGet,
 			 gsw_handle, &ctp_tc_cfg) != 0) {
 		PR_ERR("Failed to get CTP info for ep=%d subif=%d\n",
-		       dp_dev->ep, dp_dev->ctp);
+		       mtr_subif->subif.port_id, mtr_subif->subif.subif);
 		return -1;
 	}
 	ctp_tc_cfg.eMask = GSW_CTP_PORT_CONFIG_MASK_FORCE_TRAFFIC_CLASS;
@@ -1362,10 +1363,10 @@ static int ctp_tc_map_set(struct dp_tc_cfg *tc, int flag)
 	if (gsw_core_api((dp_gsw_cb)gsw_handle->gsw_ctp_ops.CTP_PortConfigSet,
 			 gsw_handle, &ctp_tc_cfg) != 0) {
 		PR_ERR("CTP tc set fail for ep=%d subif=%d tc=%d force=%d\n",
-		       dp_dev->ep, dp_dev->ctp, tc->tc, tc->force);
+		       mtr_subif->subif.port_id, mtr_subif->subif.subif,
+		       tc->tc, tc->force);
 		return -1;
 	}
-	}
 	return 0;
 }
 
@@ -1466,7 +1467,7 @@ int register_dp_cap_gswip31(int flag)
 	cap.info.dp_qos_platform_set = qos_platform_set;
 	cap.info.dp_set_gsw_pmapper = dp_set_gsw_pmapper_31;
 	cap.info.dp_get_gsw_pmapper = dp_get_gsw_pmapper_31;
-	cap.info.dp_ctp_tc_map_set = ctp_tc_map_set;
+	cap.info.dp_ctp_tc_map_set = dp_ctp_tc_map_set_31;
 	cap.info.dp_meter_alloc = dp_meter_alloc_31;
 	cap.info.dp_meter_add = dp_meter_add_31;
 	cap.info.dp_meter_del = dp_meter_del_31;
diff --git a/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_proc.c b/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_proc.c
index 8d4292eae811..f506721aef33 100644
--- a/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_proc.c
+++ b/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_proc.c
@@ -2302,6 +2302,7 @@ static ssize_t ep_port_write(struct file *file, const char *buf, size_t count,
 	int inst = 0;
 	int flag1 = 0;
 	struct dp_tc_cfg *tc;
+	struct dp_meter_subif mtr_subif = {0};
 
 	memset(&pmac_cfg, 0, sizeof(dp_pmac_cfg_t));
 	len = (sizeof(str) > count) ? count : sizeof(str) - 1;
@@ -2357,12 +2358,24 @@ static ssize_t ep_port_write(struct file *file, const char *buf, size_t count,
 		}
 		tc->dev = dev_get_by_name(&init_net, param_list[1]);
 		tc->tc = dp_atoi(param_list[2]);
+		flag1 = dp_atoi(param_list[3]);
 		if (tc->tc > 15) {
 			PR_ERR("traffic class value range 0-15 only\n");
-			goto exit;
+			kfree(tc);
+			return count;
 		}
 		tc->force = 0;
-		if (dp_port_prop[inst].info.dp_ctp_tc_map_set(tc, flag1))
+		if (dp_get_netif_subifid(tc->dev, NULL, NULL, NULL,
+					 &mtr_subif.subif, 0)) {
+			DP_DEBUG(DP_DBG_FLAG_DBG, "get subifid fail(%s)\n",
+				 tc->dev ? tc->dev->name : "NULL");
+			kfree(tc);
+			return count;
+		}
+		mtr_subif.inst =  mtr_subif.subif.inst;
+		if (dp_port_prop[mtr_subif.inst].info.
+				dp_ctp_tc_map_set(tc, flag1,
+						  &mtr_subif))
 			PR_ERR("ctp_tc_set fail\n");
 		else
 			PR_ERR("ctp_tc_set success\n");
@@ -2373,9 +2386,6 @@ static ssize_t ep_port_write(struct file *file, const char *buf, size_t count,
 	}
 
 	return count;
- exit:
-	kfree(tc);
-	return count;
  help:
 	PR_INFO("echo %s > /proc/dp/ep\n",
 		"ingress/egress [ep_port] ['ingress/egress fields'] [value]");
@@ -2390,7 +2400,7 @@ static ssize_t ep_port_write(struct file *file, const char *buf, size_t count,
 		"egress [ep_port]",
 		"['rx_dmachan/fcs/pmac/res_dw1/res1_dw0/res2_dw0] [value]");
 	PR_INFO("echo egress [ep_port] ['rm_l2hdr'] [value] > /proc/dp/ep\n");
-	PR_INFO("echo ctp_tc [dev] [val] > /proc/dp/ep\n");
+	PR_INFO("echo ctp_tc [dev] [val] [flag] > /proc/dp/ep\n");
 	return count;
 }
 
diff --git a/include/net/datapath_inst.h b/include/net/datapath_inst.h
index 4a64b84b6034..d2fe7c2311df 100644
--- a/include/net/datapath_inst.h
+++ b/include/net/datapath_inst.h
@@ -114,7 +114,8 @@ struct inst_info {
 				  struct dp_pmapper *mapper, u32 flag);
 	int (*dp_get_gsw_pmapper)(int inst, int bport, int lport,
 				  struct dp_pmapper *mapper, u32 flag);
-	int (*dp_ctp_tc_map_set)(struct dp_tc_cfg *tc, int flag);
+	int (*dp_ctp_tc_map_set)(struct dp_tc_cfg *tc, int flag,
+				 struct dp_meter_subif *mtr_subif);
 	int (*dp_meter_alloc)(int inst, int *meterid, int flag);
 	int (*dp_meter_add)(struct net_device *dev,
 			    struct dp_meter_cfg *meter, int flag,
@@ -157,7 +158,7 @@ struct inst_property {
 	struct inst_info info;
 	/*driver should know which HW to configure, esp for PCIe case */
 	struct core_ops *ops[DP_MAX_GSW_HANDLE];
-	struct mac_ops *mac_ops[DP_MAX_MAC_HANDLE];	
+	struct mac_ops *mac_ops[DP_MAX_MAC_HANDLE];
 	int cbm_inst;
 	int qos_inst;
 	void *priv_hal; /*private data per HAL */
