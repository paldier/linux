From a5638324ebbcfae967ede2e0d400efeb03bd9d6d Mon Sep 17 00:00:00 2001
From: Rekha Eswaran <rekha.eswaran@intel.com>
Date: Mon, 24 Sep 2018 17:07:39 +0800
Subject: [PATCH] DRVLIB_SW-919: datapath LCT address review comments

---
 drivers/net/ethernet/lantiq/datapath/datapath.h    |  2 +-
 .../net/ethernet/lantiq/datapath/datapath_api.c    | 23 ++++++++++++----------
 2 files changed, 14 insertions(+), 11 deletions(-)

diff --git a/drivers/net/ethernet/lantiq/datapath/datapath.h b/drivers/net/ethernet/lantiq/datapath/datapath.h
index 0a88116ef60b..87f4446628ac 100644
--- a/drivers/net/ethernet/lantiq/datapath/datapath.h
+++ b/drivers/net/ethernet/lantiq/datapath/datapath.h
@@ -455,7 +455,7 @@ struct pmac_port_info {
 	u32 tx_ring_offset;  /*PP: next tx_ring_addr=
 			      *   current tx_ring_addr + tx_ring_offset
 			      */
-	u32 lct_idx; /* LCT port register flag */
+	u32 lct_idx; /* LCT subif register flag */
 #if IS_ENABLED(CONFIG_LTQ_DATAPATH_PTP1588)
 	u32 f_ptp:1; /* PTP1588 support enablement */
 #endif
diff --git a/drivers/net/ethernet/lantiq/datapath/datapath_api.c b/drivers/net/ethernet/lantiq/datapath/datapath_api.c
index a52a9d2f10b4..a2afbf5a858e 100644
--- a/drivers/net/ethernet/lantiq/datapath/datapath_api.c
+++ b/drivers/net/ethernet/lantiq/datapath/datapath_api.c
@@ -1856,29 +1856,32 @@ static void rx_dbg_zero_port(struct sk_buff *skb, struct dma_rx_desc_0 *desc0,
 			 "Recv Data");
 }
 
-/*This macro is for testing packet reception to LCT dev*/
+/* This macro is for testing packet reception to LCT dev*/
 #define TEST_LCT 1
-/*clone skb to send one copy to lct dev for multicast/broadcast
+/* clone skb to send one copy to lct dev for multicast/broadcast
  * otherwise for unicast send only to lct device
+ * return 0 - Caller will not proceed handling i.e. for unicast do rx only for
+ *	      LCT port
+ *	  1 - Caller continue to handle rx for other device
  */
 static int dp_handle_lct(struct pmac_port_info *dp_port,
 			 struct sk_buff *skb, dp_rx_fn_t rx_fn)
 {
 	struct sk_buff *lct_skb;
-	int subif, ret;
+	int vap, ret;
 
-	subif = dp_port->lct_idx;
-	skb->dev = dp_port->subif_info[subif].netif;
+	vap = dp_port->lct_idx;
+	skb->dev = dp_port->subif_info[vap].netif;
 	if (skb->data[PMAC_SIZE] & 0x1) {
-		/*multicast/broadcast*/
+		/* multicast/broadcast */
 		DP_DEBUG(DP_DBG_FLAG_PAE, "LCT mcast or broadcast\n");
 		lct_skb = skb_clone(skb, GFP_ATOMIC);
 		if (!lct_skb) {
 			PR_ERR("LCT mcast/bcast skb clone fail\n");
 			return -1;
 		}
-		lct_skb->dev = dp_port->subif_info[subif].netif;
-		UP_STATS(dp_port->subif_info[subif].mib.rx_fn_rxif_pkt);
+		lct_skb->dev = dp_port->subif_info[vap].netif;
+		UP_STATS(dp_port->subif_info[vap].mib.rx_fn_rxif_pkt);
 #if TEST_LCT
 		skb_pull(lct_skb, sizeof(struct pmac_rx_hdr));
 		ret = netif_rx(lct_skb);
@@ -1890,7 +1893,7 @@ static int dp_handle_lct(struct pmac_port_info *dp_port,
 #endif
 		return 1;
 	} else if (memcmp(skb->data + PMAC_SIZE, skb->dev->dev_addr, 6) == 0) {
-		/*unicast*/
+		/* unicast */
 		DP_DEBUG(DP_DBG_FLAG_PAE, "LCT unicast\n");
 #if TEST_LCT
 		skb_pull(skb, sizeof(struct pmac_rx_hdr));
@@ -1898,7 +1901,7 @@ static int dp_handle_lct(struct pmac_port_info *dp_port,
 #else
 		rx_fn(skb->dev, NULL, skb, skb->len);
 #endif
-		UP_STATS(dp_port->subif_info[subif].mib.rx_fn_rxif_pkt);
+		UP_STATS(dp_port->subif_info[vap].mib.rx_fn_rxif_pkt);
 		return 0;
 	}
 	return 1;
