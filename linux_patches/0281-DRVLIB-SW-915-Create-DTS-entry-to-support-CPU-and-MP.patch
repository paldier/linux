From db4f0af932cce89ab63c1ad5d476d075e0404d35 Mon Sep 17 00:00:00 2001
From: arathinx <ayyappanx.rathinam@intel.com>
Date: Tue, 11 Sep 2018 17:24:04 +0800
Subject: [PATCH] DRVLIB_SW-915: Create DTS entry to support CPU and MPE FW
 Dequeue

---
 drivers/net/ethernet/lantiq/cqm/cqm_dev.c          | 21 +++++++++++++++-
 drivers/net/ethernet/lantiq/cqm/cqm_dev.h          |  4 +++
 drivers/net/ethernet/lantiq/cqm/falconmx/cqm.c     | 29 +++++++++++++++++++---
 .../net/ethernet/lantiq/cqm/falconmx/cqm_config.c  | 23 ++++++++++++++++-
 4 files changed, 72 insertions(+), 5 deletions(-)

diff --git a/drivers/net/ethernet/lantiq/cqm/cqm_dev.c b/drivers/net/ethernet/lantiq/cqm/cqm_dev.c
index 4799df683e29..39e2e7a84786 100644
--- a/drivers/net/ethernet/lantiq/cqm/cqm_dev.c
+++ b/drivers/net/ethernet/lantiq/cqm/cqm_dev.c
@@ -16,7 +16,7 @@ static int cqm_platdev_parse_dts(void);
 struct device_node *parse_dts(int j, void **pdata, struct resource **res,
 			      int *num_res)
 {
-	struct device_node *node = NULL;
+	struct device_node *node = NULL, *cpu_deq_port = NULL;
 	struct device_node *ret_node = NULL;
 	int idx = 0;
 	struct cqm_data *cqm_pdata = NULL;
@@ -26,6 +26,7 @@ struct device_node *parse_dts(int j, void **pdata, struct resource **res,
 	const __be32 *p;
 	unsigned int buf_num;
 	unsigned int *pool_size;
+	u8 count = 0;
 
 	pr_info("[%s] .. [%d]\n", __func__, __LINE__);
 
@@ -94,6 +95,24 @@ struct device_node *parse_dts(int j, void **pdata, struct resource **res,
 		*pool_size = buf_num;
 		pool_size++;
 	}
+
+	for_each_available_child_of_node(node, cpu_deq_port) {
+		if (of_property_count_u32_elems(cpu_deq_port, "intel,deq-port")
+						!= MAX_CPU_DQ_PORT_ARGS) {
+			pr_err("Invalid args in %s\n", cpu_deq_port->name);
+			continue;
+		}
+
+		of_property_for_each_u32(cpu_deq_port, "intel,deq-port", prop,
+					 p, cqm_pdata->dq_port[count]) {
+			count++;
+		}
+
+		if (count >= MAX_CPU_DQ_PORT_N_TYPE)
+			break;
+	}
+	cqm_pdata->num_dq_port = count;
+
 	ret_node = node;
 	return ret_node;
 
diff --git a/drivers/net/ethernet/lantiq/cqm/cqm_dev.h b/drivers/net/ethernet/lantiq/cqm/cqm_dev.h
index 09482baee91e..42d05c707b82 100644
--- a/drivers/net/ethernet/lantiq/cqm/cqm_dev.h
+++ b/drivers/net/ethernet/lantiq/cqm/cqm_dev.h
@@ -23,6 +23,8 @@
 #define FALCON_DEV_NAME "falcon-cqm"
 #define GRX500_DEV_NAME "grx500-cbm"
 #define MAX_NUM_POOLS 16
+#define MAX_CPU_DQ_PORT_ARGS		2
+#define MAX_CPU_DQ_PORT_N_TYPE	8
 
 struct dt_node_inst {
 	char *dev_name;
@@ -41,5 +43,7 @@ struct cqm_data {
 	int num_pools;
 	unsigned int pool_ptrs[MAX_NUM_POOLS];
 	unsigned int pool_size[MAX_NUM_POOLS];
+	u32  dq_port[MAX_CPU_DQ_PORT_N_TYPE];
+	u32 num_dq_port;
 };
 #endif
diff --git a/drivers/net/ethernet/lantiq/cqm/falconmx/cqm.c b/drivers/net/ethernet/lantiq/cqm/falconmx/cqm.c
index 1380f1ea9ed1..2dbac62f6a87 100644
--- a/drivers/net/ethernet/lantiq/cqm/falconmx/cqm.c
+++ b/drivers/net/ethernet/lantiq/cqm/falconmx/cqm.c
@@ -10,6 +10,10 @@
 			   (FMX_CQM_DROP_Q << 16) | \
 			   (FMX_CQM_DROP_Q << 8) | \
 			   FMX_CQM_DROP_Q)
+#define IS_CPU_PORT_TYPE(TYPE)((TYPE == DP_F_DEQ_CPU) ||\
+			   (TYPE == DP_F_DEQ_CPU1) ||\
+			   (TYPE == DP_F_DEQ_MPE) ||\
+			   (TYPE == DP_F_DEQ_DL))
 static const char cqm_name[] = "cqm";
 static void __iomem *bufreq[CQM_FMX_NUM_POOLS];
 static void __iomem *eqmdesc[4];
@@ -1748,7 +1752,6 @@ static s32 cqm_cpu_pkt_tx(struct sk_buff *skb, struct cbm_tx_data *data,
 s32 cqm_cpu_port_get(struct cbm_cpu_port_data *data, u32 flags)
 {
 	int i;
-	int valid_type = 0;
 	u32 type;
 	struct cbm_tx_push *ptr;
 
@@ -1778,8 +1781,7 @@ s32 cqm_cpu_port_get(struct cbm_cpu_port_data *data, u32 flags)
 
 	for (i = 0; i < CQM_MAX_CPU; i++) {
 		type = dqm_port_info[i].cpu_port_type;
-		valid_type = (type == DP_F_DEQ_CPU) ||  (type == DP_F_DEQ_CPU1);
-		if (!((dqm_port_info[i].valid) && valid_type)) {
+		if (!((dqm_port_info[i].valid) && IS_CPU_PORT_TYPE(type))) {
 			data->dq_tx_push_info[i].deq_port = -1;
 			continue;
 		}
@@ -3598,6 +3600,7 @@ static int cqm_falconmx_probe(struct platform_device *pdev)
 	unsigned long sys_flag;
 	struct cqm_data *pdata = NULL;
 	const struct of_device_id *match;
+	u32 port_no, port_type;
 	int result;
 
 	memset(&cqm_dbg_cntrs, 0, sizeof(cqm_dbg_cntrs));
@@ -3687,6 +3690,26 @@ static int cqm_falconmx_probe(struct platform_device *pdev)
 	if (cbm_hw_init(pdev))
 		return -1;
 	configure_ports(cqm_ctrl->cqm_cfg);
+
+	/* Fill port info only if entry is in dtsi file */
+	if (pdata->num_dq_port) {
+		for (i = 0; i < pdata->num_dq_port; i += MAX_CPU_DQ_PORT_ARGS) {
+			port_no   = pdata->dq_port[i];
+			port_type = pdata->dq_port[i + 1];
+
+			if (!((port_no >= 0) && (port_no < CQM_MAX_CPU))) {
+				pr_err("Invalid cpu deq port-no %d\n", port_no);
+				continue;
+			}
+
+			if (!IS_CPU_PORT_TYPE(port_type)) {
+				pr_err("Inv cpu dq port-type %d\n", port_type);
+				continue;
+			}
+			dqm_port_info[port_no].cpu_port_type = port_type;
+		}
+	}
+
 	cbm_w32(cqm_ctrl->enq + IP_OCC_EN, 0);
 	cbm_w32((cqm_ctrl->cqm + CBM_BSL_CTRL), CBM_BSL_CTRL_BSL1_EN_MASK |
 		CBM_BSL_CTRL_BSL2_EN_MASK);
diff --git a/drivers/net/ethernet/lantiq/cqm/falconmx/cqm_config.c b/drivers/net/ethernet/lantiq/cqm/falconmx/cqm_config.c
index fc91221bbbbe..a188de309344 100644
--- a/drivers/net/ethernet/lantiq/cqm/falconmx/cqm_config.c
+++ b/drivers/net/ethernet/lantiq/cqm/falconmx/cqm_config.c
@@ -46,8 +46,29 @@ struct cqm_bm_pool_config bm_pool_conf[CQM_FMX_NUM_POOLS] = {
 const struct cqm_config falcon_cqm_config[] = {
 	{
 	.type = DQM_CPU_TYPE,
+	.data.dqm_cpu.port = 0,
+	.data.dqm_cpu.cpu_port_type = 0,
+	.data.dqm_cpu.num_desc = 2,
+	.data.dqm_cpu.txpush_desc = 2,
+	},
+	{
+	.type = DQM_CPU_TYPE,
+	.data.dqm_cpu.port = 1,
+	.data.dqm_cpu.cpu_port_type = 0,
+	.data.dqm_cpu.num_desc = 2,
+	.data.dqm_cpu.txpush_desc = 2,
+	},
+	{
+	.type = DQM_CPU_TYPE,
 	.data.dqm_cpu.port = 2,
-	.data.dqm_cpu.cpu_port_type = DP_F_DEQ_CPU,
+	.data.dqm_cpu.cpu_port_type = 0,
+	.data.dqm_cpu.num_desc = 2,
+	.data.dqm_cpu.txpush_desc = 2,
+	},
+	{
+	.type = DQM_CPU_TYPE,
+	.data.dqm_cpu.port = 3,
+	.data.dqm_cpu.cpu_port_type = 0,
 	.data.dqm_cpu.num_desc = 2,
 	.data.dqm_cpu.txpush_desc = 2,
 	},
