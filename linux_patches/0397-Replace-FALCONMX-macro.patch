From 0279cbed88c57187be9b771fc4581c433e8ba089 Mon Sep 17 00:00:00 2001
From: kavitha3 <k.subramanian@intel.com>
Date: Mon, 24 Dec 2018 17:43:34 +0800
Subject: [PATCH] Replace FALCONMX macro

---
 drivers/net/ethernet/lantiq/Kconfig                |   2 +-
 drivers/net/ethernet/lantiq/cqm/Kconfig            |  10 +-
 drivers/net/ethernet/lantiq/cqm/Makefile           |   4 +-
 drivers/net/ethernet/lantiq/cqm/cqm_common.c       |   2 +-
 drivers/net/ethernet/lantiq/cqm/cqm_dev.c          |   2 +-
 drivers/net/ethernet/lantiq/cqm/cqm_dev.h          |   2 +-
 .../lantiq/cqm/{falconmx => prx300}/Kconfig        |   2 +-
 .../lantiq/cqm/{falconmx => prx300}/Makefile       |   2 +-
 .../ethernet/lantiq/cqm/{falconmx => prx300}/cqm.c | 194 +++++++++++----------
 .../ethernet/lantiq/cqm/{falconmx => prx300}/cqm.h |  18 +-
 .../lantiq/cqm/{falconmx => prx300}/cqm_config.c   |  10 +-
 .../lantiq/cqm/{falconmx => prx300}/cqm_config.h   |  44 ++---
 .../{falconmx/cqm_proc.c => prx300/cqm_debugfs.c}  |   2 +-
 .../{falconmx/cqm_proc.h => prx300/cqm_debugfs.h}  |   0
 .../cqm/{falconmx => prx300}/reg/buffer_manager.h  |   0
 .../lantiq/cqm/{falconmx => prx300}/reg/cbm_ls.h   |   0
 .../lantiq/cqm/{falconmx => prx300}/reg/cqem.h     |   0
 .../lantiq/cqm/{falconmx => prx300}/reg/cqem_deq.h |   0
 .../cqm/{falconmx => prx300}/reg/cqem_desc64b.h    |   0
 .../lantiq/cqm/{falconmx => prx300}/reg/cqem_enq.h |   0
 .../cqm/{falconmx => prx300}/reg/cqem_pon_ip_if.h  |   0
 .../lantiq/cqm/{falconmx => prx300}/reg/fsqm.h     |   0
 .../lantiq/cqm/{falconmx => prx300}/reg/qos_wred.h |   0
 .../cqm/{falconmx => prx300}/reg/tx_manager.h      |   0
 .../cqm/{falconmx => prx300}/reg/txpush_dqm.h      |   0
 drivers/net/ethernet/lantiq/datapath/datapath.h    |   2 +-
 .../net/ethernet/lantiq/datapath/datapath_soc.c    |   4 +-
 .../net/ethernet/lantiq/datapath/gswip31/Kconfig   |   2 +-
 include/net/datapath_api.h                         |   2 +-
 29 files changed, 153 insertions(+), 151 deletions(-)

diff --git a/drivers/net/ethernet/lantiq/Kconfig b/drivers/net/ethernet/lantiq/Kconfig
index f7a03432b3ba..4be57278049b 100644
--- a/drivers/net/ethernet/lantiq/Kconfig
+++ b/drivers/net/ethernet/lantiq/Kconfig
@@ -69,7 +69,7 @@ config XRX500_PHY_FW
 
 config INTEL_UMT_CQEM_MODE
         bool "Intel UMT in CQEM mode"
-        depends on FALCONMX_CQM
+        depends on PRX300_CQM
         help
           In cqem mode, UMT (User Message Transfer) HW
           is able to support max three UMT port.
diff --git a/drivers/net/ethernet/lantiq/cqm/Kconfig b/drivers/net/ethernet/lantiq/cqm/Kconfig
index 468c8705bc92..3ab8140f59b4 100644
--- a/drivers/net/ethernet/lantiq/cqm/Kconfig
+++ b/drivers/net/ethernet/lantiq/cqm/Kconfig
@@ -15,12 +15,12 @@ choice
 	prompt "SoC platform selection"
 	depends on LTQ_CBM
 
-config FALCONMX_CQM
-	bool "FALCONMX"
+config PRX300_CQM
+	bool "PRX300"
 	help
-	  CQM driver for FALCONMX platform.
-if FALCONMX_CQM
-source "drivers/net/ethernet/lantiq/cqm/falconmx/Kconfig"
+	  CQM driver for PRX300 platform.
+if PRX300_CQM
+source "drivers/net/ethernet/lantiq/cqm/prx300/Kconfig"
 endif
 
 config GRX500_CBM
diff --git a/drivers/net/ethernet/lantiq/cqm/Makefile b/drivers/net/ethernet/lantiq/cqm/Makefile
index e0d5d3c3a8fc..8b7741668391 100644
--- a/drivers/net/ethernet/lantiq/cqm/Makefile
+++ b/drivers/net/ethernet/lantiq/cqm/Makefile
@@ -6,6 +6,6 @@ obj-$(CONFIG_LTQ_CBM) +=  cqm_dev.o cqm_common.o cbm_wrapper.o
 ifneq ($(CONFIG_GRX500_CBM),)
 obj-$(CONFIG_LTQ_CBM) += grx500/
 endif
-ifneq ($(CONFIG_FALCONMX_CQM),)
-obj-$(CONFIG_LTQ_CBM) += falconmx/
+ifneq ($(CONFIG_PRX300_CQM),)
+obj-$(CONFIG_LTQ_CBM) += prx300/
 endif
diff --git a/drivers/net/ethernet/lantiq/cqm/cqm_common.c b/drivers/net/ethernet/lantiq/cqm/cqm_common.c
index 737655c719ae..8759cfd5ed16 100644
--- a/drivers/net/ethernet/lantiq/cqm/cqm_common.c
+++ b/drivers/net/ethernet/lantiq/cqm/cqm_common.c
@@ -3,7 +3,7 @@
 #ifdef CONFIG_SOC_GRX500
 #include "grx500/reg/cbm_ls.h"
 #else
-#include "falconmx/reg/cbm_ls.h"
+#include "prx300/reg/cbm_ls.h"
 #endif
 
 static void __iomem *cqm_ls_addr_base;
diff --git a/drivers/net/ethernet/lantiq/cqm/cqm_dev.c b/drivers/net/ethernet/lantiq/cqm/cqm_dev.c
index 0faf028670e4..124f7e90b4a2 100644
--- a/drivers/net/ethernet/lantiq/cqm/cqm_dev.c
+++ b/drivers/net/ethernet/lantiq/cqm/cqm_dev.c
@@ -4,7 +4,7 @@
 #define MAX_NUM_BASE_ADDR 16
 #define MAX_NUM_INTR 8
 static struct dt_node_inst dev_node_name[CQM_NUM_DEV_SUPP] = {
-	{FALCON_DEV_NAME, "cqm", 0},
+	{PRX300_DEV_NAME, "cqm", 0},
 	{GRX500_DEV_NAME, "cbm", 1}
 };
 
diff --git a/drivers/net/ethernet/lantiq/cqm/cqm_dev.h b/drivers/net/ethernet/lantiq/cqm/cqm_dev.h
index e702aaf1896d..f1017587fe1c 100644
--- a/drivers/net/ethernet/lantiq/cqm/cqm_dev.h
+++ b/drivers/net/ethernet/lantiq/cqm/cqm_dev.h
@@ -20,7 +20,7 @@
 #include <lantiq_soc.h>
 #include "cqm_common.h"
 
-#define FALCON_DEV_NAME "falcon-cqm"
+#define PRX300_DEV_NAME "prx300-cqm"
 #define GRX500_DEV_NAME "grx500-cbm"
 #define MAX_NUM_POOLS 16
 #define MAX_CPU_DQ_PORT_ARGS		2
diff --git a/drivers/net/ethernet/lantiq/cqm/falconmx/Kconfig b/drivers/net/ethernet/lantiq/cqm/prx300/Kconfig
similarity index 91%
rename from drivers/net/ethernet/lantiq/cqm/falconmx/Kconfig
rename to drivers/net/ethernet/lantiq/cqm/prx300/Kconfig
index a143d1ca623f..a194050a7c68 100644
--- a/drivers/net/ethernet/lantiq/cqm/falconmx/Kconfig
+++ b/drivers/net/ethernet/lantiq/cqm/prx300/Kconfig
@@ -1,7 +1,7 @@
 #
 # Central Buffer Manager(CBM) configuration
 #
-menu "CQM_FALCONMX"
+menu "CQM_PRX300"
 config CBM_LS_ENABLE
 	tristate "CBM loadspreader"
 	depends on LTQ_CBM
diff --git a/drivers/net/ethernet/lantiq/cqm/falconmx/Makefile b/drivers/net/ethernet/lantiq/cqm/prx300/Makefile
similarity index 61%
rename from drivers/net/ethernet/lantiq/cqm/falconmx/Makefile
rename to drivers/net/ethernet/lantiq/cqm/prx300/Makefile
index ccc6be6814e4..fe0414e78b61 100644
--- a/drivers/net/ethernet/lantiq/cqm/falconmx/Makefile
+++ b/drivers/net/ethernet/lantiq/cqm/prx300/Makefile
@@ -2,7 +2,7 @@
 # Makefile for CBM driver.
 #
 
-obj-$(CONFIG_LTQ_CBM) += cqm.o cqm_config.o cqm_proc.o
+obj-$(CONFIG_LTQ_CBM) += cqm.o cqm_config.o cqm_debugfs.o
 #CFLAGS_cqm.o := -DDEBUG
 ccflags-y       += -Iinclude/net
 
diff --git a/drivers/net/ethernet/lantiq/cqm/falconmx/cqm.c b/drivers/net/ethernet/lantiq/cqm/prx300/cqm.c
similarity index 95%
rename from drivers/net/ethernet/lantiq/cqm/falconmx/cqm.c
rename to drivers/net/ethernet/lantiq/cqm/prx300/cqm.c
index b9a37756743d..e462ab83f70e 100644
--- a/drivers/net/ethernet/lantiq/cqm/falconmx/cqm.c
+++ b/drivers/net/ethernet/lantiq/cqm/prx300/cqm.c
@@ -1,5 +1,5 @@
 #include "cqm.h"
-#include "cqm_proc.h"
+#include "cqm_debugfs.h"
 #include "../cqm_dev.h"
 #include <net/datapath_proc_api.h>
 #include <net/switch_api/gsw_flow_ops.h>
@@ -7,16 +7,16 @@
 
 #define OWN_BIT  BIT(31)
 #define COMPLETE_BIT  BIT(30)
-#define FMX_CQM_DROP_INIT ((FMX_CQM_DROP_Q << 24) | \
-			   (FMX_CQM_DROP_Q << 16) | \
-			   (FMX_CQM_DROP_Q << 8) | \
-			   FMX_CQM_DROP_Q)
+#define PRX300_CQM_DROP_INIT ((PRX300_CQM_DROP_Q << 24) | \
+			   (PRX300_CQM_DROP_Q << 16) | \
+			   (PRX300_CQM_DROP_Q << 8) | \
+			   PRX300_CQM_DROP_Q)
 #define IS_CPU_PORT_TYPE(TYPE)((TYPE == DP_F_DEQ_CPU) ||\
 			   (TYPE == DP_F_DEQ_CPU1) ||\
 			   (TYPE == DP_F_DEQ_MPE) ||\
 			   (TYPE == DP_F_DEQ_DL))
 static const char cqm_name[] = "cqm";
-static void __iomem *bufreq[CQM_FMX_NUM_POOLS];
+static void __iomem *bufreq[CQM_PRX300_NUM_POOLS];
 static void __iomem *eqmdesc[4];
 static struct cbm_cntr_mode cbm_cntr_func[2];
 static struct cqm_dqm_port_info dqm_port_info[CQM_PORT_MAX] = { {0} };
@@ -32,7 +32,7 @@ static struct cbm_q_info  cbm_qtable[MAX_QOS_QUEUES] = { {0} };
 static spinlock_t cqm_qidt_lock;
 static spinlock_t cqm_port_map;
 static spinlock_t cpu_pool_enq;
-static struct bmgr_policy_params p_param[CQM_FMX_MAX_BM_POLICY];
+static struct bmgr_policy_params p_param[CQM_PRX300_MAX_BM_POLICY];
 
 LIST_HEAD(pmac_mapping_list);
 static struct cqm_ctrl *cqm_ctrl;
@@ -66,7 +66,7 @@ static int get_buff_resv_bytes(int cbm_inst, int size)
 	dev_info(cqm_ctrl->dev, "BSL thres %d size %d\n", BSL_THRES, size);
 
 	if (size < cqm_ctrl->num_pools)
-		bsl_thr_val = cqm_ctrl->fmx_pool_size[size] - BSL_THRES;
+		bsl_thr_val = cqm_ctrl->prx300_pool_size[size] - BSL_THRES;
 	else
 		dev_dbg(cqm_ctrl->dev, "%s: unsupported size %d\n", __func__,
 			size);
@@ -144,7 +144,7 @@ static struct cqm_pmac_port_map *is_cbm_allocated(s32 cbm, u32 flags)
 			spin_unlock_irqrestore(&cqm_port_map, lock_flags);
 			return ptr;
 		}
-		if ((flags == DP_F_DONTCARE) && (j < FMX_MAX_PORT_MAP)) {
+		if ((flags == DP_F_DONTCARE) && (j < PRX300_MAX_PORT_MAP)) {
 			num_deq_ports = hweight_long(ptr->egp_port_map[j]);
 			port_map = ptr->egp_port_map[j];
 			skip = is_excluded(ptr->egp_type, exclude_flags);
@@ -205,13 +205,13 @@ static u32 get_matching_pmac(u32 *ep, u32 flags, u32 *cbm_port, int pmac,
 {
 	int i, j = 0, result = CBM_NOTFOUND;
 
-	for (i = 0; i < FMX_MAX_PORT_PER_EP; i++) {
+	for (i = 0; i < PRX300_MAX_PORT_PER_EP; i++) {
 		ep[i] = CBM_PORT_INVALID;
 		cbm_port[i] = CBM_PORT_INVALID;
 	}
 	for (i = 0; i < ARRAY_SIZE(epg_lookup_table); i++) {
 		if (epg_lookup_table[i].port_type & flags) {
-			if (j < FMX_MAX_PORT_PER_EP) {
+			if (j < PRX300_MAX_PORT_PER_EP) {
 				if (pmac_present &&
 				    (epg_lookup_table[i].pmac == pmac)) {
 					ep[j] = epg_lookup_table[i].pmac;
@@ -247,7 +247,7 @@ static inline int get_intr_to_line(int intr, int *line)
 {
 	int i;
 
-	for (i = 0; i < FMX_MAX_INTR_LINE; i++) {
+	for (i = 0; i < PRX300_MAX_INTR_LINE; i++) {
 		if (cqm_ctrl->cbm_irq[i] == intr) {
 			*line = cqm_ctrl->cbm_line[i];
 			return CBM_SUCCESS;
@@ -304,7 +304,7 @@ static struct cqm_pmac_port_map *cqm_add_to_list(struct cqm_pmac_port_map
 		return NULL;
 	dev_dbg(cqm_ctrl->dev, "\n %s : 1\n", __func__);
 	ptr->pmac = val->pmac;
-	for (i = 0; i < FMX_MAX_PORT_MAP; i++)
+	for (i = 0; i < PRX300_MAX_PORT_MAP; i++)
 		ptr->egp_port_map[i] = val->egp_port_map[i];
 	ptr->egp_type = val->egp_type;
 	ptr->owner = 0;
@@ -355,16 +355,16 @@ static s32 dp_port_resources_get(u32 *dp_port, u32 *num_cbm_ports,
 	*num_cbm_ports = 0;
 	if (!local_entry)
 		return CBM_FAILURE;
-	for (i = 0; i < FMX_MAX_PORT_MAP; i++)
+	for (i = 0; i < PRX300_MAX_PORT_MAP; i++)
 		*num_cbm_ports += hweight_long(local_entry->egp_port_map[i]);
-	if ((*num_cbm_ports > FMX_MAX_PON_PORTS) || (*num_cbm_ports == 0))
+	if ((*num_cbm_ports > PRX300_MAX_PON_PORTS) || (*num_cbm_ports == 0))
 		return CBM_FAILURE;
 	res = devm_kzalloc(cqm_ctrl->dev, sizeof(*res) * (*num_cbm_ports),
 			   GFP_ATOMIC);
 	if (!res)
 		return CBM_FAILURE;
 	*res_pp = res;
-	for (i = 0; i < FMX_MAX_PORT_MAP; i++) {
+	for (i = 0; i < PRX300_MAX_PORT_MAP; i++) {
 		port_map = local_entry->egp_port_map[i];
 		while ((port_map) && (j < *num_cbm_ports)) {
 			res[j].cqm_deq_port = get_is_bit_set(port_map);
@@ -402,7 +402,7 @@ static int get_buffer_base_index(u32 v_buf, u32 *buff_base,
 	int i = 0, var_offset;
 	u32 temp_buf_start, temp_buf_end;
 
-	while (i < CQM_FMX_NUM_POOLS) {
+	while (i < CQM_PRX300_NUM_POOLS) {
 		temp_buf_start = bm_pool_conf[i].pool_start_low;
 		temp_buf_end = bm_pool_conf[i].pool_end_low;
 		dev_dbg(cqm_ctrl->dev, "0x%x 0x%x 0x%x\n",
@@ -529,7 +529,7 @@ static s32 pib_port_enable(u32 deq_port, int enable)
 
 static s32 pon_deq_cntr_get(int port, u32 *count)
 {
-	if (port < FMX_MAX_PON_PORTS) {
+	if (port < PRX300_MAX_PON_PORTS) {
 		cbm_r32((cqm_ctrl->pon_dqm_cntr + (port * 4)));
 		return CBM_SUCCESS;
 	} else {
@@ -544,7 +544,7 @@ static s32 pib_program_overshoot(u32 overshoot_bytes)
 	return CBM_SUCCESS;
 }
 
-static void set_lookup_qid_via_index_fmx(u32 index, u32 qid)
+static void set_lookup_qid_via_index_prx300(u32 index, u32 qid)
 {
 	u32 offset = (index / 4) * 4;
 	u32 shift = (index % 4) * 8;
@@ -554,12 +554,12 @@ static void set_lookup_qid_via_index_fmx(u32 index, u32 qid)
 
 	spin_lock_irqsave(&cqm_qidt_lock, sys_flag);
 	tmp = cbm_r32(qidt + offset);
-	tmp = (tmp & (~(FMX_CQM_Q_MASK << shift))) | (qid << shift);
+	tmp = (tmp & (~(PRX300_CQM_Q_MASK << shift))) | (qid << shift);
 	cbm_w32(qidt + offset, tmp);
 	spin_unlock_irqrestore(&cqm_qidt_lock, sys_flag);
 }
 
-static u8 get_lookup_qid_via_idx_fmx(u32 index)
+static u8 get_lookup_qid_via_idx_prx300(u32 index)
 {
 	u32 offset = (index / 4) * 4;
 	u32 shift = (index % 4) * 8;
@@ -568,7 +568,7 @@ static u8 get_lookup_qid_via_idx_fmx(u32 index)
 	void *qidt = cqm_ctrl->qidt;
 
 	spin_lock_irqsave(&cqm_qidt_lock, sys_flag);
-	value = ((cbm_r32(qidt + offset)) >> shift) & FMX_CQM_Q_MASK;
+	value = ((cbm_r32(qidt + offset)) >> shift) & PRX300_CQM_Q_MASK;
 	spin_unlock_irqrestore(&cqm_qidt_lock, sys_flag);
 	return value;
 }
@@ -676,32 +676,34 @@ static void cqm_qid_reg_set(struct cqm_qidt_elm *qidt_elm, u8 qid_val,
 	u8 prev_qid;
 	void *qidt_base = cqm_ctrl->qidt;
 
-	qidt = ((((sel_field & 0xf0) >> 0x4) << FMX_SEL7TO4_POS)
-		| ((qidt_elm->mpe2 & 0x1) << FMX_MPE2_POS)
-		| ((qidt_elm->mpe1 & 0x1) << FMX_MPE1_POS)
-		| ((qidt_elm->ep & 0xf) << FMX_EP_POS)
-		| ((sel_field & 0x0f) << FMX_SEL3TO0_POS));
+	qidt = ((((sel_field & 0xf0) >> 0x4) << PRX300_SEL7TO4_POS)
+		| ((qidt_elm->mpe2 & 0x1) << PRX300_MPE2_POS)
+		| ((qidt_elm->mpe1 & 0x1) << PRX300_MPE1_POS)
+		| ((qidt_elm->ep & 0xf) << PRX300_EP_POS)
+		| ((sel_field & 0x0f) << PRX300_SEL3TO0_POS));
 	qidt_idx = qidt >> 2;
 	qidt_offset = qidt % 4;
 	offset_factor = qidt_offset << 3;
-	value_mask = FMX_CQM_Q_MASK << offset_factor;
+	value_mask = PRX300_CQM_Q_MASK << offset_factor;
 
 	prev_qid = (g_cbm_qidt_mirror[qidt_idx].qidt_shadow & value_mask) >>
 		    offset_factor;
 	shadow = g_cbm_qidt_mirror[qidt_idx].qidt_shadow;
-	if (qid_val == FMX_CQM_DROP_Q) {
-		if (cbm_qtable[prev_qid].refcnt && (prev_qid != FMX_CQM_DROP_Q))
+	if (qid_val == PRX300_CQM_DROP_Q) {
+		if (cbm_qtable[prev_qid].refcnt &&
+		    (prev_qid != PRX300_CQM_DROP_Q))
 			cbm_qtable[prev_qid].refcnt--;
 	} else {
-		if (cbm_qtable[prev_qid].refcnt && (prev_qid != FMX_CQM_DROP_Q))
+		if (cbm_qtable[prev_qid].refcnt &&
+		    (prev_qid != PRX300_CQM_DROP_Q))
 			cbm_qtable[prev_qid].refcnt--;
 			g_cbm_qidt_mirror[qidt_idx].qidt_shadow = (shadow &
 			~value_mask) |
-			((qid_val & FMX_CQM_Q_MASK) << ((qidt_offset) * 8));
+			((qid_val & PRX300_CQM_Q_MASK) << ((qidt_offset) * 8));
 		cbm_qtable[qid_val].refcnt++;
 	}
 	value = (cbm_r32(qidt_base + qidt_idx * 4) & ~value_mask) |
-		((qid_val & FMX_CQM_Q_MASK) << offset_factor);
+		((qid_val & PRX300_CQM_Q_MASK) << offset_factor);
 	cbm_w32((qidt_base + qidt_idx * 4), value);
 }
 
@@ -1077,9 +1079,9 @@ static s32 queue_map_get(int cbm_inst, s32 queue_id, s32 *num_entries,
 		offset = (g_qidt_help[i] % 4);
 		index = index + 3 - offset;
 		temp_entry[i].regval = 0;
-		temp_entry[i].mpe1 = (index & 0x100) >> FMX_MPE1_POS;
-		temp_entry[i].mpe2 = (index & 0x200) >> FMX_MPE2_POS;
-		temp_entry[i].ep = (index & 0xF0) >> FMX_EP_POS;
+		temp_entry[i].mpe1 = (index & 0x100) >> PRX300_MPE1_POS;
+		temp_entry[i].mpe2 = (index & 0x200) >> PRX300_MPE2_POS;
+		temp_entry[i].ep = (index & 0xF0) >> PRX300_EP_POS;
 		offset_1 = (temp_entry[i].mpe1 & 0x1) |
 		((temp_entry[i].mpe2 & 0x1) << 1);
 		mode = cbm_r32(c_base + CBM_QID_MODE_SEL_REG_0 +
@@ -1355,12 +1357,12 @@ static int cqm_cpu_enqueue(u32 pid, struct cbm_desc *desc)
 /*return 1: pointer is valid
  *0: pointer is invalid
  */
-static inline int check_ptr_validation_falconmx(u32 v_buf)
+static inline int check_ptr_validation_prx300(u32 v_buf)
 {
 	int i = 0;
 	u32 temp_buf_start, temp_buf_end;
 
-	while (i < CQM_FMX_NUM_POOLS) {
+	while (i < CQM_PRX300_NUM_POOLS) {
 		temp_buf_start = bm_pool_conf[i].pool_start_low;
 		temp_buf_end = bm_pool_conf[i].pool_end_low;
 		if ((v_buf >= temp_buf_start) && (v_buf <= temp_buf_end))
@@ -1387,14 +1389,14 @@ static void *cqm_fsqm_buff_alloc(u32 pid, u32 policy)
 		dev_err(cqm_ctrl->dev, "illegal pid: %d\n", pid);
 		return NULL;
 	}
-	while (j < CQM_FMX_NUM_POOLS) {
+	while (j < CQM_PRX300_NUM_POOLS) {
 		if (policy == bm_pool_conf[j].policy) {
 			segment_mask = bm_pool_conf[j].segment_mask;
 			break;
 		}
 		j++;
 	}
-	if (j >= CQM_FMX_NUM_POOLS) {
+	if (j >= CQM_PRX300_NUM_POOLS) {
 		dev_err(cqm_ctrl->dev, "No matching policy is available\n");
 		return NULL;
 	}
@@ -1420,7 +1422,7 @@ static void *cqm_fsqm_buff_alloc(u32 pid, u32 policy)
 	return (void *)buf_addr;
 }
 
-static void *cqm_buff_alloc_by_policy_fmx(u32 pid, u32 flag, u32 policy)
+static void *cqm_buff_alloc_by_policy_prx300(u32 pid, u32 flag, u32 policy)
 {
 	u32 buf_addr = 0;
 	u32 i = 0, j = 0;
@@ -1435,14 +1437,14 @@ static void *cqm_buff_alloc_by_policy_fmx(u32 pid, u32 flag, u32 policy)
 		dev_err(cqm_ctrl->dev, "illegal pid: %d\n", pid);
 		return NULL;
 	}
-	while (j < CQM_FMX_NUM_POOLS) {
+	while (j < CQM_PRX300_NUM_POOLS) {
 		if (policy == bm_pool_conf[j].policy) {
 			segment_mask = bm_pool_conf[j].segment_mask;
 			break;
 		}
 		j++;
 	}
-	if (j >= CQM_FMX_NUM_POOLS) {
+	if (j >= CQM_PRX300_NUM_POOLS) {
 		dev_err(cqm_ctrl->dev, "No matching policy is available\n");
 		return NULL;
 	}
@@ -1464,10 +1466,10 @@ static void *cqm_buff_alloc_by_policy_fmx(u32 pid, u32 flag, u32 policy)
 	}
 	local_irq_restore(sys_flag);
 	v_buf = __va(buf_addr);
-	get_buffer_base_index(v_buf, &buff_base, &buff_size, &index);
+	get_buffer_base_index((u32)v_buf, &buff_base, &buff_size, &index);
 	pool_t = bm_pool_conf[j].pool;
 	policy_t = bm_pool_conf[j].policy;
-	add_metadata(buff_base, pool_t, policy_t);
+	add_metadata((u8 *)buff_base, pool_t, policy_t);
 	UP_STATS(cqm_dbg_cntrs[policy_t][pool_t].alloc_cnt);
 	return (void *)buff_base + CQM_POOL_METADATA;
 }
@@ -1526,8 +1528,8 @@ static void *cqm_buffer_alloc(u32 pid, u32 flag, u32 size, u32 *buf_size)
 	UP_STATS(cqm_dbg_cntrs[policy_t][pool_t].alloc_cnt);
 	local_irq_restore(sys_flag);
 	v_buf_addr = (uint8_t *)__va(buf_addr);
-	get_buffer_base_index(v_buf_addr, &buff_base, &buff_size, &index);
-	add_metadata(buff_base, pool_t, policy_t);
+	get_buffer_base_index((u32)v_buf_addr, &buff_base, &buff_size, &index);
+	add_metadata((u8 *)buff_base, pool_t, policy_t);
 	return (void *)buff_base + CQM_POOL_METADATA;
 }
 
@@ -1580,7 +1582,7 @@ static int cqm_buffer_free(u32 pid, void *v_buf_free, u32 flag)
 		}
 
 		/*clear metadata*/
-		memset((u8 *)pointer_to_wb, 0, CQM_FMX_POOL_POL_HDR_SIZE);
+		memset((u8 *)pointer_to_wb, 0, CQM_PRX300_POOL_POL_HDR_SIZE);
 		dev_dbg(cqm_ctrl->dev, "Erased 0x%x 0x%x\n", pointer_to_wb,
 			size_to_wb);
 		buf = dma_map_single(cqm_ctrl->dev, (void *)pointer_to_wb,
@@ -1684,7 +1686,7 @@ static s32 cqm_cpu_pkt_tx(struct sk_buff *skb, struct cbm_tx_data *data,
 	tot_len = skb->len;
 	clone_f = skb_cloned(skb);
 	shared_f = skb_shared(skb);
-	cpu_buf = !check_ptr_validation_falconmx((u32)(skb->head));
+	cpu_buf = !check_ptr_validation_prx300((u32)(skb->head));
 
 	if (data && data->pmac) {
 		no_hdr_room_f = skb_headroom(skb) < data->pmac_len ? 1 : 0;
@@ -1865,10 +1867,10 @@ static void set_ifmux(int mode)
 	}
 
 	regmap_read(cqm_ctrl->syscfg, cqm_ctrl->ifmux_reg_offset, &val);
-	if (mode == FMX_WAN_AON_MODE)
-		val |= FMX_WAN_AON_MODE;
+	if (mode == PRX300_WAN_AON_MODE)
+		val |= PRX300_WAN_AON_MODE;
 	else
-		val &= ~FMX_WAN_AON_MODE;
+		val &= ~PRX300_WAN_AON_MODE;
 	regmap_write(cqm_ctrl->syscfg, cqm_ctrl->ifmux_reg_offset, val);
 	regmap_read(cqm_ctrl->syscfg, cqm_ctrl->ifmux_reg_offset, &val);
 	dev_dbg(cqm_ctrl->dev, "wan mode ifmux_cfg 0x%08x\n", val);
@@ -1897,7 +1899,7 @@ static s32 do_port_setting(u32 *pmac, u32 flags, u32 *cbm_port,
 		ctrl.pib_bypass = 1;
 		ctrl.pib_en = 1;
 		config_pib_ctrl(&ctrl, FLAG_PIB_BYPASS | FLAG_PIB_ENABLE);
-		set_ifmux(FMX_WAN_AON_MODE);
+		set_ifmux(PRX300_WAN_AON_MODE);
 	break;
 	case DP_F_GPON:
 	case DP_F_EPON:
@@ -1910,9 +1912,9 @@ static s32 do_port_setting(u32 *pmac, u32 flags, u32 *cbm_port,
 				FLAG_PIB_ENABLE |
 				FLAG_PIB_WAKEUP_INTR);
 		if (cqm_ctrl->force_xpcs)
-			set_ifmux(FMX_WAN_AON_MODE);
+			set_ifmux(PRX300_WAN_AON_MODE);
 		else
-			set_ifmux(FMX_WAN_PON_MODE);
+			set_ifmux(PRX300_WAN_PON_MODE);
 	break;
 	case DP_F_FAST_WLAN:
 		populate = 0;
@@ -1977,8 +1979,8 @@ dp_port_alloc(struct module *owner, struct net_device *dev, u32 dev_port,
 	u32 port_end;
 	int i, result, cnt;
 	int param_pmac = 0, pmac_present = 0, pmac_found = 0;
-	u32 cbm_port[FMX_MAX_PORT_PER_EP],
-	pmac[FMX_MAX_PORT_PER_EP];
+	u32 cbm_port[PRX300_MAX_PORT_PER_EP],
+	pmac[PRX300_MAX_PORT_PER_EP];
 	struct cqm_pmac_port_map local_entry = {0};
 	struct cqm_pmac_port_map *dp_local_entry = NULL;
 
@@ -2048,7 +2050,7 @@ dp_port_alloc(struct module *owner, struct net_device *dev, u32 dev_port,
 		local_entry.dev = dev;
 		local_entry.dev_port = dev_port;
 		local_entry.flags = P_ALLOCATED;
-		for (i = 0; i < FMX_MAX_PORT_PER_EP; i++) {
+		for (i = 0; i < PRX300_MAX_PORT_PER_EP; i++) {
 			if (pmac[i] == CBM_PORT_INVALID)
 				continue;
 			cnt = i;
@@ -2414,7 +2416,7 @@ static inline int is_bm(u32 desc2)
 {
 	int i = 0;
 
-	for (i = 0; i < CQM_FMX_NUM_BM_POOLS; i++) {
+	for (i = 0; i < CQM_PRX300_NUM_BM_POOLS; i++) {
 		if ((desc2 >= bm_pool_conf[i].pool_start_low) &&
 		    (desc2 <= bm_pool_conf[i].pool_end_low))
 			return 1;
@@ -2742,7 +2744,7 @@ static void dump_cqem_basic_regs(u32 flag)
 	void *c_base = cqm_ctrl->cqm;
 
 	dev_dbg(cqm_ctrl->dev, "dump cqem basic registers\n");
-	for (i = 0; i < FMX_MAX_INTR_LINE; i++) {
+	for (i = 0; i < PRX300_MAX_INTR_LINE; i++) {
 		print_reg("CBM_IRNCR\n", c_base + CQM_INT_LINE(i, cbm_irncr));
 		print_reg("CBM_IRNEN\n", c_base + CQM_INT_LINE(i, cbm_irnen));
 		print_reg("IGP_IRNCR\n", c_base + CQM_INT_LINE(i, igp_irncr));
@@ -2925,8 +2927,8 @@ static int bm_init(struct platform_device *pdev)
 	u32 start_low;
 
 	for (i = 0; i < cqm_ctrl->num_pools; i++) {
-		result = pool_config(pdev, i, cqm_ctrl->fmx_pool_size[i],
-				     cqm_ctrl->fmx_pool_ptrs[i]);
+		result = pool_config(pdev, i, cqm_ctrl->prx300_pool_size[i],
+				     cqm_ctrl->prx300_pool_ptrs[i]);
 		if (result)
 			panic("pool %d allocation failed\n", i);
 	}
@@ -2952,7 +2954,7 @@ static int bm_init(struct platform_device *pdev)
 		bmgr_pool_configure(&p_params, &i);
 	}
 
-	for (j = 0; j < CQM_FMX_NUM_BM_POLICY; j++)
+	for (j = 0; j < CQM_PRX300_NUM_BM_POLICY; j++)
 		bmgr_policy_configure(&p_param[j], &i);
 
 	return CBM_SUCCESS;
@@ -2989,7 +2991,7 @@ static int setup_enq_dma_desc(int pid, u32 desc_num, s32 type,
 			buf = (u32)cqm_fsqm_buff_alloc(cpu, CQM_FSQM_POLICY);
 			data_offset = 0;
 		} else {
-			buf = (u32)cqm_buff_alloc_by_policy_fmx(cpu, type,
+			buf = (u32)cqm_buff_alloc_by_policy_prx300(cpu, type,
 								tmp_bm.policy);
 			if (!buf) {
 				dev_err(cqm_ctrl->dev, "Cannot alloc buffer from CBM!!!\n");
@@ -3494,10 +3496,10 @@ static const struct cbm_ops cqm_ops = {
 	.cbm_igp_delay_set = cqm_igp_delay_set,
 	.cbm_igp_delay_get = cqm_igp_delay_get,
 	.cbm_buffer_alloc = cqm_buffer_alloc_by_size,
-	.cqm_buffer_alloc_by_policy = cqm_buff_alloc_by_policy_fmx,
+	.cqm_buffer_alloc_by_policy = cqm_buff_alloc_by_policy_prx300,
 	.cbm_buffer_free = cqm_buffer_free,
 	.cbm_cpu_pkt_tx = cqm_cpu_pkt_tx,
-	.check_ptr_validation = check_ptr_validation_falconmx,
+	.check_ptr_validation = check_ptr_validation_prx300,
 	.cbm_build_skb = build_skb_cqm,
 	.cbm_queue_map_get = queue_map_get,
 	.cbm_queue_map_set = queue_map_set,
@@ -3516,12 +3518,12 @@ static const struct cbm_ops cqm_ops = {
 	.pib_ovflw_cmd_get = pib_ovflw_cmd_get,
 	.pib_illegal_cmd_get = pib_illegal_cmd_get,
 	.pon_deq_cntr_get = pon_deq_cntr_get,
-	.set_lookup_qid_via_index = set_lookup_qid_via_index_fmx,
-	.get_lookup_qid_via_index = get_lookup_qid_via_idx_fmx,
+	.set_lookup_qid_via_index = set_lookup_qid_via_index_prx300,
+	.get_lookup_qid_via_index = get_lookup_qid_via_idx_prx300,
 };
 
-static const struct of_device_id cqm_falconmx_match[] = {
-	{ .compatible = "intel,falconmx-cqm", .data = &g_fmx_ctrl},
+static const struct of_device_id cqm_prx300_match[] = {
+	{ .compatible = "intel,prx300-cqm", .data = &g_prx300_ctrl},
 	{},
 };
 
@@ -3548,10 +3550,10 @@ static int conf_bm(struct cqm_data *pdata)
 	int i, j, result = CBM_FAILURE;
 
 	/* copy BM pool and policy from dts*/
-	memcpy(cqm_ctrl->fmx_pool_ptrs, pdata->pool_ptrs
-		, sizeof(cqm_ctrl->fmx_pool_ptrs));
-	memcpy(cqm_ctrl->fmx_pool_size, pdata->pool_size
-		, sizeof(cqm_ctrl->fmx_pool_size));
+	memcpy(cqm_ctrl->prx300_pool_ptrs, pdata->pool_ptrs
+		, sizeof(cqm_ctrl->prx300_pool_ptrs));
+	memcpy(cqm_ctrl->prx300_pool_size, pdata->pool_size
+		, sizeof(cqm_ctrl->prx300_pool_size));
 	cqm_ctrl->num_pools = pdata->num_pools;
 	/* Pool Index loop*/
 	for (i = 0; i < pdata->num_pools; i++) {
@@ -3566,21 +3568,21 @@ static int conf_bm(struct cqm_data *pdata)
 		/* Config pool size */
 		switch (i) {
 		case CQM_SIZE0_BUF_SIZE:
-			p_param[i].max_allowed = cqm_ctrl->fmx_pool_ptrs[i];
+			p_param[i].max_allowed = cqm_ctrl->prx300_pool_ptrs[i];
 			p_param[i].min_guaranteed = 0x40;
 			break;
 		case CQM_SIZE1_BUF_SIZE:
-			p_param[i].max_allowed = (cqm_ctrl->fmx_pool_ptrs[i]
+			p_param[i].max_allowed = (cqm_ctrl->prx300_pool_ptrs[i]
 						  * 4) / 5;
 			p_param[i].min_guaranteed = 0x100;
 			break;
 		case CQM_SIZE2_BUF_SIZE:
-			p_param[i].max_allowed = (cqm_ctrl->fmx_pool_ptrs[i]
+			p_param[i].max_allowed = (cqm_ctrl->prx300_pool_ptrs[i]
 						  * 4) / 5;
 			p_param[i].min_guaranteed = 0x80;
 			break;
 		case CQM_SIZE3_BUF_SIZE:
-			p_param[i].max_allowed = (cqm_ctrl->fmx_pool_ptrs[i]
+			p_param[i].max_allowed = (cqm_ctrl->prx300_pool_ptrs[i]
 						  * 4) / 5;
 			p_param[i].min_guaranteed = 0x40;
 			break;
@@ -3596,15 +3598,15 @@ static int conf_bm(struct cqm_data *pdata)
 		for (j = 0; j < p_param[i].num_pools_in_policy; j++) {
 			p_param[i].pools_in_policy[j].pool_id = (i + j);
 			p_param[i].pools_in_policy[j].max_allowed =
-			cqm_ctrl->fmx_pool_ptrs[i + j];
+			cqm_ctrl->prx300_pool_ptrs[i + j];
 		}
 	}
 	return CBM_SUCCESS;
 }
 
-static int cqm_falconmx_probe(struct platform_device *pdev)
+static int cqm_prx300_probe(struct platform_device *pdev)
 {
-	struct resource *res[FMX_MAX_RESOURCE] = {NULL};
+	struct resource *res[PRX300_MAX_RESOURCE] = {NULL};
 	int i;
 	unsigned long sys_flag;
 	struct cqm_data *pdata = NULL;
@@ -3615,7 +3617,7 @@ static int cqm_falconmx_probe(struct platform_device *pdev)
 
 	memset(&cqm_dbg_cntrs, 0, sizeof(cqm_dbg_cntrs));
 	pdata = platform_get_drvdata(pdev);
-	match = of_match_device(cqm_falconmx_match, &pdev->dev);
+	match = of_match_device(cqm_prx300_match, &pdev->dev);
 	if (!match) {
 		dev_err(&pdev->dev, "Error: No matching device found\n");
 		return -ENODEV;
@@ -3687,9 +3689,9 @@ static int cqm_falconmx_probe(struct platform_device *pdev)
 	cqm_ctrl->syscfg = pdata->syscfg;
 	cqm_ctrl->force_xpcs = pdata->force_xpcs;
 
-	/* check fmx pool and policy */
-	if (pdata->num_pools > CQM_FMX_NUM_BM_POOLS) {
-		pr_err("fmx pools %u\n", pdata->num_pools);
+	/* check prx300 pool and policy */
+	if (pdata->num_pools > CQM_PRX300_NUM_BM_POOLS) {
+		pr_err("prx300 pools %u\n", pdata->num_pools);
 		return CBM_FAILURE;
 	}
 
@@ -3700,12 +3702,12 @@ static int cqm_falconmx_probe(struct platform_device *pdev)
 
 	spin_lock_irqsave(&cqm_qidt_lock, sys_flag);
 	for (i = 0; i < CQM_QIDT_DW_NUM; i++) {
-		g_cbm_qidt_mirror[i].qidt_shadow = FMX_CQM_DROP_INIT;
-		cbm_w32((cqm_ctrl->qidt + i * 4), FMX_CQM_DROP_INIT);
+		g_cbm_qidt_mirror[i].qidt_shadow = PRX300_CQM_DROP_INIT;
+		cbm_w32((cqm_ctrl->qidt + i * 4), PRX300_CQM_DROP_INIT);
 	}
 	for (i = 0; i < CQM_QID2EP_DW_NUM; i++)
 		cbm_w32((cqm_ctrl->qid2ep + i * 4), 0x0);
-	for (i = 0; i < FMX_MAX_PON_PORTS; i++)
+	for (i = 0; i < PRX300_MAX_PON_PORTS; i++)
 		cbm_w32((cqm_ctrl->pon_dqm_cntr + i * 4), 0x0);
 	spin_unlock_irqrestore(&cqm_qidt_lock, sys_flag);
 	bm_init(pdev);
@@ -3815,23 +3817,23 @@ static int cqm_falconmx_probe(struct platform_device *pdev)
 	return 0;
 }
 
-static int cqm_falconmx_release(struct platform_device *pdev)
+static int cqm_prx300_release(struct platform_device *pdev)
 {
 	return 0;
 }
 
-static struct platform_driver cqm_falconmx_driver = {
-	.probe = cqm_falconmx_probe,
-	.remove = cqm_falconmx_release,
+static struct platform_driver cqm_prx300_driver = {
+	.probe = cqm_prx300_probe,
+	.remove = cqm_prx300_release,
 	.driver = {
-		.name = FALCON_DEV_NAME,
+		.name = PRX300_DEV_NAME,
 		.owner = THIS_MODULE,
 	},
 };
 
-int __init cqm_falconmx_init(void)
+int __init cqm_prx300_init(void)
 {
-	return platform_driver_register(&cqm_falconmx_driver);
+	return platform_driver_register(&cqm_prx300_driver);
 }
 
-arch_initcall(cqm_falconmx_init);
+arch_initcall(cqm_prx300_init);
diff --git a/drivers/net/ethernet/lantiq/cqm/falconmx/cqm.h b/drivers/net/ethernet/lantiq/cqm/prx300/cqm.h
similarity index 96%
rename from drivers/net/ethernet/lantiq/cqm/falconmx/cqm.h
rename to drivers/net/ethernet/lantiq/cqm/prx300/cqm.h
index 9688ca9be82e..b6f2c9cdc429 100644
--- a/drivers/net/ethernet/lantiq/cqm/falconmx/cqm.h
+++ b/drivers/net/ethernet/lantiq/cqm/prx300/cqm.h
@@ -40,8 +40,8 @@
 #define FLAG_PIB_BYPASS		BIT(5)
 #define FLAG_PIB_DELAY		BIT(6)
 #define DMA_PORT_FOR_FLUSH 25
-#define FMX_CQM_DROP_Q		0x0
-#define FMX_CQM_Q_MASK		0xff
+#define PRX300_CQM_DROP_Q	0x0
+#define PRX300_CQM_Q_MASK	0xff
 
 /***********************
  * ENUM
@@ -252,7 +252,7 @@ enum CQM_QOS_LINK_MODE {
 #define CQM_MAX_POOL_NUM (CQM_FSQM_POOL + 1)
 #define CQM_MAX_POLICY_NUM (CQM_FSQM_POLICY + 1)
 
-#define TOT_DMA_HNDL (CQM_FMX_NUM_BM_POOLS + 1)
+#define TOT_DMA_HNDL (CQM_PRX300_NUM_BM_POOLS + 1)
 /*************************
  * Structure definition
  *************************/
@@ -515,7 +515,7 @@ struct cqm_pmac_port_map {
 	struct net_device *dev;
 	u32 dev_port;
 	u32 pmac;
-	u32 egp_port_map[FMX_MAX_PORT_MAP];/*bit map to egp port*/
+	u32 egp_port_map[PRX300_MAX_PORT_MAP];/*bit map to egp port*/
 	u32 qid_num;/*queue numbers allocated to that pmac port*/
 	u32 qids[16];/*qid array*/
 	/* e.g. DP_F_FAST_ETH_LAN/DP_F_FAST_ETH_WAN/DP_F_DIRECT/
@@ -561,8 +561,8 @@ struct cqm_ctrl {
 	int num_intrs;
 	const struct cqm_config *cqm_cfg;
 	struct clk *cbm_clk;
-	u32 cbm_irq[FMX_MAX_INTR_LINE];
-	u32 cbm_line[FMX_MAX_INTR_LINE];
+	u32 cbm_irq[PRX300_MAX_INTR_LINE];
+	u32 cbm_line[PRX300_MAX_INTR_LINE];
 	u32 cpu_port_alloc;
 	struct tasklet_struct cqm_tasklet[NR_CPUS];
 #ifdef CPU_POOL_ALLOWED
@@ -575,7 +575,7 @@ struct cqm_ctrl {
 #endif
 	const struct cbm_ops *cqm_ops;
 	void *cqm_qmgr_buf_base;
-	void *bm_buf_base[CQM_FMX_NUM_BM_POOLS];
+	void *bm_buf_base[CQM_PRX300_NUM_BM_POOLS];
 	u32 ifmux_reg_offset;
 	struct regmap *syscfg;
 	bool force_xpcs;
@@ -596,8 +596,8 @@ struct cqm_ctrl {
 	dma_addr_t dma_hndl_p[TOT_DMA_HNDL];
 	struct dentry *debugfs;
 	const char *name;
-	u32 fmx_pool_ptrs[CQM_FMX_NUM_BM_POOLS];
-	u32 fmx_pool_size[CQM_FMX_NUM_BM_POOLS];
+	u32 prx300_pool_ptrs[CQM_PRX300_NUM_BM_POOLS];
+	u32 prx300_pool_size[CQM_PRX300_NUM_BM_POOLS];
 };
 
 struct cqm_buf_dbg_cnt {
diff --git a/drivers/net/ethernet/lantiq/cqm/falconmx/cqm_config.c b/drivers/net/ethernet/lantiq/cqm/prx300/cqm_config.c
similarity index 95%
rename from drivers/net/ethernet/lantiq/cqm/falconmx/cqm_config.c
rename to drivers/net/ethernet/lantiq/cqm/prx300/cqm_config.c
index 94e2d80602fd..b8d3800a7673 100644
--- a/drivers/net/ethernet/lantiq/cqm/falconmx/cqm_config.c
+++ b/drivers/net/ethernet/lantiq/cqm/prx300/cqm_config.c
@@ -2,7 +2,7 @@
 #include <net/lantiq_cbm_api.h>
 #include "cqm_config.h"
 
-struct cqm_bm_pool_config bm_pool_conf[CQM_FMX_NUM_POOLS] = {
+struct cqm_bm_pool_config bm_pool_conf[CQM_PRX300_NUM_POOLS] = {
 	{
 	.buf_type = REQ_SIZE0_BUF,
 	.segment_mask = 0xFFFFF800,
@@ -47,7 +47,7 @@ struct cqm_bm_pool_config bm_pool_conf[CQM_FMX_NUM_POOLS] = {
 	},
 };
 
-const struct cqm_config falcon_cqm_config[] = {
+const struct cqm_config prx300_cqm_config[] = {
 	{
 	.type = DQM_CPU_TYPE,
 	.data.dqm_cpu.port = 0,
@@ -182,13 +182,13 @@ const struct cqm_config falcon_cqm_config[] = {
 	}
 };
 
-struct cqm_ctrl g_fmx_ctrl = {
+struct cqm_ctrl g_prx300_ctrl = {
 	.num_dqm_ports = CQM_DEQ_PORT_MAX,
 	.num_eqm_ports = CQM_ENQ_PORT_MAX,
 	.max_queues = 256,
-	.num_pools = CQM_FMX_NUM_POOLS,
+	.num_pools = CQM_PRX300_NUM_POOLS,
 	.num_intrs = 5,
-	.cqm_cfg = falcon_cqm_config,
+	.cqm_cfg = prx300_cqm_config,
 	.ifmux_reg_offset = 0x120,
 	.max_mem_alloc = 0,
 	.bm_buf_base[0] = NULL,
diff --git a/drivers/net/ethernet/lantiq/cqm/falconmx/cqm_config.h b/drivers/net/ethernet/lantiq/cqm/prx300/cqm_config.h
similarity index 68%
rename from drivers/net/ethernet/lantiq/cqm/falconmx/cqm_config.h
rename to drivers/net/ethernet/lantiq/cqm/prx300/cqm_config.h
index 8ece0cd9ecd3..7c0b9538f4a3 100644
--- a/drivers/net/ethernet/lantiq/cqm/falconmx/cqm_config.h
+++ b/drivers/net/ethernet/lantiq/cqm/prx300/cqm_config.h
@@ -3,13 +3,13 @@
 
 #include "../../ppv4/bm/pp_bm_drv.h"
 
-#define CQM_FMX_NUM_BM_POOLS	4
-#define CQM_FMX_NUM_POOLS	(CQM_FMX_NUM_BM_POOLS + 1)
-#define CQM_FMX_POOL_POL_HDR_SIZE	4
+#define CQM_PRX300_NUM_BM_POOLS	4
+#define CQM_PRX300_NUM_POOLS	(CQM_PRX300_NUM_BM_POOLS + 1)
+#define CQM_PRX300_POOL_POL_HDR_SIZE	4
 #define CQM_QIDT_DW_NUM	0x1000
 #define CQM_QID2EP_DW_NUM	0x100
 #define CQM_SRAM_SIZE	0xC0000
-#define CQM_SRAM_FRM_SIZE 128	
+#define CQM_SRAM_FRM_SIZE 128
 #define CQM_CPU_POOL_BUF_ALW_NUM	128
 #define CQM_SRAM_BASE	0x18D00000
 #define CQM_CPU_POOL 0
@@ -18,22 +18,22 @@
 #define CQM_FSQM_POLICY 7
 
 #define MAX_QOS_QUEUES 256
-#define FMX_MAX_PORT_PER_EP 1
-#define FMX_MAX_PORT_MAP 2
-#define FMX_MAX_PON_PORTS 64
-#define CQM_FMX_NUM_BM_POLICY 1
-#define CQM_FMX_MAX_BM_POLICY 4
-#define FMX_SKB_PTR_SIZE 4
-#define FMX_WAN_AON_MODE BIT(0)
-#define FMX_WAN_PON_MODE 0
+#define PRX300_MAX_PORT_PER_EP 1
+#define PRX300_MAX_PORT_MAP 2
+#define PRX300_MAX_PON_PORTS 64
+#define CQM_PRX300_NUM_BM_POLICY 1
+#define CQM_PRX300_MAX_BM_POLICY 4
+#define PRX300_SKB_PTR_SIZE 4
+#define PRX300_WAN_AON_MODE BIT(0)
+#define PRX300_WAN_PON_MODE 0
 
-#define FMX_MAX_RESOURCE 16
-#define FMX_MAX_INTR_LINE 8
-#define FMX_SEL7TO4_POS 10
-#define FMX_MPE2_POS 9
-#define FMX_MPE1_POS 8
-#define FMX_EP_POS 4
-#define FMX_SEL3TO0_POS 0
+#define PRX300_MAX_RESOURCE 16
+#define PRX300_MAX_INTR_LINE 8
+#define PRX300_SEL7TO4_POS 10
+#define PRX300_MPE2_POS 9
+#define PRX300_MPE1_POS 8
+#define PRX300_EP_POS 4
+#define PRX300_SEL3TO0_POS 0
 enum {
 	REQ_FSQM_BUF = 0,
 	REQ_SIZE0_BUF = 1,
@@ -115,8 +115,8 @@ struct cqm_bm_pool_config {
 	unsigned int buf_type;
 };
 
-extern const struct cqm_config falcon_cqm_config[];
-extern struct cqm_ctrl g_fmx_ctrl;
-extern struct cqm_bm_pool_config bm_pool_conf[CQM_FMX_NUM_POOLS];
+extern const struct cqm_config prx300_cqm_config[];
+extern struct cqm_ctrl g_prx300_ctrl;
+extern struct cqm_bm_pool_config bm_pool_conf[CQM_PRX300_NUM_POOLS];
 
 #endif /* __CQM_CONFIG_H__ */
diff --git a/drivers/net/ethernet/lantiq/cqm/falconmx/cqm_proc.c b/drivers/net/ethernet/lantiq/cqm/prx300/cqm_debugfs.c
similarity index 99%
rename from drivers/net/ethernet/lantiq/cqm/falconmx/cqm_proc.c
rename to drivers/net/ethernet/lantiq/cqm/prx300/cqm_debugfs.c
index 66c9f81d73cf..9dfcdb7bf2ea 100644
--- a/drivers/net/ethernet/lantiq/cqm/falconmx/cqm_proc.c
+++ b/drivers/net/ethernet/lantiq/cqm/prx300/cqm_debugfs.c
@@ -1,5 +1,5 @@
 #include <linux/klogging.h>
-#include "cqm_proc.h"
+#include "cqm_debugfs.h"
 #include <net/datapath_proc_api.h>
 #include <net/lantiq_cbm_api.h>
 #include "cqm.h"
diff --git a/drivers/net/ethernet/lantiq/cqm/falconmx/cqm_proc.h b/drivers/net/ethernet/lantiq/cqm/prx300/cqm_debugfs.h
similarity index 100%
rename from drivers/net/ethernet/lantiq/cqm/falconmx/cqm_proc.h
rename to drivers/net/ethernet/lantiq/cqm/prx300/cqm_debugfs.h
diff --git a/drivers/net/ethernet/lantiq/cqm/falconmx/reg/buffer_manager.h b/drivers/net/ethernet/lantiq/cqm/prx300/reg/buffer_manager.h
similarity index 100%
rename from drivers/net/ethernet/lantiq/cqm/falconmx/reg/buffer_manager.h
rename to drivers/net/ethernet/lantiq/cqm/prx300/reg/buffer_manager.h
diff --git a/drivers/net/ethernet/lantiq/cqm/falconmx/reg/cbm_ls.h b/drivers/net/ethernet/lantiq/cqm/prx300/reg/cbm_ls.h
similarity index 100%
rename from drivers/net/ethernet/lantiq/cqm/falconmx/reg/cbm_ls.h
rename to drivers/net/ethernet/lantiq/cqm/prx300/reg/cbm_ls.h
diff --git a/drivers/net/ethernet/lantiq/cqm/falconmx/reg/cqem.h b/drivers/net/ethernet/lantiq/cqm/prx300/reg/cqem.h
similarity index 100%
rename from drivers/net/ethernet/lantiq/cqm/falconmx/reg/cqem.h
rename to drivers/net/ethernet/lantiq/cqm/prx300/reg/cqem.h
diff --git a/drivers/net/ethernet/lantiq/cqm/falconmx/reg/cqem_deq.h b/drivers/net/ethernet/lantiq/cqm/prx300/reg/cqem_deq.h
similarity index 100%
rename from drivers/net/ethernet/lantiq/cqm/falconmx/reg/cqem_deq.h
rename to drivers/net/ethernet/lantiq/cqm/prx300/reg/cqem_deq.h
diff --git a/drivers/net/ethernet/lantiq/cqm/falconmx/reg/cqem_desc64b.h b/drivers/net/ethernet/lantiq/cqm/prx300/reg/cqem_desc64b.h
similarity index 100%
rename from drivers/net/ethernet/lantiq/cqm/falconmx/reg/cqem_desc64b.h
rename to drivers/net/ethernet/lantiq/cqm/prx300/reg/cqem_desc64b.h
diff --git a/drivers/net/ethernet/lantiq/cqm/falconmx/reg/cqem_enq.h b/drivers/net/ethernet/lantiq/cqm/prx300/reg/cqem_enq.h
similarity index 100%
rename from drivers/net/ethernet/lantiq/cqm/falconmx/reg/cqem_enq.h
rename to drivers/net/ethernet/lantiq/cqm/prx300/reg/cqem_enq.h
diff --git a/drivers/net/ethernet/lantiq/cqm/falconmx/reg/cqem_pon_ip_if.h b/drivers/net/ethernet/lantiq/cqm/prx300/reg/cqem_pon_ip_if.h
similarity index 100%
rename from drivers/net/ethernet/lantiq/cqm/falconmx/reg/cqem_pon_ip_if.h
rename to drivers/net/ethernet/lantiq/cqm/prx300/reg/cqem_pon_ip_if.h
diff --git a/drivers/net/ethernet/lantiq/cqm/falconmx/reg/fsqm.h b/drivers/net/ethernet/lantiq/cqm/prx300/reg/fsqm.h
similarity index 100%
rename from drivers/net/ethernet/lantiq/cqm/falconmx/reg/fsqm.h
rename to drivers/net/ethernet/lantiq/cqm/prx300/reg/fsqm.h
diff --git a/drivers/net/ethernet/lantiq/cqm/falconmx/reg/qos_wred.h b/drivers/net/ethernet/lantiq/cqm/prx300/reg/qos_wred.h
similarity index 100%
rename from drivers/net/ethernet/lantiq/cqm/falconmx/reg/qos_wred.h
rename to drivers/net/ethernet/lantiq/cqm/prx300/reg/qos_wred.h
diff --git a/drivers/net/ethernet/lantiq/cqm/falconmx/reg/tx_manager.h b/drivers/net/ethernet/lantiq/cqm/prx300/reg/tx_manager.h
similarity index 100%
rename from drivers/net/ethernet/lantiq/cqm/falconmx/reg/tx_manager.h
rename to drivers/net/ethernet/lantiq/cqm/prx300/reg/tx_manager.h
diff --git a/drivers/net/ethernet/lantiq/cqm/falconmx/reg/txpush_dqm.h b/drivers/net/ethernet/lantiq/cqm/prx300/reg/txpush_dqm.h
similarity index 100%
rename from drivers/net/ethernet/lantiq/cqm/falconmx/reg/txpush_dqm.h
rename to drivers/net/ethernet/lantiq/cqm/prx300/reg/txpush_dqm.h
diff --git a/drivers/net/ethernet/lantiq/datapath/datapath.h b/drivers/net/ethernet/lantiq/datapath/datapath.h
index 48de260c9ce9..66206e58d310 100644
--- a/drivers/net/ethernet/lantiq/datapath/datapath.h
+++ b/drivers/net/ethernet/lantiq/datapath/datapath.h
@@ -118,7 +118,7 @@
 #define IFNAMSIZ 16
 #define DP_MAX_HW_CAP 4
 
-#if (!IS_ENABLED(CONFIG_FALCONMX_CQM))
+#if (!IS_ENABLED(CONFIG_PRX300_CQM))
 #define DP_SPIN_LOCK 
 #endif
 #ifdef DP_SPIN_LOCK
diff --git a/drivers/net/ethernet/lantiq/datapath/datapath_soc.c b/drivers/net/ethernet/lantiq/datapath/datapath_soc.c
index 1bcba5cf9dae..90f07fb7823b 100644
--- a/drivers/net/ethernet/lantiq/datapath/datapath_soc.c
+++ b/drivers/net/ethernet/lantiq/datapath/datapath_soc.c
@@ -18,7 +18,7 @@
 #include "datapath_instance.h"
 #include "datapath_swdev_api.h"
 
-#ifdef CONFIG_FALCONMX_CQM
+#ifdef CONFIG_PRX300_CQM
 #define LTQ_DATAPATH_SOC_FALCON_MX
 #endif
 
@@ -26,7 +26,7 @@ int request_dp(u32 flag)
 {
 	struct dp_inst_info info;
 
-#if IS_ENABLED(CONFIG_FALCONMX_CQM) || \
+#if IS_ENABLED(CONFIG_PRX300_CQM) || \
 	IS_ENABLED(CONFIG_LTQ_DATAPATH_DDR_SIMULATE_GSWIP31) /*testing only */
 	info.type = GSWIP31_TYPE;
 	info.ver = GSWIP31_VER;
diff --git a/drivers/net/ethernet/lantiq/datapath/gswip31/Kconfig b/drivers/net/ethernet/lantiq/datapath/gswip31/Kconfig
index a727f749b2c5..8f0e6c45a532 100644
--- a/drivers/net/ethernet/lantiq/datapath/gswip31/Kconfig
+++ b/drivers/net/ethernet/lantiq/datapath/gswip31/Kconfig
@@ -1,7 +1,7 @@
 menuconfig LTQ_DATAPATH_HAL_GSWIP31
 	bool "Datapath HAL_GSWIP31"
 	default y
-	depends on LTQ_DATAPATH && FALCONMX_CQM
+	depends on LTQ_DATAPATH && PRX300_CQM
 	---help---
 	  Datapath Lib is to provide common rx/tx wrapper Lib without taking
 	  care of much HW knowledge and also provide common interface for legacy
diff --git a/include/net/datapath_api.h b/include/net/datapath_api.h
index 77e143ab3b0b..92b3fa6bc54b 100644
--- a/include/net/datapath_api.h
+++ b/include/net/datapath_api.h
@@ -15,7 +15,7 @@
 #include <linux/atmdev.h>
 
 #ifndef DATAPATH_HAL_LAYER
-#if IS_ENABLED(CONFIG_FALCONMX_CQM) || \
+#if IS_ENABLED(CONFIG_PRX300_CQM) || \
 	IS_ENABLED(CONFIG_LTQ_DATAPATH_DDR_SIMULATE_GSWIP31) /*testing only */
 #include <net/datapath_api_gswip31.h>
 #else /*GRX500 GSWIP30*/
