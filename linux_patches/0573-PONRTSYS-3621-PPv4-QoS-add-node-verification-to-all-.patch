From d5e6f0c52f92c7ef8675098967ac57290d4d72ea Mon Sep 17 00:00:00 2001
From: ofirbitt <ofir1.bitton@intel.com>
Date: Thu, 2 May 2019 10:56:32 +0300
Subject: [PATCH] PONRTSYS-3621: PPv4 QoS - add node verification to all APIs

---
 .../net/ethernet/lantiq/ppv4/qos/pp_qos_common.h   |  21 ++-
 drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_main.c | 188 +++++++++++++++++++--
 .../net/ethernet/lantiq/ppv4/qos/pp_qos_utils.c    |  27 ++-
 .../net/ethernet/lantiq/ppv4/qos/pp_qos_utils.h    |   3 +
 4 files changed, 210 insertions(+), 29 deletions(-)

diff --git a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_common.h b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_common.h
index 9931caa7d5df..5905b90e6b4c 100644
--- a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_common.h
+++ b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_common.h
@@ -60,30 +60,35 @@ extern struct device *cur_dev;
 #define QOS_LOG_CRIT(format, arg...) \
 do { \
 	if (cur_dev) \
-		dev_crit(cur_dev, format, ##arg); \
+		dev_crit(cur_dev, "%s:%d: " format, __func__, __LINE__, \
+			##arg); \
 	else \
-		pr_crit(format, ##arg); \
+		pr_crit("%s:%d: " format, __func__, __LINE__, \
+			##arg); \
 } while (0)
 #define QOS_LOG_ERR(format, arg...) \
 do { \
 	if (cur_dev) \
-		dev_err(cur_dev, format, ##arg); \
+		dev_err(cur_dev, "%s:%d: " format, __func__, __LINE__, \
+			##arg); \
 	else \
-		pr_err(format, ##arg); \
+		pr_err("%s:%d: " format, __func__, __LINE__, ##arg); \
 } while (0)
 #define QOS_LOG_INFO(format, arg...) \
 do { \
 	if (cur_dev) \
-		dev_info(cur_dev, format, ##arg); \
+		dev_info(cur_dev, "%s:%d: " format, __func__, __LINE__, \
+			##arg); \
 	else \
-		pr_info(format, ##arg); \
+		pr_info("%s:%d: " format, __func__, __LINE__, ##arg); \
 } while (0)
 #define QOS_LOG_DEBUG(format, arg...) \
 do { \
 	if (cur_dev) \
-		dev_dbg(cur_dev, format, ##arg); \
+		dev_dbg(cur_dev, "%s:%d: " format, __func__, __LINE__, \
+			##arg); \
 	else \
-		pr_debug(format, ##arg); \
+		pr_debug("%s:%d: " format, __func__, __LINE__, ##arg); \
 } while (0)
 
 #endif
diff --git a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_main.c b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_main.c
index 5e3b7a976542..f1378b93190f 100644
--- a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_main.c
+++ b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_main.c
@@ -140,6 +140,28 @@ struct qos_node *get_conform_node(const struct pp_qos_dev *qdev,
 	return node;
 }
 
+static int is_node_configured(const struct pp_qos_dev *qdev,
+			      unsigned int id, bool *configured)
+{
+	unsigned int phy;
+
+	if (!QOS_ID_VALID(id)) {
+		QOS_LOG_ERR("Illegal id %u\n", id);
+		return -EINVAL;
+	}
+
+	phy = get_phy_from_id(qdev->mapping, id);
+	if (QOS_PHY_UNKNOWN(phy)) {
+		*configured = false;
+	} else if (QOS_PHY_VALID(phy)) {
+		*configured = true;
+	} else {
+		QOS_LOG_ERR("Illegal phy %u\n", phy);
+		return -EINVAL;
+	}
+
+	return 0;
+}
 /******************************************************************************/
 /*                                 API                                        */
 /******************************************************************************/
@@ -266,8 +288,9 @@ int pp_qos_port_enable(struct pp_qos_dev *qdev, unsigned int id)
 
 int pp_qos_port_block(struct pp_qos_dev *qdev, unsigned int id)
 {
-	int rc;
 	const struct qos_node *node;
+	bool node_configured;
+	int rc;
 
 	QOS_LOCK(qdev);
 	PP_QOS_ENTER_FUNC();
@@ -276,6 +299,12 @@ int pp_qos_port_block(struct pp_qos_dev *qdev, unsigned int id)
 		goto out;
 	}
 
+	rc = is_node_configured(qdev, id, &node_configured);
+	if (rc || !node_configured) {
+		rc = -EINVAL;
+		goto out;
+	}
+
 	node = get_conform_node(qdev, id, node_port);
 	if (!node) {
 		rc = -EINVAL;
@@ -294,8 +323,9 @@ int pp_qos_port_block(struct pp_qos_dev *qdev, unsigned int id)
 
 int pp_qos_port_unblock(struct pp_qos_dev *qdev, unsigned int id)
 {
-	int rc;
 	const struct qos_node *node;
+	bool node_configured;
+	int rc;
 
 	QOS_LOCK(qdev);
 	PP_QOS_ENTER_FUNC();
@@ -304,6 +334,12 @@ int pp_qos_port_unblock(struct pp_qos_dev *qdev, unsigned int id)
 		goto out;
 	}
 
+	rc = is_node_configured(qdev, id, &node_configured);
+	if (rc || !node_configured) {
+		rc = -EINVAL;
+		goto out;
+	}
+
 	node = get_conform_node(qdev, id, node_port);
 	if (!node) {
 		rc = -EINVAL;
@@ -322,8 +358,9 @@ int pp_qos_port_unblock(struct pp_qos_dev *qdev, unsigned int id)
 
 int pp_qos_port_flush(struct pp_qos_dev *qdev, unsigned int id)
 {
-	int rc;
 	const struct qos_node *node;
+	bool node_configured;
+	int rc;
 
 	QOS_LOCK(qdev);
 	PP_QOS_ENTER_FUNC();
@@ -331,6 +368,13 @@ int pp_qos_port_flush(struct pp_qos_dev *qdev, unsigned int id)
 		rc = -EINVAL;
 		goto out;
 	}
+
+	rc = is_node_configured(qdev, id, &node_configured);
+	if (rc || !node_configured) {
+		rc = -EINVAL;
+		goto out;
+	}
+
 	node = get_conform_node(qdev, id, node_port);
 	if (!node) {
 		rc = -EINVAL;
@@ -346,9 +390,10 @@ int pp_qos_port_flush(struct pp_qos_dev *qdev, unsigned int id)
 
 int pp_qos_port_remove(struct pp_qos_dev *qdev, unsigned int id)
 {
-	int rc;
 	const struct qos_node *node;
+	bool node_configured;
 	unsigned int phy;
+	int rc;
 
 	QOS_LOCK(qdev);
 	PP_QOS_ENTER_FUNC();
@@ -356,6 +401,17 @@ int pp_qos_port_remove(struct pp_qos_dev *qdev, unsigned int id)
 		rc = -EINVAL;
 		goto out;
 	}
+
+	rc = is_node_configured(qdev, id, &node_configured);
+	if (rc)
+		goto out;
+
+	/* If node is not configured just release id */
+	if (!node_configured) {
+		release_id(qdev, id);
+		goto out;
+	}
+
 	node = get_conform_node(qdev, id, node_port);
 	if (!node) {
 		rc = -EINVAL;
@@ -376,10 +432,16 @@ static int _pp_qos_port_conf_get(
 		struct pp_qos_port_conf *conf)
 {
 	const struct qos_node *node;
+	bool node_configured;
+	int rc;
 
 	if (conf == NULL)
 		return -EINVAL;
 
+	rc = is_node_configured(qdev, id, &node_configured);
+	if (rc || !node_configured)
+		return -EINVAL;
+
 	node = get_conform_node(qdev, id, node_port);
 	if (!node)
 		return -EINVAL;
@@ -425,9 +487,10 @@ int pp_qos_port_info_get(
 		unsigned int id,
 		struct pp_qos_port_info *info)
 {
-	int rc;
 	const struct qos_node *node;
+	bool node_configured;
 	unsigned int phy;
+	int rc;
 
 	QOS_LOCK(qdev);
 	PP_QOS_ENTER_FUNC();
@@ -440,6 +503,13 @@ int pp_qos_port_info_get(
 		rc = -EINVAL;
 		goto out;
 	}
+
+	rc = is_node_configured(qdev, id, &node_configured);
+	if (rc || !node_configured) {
+		rc = -EINVAL;
+		goto out;
+	}
+
 	node = get_conform_node(qdev, id, node_port);
 	if (!node) {
 		rc = -EINVAL;
@@ -464,9 +534,10 @@ int pp_qos_port_get_queues(
 		unsigned int size,
 		unsigned int *queues_num)
 {
-	int rc;
-	unsigned int phy;
 	const struct qos_node *node;
+	bool node_configured;
+	unsigned int phy;
+	int rc;
 
 	QOS_LOCK(qdev);
 	PP_QOS_ENTER_FUNC();
@@ -475,6 +546,12 @@ int pp_qos_port_get_queues(
 		goto out;
 	}
 
+	rc = is_node_configured(qdev, id, &node_configured);
+	if (rc || !node_configured) {
+		rc = -EINVAL;
+		goto out;
+	}
+
 	node = get_conform_node(qdev, id, node_port);
 	if (!node) {
 		rc = -EINVAL;
@@ -642,8 +719,9 @@ int pp_qos_port_stat_get(
 		unsigned int id,
 		struct pp_qos_port_stat *stat)
 {
-	int rc;
 	struct qos_node *node;
+	bool node_configured;
+	int rc;
 
 	QOS_LOCK(qdev);
 	PP_QOS_ENTER_FUNC();
@@ -652,6 +730,12 @@ int pp_qos_port_stat_get(
 		goto out;
 	}
 
+	rc = is_node_configured(qdev, id, &node_configured);
+	if (rc || !node_configured) {
+		rc = -EINVAL;
+		goto out;
+	}
+
 	node = get_conform_node(qdev, id, node_port);
 	if (!node) {
 		rc = -EINVAL;
@@ -964,11 +1048,17 @@ static int _pp_qos_queue_conf_get(
 		unsigned int id,
 		struct pp_qos_queue_conf *conf)
 {
+	bool node_configured;
 	const struct qos_node *node;
+	int rc;
 
 	if (conf == NULL)
 		return -EINVAL;
 
+	rc = is_node_configured(qdev, id, &node_configured);
+	if (rc || !node_configured)
+		return -EINVAL;
+
 	node = get_conform_node(qdev, id, node_queue);
 	if (!node)
 		return -EINVAL;
@@ -1016,6 +1106,7 @@ int pp_qos_queue_conf_get(
 		rc = -EINVAL;
 		goto out;
 	}
+
 	rc = _pp_qos_queue_conf_get(qdev, id, conf);
 	update_cmd_id(&qdev->drvcmds);
 	transmit_cmds(qdev);
@@ -1069,6 +1160,7 @@ static int _pp_qos_queue_remove(struct pp_qos_dev *qdev, int id)
  */
 int pp_qos_queue_remove(struct pp_qos_dev *qdev, unsigned int id)
 {
+	bool node_configured;
 	int rc;
 
 	QOS_LOCK(qdev);
@@ -1077,6 +1169,17 @@ int pp_qos_queue_remove(struct pp_qos_dev *qdev, unsigned int id)
 		rc = -EINVAL;
 		goto out;
 	}
+
+	rc = is_node_configured(qdev, id, &node_configured);
+	if (rc)
+		goto out;
+
+	/* If node is not configured just release id */
+	if (!node_configured) {
+		release_id(qdev, id);
+		goto out;
+	}
+
 	rc = _pp_qos_queue_remove(qdev, id);
 	update_cmd_id(&qdev->drvcmds);
 	transmit_cmds(qdev);
@@ -1365,6 +1468,7 @@ int _pp_qos_queue_flush(struct pp_qos_dev *qdev, unsigned int id)
  */
 int pp_qos_queue_flush(struct pp_qos_dev *qdev, unsigned int id)
 {
+	bool node_configured;
 	int rc;
 
 	QOS_LOCK(qdev);
@@ -1373,6 +1477,13 @@ int pp_qos_queue_flush(struct pp_qos_dev *qdev, unsigned int id)
 		rc = -EINVAL;
 		goto out;
 	}
+
+	rc = is_node_configured(qdev, id, &node_configured);
+	if (rc || !node_configured) {
+		rc = -EINVAL;
+		goto out;
+	}
+
 	rc = _pp_qos_queue_flush(qdev, id);
 	update_cmd_id(&qdev->drvcmds);
 	transmit_cmds(qdev);
@@ -1393,8 +1504,9 @@ int pp_qos_queue_flush(struct pp_qos_dev *qdev, unsigned int id)
 int pp_qos_queue_info_get(struct pp_qos_dev *qdev, unsigned int id,
 			  struct pp_qos_queue_info *info)
 {
-	int rc;
 	struct qos_node *node;
+	bool node_configured;
+	int rc;
 
 	QOS_LOCK(qdev);
 	PP_QOS_ENTER_FUNC();
@@ -1408,8 +1520,13 @@ int pp_qos_queue_info_get(struct pp_qos_dev *qdev, unsigned int id,
 		goto out;
 	}
 
-	node = get_conform_node(qdev, id, node_queue);
+	rc = is_node_configured(qdev, id, &node_configured);
+	if (rc || !node_configured) {
+		rc = -EINVAL;
+		goto out;
+	}
 
+	node = get_conform_node(qdev, id, node_queue);
 	if (!node) {
 		rc = -EINVAL;
 		goto out;
@@ -1438,8 +1555,9 @@ int pp_qos_queue_info_get(struct pp_qos_dev *qdev, unsigned int id,
 int pp_qos_queue_stat_get(struct pp_qos_dev *qdev, unsigned int id,
 			  struct pp_qos_queue_stat *stat)
 {
-	int rc;
 	struct qos_node *node;
+	bool node_configured;
+	int rc;
 
 	QOS_LOCK(qdev);
 	PP_QOS_ENTER_FUNC();
@@ -1448,6 +1566,12 @@ int pp_qos_queue_stat_get(struct pp_qos_dev *qdev, unsigned int id,
 		goto out;
 	}
 
+	rc = is_node_configured(qdev, id, &node_configured);
+	if (rc || !node_configured) {
+		rc = -EINVAL;
+		goto out;
+	}
+
 	node = get_conform_node(qdev, id, node_queue);
 	if (!node) {
 		rc = -EINVAL;
@@ -1600,6 +1724,7 @@ int pp_qos_sched_allocate(struct pp_qos_dev *qdev, unsigned int *id)
 int pp_qos_sched_remove(struct pp_qos_dev *qdev, unsigned int id)
 {
 	struct qos_node *node;
+	bool node_configured;
 	int rc;
 
 	QOS_LOCK(qdev);
@@ -1608,6 +1733,17 @@ int pp_qos_sched_remove(struct pp_qos_dev *qdev, unsigned int id)
 		rc = -EINVAL;
 		goto out;
 	}
+
+	rc = is_node_configured(qdev, id, &node_configured);
+	if (rc)
+		goto out;
+
+	/* If node is not configured just release id */
+	if (!node_configured) {
+		release_id(qdev, id);
+		goto out;
+	}
+
 	node = get_conform_node(qdev, id, node_sched);
 	if (!node)  {
 		rc = -EINVAL;
@@ -1774,6 +1910,7 @@ int pp_qos_sched_conf_get(
 		unsigned int id,
 		struct pp_qos_sched_conf *conf)
 {
+	bool node_configured;
 	int rc;
 
 	QOS_LOCK(qdev);
@@ -1782,6 +1919,13 @@ int pp_qos_sched_conf_get(
 		rc = -EINVAL;
 		goto out;
 	}
+
+	rc = is_node_configured(qdev, id, &node_configured);
+	if (rc || !node_configured) {
+		rc = -EINVAL;
+		goto out;
+	}
+
 	rc = _pp_qos_sched_conf_get(qdev, id, conf);
 	update_cmd_id(&qdev->drvcmds);
 	transmit_cmds(qdev);
@@ -1795,9 +1939,10 @@ int pp_qos_sched_info_get(
 		unsigned int id,
 		struct pp_qos_sched_info *info)
 {
-	int rc;
 	struct qos_node *node;
+	bool node_configured;
 	unsigned int phy;
+	int rc;
 
 	QOS_LOCK(qdev);
 	PP_QOS_ENTER_FUNC();
@@ -1811,6 +1956,12 @@ int pp_qos_sched_info_get(
 		goto out;
 	}
 
+	rc = is_node_configured(qdev, id, &node_configured);
+	if (rc || !node_configured) {
+		rc = -EINVAL;
+		goto out;
+	}
+
 	node = get_conform_node(qdev, id, node_sched);
 
 	if (!node) {
@@ -1834,9 +1985,10 @@ int pp_qos_sched_get_queues(struct pp_qos_dev *qdev, unsigned int id,
 			    uint16_t *queue_ids, unsigned int size,
 			    unsigned int *queues_num)
 {
-	int rc;
-	unsigned int phy;
 	const struct qos_node *node;
+	bool node_configured;
+	unsigned int phy;
+	int rc;
 
 	QOS_LOCK(qdev);
 	PP_QOS_ENTER_FUNC();
@@ -1845,6 +1997,12 @@ int pp_qos_sched_get_queues(struct pp_qos_dev *qdev, unsigned int id,
 		goto out;
 	}
 
+	rc = is_node_configured(qdev, id, &node_configured);
+	if (rc || !node_configured) {
+		rc = -EINVAL;
+		goto out;
+	}
+
 	node = get_conform_node(qdev, id, node_sched);
 	if (!node) {
 		rc = -EINVAL;
@@ -2207,7 +2365,7 @@ struct pp_qos_dev *create_qos_dev_desc(struct qos_dev_init_info *initinfo)
 		if (rc)
 			goto err;
 		qos_devs[id] = qdev;
-		
+
 		QOS_LOG_DEBUG("Initialized qos instance\nmax_port:\t\t%u\n",
 				qdev->max_port);
 		QOS_LOG_DEBUG("fw_logger_start:\t0x%08X\n",
diff --git a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_utils.c b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_utils.c
index d3d878ef531d..b3d5174fa622 100644
--- a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_utils.c
+++ b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_utils.c
@@ -584,12 +584,22 @@ void map_invalidate_id(struct pp_mapping *map, unsigned int id)
 {
 	unsigned int phy;
 
-	QOS_ASSERT(QOS_ID_VALID(id), "invalid id %u\n", id);
+	if (!QOS_ID_VALID(id)) {
+		QOS_LOG_ERR("invalid id %u\n", id);
+		return;
+	}
 	phy = get_phy_from_id(map, id);
-	QOS_ASSERT(QOS_PHY_VALID(phy), "invalid phy is mapped to id %u\n", id);
+
+	/* If phy is not unknown verify it is valid */
+	if (!QOS_PHY_UNKNOWN(phy)) {
+		if (QOS_PHY_VALID(phy)) {
+			map->phy2id[phy] = PP_QOS_INVALID_ID;
+		} else {
+			QOS_LOG_ERR("invalid phy is mapped to id %u\n", id);
+		}
+	}
 
 	map->id2phy[id] = QOS_INVALID_PHY;
-	map->phy2id[phy] = QOS_INVALID_ID;
 }
 
 /******************************************************************************/
@@ -1255,6 +1265,12 @@ void release_rlm(struct pp_pool *rlms, unsigned int rlm)
 	pp_pool_put(rlms, rlm);
 }
 
+void release_id(struct pp_qos_dev *qdev, unsigned int id)
+{
+	map_invalidate_id(qdev->mapping, id);
+	pp_pool_put(qdev->ids, id);
+}
+
 static void release_node_id(struct pp_qos_dev *qdev, unsigned int phy)
 {
 	unsigned int id;
@@ -1262,8 +1278,7 @@ static void release_node_id(struct pp_qos_dev *qdev, unsigned int phy)
 	id = get_id_from_phy(qdev->mapping, phy);
 	QOS_LOG_DEBUG("Deleting id %u phy %u\n", id, phy);
 	QOS_ASSERT(QOS_ID_VALID(id), "Invalid id for phy %u\n", phy);
-	map_invalidate_id(qdev->mapping, id);
-	pp_pool_put(qdev->ids, id);
+	release_id(qdev, id);
 }
 
 int node_remove(struct pp_qos_dev *qdev, struct qos_node *node)
@@ -2225,7 +2240,7 @@ static int set_child(struct pp_qos_dev *qdev,
 
 	if (node->child_prop.priority != child->priority) {
 		if (QOS_PHY_VALID(node->child_prop.parent_phy)) {
-			parent = get_node_from_phy(qdev->nodes, 
+			parent = get_node_from_phy(qdev->nodes,
 						   node->child_prop.parent_phy);
 			if (parent->parent_prop.arbitration ==
 			    PP_QOS_ARBITRATION_WSP) {
diff --git a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_utils.h b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_utils.h
index 3859207fa444..d1106fa2d917 100644
--- a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_utils.h
+++ b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_utils.h
@@ -517,6 +517,9 @@ void node_phy_delete(struct pp_qos_dev *qdev, unsigned int phy);
 
 void release_rlm(struct pp_pool *rlms, unsigned int rlm);
 
+/* Return id to pool */
+void release_id(struct pp_qos_dev *qdev, unsigned int id);
+
 int node_flush(struct pp_qos_dev *qdev, struct qos_node *node);
 
 /**
