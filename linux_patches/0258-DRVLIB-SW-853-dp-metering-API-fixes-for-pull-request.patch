From 1a3c277cc933ad9d4c2c10c9428e94a13c5099b1 Mon Sep 17 00:00:00 2001
From: anishkhx <anishx.khurana@intel.com>
Date: Mon, 27 Aug 2018 18:56:23 +0800
Subject: [PATCH] DRVLIB_SW-853: dp metering API fixes for pull request review
 comments fixes

---
 .../net/ethernet/lantiq/datapath/datapath_misc.c   | 50 +++++++------
 .../net/ethernet/lantiq/datapath/datapath_proc.c   | 26 ++++---
 .../lantiq/datapath/gswip31/datapath_gswip.c       | 87 +++++++---------------
 .../lantiq/datapath/gswip31/datapath_misc.h        |  6 +-
 include/net/datapath_inst.h                        | 12 ++-
 5 files changed, 85 insertions(+), 96 deletions(-)

diff --git a/drivers/net/ethernet/lantiq/datapath/datapath_misc.c b/drivers/net/ethernet/lantiq/datapath/datapath_misc.c
index d24974bab377..bae62a4f3fdd 100644
--- a/drivers/net/ethernet/lantiq/datapath/datapath_misc.c
+++ b/drivers/net/ethernet/lantiq/datapath/datapath_misc.c
@@ -1143,29 +1143,30 @@ int dp_meter_alloc(int inst, int *meterid, int flag)
 {
 	if (!dp_port_prop[inst].info.dp_meter_alloc)
 		return DP_FAILURE;
-	return dp_port_prop[inst].info.
-			dp_meter_alloc(inst, meterid, flag);
+	return dp_port_prop[inst].info.dp_meter_alloc(inst,
+						      meterid, flag);
 }
 EXPORT_SYMBOL(dp_meter_alloc);
 
 int dp_meter_add(struct net_device *dev, struct dp_meter_cfg *meter,
 		 int flag)
 {
-	dp_subif_t subif = {0};
-	int inst = 0, fid = 0;
+	struct dp_meter_subif mtr_subif = {0};
 
 	if ((flag & DP_METER_ATTACH_CTP) ||
 	    (flag & DP_METER_ATTACH_BRPORT) ||
 	    (flag & DP_METER_ATTACH_PCE)) {
-		if (dp_get_netif_subifid(dev, NULL, NULL, NULL, &subif, 0)) {
-			DP_DEBUG(DP_DBG_FLAG_DBG, "get subifid fail:%s\n",
-				 dev ? dev->name : "NULL");
+		if (dp_get_netif_subifid(dev, NULL, NULL,
+		    NULL, &mtr_subif.subif, 0)) {
+			DP_DEBUG(DP_DBG_FLAG_DBG,
+			"get subifid fail:%s\n",
+			dev ? dev->name : "NULL");
 			return DP_FAILURE;
 		}
-		inst = subif.inst;
+		mtr_subif.inst =  mtr_subif.subif.inst;
 	} else if (flag & DP_METER_ATTACH_BRIDGE) {
-		fid = dp_get_fid_by_brname(dev, &inst);
-		if (fid < 0) {
+		mtr_subif.fid = dp_get_fid_by_brname(dev, &mtr_subif.inst);
+		if (mtr_subif.fid < 0) {
 			PR_ERR("fid less then 0\n");
 			return DP_FAILURE;
 		}
@@ -1174,31 +1175,32 @@ int dp_meter_add(struct net_device *dev, struct dp_meter_cfg *meter,
 		return DP_FAILURE;
 	}
 
-	if (!dp_port_prop[inst].info.dp_meter_add)
+	if (!dp_port_prop[mtr_subif.inst].info.dp_meter_add)
 		return DP_FAILURE;
-	return dp_port_prop[inst].info.
-			dp_meter_add(dev, meter, flag);
+	return dp_port_prop[mtr_subif.inst].info.dp_meter_add(dev, meter,
+						    flag, &mtr_subif);
 }
 EXPORT_SYMBOL(dp_meter_add);
 
 int dp_meter_del(struct net_device *dev, struct dp_meter_cfg *meter,
 		 int flag)
 {
-	dp_subif_t subif = {0};
-	int inst = 0, fid = 0;
+	struct dp_meter_subif mtr_subif = {0};
 
 	if ((flag & DP_METER_ATTACH_CTP) ||
 	    (flag & DP_METER_ATTACH_BRPORT) ||
 	    (flag & DP_METER_ATTACH_PCE)) {
-		if (dp_get_netif_subifid(dev, NULL, NULL, NULL, &subif, 0)) {
-			DP_DEBUG(DP_DBG_FLAG_DBG, "get subifid fail:%s\n",
-				 dev ? dev->name : "NULL");
+		if (dp_get_netif_subifid(dev, NULL, NULL,
+		    NULL, &mtr_subif.subif, 0)) {
+			DP_DEBUG(DP_DBG_FLAG_DBG,
+			"get subifid fail:%s\n",
+			dev ? dev->name : "NULL");
 			return DP_FAILURE;
 		}
-		inst = subif.inst;
+		mtr_subif.inst = mtr_subif.subif.inst;
 	} else if (flag & DP_METER_ATTACH_BRIDGE) {
-		fid = dp_get_fid_by_brname(dev, &inst);
-		if (fid < 0) {
+		mtr_subif.fid = dp_get_fid_by_brname(dev, &mtr_subif.inst);
+		if (mtr_subif.fid < 0) {
 			PR_ERR("fid less then 0\n");
 			return DP_FAILURE;
 		}
@@ -1207,9 +1209,9 @@ int dp_meter_del(struct net_device *dev, struct dp_meter_cfg *meter,
 		return DP_FAILURE;
 	}
 
-	if (!dp_port_prop[inst].info.dp_meter_del)
+	if (!dp_port_prop[mtr_subif.inst].info.dp_meter_del)
 		return DP_FAILURE;
-	return dp_port_prop[inst].info.
-			dp_meter_del(dev, meter, flag);
+	return dp_port_prop[mtr_subif.inst].info.dp_meter_del(dev, meter,
+						    flag, &mtr_subif);
 }
 EXPORT_SYMBOL(dp_meter_del);
diff --git a/drivers/net/ethernet/lantiq/datapath/datapath_proc.c b/drivers/net/ethernet/lantiq/datapath/datapath_proc.c
index 849589e4f33f..ab5c78f6db48 100644
--- a/drivers/net/ethernet/lantiq/datapath/datapath_proc.c
+++ b/drivers/net/ethernet/lantiq/datapath/datapath_proc.c
@@ -25,8 +25,8 @@
 /*meter alloc,add macros*/
 #define DP_METER_ALLOC(inst, id, flag) \
 	dp_port_prop[(inst)].info.dp_meter_alloc(inst, &(id), (flag))
-#define DP_METER_CFGAPI(inst, func, dev, meter, flag) \
-	dp_port_prop[(inst)].info.func((dev), &(meter), (flag))
+#define DP_METER_CFGAPI(inst, func, dev, meter, flag, mtr_subif) \
+	dp_port_prop[(inst)].info.func((dev), &(meter), (flag), (mtr_subif))
 
 #define DP_PROC_NAME       "dp"
 #define DP_PROC_BASE       "/proc/" DP_PROC_NAME "/"
@@ -2265,14 +2265,22 @@ ssize_t proc_meter_write(struct file *file, const char *buf, size_t count,
 		struct net_device *dev;
 		int ret;
 		int meter_flag = DP_METER_ATTACH_CTP, meterid = -1;
-
+		struct dp_meter_subif mtr_subif = {0};
+		
+		mtr_subif.inst = inst;
 		dev = dev_get_by_name(&init_net, param_list[1]);
 		if (!dev) {
 			PR_ERR(" dev NULL\n");
 			return count;
 		}
+		ret = dp_get_netif_subifid(dev, NULL, NULL, NULL,
+					   &mtr_subif.subif, 0);
+		if ( ret < 0) {
+			PR_ERR("subif fails\n");
+			return count;
+		}
 		if (dp_strncmpi(param_list[2], "dealloc",
-				strlen("dealloc")) == 0) {
+				strlen("dealloc") + 1) == 0) {
 			meterid = dp_atoi(param_list[3]);
 			ret = DP_METER_ALLOC(inst, meterid, DP_F_DEREGISTER);
 			if (ret < 0) {
@@ -2282,7 +2290,7 @@ ssize_t proc_meter_write(struct file *file, const char *buf, size_t count,
 		PR_INFO("Meter dealloc succes, MeterId:=%d\n",
 			meterid);
 		} else if (dp_strncmpi(param_list[2], "alloc",
-				       strlen("alloc")) == 0) {
+				       strlen("alloc") + 1) == 0) {
 			ret = DP_METER_ALLOC(inst, meterid, 0);
 			if (ret < 0) {
 				PR_ERR("Fail to get meter alloc\n");
@@ -2290,9 +2298,9 @@ ssize_t proc_meter_write(struct file *file, const char *buf, size_t count,
 			}
 			PR_INFO("Meter alloc succes, MeterId:=%d\n", meterid);
 		} else if ((dp_strncmpi(param_list[2], "del",
-					strlen("del")) == 0) ||
+					strlen("del") + 1) == 0) ||
 					(dp_strncmpi(param_list[2], "add",
-					strlen("add")) == 0)) {
+					strlen("add")+ 1) == 0)) {
 			int param_val;
 
 			if (!param_list[3]) {
@@ -2325,10 +2333,10 @@ ssize_t proc_meter_write(struct file *file, const char *buf, size_t count,
 			if (dp_strncmpi(param_list[2], "add",
 					strlen("add")) == 0)
 				ret = DP_METER_CFGAPI(inst, dp_meter_add, dev,
-						      meter, meter_flag);
+						      meter, meter_flag, &mtr_subif);
 			else
 				ret = DP_METER_CFGAPI(inst, dp_meter_del, dev,
-						      meter, meter_flag);
+						      meter, meter_flag, &mtr_subif);
 			if (ret < 0) {
 				PR_ERR("meter %s failed\n",
 				       param_list[2]);
diff --git a/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_gswip.c b/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_gswip.c
index cf530c843b61..32c38b1dd700 100644
--- a/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_gswip.c
+++ b/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_gswip.c
@@ -14,7 +14,6 @@
 #include <net/datapath_api.h>
 #include "../datapath.h"
 #include "datapath_misc.h"
-
 #if IS_ENABLED(CONFIG_LTQ_DATAPATH_DDR_SIMULATE_GSWIP31)
 #include "datapath_gswip_simulate.h"
 #endif
@@ -1042,7 +1041,7 @@ int dp_meter_alloc_31(int inst, int *meterid, int flag)
 }
 
 int dp_meter_add_31(struct net_device *dev,  struct dp_meter_cfg  *meter,
-		    int flag)
+		    int flag, struct dp_meter_subif *mtr_subif)
 {
 	struct core_ops *gsw_handle;
 	GSW_QoS_meterCfg_t meter_cfg;
@@ -1051,27 +1050,13 @@ int dp_meter_add_31(struct net_device *dev,  struct dp_meter_cfg  *meter,
 	GSW_CTP_portConfig_t *ctp_cfg = NULL;
 	GSW_BRIDGE_config_t *br_cfg = NULL;
 	GSW_return_t ret;
-	dp_subif_t subif = {0};
-	int bret = 0, fid = 0, inst = 0;
-
-	if ((flag & DP_METER_ATTACH_CTP) ||
-	    (flag & DP_METER_ATTACH_BRPORT) ||
-	    (flag & DP_METER_ATTACH_PCE)) {
-		ret = dp_get_netif_subifid(dev, NULL, NULL, NULL, &subif, 0);
-		if (ret < 0) {
-			PR_ERR("dp_get_netif_subifid fail:%s\n", dev->name);
-			return -1;
-		}
-		inst = subif.inst;
-	} else if (flag & DP_METER_ATTACH_BRIDGE) {
-		fid = dp_get_fid_by_brname(dev, &inst);
-		if (fid < 0) {
-			PR_ERR("fid less then 0\n");
-			return -1;
-		}
-	}
+	int bret = 0;
 
-	gsw_handle = dp_port_prop[inst].ops[GSWIP_L];
+	if(!mtr_subif) {
+		PR_ERR("mtr_subif NULL\n");
+		return -1;
+	}
+	gsw_handle = dp_port_prop[mtr_subif->inst].ops[GSWIP_L];
 	if (!gsw_handle)
 		return -1;
 
@@ -1122,7 +1107,7 @@ int dp_meter_add_31(struct net_device *dev,  struct dp_meter_cfg  *meter,
 	if (flag & DP_METER_ATTACH_CTP) {/* CTP port Flag */
 		struct pmac_port_info *port_info;
 
-		if (subif.flag_pmapper) {
+		if (mtr_subif->subif.flag_pmapper) {
 			PR_ERR("can't use CTP,pmapper is enable\n");
 			bret = -1;
 			goto err;
@@ -1133,14 +1118,15 @@ int dp_meter_add_31(struct net_device *dev,  struct dp_meter_cfg  *meter,
 			bret = -1;
 			goto err;
 		}
-		port_info = &dp_port_info[subif.inst][subif.port_id];
+		port_info =
+		&dp_port_info[mtr_subif->subif.inst][mtr_subif->subif.port_id];
 		if (!port_info) {
 			PR_ERR(" port_info is NULL\n");
 			bret = -1;
 			goto err;
 		}
-		ctp_cfg->nLogicalPortId = subif.port_id;
-		ctp_cfg->nSubIfIdGroup  = GET_VAP(subif.subif,
+		ctp_cfg->nLogicalPortId = mtr_subif->subif.port_id;
+		ctp_cfg->nSubIfIdGroup  = GET_VAP(mtr_subif->subif.subif,
 						 port_info->vap_offset,
 						 port_info->vap_mask);
 		ret = GSW_CORE_API(gsw_handle, gsw_ctp_ops.CTP_PortConfigGet,
@@ -1171,7 +1157,7 @@ int dp_meter_add_31(struct net_device *dev,  struct dp_meter_cfg  *meter,
 		}
 	}
 	if (flag & DP_METER_ATTACH_BRPORT) {/*BRIDGE port Flag*/
-		if (!subif.flag_bp) {
+		if (!mtr_subif->subif.flag_bp) {
 			PR_ERR("flag_bp value 0\n");
 			bret = -1;
 			goto err;
@@ -1182,7 +1168,7 @@ int dp_meter_add_31(struct net_device *dev,  struct dp_meter_cfg  *meter,
 			bret = -1;
 			goto err;
 		}
-		bp_cfg->nBridgePortId = subif.bport;
+		bp_cfg->nBridgePortId = mtr_subif->subif.bport;
 		ret = GSW_CORE_API(gsw_handle,
 				   gsw_brdgport_ops.BridgePort_ConfigGet,
 				   bp_cfg);
@@ -1234,7 +1220,7 @@ int dp_meter_add_31(struct net_device *dev,  struct dp_meter_cfg  *meter,
 			bret = -1;
 			goto err;
 		}
-		br_cfg->nBridgeId = fid;
+		br_cfg->nBridgeId = mtr_subif->fid;
 		ret = GSW_CORE_API(gsw_handle,
 				   gsw_brdg_ops.Bridge_ConfigGet,
 				   br_cfg);
@@ -1278,7 +1264,7 @@ int dp_meter_add_31(struct net_device *dev,  struct dp_meter_cfg  *meter,
 }
 
 int dp_meter_del_31(struct net_device *dev,  struct dp_meter_cfg  *meter,
-		    int flag)
+		    int flag, struct dp_meter_subif *mtr_subif)
 {
 	struct core_ops *gsw_handle;
 	GSW_BRIDGE_portConfig_t *bp_cfg = NULL;
@@ -1286,30 +1272,13 @@ int dp_meter_del_31(struct net_device *dev,  struct dp_meter_cfg  *meter,
 	GSW_CTP_portConfig_t *ctp_cfg = NULL;
 	GSW_BRIDGE_config_t *br_cfg = NULL;
 	GSW_return_t ret;
-	dp_subif_t subif = {0};
-	int bret = 0, fid = 0, inst = 0;
-
-	if ((flag & DP_METER_ATTACH_CTP) ||
-	    (flag & DP_METER_ATTACH_BRPORT) ||
-	    (flag & DP_METER_ATTACH_PCE)) {
-		ret = dp_get_netif_subifid(dev, NULL, NULL, NULL, &subif, 0);
-		if (ret < 0) {
-			PR_ERR("dp_get_netif_subifid fail:%s\n", dev->name);
-			return -1;
-		}
-		inst = subif.inst;
-	} else if (flag & DP_METER_ATTACH_BRIDGE) {
-		fid = dp_get_fid_by_brname(dev, &inst);
-		if (fid < 0) {
-			PR_ERR("fid less then 0\n");
-			return -1;
-		}
-	} else {
-		PR_ERR("Meter Flag not set\n");
+	int bret = 0;
+
+	if (!mtr_subif) {
+		PR_ERR(" mtr_subif NULL\n");
 		return -1;
 	}
-
-	gsw_handle = dp_port_prop[inst].ops[GSWIP_L];
+	gsw_handle = dp_port_prop[mtr_subif->inst].ops[GSWIP_L];
 	if (!gsw_handle)
 		return -1;
 
@@ -1334,7 +1303,7 @@ int dp_meter_del_31(struct net_device *dev,  struct dp_meter_cfg  *meter,
 	if (flag & DP_METER_ATTACH_CTP) {
 		struct pmac_port_info *port_info;
 
-		if (subif.flag_pmapper) {
+		if (mtr_subif->subif.flag_pmapper) {
 			PR_ERR("flag_pmapper is set\n");
 			bret = -1;
 			goto err;
@@ -1345,14 +1314,14 @@ int dp_meter_del_31(struct net_device *dev,  struct dp_meter_cfg  *meter,
 			bret = -1;
 			goto err;
 		}
-		port_info = &dp_port_info[subif.inst][subif.port_id];
+		port_info = &dp_port_info[mtr_subif->subif.inst][mtr_subif->subif.port_id];
 		if (!port_info) {
 			PR_ERR(" port_info is NULL\n");
 			bret = -1;
 			goto err;
 		}
-		ctp_cfg->nLogicalPortId = subif.port_id;
-		ctp_cfg->nSubIfIdGroup = GET_VAP(subif.subif,
+		ctp_cfg->nLogicalPortId = mtr_subif->subif.port_id;
+		ctp_cfg->nSubIfIdGroup = GET_VAP(mtr_subif->subif.subif,
 							port_info->vap_offset,
 							port_info->vap_mask);
 		if (meter->dir == DP_DIR_EGRESS)
@@ -1380,7 +1349,7 @@ int dp_meter_del_31(struct net_device *dev,  struct dp_meter_cfg  *meter,
 		}
 	}
 	if (flag & DP_METER_ATTACH_BRPORT) {
-		if (!subif.flag_bp) {
+		if (!mtr_subif->subif.flag_bp) {
 			PR_ERR("flag_bp is 0\n");
 			bret = -1;
 			goto err;
@@ -1391,7 +1360,7 @@ int dp_meter_del_31(struct net_device *dev,  struct dp_meter_cfg  *meter,
 			bret = -1;
 			goto err;
 		}
-		bp_cfg->nBridgePortId = subif.bport;
+		bp_cfg->nBridgePortId = mtr_subif->subif.bport;
 		ret = GSW_CORE_API(gsw_handle,
 				   gsw_brdgport_ops.BridgePort_ConfigGet,
 				   bp_cfg);
@@ -1440,7 +1409,7 @@ int dp_meter_del_31(struct net_device *dev,  struct dp_meter_cfg  *meter,
 			bret = -1;
 			goto err;
 		}
-		br_cfg->nBridgeId = fid;
+		br_cfg->nBridgeId = mtr_subif->fid;
 		ret = GSW_CORE_API(gsw_handle, gsw_brdg_ops.Bridge_ConfigGet,
 				   br_cfg);
 		if (ret != GSW_statusOk) {
diff --git a/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_misc.h b/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_misc.h
index c3c61c389ffe..211e63ef5084 100644
--- a/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_misc.h
+++ b/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_misc.h
@@ -166,9 +166,11 @@ int dp_node_reserve(int inst, int ep, struct dp_port_data *data, int flags);
 int dp_qos_level_get_31(struct dp_qos_level *dp, int flag);
 int dp_meter_alloc_31(int inst, int *meterid, int flag);
 int dp_meter_add_31(struct net_device *dev,
-		    struct dp_meter_cfg *meter, int flag);
+		    struct dp_meter_cfg *meter,
+		    int flag, struct dp_meter_subif *mtr_subif);
 int dp_meter_del_31(struct net_device *dev,
-		    struct dp_meter_cfg *meter, int flag);
+		    struct dp_meter_cfg *meter,
+		    int flag, struct dp_meter_subif *mtr_subif);
 
 #if IS_ENABLED(CONFIG_LTQ_DATAPATH_DDR_SIMULATE_GSWIP31)
 GSW_return_t gsw_core_api_ddr_simu31(dp_gsw_cb func, void *ops, void *param);
diff --git a/include/net/datapath_inst.h b/include/net/datapath_inst.h
index a837273021fd..4a64b84b6034 100644
--- a/include/net/datapath_inst.h
+++ b/include/net/datapath_inst.h
@@ -37,6 +37,12 @@ enum DP_HW_CAP_VER {
 	GSWIP31_VER
 };
 
+struct dp_meter_subif {
+	int fid;
+	int inst;
+	dp_subif_t subif;
+};
+
 struct dp_inst_info {
 	int inst; /*! for register, it will be filled by DP,
 		   *  for de-register, the caller fill the instance id
@@ -111,9 +117,11 @@ struct inst_info {
 	int (*dp_ctp_tc_map_set)(struct dp_tc_cfg *tc, int flag);
 	int (*dp_meter_alloc)(int inst, int *meterid, int flag);
 	int (*dp_meter_add)(struct net_device *dev,
-			    struct dp_meter_cfg *meter, int flag);
+			    struct dp_meter_cfg *meter, int flag,
+			    struct dp_meter_subif *mtr_subif);
 	int (*dp_meter_del)(struct net_device *dev,
-			    struct dp_meter_cfg *meter, int flag);
+			    struct dp_meter_cfg *meter, int flag,
+			    struct dp_meter_subif *mtr_subif);
 
 #if IS_ENABLED(CONFIG_LTQ_DATAPATH_SWITCHDEV)
 	int swdev_flag;
