From 146dce2764c077d50a0def3218d5cd02fb010d43 Mon Sep 17 00:00:00 2001
From: Oren Bakshe <oren.bakshe@intel.com>
Date: Wed, 31 Oct 2018 17:48:33 +0200
Subject: [PATCH] PONRTSYS-2606 : wrong conf in moving q under scheduler to a
 different port

---
 drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_fw.c   | 16 ++++++++--
 drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_fw.h   |  7 +++--
 drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_main.c |  2 +-
 .../net/ethernet/lantiq/ppv4/qos/pp_qos_uc_defs.h  |  5 ++-
 .../net/ethernet/lantiq/ppv4/qos/pp_qos_utils.c    | 36 ++++++++++++++++------
 .../net/ethernet/lantiq/ppv4/qos/pp_qos_utils.h    |  4 +++
 6 files changed, 54 insertions(+), 16 deletions(-)

diff --git a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_fw.c b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_fw.c
index aabe7dab58b5..d0e69c4a3c25 100644
--- a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_fw.c
+++ b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_fw.c
@@ -260,6 +260,8 @@ struct cmd_update_preds {
 	unsigned int phy;
 	unsigned int rlm;
 	unsigned int is_alias_slave;
+	u32 queue_port;
+	bool queue_port_changed;
 };
 
 struct port_properties {
@@ -618,7 +620,8 @@ void create_remove_node_cmd(
 	qdev->drvcmds.cmd_fw_id++;
 }
 
-void create_update_preds_cmd(struct pp_qos_dev *qdev, unsigned int phy)
+void create_update_preds_cmd(struct pp_qos_dev *qdev, unsigned int phy,
+		bool queue_port_changed)
 {
 	const struct qos_node *node;
 	struct cmd_update_preds cmd;
@@ -641,6 +644,8 @@ void create_update_preds_cmd(struct pp_qos_dev *qdev, unsigned int phy)
 	cmd.is_alias_slave =
 			(node->data.queue.alias_master_id == PP_QOS_INVALID_ID)
 			? 0 : 1;
+	cmd.queue_port = node->data.queue.port_phy;
+	cmd.queue_port_changed = queue_port_changed;
 
 	QOS_LOG_DEBUG("cmd %u:%u CMD_TYPE_UPDATE_PREDECESSORS %u:%u-->%u-->%u-->%u-->%u-->%u\n",
 		      qdev->drvcmds.cmd_id,
@@ -1182,6 +1187,7 @@ struct fw_set_common {
 	int suspend;
 	unsigned int bw_limit;
 	unsigned int shared_bw_group;
+	u32 port_phy; /* Relevant only for queue */
 };
 
 struct fw_set_parent {
@@ -1537,7 +1543,7 @@ static uint32_t *fw_write_set_queue_cmd(
 
 	*buf++ = qos_u32_to_uc(UC_QOS_COMMAND_SET_QUEUE);
 	*buf++ = qos_u32_to_uc(flags);
-	*buf++ = qos_u32_to_uc(27);
+	*buf++ = qos_u32_to_uc(28);
 	*buf++ = qos_u32_to_uc(phy);
 	*buf++ = qos_u32_to_uc(queue->rlm);
 	*buf++ = qos_u32_to_uc(common->valid | child->valid);
@@ -1547,6 +1553,7 @@ static uint32_t *fw_write_set_queue_cmd(
 	*buf++ = qos_u32_to_uc(common->shared_bw_group);
 	for (i = 0; i < 6; ++i)
 		*buf++ = qos_u32_to_uc(child->preds[i]);
+	*buf++ = qos_u32_to_uc(common->port_phy);
 	*buf++ = qos_u32_to_uc(queue->valid);
 	*buf++ = qos_u32_to_uc(queue->active);
 	*buf++ = qos_u32_to_uc(queue->disable);
@@ -2224,6 +2231,11 @@ static uint32_t *update_preds_cmd_wrapper(
 		fwdata->type_data.queue.valid = 0;
 		fwdata->type_data.queue.rlm = cmd->rlm;
 		fwdata->type_data.queue.is_alias_slave = cmd->is_alias_slave;
+		if (cmd->queue_port_changed) {
+			fwdata->common.port_phy = cmd->queue_port;
+			fwdata->common.valid |=
+				TSCD_NODE_CONF_SET_PORT_TO_QUEUE;
+		}
 
 		return fw_write_set_queue_cmd(
 				buf,
diff --git a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_fw.h b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_fw.h
index c75b01819011..46bb469ceb7a 100644
--- a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_fw.h
+++ b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_fw.h
@@ -56,7 +56,8 @@ void create_set_sched_cmd(struct pp_qos_dev *qdev,
 void create_remove_node_cmd(struct pp_qos_dev *qdev, enum node_type type,
 			    unsigned int phy, unsigned int data);
 void create_parent_change_cmd(struct pp_qos_dev *qdev, unsigned int phy);
-void create_update_preds_cmd(struct pp_qos_dev *qdev, unsigned int phy);
+void create_update_preds_cmd(struct pp_qos_dev *qdev, unsigned int phy,
+		bool queue_port_changed);
 void create_init_qos_cmd(struct pp_qos_dev *qdev);
 void enqueue_cmds(struct pp_qos_dev *qdev);
 void check_completion(struct pp_qos_dev *qdev);
@@ -119,7 +120,7 @@ void create_get_sys_info_cmd(struct pp_qos_dev *qdev,
 	QOS_LOG_DEBUG("REMOVE: %u(%u)\n", phy, type)
 #define create_parent_change_cmd(qdev, phy)\
 	QOS_LOG_DEBUG("PARENT_CHANGE: %u\n", phy)
-#define create_update_preds_cmd(qdev, phy)\
+#define create_update_preds_cmd(qdev, phy, queue_port_changed)\
 	QOS_LOG_DEBUG("UPDATE_PREDS: %u\n", phy)
 #define create_get_queue_stats_cmd(qdev, phy, rlm, addr, qstat)
 #define create_init_qos_cmd(qdev)
@@ -145,7 +146,7 @@ void create_get_sys_info_cmd(struct pp_qos_dev *qdev,
 #define create_set_queue_cmd(qdev, conf, phy, parent, rlm, modified)
 #define create_remove_node_cmd(qdev, type, phy, data)
 #define create_parent_change_cmd(qdev, phy)
-#define create_update_preds_cmd(qdev, phy)
+#define create_update_preds_cmd(qdev, phy, queue_port_changed)
 #define create_get_queue_stats_cmd(qdev, phy, rlm, addr, qstat)
 #define create_init_qos_cmd(qdev)
 #define enqueue_cmds(qdev)
diff --git a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_main.c b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_main.c
index 26097d69c403..7af871a156a3 100644
--- a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_main.c
+++ b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_main.c
@@ -1065,7 +1065,7 @@ static int _pp_qos_queue_set(
 			phy = get_phy_from_id(qdev->mapping, id);
 			nodep = get_node_from_phy(qdev->nodes, phy);
 			if (phy != prev_phy)
-				create_update_preds_cmd(qdev, phy);
+				update_predecessors(qdev, nodep, NULL);
 		} else {
 			map_id_phy(qdev->mapping, id, phy);
 		}
diff --git a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_uc_defs.h b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_uc_defs.h
index ee97859be5a0..c1de2b3230ca 100644
--- a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_uc_defs.h
+++ b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_uc_defs.h
@@ -37,7 +37,7 @@
 /* UC version */
 #define UC_VERSION_MAJOR	(1)
 #define UC_VERSION_MINOR	(0)
-#define UC_VERSION_BUILD	(8)
+#define UC_VERSION_BUILD	(9)
 
 /**************************************************************************
  *! @enum	UC_STATUS
@@ -155,6 +155,9 @@ enum tscd_node_conf {
 	/*!< Shared BW limit group (0: no shared BW limit, 1-511: group ID) */
 	TSCD_NODE_CONF_SHARED_BWL_GROUP		=	0x2000,
 
+	//!< Set if Queue's port was changed (Relevant only for queue)
+	TSCD_NODE_CONF_SET_PORT_TO_QUEUE	=	0x4000,
+
 	/*!< All flags are set */
 	TSCD_NODE_CONF_ALL					=	0xFFFF
 };
diff --git a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_utils.c b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_utils.c
index 2ec6d71d5e31..0c307270764c 100644
--- a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_utils.c
+++ b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_utils.c
@@ -1607,7 +1607,7 @@ static int post_order_travers_tree(struct pp_qos_dev *qdev,
 				    void *cdata,
 				    int (*operation)(
 					    struct pp_qos_dev *qdev,
-					    const struct qos_node *node,
+					    struct qos_node *node,
 					    void *odata),
 				    void *odata)
 {
@@ -1640,7 +1640,7 @@ struct ids_container_metadata {
 };
 
 static int update_ids_container(struct pp_qos_dev *qdev,
-		const struct qos_node *node, void *data)
+		struct qos_node *node, void *data)
 {
 	struct ids_container_metadata *ids;
 	unsigned int phy;
@@ -1696,10 +1696,28 @@ void get_bw_grp_members_under_node(struct pp_qos_dev *qdev, unsigned int id,
 			(void *)(uintptr_t)id, update_ids_container, &data);
 }
 
-static int update_predecessors(struct pp_qos_dev *qdev,
-		const struct qos_node *node, void *data)
-{
-	create_update_preds_cmd(qdev, get_phy_from_node(qdev->nodes, node));
+int update_predecessors(struct pp_qos_dev *qdev,
+		struct qos_node *node, void *data)
+{
+	bool queue_port_changed = false;
+	u32  queue_port = QOS_INVALID_PHY;
+	u32  queue_id = PP_QOS_INVALID_ID;
+	u32  phy = get_phy_from_node(qdev->nodes, node);
+
+	if (node_queue(node)) {
+		queue_id = get_id_from_phy(qdev->mapping, phy);
+		queue_port = get_port(qdev->nodes, phy);
+		if (queue_port != node->data.queue.port_phy) {
+			QOS_LOG_DEBUG("Queue %u port changed from %u to %u\n",
+				      queue_id,
+				      node->data.queue.port_phy,
+				      queue_port);
+			node->data.queue.port_phy = queue_port;
+			queue_port_changed = true;
+		}
+	}
+
+	create_update_preds_cmd(qdev, phy, queue_port_changed);
 	return 1;
 }
 
@@ -1785,7 +1803,7 @@ STATIC_UNLESS_TEST unsigned int get_children_bandwidth_share(
 
 static int node_remove_wrapper(
 		struct pp_qos_dev *qdev,
-		const struct qos_node *node, void *data)
+		struct qos_node *node, void *data)
 {
 	uint16_t phy;
 	uint16_t id;
@@ -1800,7 +1818,7 @@ static int node_remove_wrapper(
 
 static int node_flush_wrapper(
 		struct pp_qos_dev *qdev,
-		const struct qos_node *node, void *data)
+		struct qos_node *node, void *data)
 {
 	uint16_t phy;
 	uint16_t id;
@@ -1815,7 +1833,7 @@ static int node_flush_wrapper(
 
 static int node_modify_blocked_status(
 		struct pp_qos_dev *qdev,
-		const struct qos_node *node, void *data)
+		struct qos_node *node, void *data)
 {
 	uint16_t phy;
 	uint16_t id;
diff --git a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_utils.h b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_utils.h
index 4c03fd76e11d..7a3a7ba3194c 100644
--- a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_utils.h
+++ b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_utils.h
@@ -157,6 +157,7 @@ struct qos_node {
 			uint8_t		yellow_slope;
 			uint16_t	alias_slave_id;
 			uint16_t	alias_master_id;
+			uint16_t	port_phy;
 		} queue;
 	} data;
 
@@ -579,6 +580,9 @@ void node_update_children(struct pp_qos_dev *qdev,
 				 struct qos_node *parent,
 				 unsigned int new_phy);
 
+int update_predecessors(struct pp_qos_dev *qdev,
+			struct qos_node *node, void *data);
+
 void tree_update_predecessors(struct pp_qos_dev *qdev, unsigned int phy);
 /*
  * Assume that sched is internal scheduler
