From a40e92b80c81e43cf3759955baf909eedb41a205 Mon Sep 17 00:00:00 2001
From: thampan <joby.thampan@intel.com>
Date: Thu, 5 Jul 2018 17:38:56 +0800
Subject: [PATCH] DRVLIB_SW-778: Build break issue for Grx500 is solved

---
 .../net/ethernet/lantiq/switch-api/mac/xgmac_ptp.c    | 19 ++++++++++++++-----
 1 file changed, 14 insertions(+), 5 deletions(-)

diff --git a/drivers/net/ethernet/lantiq/switch-api/mac/xgmac_ptp.c b/drivers/net/ethernet/lantiq/switch-api/mac/xgmac_ptp.c
old mode 100644
new mode 100755
index a0999e524095..227fdd293c8b
--- a/drivers/net/ethernet/lantiq/switch-api/mac/xgmac_ptp.c
+++ b/drivers/net/ethernet/lantiq/switch-api/mac/xgmac_ptp.c
@@ -324,11 +324,16 @@ static void *parse_ptp_packet(struct sk_buff *skb,
 static void tx_hwtstamp(struct mac_prv_data *pdata,
 			struct skb_shared_hwtstamps *shhwtstamp)
 {
+	if(!pdata->ptp_tx_skb)
+		return;
+	
 	/* Marking Tx Timestamp complete */
 	if (!shhwtstamp->hwtstamp.tv64)
 		shhwtstamp->hwtstamp = ktime_get_real();
 
-	skb_tstamp_tx(pdata->ptp_tx_skb, shhwtstamp);
+	skb_complete_tx_timestamp(pdata->ptp_tx_skb, shhwtstamp);
+
+	skb_put(pdata->ptp_tx_skb, pdata->ptp_tx_skb->len);
 }
 
 /* =========================== TX TIMESTAMP =========================== */
@@ -352,11 +357,11 @@ int xgmac_tx_hwts(void *pdev, struct sk_buff *skb)
 		/* declare that device is doing timestamping */
 		skb_shinfo(skb)->tx_flags |= SKBTX_IN_PROGRESS;
 
-		pdata->ptp_tx_skb = skb_get(skb);
-
 		/* Currently supporting only Master Mode */
 		if (IS_2STEP(pdata)) {
 			mac_dbg("2-Step\n");
+			
+			pdata->ptp_tx_skb = skb_get(skb);
 
 			/* PTP Sync if we are Master TTSE=1 OSTC=0, OSTPA=0 */
 			rec_id = fifo_entry_add(pdev, 1, 0, 0, 0, 0, 0);
@@ -612,13 +617,14 @@ static void xgmac_extts_isr_handler(struct mac_prv_data *pdata,
 				    u32 tstamp_sts)
 {
 	u8 val = MAC_GET_VAL(tstamp_sts, MAC_TSTAMP_STSR, ATSSTN);
+#ifdef CONFIG_PTP_1588_CLOCK	
 	struct ptp_clock_event event;
 
 	if (val & AUX_TRIG_0) {
 		if (pdata->exts0_enabled) {
 			event.type = PTP_CLOCK_EXTTS;
 			event.index = 0;
-			event.timestamp = xgmac_get_auxtimestamp(pdata);
+			event.timestamp = xgmac_get_auxtimestamp(pdata);		
 			ptp_clock_event(pdata->ptp_clock, &event);
 		}
 	}
@@ -627,10 +633,11 @@ static void xgmac_extts_isr_handler(struct mac_prv_data *pdata,
 		if (pdata->exts1_enabled) {
 			event.type = PTP_CLOCK_EXTTS;
 			event.index = 1;
-			event.timestamp = xgmac_get_auxtimestamp(pdata);
+			event.timestamp = xgmac_get_auxtimestamp(pdata);		
 			ptp_clock_event(pdata->ptp_clock, &event);
 		}
 	}
+#endif	
 }
 
 /* This API performs the required steps for enabling PTP support.
@@ -688,10 +695,12 @@ int xgmac_get_ts_info(void *pdev,
 				   SOF_TIMESTAMPING_RX_HARDWARE |
 				   SOF_TIMESTAMPING_RAW_HARDWARE;
 
+#ifdef CONFIG_PTP_1588_CLOCK
 	if (pdata->ptp_clock)
 		ts_info->phc_index = ptp_clock_index(pdata->ptp_clock);
 	else
 		ts_info->phc_index = -1;
+#endif
 
 	ts_info->tx_types = (1 << HWTSTAMP_TX_OFF) | (1 << HWTSTAMP_TX_ON);
 	ts_info->rx_filters = (1 << HWTSTAMP_FILTER_NONE) |
