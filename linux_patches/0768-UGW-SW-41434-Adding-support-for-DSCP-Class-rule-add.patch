From 57e99f368f80a9272f8ae693c2b593bb8537a66d Mon Sep 17 00:00:00 2001
From: Deepansh Rastogi <deepansh.rastogi@intel.com>
Date: Fri, 6 Sep 2019 09:16:34 +0530
Subject: [PATCH] UGW_SW-41434: Adding support for DSCP Class rule add

---
 drivers/net/ethernet/lantiq/ppa/ppa_hal_wrapper.c | 22 ++++++++++++++++++++++
 include/net/ppa/ppa_api.h                         |  1 +
 include/net/ppa/ppa_hal_api.h                     |  2 ++
 include/net/ppa/ppa_hal_wrapper.h                 |  2 ++
 include/uapi/net/ppa_api.h                        |  6 ++++++
 5 files changed, 33 insertions(+)

diff --git a/drivers/net/ethernet/lantiq/ppa/ppa_hal_wrapper.c b/drivers/net/ethernet/lantiq/ppa/ppa_hal_wrapper.c
index ee9ab0bdbc7e..0de6e94c7229 100644
--- a/drivers/net/ethernet/lantiq/ppa/ppa_hal_wrapper.c
+++ b/drivers/net/ethernet/lantiq/ppa/ppa_hal_wrapper.c
@@ -294,6 +294,28 @@ uint32_t ppa_hsel_uninit_qos_cfg(uint32_t flag, uint32_t hal_id)
 
 	return ppa_drv_hal_hook[hal_id](PPA_GENERIC_HAL_QOS_UNINIT_CFG, (void *)NULL, flag);
 }
+uint32_t ppa_hsel_dscp_class_set(uint32_t flag, uint32_t hal_id)
+{
+	if (hal_id >= MAX_HAL)
+		return PPA_FAILURE;
+
+	if (!ppa_drv_hal_hook[hal_id])
+		return PPA_FAILURE;
+
+	return ppa_drv_hal_hook[hal_id](PPA_GENERIC_HAL_QOS_DSCP_CLASS_MAP_SET, (void *)NULL, flag);
+}
+EXPORT_SYMBOL(ppa_hsel_dscp_class_set);
+uint32_t ppa_hsel_dscp_class_reset(uint32_t flag, uint32_t hal_id)
+{
+	if (hal_id >= MAX_HAL)
+		return PPA_FAILURE;
+
+	if (!ppa_drv_hal_hook[hal_id])
+		return PPA_FAILURE;
+
+	return ppa_drv_hal_hook[hal_id](PPA_GENERIC_HAL_QOS_DSCP_CLASS_MAP_RESET, (void *)NULL, flag);
+}
+EXPORT_SYMBOL(ppa_hsel_dscp_class_reset);
 uint32_t ppa_hsel_add_qos_queue_entry(QOS_Q_ADD_CFG *entry, uint32_t flag, uint32_t hal_id)
 {
 	if (!ppa_drv_hal_hook[hal_id])
diff --git a/include/net/ppa/ppa_api.h b/include/net/ppa/ppa_api.h
index 945d3ce00745..77e08c1ca17e 100644
--- a/include/net/ppa/ppa_api.h
+++ b/include/net/ppa/ppa_api.h
@@ -191,6 +191,7 @@ typedef enum {
 	MPE_DS_QOS,
 #endif
 	QOS_METER,
+	WMM_QOS_DSCP_MAP,
 	MAX_CAPS
 } PPA_API_CAPS;
 
diff --git a/include/net/ppa/ppa_hal_api.h b/include/net/ppa/ppa_hal_api.h
index 41ab70d0ff33..1b394f3499fe 100644
--- a/include/net/ppa/ppa_hal_api.h
+++ b/include/net/ppa/ppa_hal_api.h
@@ -262,6 +262,8 @@ typedef enum {
 	PPA_GENERIC_DATAPATH_GET_WAN_SEPARATE_FLAG,
 	PPA_GENERIC_HAL_MOD_SUBIF_PORT_CFG,
 	PPA_GENERIC_HAL_SET_QOS_METER_CFG,
+	PPA_GENERIC_HAL_QOS_DSCP_CLASS_MAP_SET,
+	PPA_GENERIC_HAL_QOS_DSCP_CLASS_MAP_RESET,
 	/*make sure it is the last one */
 	PPA_GENERIC_HAL_MAX_FLAG
 } PPA_GENERIC_HOOK_CMD;
diff --git a/include/net/ppa/ppa_hal_wrapper.h b/include/net/ppa/ppa_hal_wrapper.h
index 2f9be2bf86ed..a17635982cb5 100644
--- a/include/net/ppa/ppa_hal_wrapper.h
+++ b/include/net/ppa/ppa_hal_wrapper.h
@@ -70,6 +70,8 @@ extern uint32_t ppa_hsel_del_outer_vlan_entry(PPA_OUT_VLAN_INFO *entry, uint32_t
 extern uint32_t ppa_hsel_get_outer_vlan_entry(PPA_OUT_VLAN_INFO *entry, uint32_t flag, uint32_t hal_id);
 extern uint32_t ppa_hsel_init_qos_cfg(uint32_t flag, uint32_t hal_id);
 extern uint32_t ppa_hsel_uninit_qos_cfg(uint32_t flag, uint32_t hal_id);
+extern uint32_t ppa_hsel_dscp_class_set(uint32_t flag, uint32_t hal_id);
+extern uint32_t ppa_hsel_dscp_class_reset(uint32_t flag, uint32_t hal_id);
 extern uint32_t ppa_hsel_add_qos_queue_entry(QOS_Q_ADD_CFG *entry, uint32_t flag, uint32_t hal_id);
 extern uint32_t ppa_hsel_modify_qos_queue_entry(QOS_Q_MOD_CFG *entry, uint32_t flag, uint32_t hal_id);
 extern uint32_t ppa_hsel_delete_qos_queue_entry(QOS_Q_DEL_CFG *entry, uint32_t flag, uint32_t hal_id);
diff --git a/include/uapi/net/ppa_api.h b/include/uapi/net/ppa_api.h
index 67376b623c54..43d38d6336da 100755
--- a/include/uapi/net/ppa_api.h
+++ b/include/uapi/net/ppa_api.h
@@ -2132,6 +2132,8 @@ typedef enum {
 	PPA_CMD_GET_SESSIONS_NR,
 	PPA_CMD_GET_SESSIONS_COUNT_NR,
 	PPA_CMD_SET_QOS_METER_NR, /*!< NR for PPA_CMD_SET_QOS_METER */
+	PPA_CMD_QOS_DSCP_CLASS_SET_NR, /*!< NR for PPA_CMD_QOS_DSCP_CLASS_SET */
+	PPA_CMD_QOS_DSCP_CLASS_RESET_NR, /*!< NR for PPA_CMD_QOS_DSCP_CLASS_RESET */
 	/* PPA_IOC_MAXNR should be the last one in the enumberation */
 	PPA_IOC_MAXNR /*!< NR for PPA_IOC_MAXNR */
 } PPA_IOC_NR;
@@ -2556,6 +2558,10 @@ typedef enum {
  *     \ref PPA_QOS_METER_CFG structure
  *      */
 #define PPA_CMD_SET_QOS_METER _IOW(PPA_IOC_MAGIC, PPA_CMD_SET_QOS_METER_NR, PPA_QOS_METER_INFO)
+/* PPA Set DSCP to TC Map */
+#define PPA_CMD_QOS_DSCP_CLASS_SET _IO(PPA_IOC_MAGIC, PPA_CMD_QOS_DSCP_CLASS_SET_NR)
+/* PPA Reset DSCP to TC Map */
+#define PPA_CMD_QOS_DSCP_CLASS_RESET _IO(PPA_IOC_MAGIC, PPA_CMD_QOS_DSCP_CLASS_RESET_NR)
 /** PPA get all exported hook count. Value is manipulated by _IOR() macro for final value
 	\param PPA_CMD_COUNT_INFO The parameter points to a
 	\ref PPA_CMD_COUNT_INFO structure
