From 8ae1dfde4d2a262cd76aebc80eaf3d15e70aeca6 Mon Sep 17 00:00:00 2001
From: Gu Chao <gux.chao@intel.com>
Date: Thu, 22 Aug 2019 14:43:24 +0800
Subject: [PATCH] DRV_DPM_SW-25: Fix DP proc alignment

---
 drivers/net/datapath/dpm/datapath_proc.c | 83 +++++++++++++-------------------
 1 file changed, 34 insertions(+), 49 deletions(-)

diff --git a/drivers/net/datapath/dpm/datapath_proc.c b/drivers/net/datapath/dpm/datapath_proc.c
index 77091626d670..decaffd7169d 100644
--- a/drivers/net/datapath/dpm/datapath_proc.c
+++ b/drivers/net/datapath/dpm/datapath_proc.c
@@ -120,7 +120,6 @@ int proc_port_dump(struct seq_file *s, int pos)
 {
 	int i, j;
 	int cqm_p;
-	int dma_ch_offset;
 	int (*print_ctp_bp)(struct seq_file *s, int inst,
 			    struct pmac_port_info *port,
 			    int subif_index, u32 flag);
@@ -130,6 +129,7 @@ int proc_port_dump(struct seq_file *s, int pos)
 	int loop;
 	struct inst_info *info = NULL;
 	struct dma_chan_info *dma;
+	struct cqm_port_info *cqm;
 
 	if (!capable(CAP_SYS_PACCT))
 		return -1;
@@ -145,8 +145,7 @@ int proc_port_dump(struct seq_file *s, int pos)
 		if (pos == 0) {
 			struct dp_subif_info *sif = get_dp_port_subif(port, 0);
 
-			seq_printf(s,
-				   "Reserved Port: rx_err_drop=0x%08x  tx_err_drop=0x%08x\n",
+			seq_printf(s, "Reserved Port: rx_err_drop=0x%08x  tx_err_drop=0x%08x\n",
 				   STATS_GET(port->rx_err_drop),
 				   STATS_GET(port->tx_err_drop));
 			if (print_ctp_bp && pos) /* just to print bridge
@@ -154,38 +153,26 @@ int proc_port_dump(struct seq_file *s, int pos)
 						  * CPU port no ctp/bridge port
 						  */
 				print_ctp_bp(s, tmp_inst, port, 0, 0);
-			seq_printf(s, "           qid/node:       %d/%d\n",
-				   sif->qid,
-				   sif->q_node[0]);
+			seq_printf(s, "           qid/node:     %d/%d\n",
+				   sif->qid, sif->q_node[0]);
 			seq_printf(s, "           port/node:    %d/%d\n",
-				   sif->cqm_deq_port[0],
-				   sif->qos_deq_port[0]);
+				   sif->cqm_deq_port[0], sif->qos_deq_port[0]);
 		} else
-			seq_printf(s,
-				   "%02d: rx_err_drop=0x%08x  tx_err_drop=0x%08x\n",
-				   pos,
-				   STATS_GET(port->rx_err_drop),
+			seq_printf(s, "%02d: rx_err_drop=0x%08x  tx_err_drop=0x%08x\n",
+				   pos, STATS_GET(port->rx_err_drop),
 				   STATS_GET(port->tx_err_drop));
 
 		goto EXIT;
 	}
 
-	seq_printf(s,
-		   "%02d:%s=0x%0lx(%s:%8s) %s=%02d %s=%02d %s=%d(%s) %s=%d\n",
-		   pos,
-		   "module",
-		   (uintptr_t)port->owner,
-		   "name",
-		   port->owner->name,
-		   "dev_port",
-		   port->dev_port,
-		   "dp_port",
-		   port->port_id,
-		   "itf_base",
-		   start,
+	seq_printf(s, "%02d:%s=0x%0lx(%s:%8s) %s=%02d %s=%02d %s=%d(%s) %s=%d\n",
+		   pos, "module", (uintptr_t)port->owner,
+		   "name", port->owner->name,
+		   "dev_port", port->dev_port,
+		   "dp_port", port->port_id,
+		   "itf_base", start,
 		   port->itf_info ? "Enabled" : "Not Enabled",
-		   "ctp_max",
-		   port->ctp_max);
+		   "ctp_max", port->ctp_max);
 	seq_printf(s, "    status:            %s\n",
 		   dp_port_status_str[port->status]);
 	seq_puts(s, "    allocate_flags:    ");
@@ -272,31 +259,29 @@ int proc_port_dump(struct seq_file *s, int pos)
 			   STATS_GET(mib->tx_hdr_room_pkt));
 		if (print_ctp_bp)
 			print_ctp_bp(s, tmp_inst, port, i, 0);
-		seq_printf(s, "           subif_qid=%d\n", sif->num_qid);
-		seq_printf(s, "           dqport_idx=%d\n", sif->cqm_port_idx);
+		seq_printf(s, "           subif_qid:      %d\n", sif->num_qid);
+		seq_printf(s, "           dqport_idx:     %d\n",
+			   sif->cqm_port_idx);
 		for (j = 0; j < sif->num_qid; j++) {
-			seq_printf(s, "           [%02d]qid/node:    %d/%d\n",
-				   j, sif->qid_list[j],
-				   sif->q_node[j]);
+			seq_printf(s, "%13s[%02d]:qid/node:    %d/%d\n", "",
+				   j, sif->qid_list[j], sif->q_node[j]);
 			cqm_p = sif->cqm_deq_port[j];
-			seq_printf(s, "           port/node:    %d/%d(ref=%d)\n",
-				   cqm_p, sif->qos_deq_port[j],
-				   dp_deq_port_tbl[tmp_inst][cqm_p].ref_cnt);
-
-		        cid = _DMA_CONTROLLER(
-				    dp_deq_port_tbl[tmp_inst][cqm_p].dma_chan);
-		        pid = _DMA_PORT(dp_deq_port_tbl[tmp_inst][cqm_p].dma_chan);
-		        nid = _DMA_CHANNEL(dp_deq_port_tbl[tmp_inst][cqm_p].dma_chan);
-		        dma_ch_offset = dp_deq_port_tbl[tmp_inst][cqm_p].dma_ch_offset;
-		        if (port->num_dma_chan && dp_dma_chan_tbl[tmp_inst]) {
-			        dma = dp_dma_chan_tbl[tmp_inst] + dma_ch_offset;
-			        seq_printf(s, "           tx_dma_ch:      0x%x(ref=%d,dma-ctrl=%d,port=%d,channel=%d)\n",
-				   dp_deq_port_tbl[tmp_inst][cqm_p].dma_chan,
-				   atomic_read(&dma->ref_cnt), cid, pid, nid);
-		        }
-
+			cqm = &dp_deq_port_tbl[tmp_inst][cqm_p];
+			seq_printf(s, "%18sport/node:   %d/%d(ref=%d)\n", "",
+				   cqm_p, sif->qos_deq_port[j], cqm->ref_cnt);
+			cid = _DMA_CONTROLLER(cqm->dma_chan);
+			pid = _DMA_PORT(cqm->dma_chan);
+			nid = _DMA_CHANNEL(cqm->dma_chan);
+			dma = dp_dma_chan_tbl[tmp_inst];
+			if (port->num_dma_chan && dma) {
+				dma += cqm->dma_ch_offset;
+				seq_printf(s, "%18stx_dma_ch:   0x%x(ref=%d,dma-ctrl=%d,port=%d,channel=%d)\n",
+					   "", cqm->dma_chan,
+					   atomic_read(&dma->ref_cnt),
+					   cid, pid, nid);
+			}
 		}
-		seq_printf(s, "           mac_learn_dis:    %d\n",
+		seq_printf(s, "           mac_learn_dis:  %d\n",
 			   sif->mac_learn_dis);
 
 		seq_printf(s, "           gpid:           %d\n", sif->gpid);
