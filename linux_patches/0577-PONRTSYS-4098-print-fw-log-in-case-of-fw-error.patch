From 19ffffbea7b24c58a3dec9f76ecb48354ab0ff66 Mon Sep 17 00:00:00 2001
From: Oren Bakshe <oren.bakshe@intel.com>
Date: Thu, 2 May 2019 18:26:33 +0300
Subject: [PATCH] PONRTSYS-4098: print fw log in case of fw error

---
 .../net/ethernet/lantiq/ppv4/qos/pp_qos_debugfs.c  | 44 ----------------
 drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_fw.c   | 61 +++++++++++++++++++---
 drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_fw.h   |  1 +
 include/net/pp_qos_drv.h                           |  6 ++-
 4 files changed, 61 insertions(+), 51 deletions(-)

diff --git a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_debugfs.c b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_debugfs.c
index 7d8a1b863dd7..987d0ed24250 100644
--- a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_debugfs.c
+++ b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_debugfs.c
@@ -1345,50 +1345,6 @@ static const struct file_operations debug_cmd_fops = {
 	.write = dbg_cmd_write,
 };
 
-static void swap_msg(char *msg)
-{
-	unsigned int i;
-	uint32_t *cur;
-
-	cur = (uint32_t *)msg;
-
-	for (i = 0; i < 32; ++i)
-		cur[i] = le32_to_cpu(cur[i]);
-}
-
-static void print_fw_log(struct platform_device *pdev)
-{
-	char		msg[128];
-	unsigned int	num;
-	unsigned int    i;
-	uint32_t	*addr;
-	uint32_t	read;
-	char		*cur;
-	struct device	*dev;
-	struct pp_qos_drv_data *pdata;
-
-	pdata = platform_get_drvdata(pdev);
-	addr = (uint32_t *)(pdata->dbg.fw_logger_addr);
-	num = qos_u32_from_uc(*addr);
-	read = qos_u32_from_uc(addr[1]);
-	dev = &pdev->dev;
-	cur = (char *)(pdata->dbg.fw_logger_addr + 8);
-
-	dev_info(dev, "addr is 0x%08X num of messages is %u, read index is %u",
-		 (unsigned int)(uintptr_t)cur,
-		 num,
-		 read);
-
-	for (i = read; i < num; ++i) {
-		memcpy((char *)msg, (char *)(cur + 128 * i), 128);
-		swap_msg(msg);
-		msg[127] = '\0';
-		dev_info(dev, "[ARC]: %s\n", msg);
-	}
-
-	addr[1] = num;
-}
-
 static int phy2id_get(void *data, u64 *val)
 {
 	u16 id;
diff --git a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_fw.c b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_fw.c
index e9c6325b46bc..78aa3f17ce27 100644
--- a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_fw.c
+++ b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_fw.c
@@ -299,6 +299,52 @@ int do_load_firmware(struct pp_qos_dev *qdev, const struct ppv4_qos_fw *fw,
 	return 0;
 }
 
+static void swap_msg(char *msg, unsigned int len)
+{
+	unsigned int i;
+	uint32_t *cur;
+
+	cur = (uint32_t *)msg;
+
+	for (i = 0; i < len; ++i)
+		cur[i] = le32_to_cpu(cur[i]);
+}
+
+void print_fw_log(struct platform_device *pdev)
+{
+	char		msg[PPV4_QOS_LOGGER_MSG_SIZE];
+	unsigned int	num;
+	unsigned int	i;
+	uint32_t	*addr;
+	uint32_t	read;
+	char		*cur;
+	struct device	*dev;
+	struct pp_qos_drv_data	*pdata;
+
+	pdata = platform_get_drvdata(pdev);
+	addr = (uint32_t *)(pdata->dbg.fw_logger_addr);
+	num = qos_u32_from_uc(addr[0]);
+	read = qos_u32_from_uc(addr[1]);
+	dev = &pdev->dev;
+	cur = (char *)(pdata->dbg.fw_logger_addr + 8);
+
+	dev_info(dev, "addr is 0x%08X num of messages is %u, read index is %u",
+		 (unsigned int)(uintptr_t)cur,
+		 num,
+		 read);
+
+	for (i = read; i < num; ++i) {
+		memcpy((char *)msg, 
+		       (char *)(cur + PPV4_QOS_LOGGER_MSG_SIZE * i),
+		       PPV4_QOS_LOGGER_MSG_SIZE);
+		swap_msg(msg, (PPV4_QOS_LOGGER_MSG_SIZE / sizeof(uint32_t)));
+		msg[PPV4_QOS_LOGGER_MSG_SIZE - 1] = '\0';
+		dev_info(dev, "[ARC]: %s\n", msg);
+	}
+
+	addr[1] = num;
+}
+
 /******************************************************************************/
 /*                         Driver commands structures	                      */
 /******************************************************************************/
@@ -2682,6 +2728,7 @@ void check_completion(struct pp_qos_dev *qdev)
 			val = qos_u32_from_uc(*pos);
 			++i;
 			if (i == NUM_OF_POLLS) {
+				print_fw_log(qdev->pdev);
 				QOS_ASSERT(
 					0,
 					"FW is not responding, polling offset 0x%04tX for cmd type %s\n",
@@ -2692,6 +2739,7 @@ void check_completion(struct pp_qos_dev *qdev)
 			}
 		}
 		if (val & UC_CMD_FLAG_UC_ERROR) {
+			print_fw_log(qdev->pdev);
 			QOS_ASSERT(0,
 				   "FW signaled error, polling offset 0x%04tX, cmd type %s\n",
 				   (void *)pos - (void *)(qdev->fwcom.cmdbuf),
@@ -2744,12 +2792,13 @@ void enqueue_cmds(struct pp_qos_dev *qdev)
 	u16 *rlm_ids;
 	u32 num_queues = 0;
 	u32 max_allowed_addr_phy;
+	u32 cmdbuf_sz;
 
 	if (PP_QOS_DEVICE_IS_ASSERT(qdev))
 		return;
 
 	start = qdev->fwcom.cmdbuf;
-	remain = qdev->fwcom.cmdbuf_sz;
+	cmdbuf_sz = qdev->fwcom.cmdbuf_sz;
 
 	pushed = 0;
 	cur = start;
@@ -2761,8 +2810,8 @@ void enqueue_cmds(struct pp_qos_dev *qdev)
 				4 + FW_CMD_BUFFER_DCCM_START) & 0xFFFFFFFF);
 	++cur;
 
+	remain = cmdbuf_sz - ((uintptr_t)cur - (uintptr_t)start);
 	internals = qdev->fwbuf;
-	remain -= 16;
 	flags = UC_CMD_FLAG_IMMEDIATE;
 
 	cmd_init(
@@ -2796,7 +2845,7 @@ void enqueue_cmds(struct pp_qos_dev *qdev)
 						&cmd_internal,
 						cmd_internal.base.len);
 				++pushed;
-				remain -= (uintptr_t)cur - (uintptr_t)prev;
+				remain = cmdbuf_sz - ((uintptr_t)cur - (uintptr_t)start);
 			}
 		}
 		if (pushed)
@@ -2991,7 +3040,7 @@ void enqueue_cmds(struct pp_qos_dev *qdev)
 					&dcmd.stub,
 					dcmd.stub.cmd.len);
 			++pushed;
-			remain -= (uintptr_t)cur - (uintptr_t)prev;
+			remain = cmdbuf_sz - ((uintptr_t)cur - (uintptr_t)start);
 		}
 	}
 
@@ -3016,7 +3065,7 @@ void enqueue_cmds(struct pp_qos_dev *qdev)
 					&cmd_internal);
 			if (cur != prev) {
 				pushed += 2;
-				remain -= (uintptr_t)cur - (uintptr_t)prev;
+				remain = cmdbuf_sz - ((uintptr_t)cur - (uintptr_t)start);
 			}
 		}
 
@@ -3099,7 +3148,7 @@ void enqueue_cmds(struct pp_qos_dev *qdev)
 						&cmd_internal,
 						cmd_internal.base.len);
 				++pushed;
-				remain -= (uintptr_t)cur - (uintptr_t)prev;
+				remain = cmdbuf_sz - ((uintptr_t)cur - (uintptr_t)start);
 			}
 		}
 		/* No pending suspended ports/moving nodes - Reset counters */
diff --git a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_fw.h b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_fw.h
index 6ff5fa0cec15..0339d34b0a5c 100644
--- a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_fw.h
+++ b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_fw.h
@@ -38,6 +38,7 @@ struct ppv4_qos_fw {
 };
 
 int load_firmware(struct pp_qos_dev *qdev, const char *name);
+void print_fw_log(struct platform_device *pdev);
 
 #ifndef PP_QOS_DISABLE_CMDQ
 void create_move_cmd(struct pp_qos_dev *qdev, uint16_t dst, uint16_t src,
diff --git a/include/net/pp_qos_drv.h b/include/net/pp_qos_drv.h
index bcb345914754..5a01d1a3c466 100644
--- a/include/net/pp_qos_drv.h
+++ b/include/net/pp_qos_drv.h
@@ -140,7 +140,11 @@ struct pp_qos_parent_node_properties {
  * @parent:		parent's id
  * @priority:		strict priority, relevant only if parent uses wsp
  *                      arbitration
- * @bandwidth_share:	bandwidth percentage from parent
+ * @bandwidth_share:	For WRR, child's weight.
+ *                      For example, in case parent has 3 childs - Setting
+ *                      weights of 2-1-1 for the childs means that the first
+ *                      child will have double credits to transmit comparing to
+ *                      other two childs 
  */
 struct pp_qos_child_node_properties {
 	unsigned int	parent;
