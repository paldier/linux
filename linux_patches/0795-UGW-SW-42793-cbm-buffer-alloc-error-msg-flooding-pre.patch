From 7bf2e748ea9a5ec1057bda15288bc18bb1898880 Mon Sep 17 00:00:00 2001
From: agaraix <anath.bandux.garai@intel.com>
Date: Thu, 3 Oct 2019 15:46:53 +0530
Subject: [PATCH] UGW_SW-42793 : cbm buffer alloc error msg flooding prevention

- Allowed cbm buffer alloc error msg once to avoid flooding.
- Enabled debugfs entry about cbm buffer alloc errors details.
---
 drivers/net/ethernet/lantiq/cqm/grx500/cbm.c      | 22 ++++++++++++++++++++--
 drivers/net/ethernet/lantiq/cqm/grx500/cbm.h      |  9 +++++++++
 drivers/net/ethernet/lantiq/cqm/grx500/cbm_proc.c | 17 ++++++++++++++++-
 drivers/net/ethernet/lantiq/cqm/grx500/cbm_proc.h |  2 ++
 4 files changed, 47 insertions(+), 3 deletions(-)

diff --git a/drivers/net/ethernet/lantiq/cqm/grx500/cbm.c b/drivers/net/ethernet/lantiq/cqm/grx500/cbm.c
index e0d9de87a963..46d7c526d323 100644
--- a/drivers/net/ethernet/lantiq/cqm/grx500/cbm.c
+++ b/drivers/net/ethernet/lantiq/cqm/grx500/cbm.c
@@ -47,6 +47,13 @@ static struct cbm_buff_info g_cbm_buff = {
 	.std_fsqm_idx = 0,
 	.jbo_fsqm_idx = 1
 	};
+
+static struct cbm_buff_stat g_cbm_buff_stat = {
+	.std_alloc_err = 0,
+	.jbo_alloc_err = 0,
+	.xmit_alloc_err = 0
+	};
+
 #ifdef CONFIG_CBM_LS_ENABLE
 static struct cbm_desc_list g_cbm_dq_dlist[204];
 static void __iomem *dqmdesc[2];
@@ -647,6 +654,11 @@ s32 reserved_dp_resources_get(
 	return 0;
 }
 
+struct cbm_buff_stat *cbm_buff_stat_get(void)
+{
+	return &g_cbm_buff_stat;
+}
+
 static void *cbm_buffer_alloc_grx500(u32 pid, u32 flag)
 {
 	u32 buf_addr = 0;
@@ -665,7 +677,12 @@ static void *cbm_buffer_alloc_grx500(u32 pid, u32 flag)
 		 (i++) < DEFAULT_WAIT_CYCLES);
 
 	if ((buf_addr & 0xFFFFF800) == 0xFFFFF800) {
-		cbm_err("alloc buffer fail for portid: %d type %d ofsc %d\n", pid, flag, cbm_get_std_free_count());
+		pr_err_once("alloc buffer fail for portid: %d type %d ofsc %d\n",
+			pid, flag, cbm_get_std_free_count());
+		if ((flag & CBM_PORT_F_JUMBO_BUF))
+			g_cbm_buff_stat.jbo_alloc_err++;
+		else
+			g_cbm_buff_stat.std_alloc_err++;
 		local_irq_restore(sys_flag);
 		return NULL;
 	}
@@ -1762,7 +1779,8 @@ cbm_cpu_pkt_tx_grx500(
 			return CBM_FAILURE;
 		}
 		if (!new_buf) {
-			pr_err("%s: cbm buffer alloc failed ..\n", __func__);
+			pr_err_once("%s: cbm buffer alloc failed ..\n", __func__);
+			g_cbm_buff_stat.xmit_alloc_err++;
 			dev_kfree_skb_any(skb);
 			return CBM_FAILURE;
 		}
diff --git a/drivers/net/ethernet/lantiq/cqm/grx500/cbm.h b/drivers/net/ethernet/lantiq/cqm/grx500/cbm.h
index b72f7de9b95d..2b9fa1938b02 100644
--- a/drivers/net/ethernet/lantiq/cqm/grx500/cbm.h
+++ b/drivers/net/ethernet/lantiq/cqm/grx500/cbm.h
@@ -582,6 +582,12 @@ struct cbm_buff_info {
 	unsigned int jbo_fsqm_idx;
 };
 
+struct cbm_buff_stat {
+	unsigned int std_alloc_err;
+	unsigned int jbo_alloc_err;
+	unsigned int xmit_alloc_err;
+};
+
 struct cbm_jumbo_divide {
 s32 jumbo_buf_used;
 void *curr_jumbo_buf;
@@ -593,5 +599,8 @@ struct cbm_qlink_get {
 u32 qid[EGRESS_QUEUE_ID_MAX];
 u32 qlink_sbin[EGRESS_QUEUE_ID_MAX];
 };
+
+struct cbm_buff_stat *cbm_buff_stat_get(void);
+
 #endif /* __CBM_COMMON_H__ */
 
diff --git a/drivers/net/ethernet/lantiq/cqm/grx500/cbm_proc.c b/drivers/net/ethernet/lantiq/cqm/grx500/cbm_proc.c
index acbcfb89e1af..0aa7dbbc93fc 100644
--- a/drivers/net/ethernet/lantiq/cqm/grx500/cbm_proc.c
+++ b/drivers/net/ethernet/lantiq/cqm/grx500/cbm_proc.c
@@ -30,13 +30,14 @@ static struct dp_proc_entry cbm_proc_entries[] = {
 	 cbm_enq_ovh_bytes_write},
 	{PROC_FILE_CBM_COUNTER_MODE, cbm_counter_mode_get_proc, NULL, NULL,
 	 cbm_counter_mode_set_proc},
-	 {PROC_FILE_CBM_Q_THRES, cbm_q_thres_get_proc, NULL, NULL,
+	{PROC_FILE_CBM_Q_THRES, cbm_q_thres_get_proc, NULL, NULL,
 	 cbm_q_thres_set_proc},
 	{PROC_FILE_CBM_Q_DELAY, NULL, NULL, NULL,
 	 cbm_eqm_delay_set_proc},
 	 #ifdef QOCC_TEST
 	{PROC_FILE_CBM_QOCC_TEST, NULL, NULL, NULL, cbm_qocc_test_steps},
 	#endif
+	{PROC_FILE_CBM_BUF_STAT, cbm_buff_stat_dump, NULL, NULL, NULL},
 	{NULL, NULL, NULL, NULL, NULL}
 };
 
@@ -1054,6 +1055,20 @@ ssize_t cbm_qocc_test_steps(struct file *file, const char *buf,
 	return count;
 }
 #endif
+
+void cbm_buff_stat_dump(struct seq_file *s)
+{
+	struct cbm_buff_stat *buff_stat;
+
+	if (!capable(CAP_SYS_ADMIN))
+		return;
+
+	buff_stat = cbm_buff_stat_get();
+	seq_printf(s, "Std      buf alloc error = %d\n", buff_stat->std_alloc_err);
+	seq_printf(s, "Jumbo    buf alloc error = %d\n", buff_stat->jbo_alloc_err);
+	seq_printf(s, "Transmit buf alloc error = %d\n", buff_stat->xmit_alloc_err);
+}
+
 ssize_t fsqm_freesegment_read(struct file *file, const char *buf,
 			size_t count, loff_t *ppos)
 {
diff --git a/drivers/net/ethernet/lantiq/cqm/grx500/cbm_proc.h b/drivers/net/ethernet/lantiq/cqm/grx500/cbm_proc.h
index 21bb173ce0f2..6fc75c96128a 100644
--- a/drivers/net/ethernet/lantiq/cqm/grx500/cbm_proc.h
+++ b/drivers/net/ethernet/lantiq/cqm/grx500/cbm_proc.h
@@ -51,6 +51,7 @@
 #ifdef QOCC_TEST
 #define PROC_FILE_CBM_QOCC_TEST "cbmqocctest"
 #endif
+#define PROC_FILE_CBM_BUF_STAT "cbmbuffstat"
 
 #define get_val(val, mask, offset) (((val) & (mask)) >> (offset))
 
@@ -81,5 +82,6 @@ ssize_t cbm_eqm_delay_set_proc(struct file *file, const char *buf, size_t count,
 #ifdef QOCC_TEST
 ssize_t cbm_qocc_test_steps(struct file *file, const char *buf, size_t count, loff_t *ppos);
 #endif
+void cbm_buff_stat_dump(struct seq_file *s);
 #define CBM_PRINT printk
 #endif
