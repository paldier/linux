From 42a8b3650287cb501120b01fcf4891cdb76175ff Mon Sep 17 00:00:00 2001
From: Oren Bakshe <oren.bakshe@intel.com>
Date: Thu, 6 Jun 2019 13:15:01 +0300
Subject: [PATCH] PONRTSYS-4428: Egress green/yellow thresholds support

---
 .../net/ethernet/lantiq/ppv4/qos/pp_qos_debugfs.c  |  4 +++
 drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_fw.c   | 31 +++++++++++++++++++---
 drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_main.c | 16 +++++++++++
 .../net/ethernet/lantiq/ppv4/qos/pp_qos_uc_defs.h  | 22 +++++++++------
 .../net/ethernet/lantiq/ppv4/qos/pp_qos_utils.h    |  4 +++
 include/net/pp_qos_drv.h                           |  6 +++++
 6 files changed, 71 insertions(+), 12 deletions(-)

diff --git a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_debugfs.c b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_debugfs.c
index 31adde0732da..470877630360 100644
--- a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_debugfs.c
+++ b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_debugfs.c
@@ -531,6 +531,10 @@ static u16 create_port_props(struct dbg_prop *props, u16 size,
 	dbg_add_prop(props, &num, size, "cred", "Port credit", &pconf->credit);
 	dbg_add_prop(props, &num, size, "dis",
 		"Disable port tx", &pconf->disable);
+	dbg_add_prop(props, &num, size, "green_threshold",
+		"Egress bytes green threshold", &pconf->green_threshold);
+	dbg_add_prop(props, &num, size, "yellow_threshold",
+		"Egress bytes yellow threshold", &pconf->yellow_threshold);
 
 	return num;
 }
diff --git a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_fw.c b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_fw.c
index 8e5bcfb01c86..21abaa881b99 100644
--- a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_fw.c
+++ b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_fw.c
@@ -425,6 +425,8 @@ struct port_properties {
 	uint8_t  packet_credit_enable;
 	unsigned int credit;
 	int	     disable;
+	unsigned int green_threshold;
+	unsigned int yellow_threshold;
 };
 
 struct cmd_add_port {
@@ -823,6 +825,8 @@ static void set_cmd_port_properties(
 	prop->ring_size = conf->ring_size;
 	prop->credit = conf->credit;
 	prop->disable = !!conf->disable;
+	prop->green_threshold = conf->green_threshold;
+	prop->yellow_threshold = conf->yellow_threshold;
 }
 
 static void create_add_port_cmd(
@@ -1363,6 +1367,8 @@ struct fw_set_port {
 	void	 *ring_addr;
 	size_t	 ring_size;
 	int active;
+	unsigned int green_threshold;
+	unsigned int yellow_threshold;
 };
 
 struct fw_set_sched {
@@ -1557,8 +1563,8 @@ static uint32_t *fw_write_add_port_cmd(
 	*buf++ = qos_u32_to_uc(GET_ADDRESS_HIGH(cmd->prop.ring_addr));
 	*buf++ = qos_u32_to_uc(((uintptr_t)cmd->prop.ring_addr) & 0xFFFFFFFF);
 	*buf++ = qos_u32_to_uc(cmd->prop.credit);
-	*buf++ = qos_u32_to_uc(0xFFFFFFFF); /* Egress Port green Threshold */
-	*buf++ = qos_u32_to_uc(0xFFFFFFFF); /* Egress Port yellow Threshold */
+	*buf++ = qos_u32_to_uc(cmd->prop.green_threshold);
+	*buf++ = qos_u32_to_uc(cmd->prop.yellow_threshold);
 	return buf;
 }
 
@@ -1572,9 +1578,9 @@ static uint32_t *fw_write_set_port_cmd(
 {
 	*buf++ = qos_u32_to_uc(UC_QOS_CMD_SET_PORT);
 	*buf++ = qos_u32_to_uc(flags);
-	*buf++ = qos_u32_to_uc(14);
+	*buf++ = qos_u32_to_uc(16);
 	*buf++ = qos_u32_to_uc(phy);
-	*buf++ = qos_u32_to_uc(common->valid | parent->valid | port->valid);
+	*buf++ = qos_u32_to_uc(common->valid | parent->valid);
 	*buf++ = qos_u32_to_uc(common->suspend);
 	if (parent->first > parent->last) {
 		parent->first = 0;
@@ -1591,6 +1597,8 @@ static uint32_t *fw_write_set_port_cmd(
 	*buf++ = qos_u32_to_uc(GET_ADDRESS_HIGH(port->ring_addr));
 	*buf++ = qos_u32_to_uc(((uintptr_t)port->ring_addr) & 0xFFFFFFFF);
 	*buf++ = qos_u32_to_uc(port->active);
+	*buf++ = qos_u32_to_uc(port->green_threshold);
+	*buf++ = qos_u32_to_uc(port->yellow_threshold);
 	return buf;
 }
 
@@ -2190,11 +2198,26 @@ static uint32_t *set_port_cmd_wrapper(
 	set_common(&cmd->prop.common, &fwdata->common, modified);
 	set_parent(&cmd->prop.parent, &fwdata->parent, modified);
 	fwdata->type_data.port.valid = 0;
+
 	if (QOS_BITS_IS_SET(modified, QOS_MODIFIED_DISABLE)) {
 		QOS_BITS_SET(fwdata->type_data.port.valid, PORT_CONF_ACTIVE);
 		fwdata->type_data.port.active = !!cmd->prop.disable;
 	}
 
+	if (QOS_BITS_IS_SET(modified, QOS_MODIFIED_PORT_GREEN_THRESHOLD)) {
+		QOS_BITS_SET(fwdata->type_data.port.valid,
+			     PORT_CONF_GREEN_THRESHOLD);
+		fwdata->type_data.port.green_threshold =
+			cmd->prop.green_threshold;
+	}
+
+	if (QOS_BITS_IS_SET(modified, QOS_MODIFIED_PORT_YELLOW_THRESHOLD)) {
+		QOS_BITS_SET(fwdata->type_data.port.valid,
+			     PORT_CONF_YELLOW_THRESHOLD);
+		fwdata->type_data.port.yellow_threshold =
+			cmd->prop.yellow_threshold;
+	}
+
 	if ((fwdata->common.valid | fwdata->parent.valid |
 				fwdata->type_data.port.valid) == 0) {
 		QOS_LOG_DEBUG("IGNORING EMPTY CMD_TYPE_SET_PORT\n");
diff --git a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_main.c b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_main.c
index 50b2cc6a79ed..f383d2083fba 100644
--- a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_main.c
+++ b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_main.c
@@ -87,6 +87,17 @@ static int set_port_specific_prop(struct pp_qos_dev *qdev,
 		node->data.port.disable = !!(conf->disable);
 		QOS_BITS_SET(*modified, QOS_MODIFIED_DISABLE);
 	}
+
+	if (node->data.port.green_threshold != conf->green_threshold) {
+		node->data.port.green_threshold = conf->green_threshold;
+		QOS_BITS_SET(*modified, QOS_MODIFIED_PORT_GREEN_THRESHOLD);
+	}
+
+	if (node->data.port.yellow_threshold != conf->yellow_threshold) {
+		node->data.port.yellow_threshold = conf->yellow_threshold;
+		QOS_BITS_SET(*modified, QOS_MODIFIED_PORT_YELLOW_THRESHOLD);
+	}
+
 	return 0;
 }
 
@@ -183,6 +194,8 @@ void pp_qos_port_conf_set_default(struct pp_qos_port_conf *conf)
 		QOS_NO_SHARED_BANDWIDTH_GROUP;
 	conf->port_parent_prop.arbitration = PP_QOS_ARBITRATION_WSP;
 	conf->packet_credit_enable = 1;
+	conf->green_threshold = 0xFFFFFFFF;
+	conf->yellow_threshold = 0xFFFFFFFF;
 }
 
 int pp_qos_port_allocate(
@@ -456,6 +469,9 @@ static int _pp_qos_port_conf_get(
 			QOS_NODE_FLAGS_PORT_PACKET_CREDIT_ENABLE);
 	conf->credit = node->data.port.credit;
 	conf->disable = node->data.port.disable;
+	conf->green_threshold = node->data.port.green_threshold;
+	conf->yellow_threshold = node->data.port.yellow_threshold;
+
 	return  get_node_prop(
 			qdev,
 			node,
diff --git a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_uc_defs.h b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_uc_defs.h
index 15c138e400dd..4161ca839b0b 100644
--- a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_uc_defs.h
+++ b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_uc_defs.h
@@ -36,8 +36,8 @@
 
 /* UC version */
 #define UC_VERSION_MAJOR	(1)
-#define UC_VERSION_MINOR	(0)
-#define UC_VERSION_BUILD	(13)
+#define UC_VERSION_MINOR	(4)
+#define UC_VERSION_BUILD	(22)
 
 /**************************************************************************
  *! @enum	UC_STATUS
@@ -275,22 +275,28 @@ enum wred_queue_conf {
  **************************************************************************/
 enum port_conf {
 	/*!< None */
-	PORT_CONF_NONE					=	0x0000,
+	PORT_CONF_NONE              = 0,
 
 	/*!< Ring Size */
-	PORT_CONF_RING_SIZE				=	0x0001,
+	PORT_CONF_RING_SIZE         = BIT(0),
 
 	/*!< Ring address high */
-	PORT_CONF_RING_ADDRESS_HIGH		=	0x0002,
+	PORT_CONF_RING_ADDRESS_HIGH = BIT(1),
 
 	/*!< Ring address low */
-	PORT_CONF_RING_ADDRESS_LOW		=	0x0004,
+	PORT_CONF_RING_ADDRESS_LOW  = BIT(2),
 
 	/*!< Enable port */
-	PORT_CONF_ACTIVE				=	0x0008,
+	PORT_CONF_ACTIVE            = BIT(3),
+
+	/*!< Green bytes threshold */
+	PORT_CONF_GREEN_THRESHOLD   = BIT(4),
+
+	/*!< Yellow bytes threshold */
+	PORT_CONF_YELLOW_THRESHOLD  = BIT(5),
 
 	/*!< All flags are set */
-	PORT_CONF_ALL					=	0xFFFF
+	PORT_CONF_ALL               = 0xFFFF
 };
 
 /**************************************************************************
diff --git a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_utils.h b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_utils.h
index d457c9b5c2b4..4a3984fa7cac 100644
--- a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_utils.h
+++ b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_utils.h
@@ -98,6 +98,8 @@
 #define QOS_MODIFIED_WRED_FIXED_DROP_PROB_ENABLE	BIT(27)
 #define QOS_MODIFIED_WRED_FIXED_GREEN_PROB	BIT(28)
 #define QOS_MODIFIED_WRED_FIXED_YELLOW_PROB	BIT(29)
+#define QOS_MODIFIED_PORT_GREEN_THRESHOLD	BIT(30)
+#define QOS_MODIFIED_PORT_YELLOW_THRESHOLD	BIT(31)
 
 #define MAX_MOVING_NODES 8
 
@@ -140,6 +142,8 @@ struct qos_node {
 			size_t		ring_size;
 			unsigned int	credit;
 			int		disable;
+			unsigned int	green_threshold;
+			unsigned int	yellow_threshold;
 		} port;
 		struct {
 			uint16_t	new_child_phy;
diff --git a/include/net/pp_qos_drv.h b/include/net/pp_qos_drv.h
index 5a01d1a3c466..5f37d12c5c51 100644
--- a/include/net/pp_qos_drv.h
+++ b/include/net/pp_qos_drv.h
@@ -190,6 +190,8 @@ struct pp_qos_port_stat {
  *                              when packet_credit is enabled this designates
  *                              packet credit, otherwise byte credit
  * @disable			disable port transmission
+ * @green_threshold		Egress green bytes threshold
+ * @yellow_threshold		Egress yellow bytes threshold
  */
 struct pp_qos_port_conf {
 	struct pp_qos_common_node_properties common_prop;
@@ -199,6 +201,8 @@ struct pp_qos_port_conf {
 	int      packet_credit_enable;
 	unsigned int credit;
 	int	disable;
+	unsigned int green_threshold;
+	unsigned int yellow_threshold;
 };
 
 
@@ -229,6 +233,8 @@ struct pp_qos_port_info {
  *    byte_credit - 0
  *    ring_size - 0
  *    ring_address - 0
+ *    green_threshold - 0xFFFFFFFF
+ *    yellow_threshold - 0xFFFFFFFF
  */
 void pp_qos_port_conf_set_default(struct pp_qos_port_conf *conf);
 
