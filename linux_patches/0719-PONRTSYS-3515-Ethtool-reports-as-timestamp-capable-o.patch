From fbededf007ff2cc96a5e3f6b1e0bff6b16c715dd Mon Sep 17 00:00:00 2001
From: thampan <joby.thampan@intel.com>
Date: Sun, 21 Jul 2019 18:14:52 +0800
Subject: [PATCH] PONRTSYS-3515: Ethtool reports as timestamp capable on all
 interfaces (Eth or PON)

    - Bug Fix for Ethtool reporting timestamp capability on all interfaces (PON or Active Ethernet)
    - Timestamp is only for Active ethernet Physical and Non-Physical interfaces only
    - For PON Interfaces there is no timestamp capability
    - Compilation warning removed
    - DP_ETH_TEST code removed
---
 drivers/net/datapath/dpm/datapath_api.c           |  2 +-
 drivers/net/datapath/dpm/datapath_ioctl.c         | 45 ++++++++++++++++-------
 drivers/net/datapath/dpm/gswip31/datapath_gswip.c |  9 -----
 drivers/net/datapath/dpm/gswip32/datapath_gswip.c |  8 ----
 4 files changed, 32 insertions(+), 32 deletions(-)

diff --git a/drivers/net/datapath/dpm/datapath_api.c b/drivers/net/datapath/dpm/datapath_api.c
index e270a2389e15..23c548377266 100644
--- a/drivers/net/datapath/dpm/datapath_api.c
+++ b/drivers/net/datapath/dpm/datapath_api.c
@@ -123,7 +123,7 @@ void dp_register_ops(int inst, enum DP_OPS_TYPE type, void *ops)
 {
 	if (inst < 0 || inst >= DP_MAX_INST || type >= DP_OPS_CNT) {
 		DP_DEBUG(DP_DBG_FLAG_REG, "wrong index\n");
-		return DP_FAILURE;
+		return;
 	}
 	dp_ops[inst][type] = ops;
 }
diff --git a/drivers/net/datapath/dpm/datapath_ioctl.c b/drivers/net/datapath/dpm/datapath_ioctl.c
index f9f5494d09b6..55a5150ddb2f 100644
--- a/drivers/net/datapath/dpm/datapath_ioctl.c
+++ b/drivers/net/datapath/dpm/datapath_ioctl.c
@@ -12,21 +12,38 @@ static int get_tsinfo(struct net_device *dev,
 	dp_subif_t subif = {0};
 	int inst = 0;
 	int err = 0;
+	struct pmac_port_info *port_info;
 
 	if (dp_get_netif_subifid(dev, NULL, NULL, NULL, &subif, 0)) {
 		PR_ERR("%s dp_get_netif_subifid failed for %s\n",
 		       __func__, dev->name);
 		return -EFAULT;
 	}
-	ops = dp_port_prop[inst].mac_ops[subif.port_id];
-	if (!ops)
-		return -EFAULT;
-	err = ops->mac_get_ts_info(ops, ts_info);
-	if (err < 0)
-		return -EFAULT;
-	DP_DEBUG(DP_DBG_FLAG_INST,
-		 "get_tsinfo done:%s\n",
-		 dev->name);
+
+	port_info = get_dp_port_info(inst, subif.port_id);
+
+	/* PTP is applicable to only physical & non-physical
+	 * active Ethernet ports,
+	 * For Prx300 portid should be 2,3,4
+	 * For LGM portid should be 2 ... 10
+	 */
+	if (port_info->alloc_flags & (DP_F_FAST_ETH_LAN |
+				      DP_F_FAST_ETH_WAN)) {
+		ops = dp_port_prop[inst].mac_ops[subif.port_id];
+		if (!ops)
+			return -EFAULT;
+		err = ops->mac_get_ts_info(ops, ts_info);
+		if (err < 0)
+			return -EFAULT;
+		DP_DEBUG(DP_DBG_FLAG_INST,
+			 "get_tsinfo done:%s\n",
+			 dev->name);
+	}
+
+	/* NOTE: Timestamp should not be reported for all other ports and
+	 * subif, report back 0, otherwise tcpdump for non-physical ports will
+	 * fail
+	 */
 	return 0;
 }
 #endif
@@ -56,10 +73,10 @@ int dp_ops_set(void **dev_ops, int ops_cb_offset,
 			*dp_orig_ops_cb = NULL;
 		}
 		*dev_ops = dp_new_ops;
-			}
-		/* callback for ops  */
-		dev_ops_cb = (void **)((char *)dp_new_ops + ops_cb_offset);
-		*dev_ops_cb = new_ops_cb;
+	}
+	/* callback for ops  */
+	dev_ops_cb = (void **)((char *)dp_new_ops + ops_cb_offset);
+	*dev_ops_cb = new_ops_cb;
 
 	return	DP_SUCCESS;
 }
@@ -137,7 +154,7 @@ int dp_register_ptp_ioctl(struct dp_dev *dp_dev,
 	if (!cap.hw_ptp)
 		return DP_FAILURE;
 
-	    /* netdev ops register */
+	/* netdev ops register */
 	err = dp_ops_set((void **)&dev->netdev_ops,
 			 offsetof(const struct net_device_ops, ndo_do_ioctl),
 			 sizeof(*dev->netdev_ops),
diff --git a/drivers/net/datapath/dpm/gswip31/datapath_gswip.c b/drivers/net/datapath/dpm/gswip31/datapath_gswip.c
index e64cc6295fa8..e006eeeeb860 100644
--- a/drivers/net/datapath/dpm/gswip31/datapath_gswip.c
+++ b/drivers/net/datapath/dpm/gswip31/datapath_gswip.c
@@ -48,21 +48,12 @@ static struct ctp_assign ctp_assign_info[] = {
 	{DP_F_GPON, GSW_LOGICAL_PORT_GPON, 256, 256, 0, 0xFF, CQE_LU_MODE1, 1},
 	{DP_F_EPON, GSW_LOGICAL_PORT_EPON, 256, 256, 0, 0xFF, CQE_LU_MODE1, 1},
 	{DP_F_GINT, GSW_LOGICAL_PORT_GINT, 16, 16, 0, 0xFF, CQE_LU_MODE1, 1},
-/*#define DP_ETH_TEST*/
-#ifndef DP_ETH_TEST
 	{DP_F_FAST_ETH_WAN, GSW_LOGICAL_PORT_8BIT_WLAN, 8, 8, 8, 0xF,
 		CQE_LU_MODE2, 1},
 	{DP_F_FAST_ETH_LAN | DP_F_ALLOC_EXPLICIT_SUBIFID,
 		GSW_LOGICAL_PORT_8BIT_WLAN, 8, 8, 8, 0xF, CQE_LU_MODE2, 1},
 	{DP_F_FAST_ETH_LAN, GSW_LOGICAL_PORT_8BIT_WLAN, 4, 4, 8, 0xF,
 		CQE_LU_MODE2, 1},
-#else /*testing only */
-	{DP_F_FAST_ETH_WAN, GSW_LOGICAL_PORT_OTHER, 1, 1, 8, 0xF,
-		CQE_LU_MODE2, 1},
-	{DP_F_FAST_ETH_LAN | DP_F_ALLOC_EXPLICIT_SUBIFID,
-		GSW_LOGICAL_PORT_OTHER, 1, 1, 8, 0xF, CQE_LU_MODE2, 1},
-	{DP_F_FAST_ETH_LAN, GSW_LOGICAL_PORT_OTHER, 1, 1, 8, 0xF, CQE_LU_MODE2, 1},
-#endif
 	{DP_F_VUNI, GSW_LOGICAL_PORT_8BIT_WLAN, 2, 2, 8, 0xF, CQE_LU_MODE2, 1},
 	{DP_F_FAST_WLAN, GSW_LOGICAL_PORT_8BIT_WLAN, 16, 16, 8, 0xF, CQE_LU_MODE2, 1},
 	{DP_F_FAST_DSL, GSW_LOGICAL_PORT_8BIT_WLAN, 1, 16, 8, 0xF,
diff --git a/drivers/net/datapath/dpm/gswip32/datapath_gswip.c b/drivers/net/datapath/dpm/gswip32/datapath_gswip.c
index d78e313a23ac..cecd892ef381 100644
--- a/drivers/net/datapath/dpm/gswip32/datapath_gswip.c
+++ b/drivers/net/datapath/dpm/gswip32/datapath_gswip.c
@@ -37,20 +37,12 @@ static const struct ctp_assign ctp_assign_info[] = {
 	{DP_F_GPON, GSW_LOGICAL_PORT_GPON, 256, 0, 0xFF, CQE_LU_MODE1, 128, 1},
 	{DP_F_EPON, GSW_LOGICAL_PORT_EPON, 256, 0, 0xFF, CQE_LU_MODE1, 128, 1},
 	{DP_F_GINT, GSW_LOGICAL_PORT_GINT, 8, 0, 0xFF, CQE_LU_MODE1, 8, 0},
-/*#define DP_ETH_TEST*/
-#ifndef DP_ETH_TEST
 	{DP_F_FAST_ETH_WAN, GSW_LOGICAL_PORT_8BIT_WLAN, 8, 8, 0xF,
 		CQE_LU_MODE2, 8, 0},
 	{DP_F_FAST_ETH_LAN | DP_F_ALLOC_EXPLICIT_SUBIFID,
 		GSW_LOGICAL_PORT_8BIT_WLAN, 8, 8, 0xF, CQE_LU_MODE2, 8, 0},
 	{DP_F_FAST_ETH_LAN, GSW_LOGICAL_PORT_8BIT_WLAN, 2, 8, 0xF,
 		CQE_LU_MODE2, 2, 0},
-#else /*testing only */
-	{DP_F_FAST_ETH_WAN, GSW_LOGICAL_PORT_OTHER, 1, 8, 0xF, CQE_LU_MODE2, 1},
-	{DP_F_FAST_ETH_LAN | DP_F_ALLOC_EXPLICIT_SUBIFID,
-		GSW_LOGICAL_PORT_OTHER, 1, 8, 0xF, CQE_LU_MODE2, 1},
-	{DP_F_FAST_ETH_LAN, GSW_LOGICAL_PORT_OTHER, 1, 8, 0xF, CQE_LU_MODE2, 1},
-#endif
 	{DP_F_FAST_WLAN, GSW_LOGICAL_PORT_8BIT_WLAN, 16, 8, 0xF, CQE_LU_MODE2,
 		16, 0},
 	{DP_F_FAST_WLAN_EXT, GSW_LOGICAL_PORT_9BIT_WLAN, 8, 9, 0x7,
