From 85fc6a0b332fcc9457eb1497f4cc602482428a84 Mon Sep 17 00:00:00 2001
From: Deepansh Rastogi <deepansh.rastogi@intel.com>
Date: Mon, 14 Oct 2019 10:27:33 +0530
Subject: [PATCH] UGW_SW-43919: Adding support for IPv4/IPv6 counters per
 interface

---
 drivers/net/ethernet/lantiq/ppa/Kconfig           | 7 +++++++
 drivers/net/ethernet/lantiq/ppa/ppa_hal_wrapper.c | 5 ++---
 include/net/ppa/ppa_api.h                         | 8 +++++++-
 include/net/ppa/ppa_api_common.h                  | 7 +++++++
 include/uapi/net/ppa_api.h                        | 9 +++++++++
 5 files changed, 32 insertions(+), 4 deletions(-)

diff --git a/drivers/net/ethernet/lantiq/ppa/Kconfig b/drivers/net/ethernet/lantiq/ppa/Kconfig
index f78a0ff31323..3c9bcc1d4e69 100644
--- a/drivers/net/ethernet/lantiq/ppa/Kconfig
+++ b/drivers/net/ethernet/lantiq/ppa/Kconfig
@@ -87,5 +87,12 @@ config PPA_EXT_PKT_LEARNING
         help
             External packet learning driver support for PPA
 
+config IPV4_IPV6_COUNTER_SUPPORT
+        bool "IPv4 IPv6 counter support"
+        depends on PPA
+        default n
+        help
+            IPv4 IPv6 counter support in PPA
+
 endif # PPA
 endmenu
diff --git a/drivers/net/ethernet/lantiq/ppa/ppa_hal_wrapper.c b/drivers/net/ethernet/lantiq/ppa/ppa_hal_wrapper.c
index d91af6fdd31a..e152b4943d25 100644
--- a/drivers/net/ethernet/lantiq/ppa/ppa_hal_wrapper.c
+++ b/drivers/net/ethernet/lantiq/ppa/ppa_hal_wrapper.c
@@ -1250,11 +1250,10 @@ uint32_t ppa_drv_test_and_clear_bridging_hit_stat(PPA_BR_MAC_INFO *entry, uint32
 	return ppa_hsel_test_and_clear_bridging_hit_stat(entry, flag, get_platform_hal(0));
 }
 
-/*only neded for ppe hal*/
 #if defined(MIB_MODE_ENABLE) && MIB_MODE_ENABLE
 uint32_t ppa_drv_set_mib_mode(PPA_MIB_MODE_ENABLE *cfg, uint32_t flag)
 {
-	uint32_t hal_id = PPE_HAL;
+	uint32_t hal_id = get_platform_hal(0);
 
 	if (!ppa_drv_hal_hook[hal_id]) return PPA_SUCCESS;
 
@@ -1263,7 +1262,7 @@ uint32_t ppa_drv_set_mib_mode(PPA_MIB_MODE_ENABLE *cfg, uint32_t flag)
 
 uint32_t ppa_drv_get_mib_mode(PPA_MIB_MODE_ENABLE *cfg)
 {
-	uint32_t hal_id = PPE_HAL;
+	uint32_t hal_id = get_platform_hal(0);
 
 	if (!ppa_drv_hal_hook[hal_id]) return PPA_SUCCESS;
 
diff --git a/include/net/ppa/ppa_api.h b/include/net/ppa/ppa_api.h
index 77e08c1ca17e..153664c86b32 100644
--- a/include/net/ppa/ppa_api.h
+++ b/include/net/ppa/ppa_api.h
@@ -344,7 +344,13 @@ typedef struct {
 	uint32_t	tx_bytes;			 /*!<	 Number of transmit bytes through the interface */
 	uint32_t	rx_bytes;			 /*!<	 Number of received bytes through the interface */
 	uint32_t	rx_pkts_prev[MAX_HAL];	 
-	uint32_t	tx_pkts_prev[MAX_HAL];	
+	uint32_t	tx_pkts_prev[MAX_HAL];
+#if IS_ENABLED(CONFIG_IPV4_IPV6_COUNTER_SUPPORT)
+	uint64_t	tx_pkts_ipv4;		/*!<	 Number of IPv4 transmitted packets through the interface */
+	uint64_t	rx_pkts_ipv4;		/*!<	 Number of IPv4 received packets through the interface */
+	uint64_t	tx_pkts_ipv6;		/*!<	 Number of IPv6 transmitted packets through the interface */
+	uint64_t	rx_pkts_ipv6;		/*!<	 Number of IPv6 received packets through the interface */
+#endif /* CONFIG_IPV4_IPV6_COUNTER_SUPPORT */
 } PPA_IF_STATS;
 /*!
 	\brief This is the data structure for PPA accelerated statistics for an interface. Depending on the platform and
diff --git a/include/net/ppa/ppa_api_common.h b/include/net/ppa/ppa_api_common.h
index 53d544f09a24..cf53001721e2 100644
--- a/include/net/ppa/ppa_api_common.h
+++ b/include/net/ppa/ppa_api_common.h
@@ -51,6 +51,13 @@
 #define PPA_IF_MIB 		1	 /*Flag to enable/disable PPA software interface based mib counter*/
 #define SESSION_STATISTIC_DEBUG 1 /*flag to enable session management statistics support*/
 #define MPE_IFMIB		1
+#if IS_ENABLED(CONFIG_IPV4_IPV6_COUNTER_SUPPORT)
+#undef PPA_INTF_MIB_TIMER	/* Interface packet counters will be updated in other thread */
+#ifndef MIB_MODE_ENABLE	 /*if not defined in kernel's .configure file, then use local's definition*/
+#define MIB_MODE_ENABLE		1
+#endif
+#else /* CONFIG_IPV4_IPV6_COUNTER_SUPPORT */
 #define PPA_INTF_MIB_TIMER	1
+#endif /* CONFIG_IPV4_IPV6_COUNTER_SUPPORT */
 
 #endif
diff --git a/include/uapi/net/ppa_api.h b/include/uapi/net/ppa_api.h
index ab5550d0707a..d9bcd943d539 100755
--- a/include/uapi/net/ppa_api.h
+++ b/include/uapi/net/ppa_api.h
@@ -753,6 +753,10 @@ typedef struct {
 	uint32_t if_flags; /*!< Flags for Interface. Valid values are below: PPA_F_LAN_IF and PPA_F_WAN_IF */
 	PPA_IFNAME ifname_lower[PPA_IF_NAME_SIZE]; /*!< Name of the manually configured its lower stack interface (provide storage buffer) */
 	uint8_t hw_disable; /*!< If this flag is set then only HW acceleration would be disabled for ifname (SW acceleration would still work for ifname) */
+	uint64_t acc_tx_ipv4; /*!< tx tx mib (bytes counter/packet counter) */
+	uint64_t acc_rx_ipv4; /*!< rx rx mib (bytes counter/packet counter) */
+	uint64_t acc_tx_ipv6; /*!< tx tx mib (bytes counter/packet counter) */
+	uint64_t acc_rx_ipv6; /*!< rx rx mib (bytes counter/packet counter) */
 } PPA_CMD_IFINFO;
 /*!
 	\brief This is the data structure for PPA Init used from the userspace
@@ -2138,6 +2142,7 @@ typedef enum {
 	PPA_CMD_QOS_DSCP_CLASS_SET_NR, /*!< NR for PPA_CMD_QOS_DSCP_CLASS_SET */
 	PPA_CMD_QOS_DSCP_CLASS_RESET_NR, /*!< NR for PPA_CMD_QOS_DSCP_CLASS_RESET */
 	PPA_MEM_SET_PORT_TRUNKING_NR, /*!< NR for PPA_MEM_SET_PORT_TRUNKING */
+	PPA_CMD_GET_IFACE_MIB_NR, /*!< NR for PPA_CMD_GET_IFACE_MIB */
 	/* PPA_IOC_MAXNR should be the last one in the enumberation */
 	PPA_IOC_MAXNR /*!< NR for PPA_IOC_MAXNR */
 } PPA_IOC_NR;
@@ -2626,6 +2631,10 @@ typedef enum {
 	\ref PPA_CMD_CLEAR_PORT_MIB structure
  */
 #define PPA_CMD_CLEAR_PORT_MIB _IOW(PPA_IOC_MAGIC, PPA_CMD_CLEAR_PORT_MIB_NR, PPA_CMD_PORT_MIB_INFO)
+/** PPA Get Interface MIB info. Value is manipulated by _IOR() macro for final value
+	\param PPA_CMD_IFINFO
+ */
+#define PPA_CMD_GET_IFACE_MIB _IOR(PPA_IOC_MAGIC, PPA_CMD_GET_IFACE_MIB_NR, PPA_CMD_IFINFO)
 /** PPA Enable/disable HAL debug flag. Value is manipulated by _IOR() macro for final value
 	\param PPA_CMD_SET_HAL_DBG_FLAG The parameter points to a
 	\ref PPA_CMD_SET_HAL_DBG_FLAG structure
