From 74574a66c61d45459cb1785aa8e66ae6d7afd893 Mon Sep 17 00:00:00 2001
From: anishkhx <anishx.khurana@intel.com>
Date: Wed, 4 Jul 2018 21:02:49 +0800
Subject: [PATCH] DRVLIB_SW-808 : dp checkpatch fixes

---
 .../lantiq/datapath/gswip30/datapath_coc.c         |  31 +-
 .../lantiq/datapath/gswip30/datapath_mib.c         |  14 +-
 .../lantiq/datapath/gswip30/datapath_proc.c        | 318 +++++++---
 .../lantiq/datapath/gswip31/datapath_ppv4.c        |   3 +-
 .../lantiq/datapath/gswip31/datapath_proc.c        | 167 +++--
 drivers/net/ethernet/lantiq/tmu/drv_tmu_api.h      |   4 +-
 drivers/net/ethernet/lantiq/tmu/drv_tmu_ll.c       | 685 ++++++++++++++++-----
 .../ethernet/lantiq/tmu/drv_tmu_ll_lookup_proc.c   |   2 +-
 drivers/net/ethernet/lantiq/tmu/drv_tmu_ll_proc.c  |  13 +-
 9 files changed, 960 insertions(+), 277 deletions(-)

diff --git a/drivers/net/ethernet/lantiq/datapath/gswip30/datapath_coc.c b/drivers/net/ethernet/lantiq/datapath/gswip30/datapath_coc.c
index 3514effff3c5..2ea10b437e27 100644
--- a/drivers/net/ethernet/lantiq/datapath/gswip30/datapath_coc.c
+++ b/drivers/net/ethernet/lantiq/datapath/gswip30/datapath_coc.c
@@ -493,7 +493,8 @@ ssize_t proc_coc_write(struct file *file, const char *buf, size_t count,
 		}
 
 		coc_unlock();
-	} else if (dp_strncmpi(param_list[0], "threshold0", strlen("threshold0")) == 0) {
+	} else if (dp_strncmpi(param_list[0],
+			"threshold0", strlen("threshold0")) == 0) {
 		coc_lock();
 		rmon_threshold.th_d0 = dp_atoi(param_list[1]);
 
@@ -501,7 +502,8 @@ ssize_t proc_coc_write(struct file *file, const char *buf, size_t count,
 			rmon_threshold.th_d0 = 1;
 
 		coc_unlock();
-	} else if (dp_strncmpi(param_list[0], "threshold1", strlen("threshold1")) == 0) {
+	} else if (dp_strncmpi(param_list[0],
+			"threshold1", strlen("threshold1")) == 0) {
 		coc_lock();
 		rmon_threshold.th_d1 = dp_atoi(param_list[1]);
 
@@ -509,7 +511,8 @@ ssize_t proc_coc_write(struct file *file, const char *buf, size_t count,
 			rmon_threshold.th_d1 = 1;
 
 		coc_unlock();
-	} else if (dp_strncmpi(param_list[0], "threshold2",strlen("threshold2")) == 0) {
+	} else if (dp_strncmpi(param_list[0],
+			"threshold2", strlen("threshold2")) == 0) {
 		coc_lock();
 		rmon_threshold.th_d2 = dp_atoi(param_list[1]);
 
@@ -517,7 +520,8 @@ ssize_t proc_coc_write(struct file *file, const char *buf, size_t count,
 			rmon_threshold.th_d2 = 1;
 
 		coc_unlock();
-	} else if (dp_strncmpi(param_list[0], "threshold3", strlen("threshold3")) == 0) {
+	} else if (dp_strncmpi(param_list[0],
+			"threshold3", strlen("threshold3")) == 0) {
 		coc_lock();
 		rmon_threshold.th_d3 = dp_atoi(param_list[1]);
 
@@ -544,20 +548,27 @@ ssize_t proc_coc_write(struct file *file, const char *buf, size_t count,
 		if (dp_strncmpi(param_list[0], "rate1", strlen("rate1")) == 0) {
 			dp_set_meter_rate(LTQ_CPUFREQ_PS_D1, rate);
 
-		} else if (dp_strncmpi(param_list[0], "rate2", strlen("rate2")) == 0) {
+		} else if (dp_strncmpi(param_list[0],
+				"rate2",
+				strlen("rate2")) == 0) {
 			dp_set_meter_rate(LTQ_CPUFREQ_PS_D2, rate);
-		} else if ((dp_strncmpi(param_list[0], "rate3", strlen("rate3")) == 0) ||
-			   (dp_strncmpi(param_list[0], "rate", strlen("rate")) ==
-			    0) /*back-compatiable */) {
+		} else if ((dp_strncmpi(param_list[0],
+				"rate3",
+				strlen("rate3")) == 0) ||
+			   (dp_strncmpi(param_list[0],
+			   "rate",
+			   strlen("rate")) == 0)) { /*back-compatiable */
 			dp_set_meter_rate(LTQ_CPUFREQ_PS_D3, rate);
 		} else {
 			PR_INFO
 			    ("Wrong COC state, it should be D1/D2/D3 only\n");
 		}
-	} else if (dp_strncmpi(param_list[0], "interrupt", strlen("interrupt")) == 0) {/*meter */
+	} else if (dp_strncmpi(param_list[0],
+			"interrupt", strlen("interrupt")) == 0) {/*meter */
 		enable_meter_interrupt();
 		PR_INFO("Enabled meter interurpt\n");
-	} else if (dp_strncmpi(param_list[0], "clear", strlen("clear")) == 0) {	/*meter */
+	} else if (dp_strncmpi(param_list[0],
+			"clear", strlen("clear")) == 0) {	/*meter */
 		clear_meter_interrupt();
 		PR_INFO("Clear meter interurpt src\n");
 	} else {
diff --git a/drivers/net/ethernet/lantiq/datapath/gswip30/datapath_mib.c b/drivers/net/ethernet/lantiq/datapath/gswip30/datapath_mib.c
index 7b4486467c15..48c5e76bc740 100644
--- a/drivers/net/ethernet/lantiq/datapath/gswip30/datapath_mib.c
+++ b/drivers/net/ethernet/lantiq/datapath/gswip30/datapath_mib.c
@@ -1848,7 +1848,7 @@ ssize_t proc_mib_port_write(struct file *file, const char *buf, size_t count,
 	if (num < 1)
 		goto help;
 	memset(&qos_stats, 0, sizeof(qos_stats));
-	if (dp_strncmpi(param_list[0], "qos_mib" ,strlen("qos_mib")) == 0) {
+	if (dp_strncmpi(param_list[0], "qos_mib", strlen("qos_mib")) == 0) {
 		s32 port_list[] = {15, 2, 3, 4, 5, 7, 8};
 		int k;
 
@@ -1900,7 +1900,9 @@ ssize_t proc_mib_port_write(struct file *file, const char *buf, size_t count,
 			}
 			PR_INFO("\n");
 		}
-	} else if (dp_strncmpi(param_list[0], "csum_mib" ,strlen("csum_mib")) == 0) {
+	} else if (dp_strncmpi(param_list[0],
+			"csum_mib",
+			strlen("csum_mib")) == 0) {
 		tmu_hal_get_csum_ol_m_local =
 			tmu_hal_get_csum_ol_mib_hook_fn;
 		if (!tmu_hal_get_csum_ol_m_local) {
@@ -1915,7 +1917,9 @@ ssize_t proc_mib_port_write(struct file *file, const char *buf, size_t count,
 				qos_stats.deqPkts,
 				qos_stats.deqBytes);
 
-	} else if (dp_strncmpi(param_list[0], "qos_mib_clear", strlen("qos_mib_clear")) == 0) {
+	} else if (dp_strncmpi(param_list[0],
+			"qos_mib_clear",
+			strlen("qos_mib_clear")) == 0) {
 		tmu_hal_clear_qos_m_local =
 			tmu_hal_clear_qos_mib_hook_fn;
 		if (!tmu_hal_clear_qos_m_local) {
@@ -1929,7 +1933,9 @@ ssize_t proc_mib_port_write(struct file *file, const char *buf, size_t count,
 			PR_INFO("%s done\n",
 				"tmu_hal_clear_qos_m_local(NULL, NULL, -1, 0)");
 
-	} else if (dp_strncmpi(param_list[0], "csum_mib_clear", strlen("csum_mib_clear")) == 0) {
+	} else if (dp_strncmpi(param_list[0],
+			"csum_mib_clear",
+			strlen("csum_mib_clear")) == 0) {
 		tmu_hal_clear_csum_ol_m_local =
 			tmu_hal_clear_csum_ol_mib_hook_fn;
 		if (!tmu_hal_clear_csum_ol_m_local) {
diff --git a/drivers/net/ethernet/lantiq/datapath/gswip30/datapath_proc.c b/drivers/net/ethernet/lantiq/datapath/gswip30/datapath_proc.c
index 1ab90ba865f9..9d405da18d2c 100644
--- a/drivers/net/ethernet/lantiq/datapath/gswip30/datapath_proc.c
+++ b/drivers/net/ethernet/lantiq/datapath/gswip30/datapath_proc.c
@@ -189,22 +189,34 @@ static ssize_t proc_parser_write(struct file *file, const char *buf,
 
 	if (dp_strncmpi(param_list[0], "enable", strlen("enable")) == 0) {
 		for (i = 1; i < num; i++) {
-			if (dp_strncmpi(param_list[i], "cpu", strlen("cpu")) == 0) {
+			if (dp_strncmpi(param_list[i],
+					"cpu",
+					strlen("cpu"))
+					== 0) {
 				flag |= 0x1;
 				cpu = 2;
 			}
 
-			if (dp_strncmpi(param_list[i], "mpe1", strlen("mpe1")) == 0) {
+			if (dp_strncmpi(param_list[i],
+					"mpe1",
+					strlen("mpe1"))
+					== 0) {
 				flag |= 0x2;
 				mpe1 = 2;
 			}
 
-			if (dp_strncmpi(param_list[i], "mpe2", strlen("mpe2")) == 0) {
+			if (dp_strncmpi(param_list[i],
+					"mpe2",
+					strlen("mpe2"))
+					== 0) {
 				flag |= 0x4;
 				mpe2 = 2;
 			}
 
-			if (dp_strncmpi(param_list[i], "mpe3", strlen("mpe3")) == 0) {
+			if (dp_strncmpi(param_list[i],
+					"mpe3",
+					strlen("mpe3"))
+					== 0) {
 				flag |= 0x8;
 				mpe3 = 2;
 			}
@@ -222,24 +234,39 @@ static ssize_t proc_parser_write(struct file *file, const char *buf,
 			 "flag=0x%x mpe3/2/1/cpu=%d/%d/%d/%d\n", flag, mpe3,
 			 mpe2, mpe1, cpu);
 		dp_set_gsw_parser_30(flag, cpu, mpe1, mpe2, mpe3);
-	} else if (dp_strncmpi(param_list[0], "disable", strlen("disable")) == 0) {
+	} else if (dp_strncmpi(param_list[0],
+				"disable",
+				strlen("disable"))
+				== 0) {
 		for (i = 1; i < num; i++) {
-			if (dp_strncmpi(param_list[i], "cpu", strlen("cpu")) == 0) {
+			if (dp_strncmpi(param_list[i],
+					"cpu",
+					strlen("cpu"))
+					== 0) {
 				flag |= 0x1;
 				cpu = 0;
 			}
 
-			if (dp_strncmpi(param_list[i], "mpe1", strlen("mpe1")) == 0) {
+			if (dp_strncmpi(param_list[i],
+					"mpe1",
+					strlen("mpe1"))
+					== 0) {
 				flag |= 0x2;
 				mpe1 = 0;
 			}
 
-			if (dp_strncmpi(param_list[i], "mpe2", strlen("mpe2")) == 0) {
+			if (dp_strncmpi(param_list[i],
+					"mpe2",
+					strlen("mpe2"))
+					== 0) {
 				flag |= 0x4;
 				mpe2 = 0;
 			}
 
-			if (dp_strncmpi(param_list[i], "mpe3", strlen("mpe3")) == 0) {
+			if (dp_strncmpi(param_list[i],
+					"mpe3",
+					strlen("mpe3"))
+					== 0) {
 				flag |= 0x8;
 				mpe3 = 0;
 			}
@@ -257,7 +284,10 @@ static ssize_t proc_parser_write(struct file *file, const char *buf,
 			 "flag=0x%x mpe3/2/1/cpu=%d/%d/%d/%d\n", flag, mpe3,
 			 mpe2, mpe1, cpu);
 		dp_set_gsw_parser_30(flag, cpu, mpe1, mpe2, mpe3);
-	} else if (dp_strncmpi(param_list[0], "refresh", strlen("refresh")) == 0) {
+	} else if (dp_strncmpi(param_list[0],
+				     "refresh",
+					 strlen("refresh"))
+					 == 0) {
 		dp_get_gsw_parser_30(NULL, NULL, NULL, NULL);
 		PR_INFO("value:cpu=%d mpe1=%d mpe2=%d mpe3=%d\n", pinfo[0].v,
 			pinfo[1].v, pinfo[2].v, pinfo[3].v);
@@ -304,7 +334,10 @@ static ssize_t proc_parser_write(struct file *file, const char *buf,
 			return count;
 		}
 
-	} else if (dp_strncmpi(param_list[0], "unmark", strlen("unmark")) == 0) {
+	} else if (dp_strncmpi(param_list[0],
+				     "unmark",
+					 strlen("unmark"))
+					 == 0) {
 		/*: All packets set to same mpe flag as specified */
 		memset(&pce, 0, sizeof(pce));
 		pce.pattern.nIndex = pce_rule_id;
@@ -974,7 +1007,10 @@ static ssize_t proc_gsw_rmon_write(struct file *file, const char *buf,
 		if (dp_strncmpi(param_list[1], "Full", strlen("Full")) == 0) {
 			rmon_display_port_full = 1;
 			goto EXIT_OK;
-		} else if (dp_strncmpi(param_list[1], "Basic", strlen("Basic")) == 0) {
+		} else if (dp_strncmpi(param_list[1],
+				     "Basic",
+					 strlen("Basic"))
+					 == 0) {
 			rmon_display_port_full = 0;
 			goto EXIT_OK;
 		}
@@ -2396,7 +2432,8 @@ ssize_t proc_gsw_route_write(struct file *file, const char *buf,
 		PR_INFO("parameter %d not enough. count=%d\n", num, count);
 		goto help;
 	}
-	if (dp_strncmpi(param_list[0], "help", strlen("help")) == 0)	/* help */
+	if (dp_strncmpi(param_list[0],
+			"help", strlen("help")) == 0)	/* help */
 		goto help;
 
 	/* delete an entry */
@@ -2489,7 +2526,10 @@ ssize_t proc_gsw_route_write(struct file *file, const char *buf,
 				PR_INFO("Wong IP format for SrcIP\n");
 				goto exit;
 			}
-		} else if (dp_strncmpi(param_list[i], "DstIP", strlen("DstIP")) == 0) {
+		} else if (dp_strncmpi(param_list[i],
+				     "DstIP",
+					 strlen("DstIP"))
+					 == 0) {
 			tmp =
 			    pton(param_list[i + 1],
 				 &rt_entry->routeEntry.pattern.nDstIP);
@@ -2503,16 +2543,28 @@ ssize_t proc_gsw_route_write(struct file *file, const char *buf,
 				PR_INFO("Wong IP format for DstIP\n");
 				goto exit;
 			}
-		} else if (dp_strncmpi(param_list[i], "SrcPort", strlen("SrcPort")) == 0)
+		} else if (dp_strncmpi(param_list[i],
+				     "SrcPort",
+					 strlen("SrcPort"))
+					 == 0)
 			rt_entry->routeEntry.pattern.nSrcPort =
 			    dp_atoi(param_list[i + 1]);
-		else if (dp_strncmpi(param_list[i], "DstPort", strlen("DstPort")) == 0)
+		else if (dp_strncmpi(param_list[i],
+				     "DstPort",
+					 strlen("DstPort"))
+					 == 0)
 			rt_entry->routeEntry.pattern.nDstPort =
 			    dp_atoi(param_list[i + 1]);
-		else if (dp_strncmpi(param_list[i], "ExtId", strlen("ExtId")) == 0)
+		else if (dp_strncmpi(param_list[i],
+				     "ExtId",
+					 strlen("ExtId"))
+					 == 0)
 			rt_entry->routeEntry.pattern.nRoutExtId =
 			    dp_atoi(param_list[i + 1]);
-		else if (dp_strncmpi(param_list[i], "SrcMac", strlen("SrcMac")) == 0) {
+		else if (dp_strncmpi(param_list[i],
+				     "SrcMac",
+					 strlen("SrcMac"))
+					 == 0) {
 			rt_entry->routeEntry.action.bMAC_SrcEnable = 1;
 			mac_stob(param_list[i + 1],
 				 rt_entry->routeEntry.action.nSrcMAC);
@@ -2525,7 +2577,10 @@ ssize_t proc_gsw_route_write(struct file *file, const char *buf,
 				rt_entry->routeEntry.action.eSessRoutingMode =
 				    GSW_ROUTE_MODE_ROUTING;
 		} /*below is all actions */
-		else if (dp_strncmpi(param_list[i], "DstMac", strlen("DstMac")) == 0) {
+		else if (dp_strncmpi(param_list[i],
+				     "DstMac",
+					 strlen("DstMac"))
+					 == 0) {
 			rt_entry->routeEntry.action.bMAC_DstEnable = 1;
 			mac_stob(param_list[i + 1],
 				 rt_entry->routeEntry.action.nDstMAC);
@@ -2536,7 +2591,10 @@ ssize_t proc_gsw_route_write(struct file *file, const char *buf,
 						     */
 				rt_entry->routeEntry.action.eSessRoutingMode =
 				    GSW_ROUTE_MODE_ROUTING;
-		} else if (dp_strncmpi(param_list[i], "NatIP", strlen("NatIP")) == 0) {
+		} else if (dp_strncmpi(param_list[i],
+				     "NatIP",
+					 strlen("NatIP"))
+					 == 0) {
 			tmp =
 			    pton(param_list[i + 1],
 				 &rt_entry->routeEntry.action.nNATIPaddr);
@@ -2554,66 +2612,117 @@ ssize_t proc_gsw_route_write(struct file *file, const char *buf,
 			    GSW_ROUTE_MODE_NAT)
 				rt_entry->routeEntry.action.eSessRoutingMode =
 				GSW_ROUTE_MODE_NAT;	/* NAT */
-		} else if (dp_strncmpi(param_list[i], "NatPort", strlen("NatPort")) == 0) {
+		} else if (dp_strncmpi(param_list[i],
+				     "NatPort",
+					 strlen("NatPort"))
+					 == 0) {
 			rt_entry->routeEntry.action.nTcpUdpPort =
 			    dp_atoi(param_list[i + 1]);
 			if (rt_entry->routeEntry.action.eSessRoutingMode <
 			    GSW_ROUTE_MODE_NAPT)
 				rt_entry->routeEntry.action.eSessRoutingMode =
 				GSW_ROUTE_MODE_NAPT;/* NAPT */
-		} else if (dp_strncmpi(param_list[i], "MTU", strlen("MTU")) == 0)
+		} else if (dp_strncmpi(param_list[i],
+				     "MTU",
+					 strlen("MTU"))
+					 == 0)
 			rt_entry->routeEntry.action.nMTUvalue =
 			    dp_atoi(param_list[i + 1]);
-		else if (dp_strncmpi(param_list[i], "PPPoEmode", strlen("PPPoEmode")) == 0)
+		else if (dp_strncmpi(param_list[i],
+				     "PPPoEmode",
+					 strlen("PPPoEmode"))
+					 == 0)
 			rt_entry->routeEntry.action.bPPPoEmode =
 			    dp_atoi(param_list[i + 1]);
-		else if (dp_strncmpi(param_list[i], "PPPoEId", strlen("PPPoEId")) == 0)
+		else if (dp_strncmpi(param_list[i],
+				     "PPPoEId",
+					 strlen("PPPoEId"))
+					 == 0)
 			rt_entry->routeEntry.action.nPPPoESessId =
 			    dp_atoi(param_list[i + 1]);
-		else if (dp_strncmpi(param_list[i], "TunType", strlen("TunType")) == 0) {
+		else if (dp_strncmpi(param_list[i],
+				     "TunType",
+					 strlen("TunType"))
+					 == 0) {
 			rt_entry->routeEntry.action.bTunnel_Enable = 1;
 			rt_entry->routeEntry.action.eTunType =
 			    dp_atoi(param_list[i + 1]);
-		} else if (dp_strncmpi(param_list[i], "TunIndex", strlen("TunIndex")) == 0) {
+		} else if (dp_strncmpi(param_list[i],
+				     "TunIndex",
+					 strlen("TunIndex"))
+					 == 0) {
 			rt_entry->routeEntry.action.bTunnel_Enable = 1;
 			rt_entry->routeEntry.action.eTunType =
 			    dp_atoi(param_list[i + 1]);
 
-		} else if (dp_strncmpi(param_list[i], "MeterId", strlen("MeterId")) == 0) {
+		} else if (dp_strncmpi(param_list[i],
+				     "MeterId",
+					 strlen("MeterId"))
+					 == 0) {
 			rt_entry->routeEntry.action.bMeterAssign = 1;
 			rt_entry->routeEntry.action.nMeterId =
 			    dp_atoi(param_list[i + 1]);
 
-		} else if (dp_strncmpi(param_list[i], "FID", strlen("FID")) == 0)
+		} else if (dp_strncmpi(param_list[i],
+				     "FID",
+					 strlen("FID"))
+					 == 0)
 			rt_entry->routeEntry.action.nFID =
 			    dp_atoi(param_list[i + 1]);
-		else if (dp_strncmpi(param_list[i], "FlowId", strlen("FlowId")) == 0)
+		else if (dp_strncmpi(param_list[i],
+				     "FlowId",
+					 strlen("FlowId"))
+					 == 0)
 			rt_entry->routeEntry.action.nFlowId =
 			    dp_atoi(param_list[i + 1]);
-		else if (dp_strncmpi(param_list[i], "OutDscp", strlen("OutDscp")) == 0)
+		else if (dp_strncmpi(param_list[i],
+				     "OutDscp",
+					 strlen("OutDscp"))
+					 == 0)
 			rt_entry->routeEntry.action.eOutDSCPAction =
 			    dp_atoi(param_list[i + 1]);
-		else if (dp_strncmpi(param_list[i], "InDscp", strlen("InDscp")) == 0)
+		else if (dp_strncmpi(param_list[i],
+				     "InDscp",
+					 strlen("InDscp"))
+					 == 0)
 			rt_entry->routeEntry.action.bInnerDSCPRemark =
 			    dp_atoi(param_list[i + 1]);
-		else if (dp_strncmpi(param_list[i], "Dscp", strlen("Dscp")) == 0) {
+		else if (dp_strncmpi(param_list[i],
+				     "Dscp",
+					 strlen("Dscp"))
+					 == 0) {
 			rt_entry->routeEntry.action.nDSCP =
 			    dp_atoi(param_list[i + 1]);
 			dscp_f = 1;
-		} else if (dp_strncmpi(param_list[i], "class", strlen("class")) == 0) {
+		} else if (dp_strncmpi(param_list[i],
+				     "class",
+					 strlen("class"))
+					 == 0) {
 			rt_entry->routeEntry.action.bTCremarking = 1;
 			rt_entry->routeEntry.action.nTrafficClass =
 			    dp_atoi(param_list[i + 1]);
-		} else if (dp_strncmpi(param_list[i], "ttl", strlen("ttl")) == 0)
+		} else if (dp_strncmpi(param_list[i],
+				     "ttl",
+					 strlen("ttl"))
+					 == 0)
 			rt_entry->routeEntry.action.bTTLDecrement =
 			    dp_atoi(param_list[i + 1]);
-		else if (dp_strncmpi(param_list[i], "dir", strlen("dir")) == 0)
+		else if (dp_strncmpi(param_list[i],
+				     "dir",
+					 strlen("dir"))
+					 == 0)
 			rt_entry->routeEntry.action.eSessDirection =
 			    dp_atoi(param_list[i + 1]);
-		else if (dp_strncmpi(param_list[i], "DstPmac", strlen("DstPmac")) == 0)
+		else if (dp_strncmpi(param_list[i],
+				     "DstPmac",
+					 strlen("DstPmac"))
+					 == 0)
 			rt_entry->routeEntry.action.nDstPortMap =
 			    dp_atoi(param_list[i + 1]);
-		else if (dp_strncmpi(param_list[i], "Subif", strlen("Subif")) == 0)
+		else if (dp_strncmpi(param_list[i],
+				     "Subif",
+					 strlen("Subif"))
+					 == 0)
 			rt_entry->routeEntry.action.nDstSubIfId =
 			    dp_atoi(param_list[i + 1]);
 		else {
@@ -2819,10 +2928,13 @@ static ssize_t proc_gsw_pmac_write(struct file *file, const char *buf,
 		PR_INFO("parameter %d not enough/more. count=%d\n", num, count);
 		goto help;
 	}
-	if (dp_strncmpi(param_list[0], "help", strlen("help")) == 0)	/* help */
+	if (dp_strncmpi(param_list[0],
+			"help", strlen("help")) == 0)	/* help */
 		goto help;
 	/* set pmac */
-	if (dp_strncmpi(param_list[0], "set", strlen("set")) != 0) {
+	if (dp_strncmpi(param_list[0],
+			"set",
+			strlen("set")) != 0) {
 		PR_INFO("wrong command: %s\n", param_list[0]);
 		goto help;
 	}
@@ -2842,7 +2954,8 @@ static ssize_t proc_gsw_pmac_write(struct file *file, const char *buf,
 		ret = gsw_core_api((dp_gsw_cb)gsw_handle->gsw_pmac_ops
 				   .Pmac_Eg_CfgGet, gsw_handle, &pmac);
 		for (i = start_param; i < num; i += 2) {
-			if (dp_strncmpi(param_list[i], "Class", strlen("Class")) == 0) {
+			if (dp_strncmpi(param_list[i],
+					"Class", strlen("Class")) == 0) {
 				char *p = param_list[i + 1];
 
 				char *tail = p + strlen(p);
@@ -2857,7 +2970,10 @@ static ssize_t proc_gsw_pmac_write(struct file *file, const char *buf,
 				*tmp = 0;
 				class_s = dp_atoi(p);
 				class_e = dp_atoi(tmp + 1);
-			} else if (dp_strncmpi(param_list[i], "FlowID", strlen("FlowID")) == 0) {
+			} else if (dp_strncmpi(param_list[i],
+					     "FlowID",
+						 strlen("FlowID"))
+						 == 0) {
 				char *p = param_list[i + 1];
 				char *tail = p + strlen(p);
 				char *tmp;
@@ -2871,34 +2987,70 @@ static ssize_t proc_gsw_pmac_write(struct file *file, const char *buf,
 				*tmp = 0;
 				flow_s = dp_atoi(p);
 				flow_e = dp_atoi(tmp + 1);
-			} else if (dp_strncmpi(param_list[i], "DestPort", strlen("DestPort")) == 0) {
+			} else if (dp_strncmpi(param_list[i],
+					     "DestPort",
+						 strlen("DestPort"))
+						 == 0) {
 				PMAC_EG_SET(nDestPortId, param_list[i + 1]);
-			} else if (dp_strncmpi(param_list[i], "RxDmaCH", strlen("RxDmaCH")) == 0) {
+			} else if (dp_strncmpi(param_list[i],
+					     "RxDmaCH",
+						 strlen("RxDmaCH"))
+						 == 0) {
 				PMAC_EG_SET(nRxDmaChanId, param_list[i + 1]);
 			}
 #ifdef xxxxx
 			/*below global flag cannot be editted here*/
-			else if (dp_strncmpi(param_list[i], "MPE1", strlen("MPE1")) == 0)
+			else if (dp_strncmpi(param_list[i],
+					     "MPE1",
+						 strlen("MPE1"))
+						 == 0)
 				PMAC_EG_SET(bMpe1Flag, param_list[i + 1]);
-			else if (dp_strncmpi(param_list[i], "MPE2", strlen("MPE2")) == 0)
+			else if (dp_strncmpi(param_list[i],
+					     "MPE2",
+						 strlen("MPE2"))
+						 == 0)
 				PMAC_EG_SET(bMpe2Flag, param_list[i + 1]);
-			else if (dp_strncmpi(param_list[i], "DEC", strlen("DEC")) == 0)
+			else if (dp_strncmpi(param_list[i],
+					     "DEC",
+						 strlen("DEC"))
+						 == 0)
 				PMAC_EG_SET(bDecFlag, param_list[i + 1]);
-			else if (dp_strncmpi(param_list[i], "ENC", strlen("ENC")) == 0)
+			else if (dp_strncmpi(param_list[i],
+					     "ENC",
+						 strlen("ENC"))
+						 == 0)
 				PMAC_EG_SET(bEncFlag, param_list[i + 1]);
-			else if (dp_strncmpi(param_list[i], "ProcFlag", strlen("ProcFlag")) == 0)
+			else if (dp_strncmpi(param_list[i],
+					     "ProcFlag",
+						 strlen("ProcFlag"))
+						 == 0)
 				PMAC_EG_SET(bProcFlagsSelect,
 					    param_list[i + 1]);
 #endif
-			else if (dp_strncmpi(param_list[i], "RemL2Hdr", strlen("RemL2Hdr")) == 0)
+			else if (dp_strncmpi(param_list[i],
+					     "RemL2Hdr",
+						 strlen("RemL2Hdr"))
+						 == 0)
 				PMAC_EG_SET(bRemL2Hdr, param_list[i + 1]);
-			else if (dp_strncmpi(param_list[i], "RemNum", strlen("RemNum")) == 0)
+			else if (dp_strncmpi(param_list[i],
+					     "RemNum",
+						 strlen("RemNum"))
+						 == 0)
 				PMAC_EG_SET(numBytesRem, param_list[i + 1]);
-			else if (dp_strncmpi(param_list[i], "FCS", strlen("FCS")) == 0)
+			else if (dp_strncmpi(param_list[i],
+					     "FCS",
+						 strlen("FCS"))
+						 == 0)
 				PMAC_EG_SET(bFcsEna, param_list[i + 1]);
-			else if (dp_strncmpi(param_list[i], "PmacEna", strlen("PmacEna")) == 0)
+			else if (dp_strncmpi(param_list[i],
+					     "PmacEna",
+						 strlen("PmacEna"))
+						 == 0)
 				PMAC_EG_SET(bPmacEna, param_list[i + 1]);
-			else if (dp_strncmpi(param_list[i], "TcEnable", strlen("TcEnable")) == 0)
+			else if (dp_strncmpi(param_list[i],
+					     "TcEnable",
+						 strlen("TcEnable"))
+						 == 0)
 				PMAC_EG_SET(bTCEnable, param_list[i + 1]);
 			else {
 				PR_INFO("wrong parameter[%d]: %s\n",
@@ -2952,34 +3104,57 @@ static ssize_t proc_gsw_pmac_write(struct file *file, const char *buf,
 		ret = gsw_core_api((dp_gsw_cb)gsw_handle->gsw_pmac_ops
 				   .Pmac_Ig_CfgGet, gsw_handle, &pmac);
 		for (i = start_param; i < num; i += 2) {
-			if (dp_strncmpi(param_list[i], "TxDmaCH", strlen("TxDmaCH")) == 0) {
+			if (dp_strncmpi(param_list[i],
+					"TxDmaCH",
+					strlen("TxDmaCH"))
+					== 0) {
 				PMAC_IG_SET(nTxDmaChanId, param_list[i + 1]);
-			} else if (dp_strncmpi(param_list[i], "ErrDrop", strlen("ErrDrop")) == 0) {
+			} else if (dp_strncmpi(param_list[i],
+						"ErrDrop",
+						strlen("ErrDrop"))
+						== 0) {
 				PMAC_IG_SET(bErrPktsDisc, param_list[i + 1]);
 			} else if (dp_strncmpi(param_list[i],
-					      "ClassEna", strlen("ClassEna")) == 0) {
+						"ClassEna",
+						strlen("ClassEna"))
+						== 0) {
 				PMAC_IG_SET(bClassEna, param_list[i + 1]);
 			} else if (dp_strncmpi(param_list[i],
-					      "ClassDefault", strlen("ClassDefault")) == 0) {
+						"ClassDefault",
+						strlen("ClassDefault"))
+						== 0) {
 				PMAC_IG_SET(bClassDefault, param_list[i + 1]);
-			} else if (dp_strncmpi(param_list[i], "PmacEna", strlen("PmacEna")) == 0) {
+			} else if (dp_strncmpi(param_list[i],
+						"PmacEna",
+						strlen("PmacEna"))
+						== 0) {
 				PMAC_IG_SET(bPmapEna, param_list[i + 1]);
 			} else if (dp_strncmpi(param_list[i],
-					      "PmacDefault", strlen("PmacDefault")) == 0) {
+						"PmacDefault",
+						strlen("PmacDefault"))
+						== 0) {
 				PMAC_IG_SET(bPmapDefault, param_list[i + 1]);
 			} else if (dp_strncmpi(param_list[i],
-					      "SubIdDefault", strlen("SubIdDefault")) == 0) {
+						"SubIdDefault",
+						strlen("SubIdDefault"))
+						== 0) {
 				 /*changed from bSubIdDefault in GSWIP3.1 */
 				//PMAC_IG_SET(bSubIdDefault, param_list[i + 1]);
 				PMAC_IG_SET(eSubId, param_list[i + 1]);
 			} else if (dp_strncmpi(param_list[i],
-					      "SpIdDefault", strlen("SpIdDefault")) == 0) {
+						"SpIdDefault",
+						strlen("SpIdDefault"))
+						== 0) {
 				PMAC_IG_SET(bSpIdDefault, param_list[i + 1]);
 			} else if (dp_strncmpi(param_list[i],
-					      "PmacPresent", strlen("PmacPresent")) == 0) {
+						"PmacPresent",
+						strlen("PmacPresent"))
+						== 0) {
 				PMAC_IG_SET(bPmacPresent, param_list[i + 1]);
 			} else if (dp_strncmpi(param_list[i],
-					    "DefaultPmacHdr", strlen("DefaultPmacHdr")) == 0) {
+						"DefaultPmacHdr",
+						strlen("DefaultPmacHdr"))
+						== 0) {
 				char *p = param_list[i + 1];
 				char *tail = p + strlen(p);
 
@@ -2997,7 +3172,9 @@ static ssize_t proc_gsw_pmac_write(struct file *file, const char *buf,
 			PR_ERR("GSW_PMAC_IG_CFG_SET returned failure\n");
 			goto exit;
 		}
-	} else if (dp_strncmpi(param_list[start_param - 1], "reset", strlen("reset")) == 0) {
+	} else if (dp_strncmpi(param_list[start_param - 1],
+				"reset",
+				strlen("reset")) == 0) {
 		GSW_reset_t reset;
 
 		gsw_core_api((dp_gsw_cb)gsw_handle->gsw_common_ops.Reset,
@@ -3229,10 +3406,12 @@ static void pmac_eg_cfg(char *param_list[], int num, dp_pmac_cfg_t *pmac_cfg)
 	for (i = 2; i < num; i += 2) {
 		for (j = 0; j < ARRAY_SIZE(egress_entries); j++) {
 			if (dp_strncmpi(param_list[i],
-				       egress_entries[j].name, strlen(egress_entries[j].name)))
+					egress_entries[j].name,
+					strlen(egress_entries[j].name)))
 				continue;
 			if (dp_strncmpi(egress_entries[j].name,
-				       "rm_l2hdr", strlen("rm_l2hdr")) == 0) {
+					"rm_l2hdr",
+					strlen("rm_l2hdr")) == 0) {
 				if (dp_atoi(param_list[i + 1]) > 0) {
 					pmac_cfg->eg_pmac.rm_l2hdr = 1;
 					value = dp_atoi(param_list[i + 1]);
@@ -3282,9 +3461,10 @@ ssize_t ep_port_write(struct file *file, const char *buf, size_t count,
 
 		for (i = 2; i < num; i += 2) {
 			for (j = 0; j < ARRAY_SIZE(ingress_entries); j++) {
-				if (dp_strncmpi
-				    (param_list[i],
-				     ingress_entries[j].name, strlen(ingress_entries[j].name)) == 0) {
+				if (dp_strncmpi(param_list[i],
+						ingress_entries[j].name,
+						strlen(ingress_entries[j].name))
+						== 0) {
 					value = dp_atoi(param_list[i + 1]);
 					ingress_entries[j].
 					    ingress_callback(&pmac_cfg,
diff --git a/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_ppv4.c b/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_ppv4.c
index b313bf3c2a67..cb7e56612c67 100644
--- a/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_ppv4.c
+++ b/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_ppv4.c
@@ -750,7 +750,8 @@ int init_ppv4_qos(int inst, int flag)
 	}
 	qos_port_conf_set_default(&t->p_conf);
 	t->p_conf.port_parent_prop.arbitration = PP_QOS_ARBITRATION_WRR;
-	t->p_conf.ring_address = (void *)dp_deq_port_tbl[inst][idx].tx_ring_addr;
+	t->p_conf.ring_address =
+	(void *)dp_deq_port_tbl[inst][idx].tx_ring_addr;
 	t->p_conf.ring_size = dp_deq_port_tbl[inst][idx].tx_ring_size;
 	t->p_conf.packet_credit_enable = 1;
 	t->p_conf.credit = dp_deq_port_tbl[inst][idx].tx_pkt_credit;
diff --git a/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_proc.c b/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_proc.c
index 8e8467cd236e..3aedec511cfe 100644
--- a/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_proc.c
+++ b/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_proc.c
@@ -158,24 +158,34 @@ ssize_t proc_parser_write(struct file *file, const char *buf,
 	str[len] = 0;
 	num = dp_split_buffer(str, param_list, ARRAY_SIZE(param_list));
 
-	if (dp_strncmpi(param_list[0], "enable", strlen("enable")) == 0) {
+	if (dp_strncmpi(param_list[0],
+			"enable",
+			strlen("enable")) == 0) {
 		for (i = 1; i < num; i++) {
-			if (dp_strncmpi(param_list[i], "cpu", strlen("cpu")) == 0) {
+			if (dp_strncmpi(param_list[i],
+					"cpu",
+					strlen("cpu")) == 0) {
 				flag |= 0x1;
 				cpu = 2;
 			}
 
-			if (dp_strncmpi(param_list[i], "mpe1", strlen("mpe1")) == 0) {
+			if (dp_strncmpi(param_list[i],
+					"mpe1",
+					strlen("mpe1")) == 0) {
 				flag |= 0x2;
 				mpe1 = 2;
 			}
 
-			if (dp_strncmpi(param_list[i], "mpe2", strlen("mpe2")) == 0) {
+			if (dp_strncmpi(param_list[i],
+					"mpe2",
+					strlen("mpe2")) == 0) {
 				flag |= 0x4;
 				mpe2 = 2;
 			}
 
-			if (dp_strncmpi(param_list[i], "mpe3", strlen("mpe3")) == 0) {
+			if (dp_strncmpi(param_list[i],
+					"mpe3",
+					strlen("mpe3")) == 0) {
 				flag |= 0x8;
 				mpe3 = 2;
 			}
@@ -193,24 +203,34 @@ ssize_t proc_parser_write(struct file *file, const char *buf,
 			 "flag=0x%x mpe3/2/1/cpu=%d/%d/%d/%d\n", flag, mpe3,
 			 mpe2, mpe1, cpu);
 		dp_set_gsw_parser_31(flag, cpu, mpe1, mpe2, mpe3);
-	} else if (dp_strncmpi(param_list[0], "disable", strlen("disable")) == 0) {
+	} else if (dp_strncmpi(param_list[0],
+				"disable",
+				strlen("disable")) == 0) {
 		for (i = 1; i < num; i++) {
-			if (dp_strncmpi(param_list[i], "cpu", strlen("cpu")) == 0) {
+			if (dp_strncmpi(param_list[i],
+					"cpu",
+					strlen("cpu")) == 0) {
 				flag |= 0x1;
 				cpu = 0;
 			}
 
-			if (dp_strncmpi(param_list[i], "mpe1", strlen("mpe1")) == 0) {
+			if (dp_strncmpi(param_list[i],
+					"mpe1",
+					strlen("mpe1")) == 0) {
 				flag |= 0x2;
 				mpe1 = 0;
 			}
 
-			if (dp_strncmpi(param_list[i], "mpe2", strlen("mpe2")) == 0) {
+			if (dp_strncmpi(param_list[i],
+					"mpe2",
+					strlen("mpe2")) == 0) {
 				flag |= 0x4;
 				mpe2 = 0;
 			}
 
-			if (dp_strncmpi(param_list[i], "mpe3", strlen("mpe3")) == 0) {
+			if (dp_strncmpi(param_list[i],
+					"mpe3",
+					strlen("mpe3")) == 0) {
 				flag |= 0x8;
 				mpe3 = 0;
 			}
@@ -228,7 +248,9 @@ ssize_t proc_parser_write(struct file *file, const char *buf,
 			 "flag=0x%x mpe3/2/1/cpu=%d/%d/%d/%d\n", flag, mpe3,
 			 mpe2, mpe1, cpu);
 		dp_set_gsw_parser_31(flag, cpu, mpe1, mpe2, mpe3);
-	} else if (dp_strncmpi(param_list[0], "refresh", strlen("refresh")) == 0) {
+	} else if (dp_strncmpi(param_list[0],
+				"refresh",
+				strlen("refresh")) == 0) {
 		dp_get_gsw_parser_31(NULL, NULL, NULL, NULL);
 		PR_INFO("value:cpu=%d mpe1=%d mpe2=%d mpe3=%d\n", pinfo[0].v,
 			pinfo[1].v, pinfo[2].v, pinfo[3].v);
@@ -1047,8 +1069,9 @@ ssize_t proc_qos_mib(struct file *file, const char *buf,
 				PR_INFO("P[%03d]: 0x%08x 0x%08x\n",
 					i, gree_b, yellow_b);
 		}
-	} else
+	} else {
 		goto help;
+	}
 
 	return count;
 help:   /*                        [0]    [1]*/
@@ -1553,7 +1576,8 @@ static ssize_t proc_gsw_pmac_write(struct file *file, const char *buf,
 		PR_INFO("parameter %d not enough/more. count=%d\n", num, count);
 		goto help;
 	}
-	if (dp_strncmpi(param_list[0], "help", strlen("help")) == 0)	/* help */
+	if (dp_strncmpi(param_list[0],
+			"help", strlen("help")) == 0)	/* help */
 		goto help;
 	/* set pmac */
 	if (dp_strncmpi(param_list[0], "set", strlen("set")) != 0) {
@@ -1578,7 +1602,9 @@ static ssize_t proc_gsw_pmac_write(struct file *file, const char *buf,
 		ret = gsw_core_api((dp_gsw_cb)gsw_handle->gsw_pmac_ops
 				   .Pmac_Eg_CfgGet, gsw_handle, &pmac);
 		for (i = start_param; i < num; i += 2) {
-			if (dp_strncmpi(param_list[i], "Class", strlen("Class")) == 0) {
+			if (dp_strncmpi(param_list[i],
+					"Class",
+					strlen("Class")) == 0) {
 				char *p = param_list[i + 1];
 				char *tail = p + strlen(p);
 				char *tmp;
@@ -1592,7 +1618,9 @@ static ssize_t proc_gsw_pmac_write(struct file *file, const char *buf,
 				*tmp = 0;
 				class_s = dp_atoi(p);
 				class_e = dp_atoi(tmp + 1);
-			} else if (dp_strncmpi(param_list[i], "FlowID", strlen("FlowID")) == 0) {
+			} else if (dp_strncmpi(param_list[i],
+					"FlowID",
+					strlen("FlowID")) == 0) {
 				char *p = param_list[i + 1];
 				char *tail = p + strlen(p);
 				char *tmp;
@@ -1606,34 +1634,58 @@ static ssize_t proc_gsw_pmac_write(struct file *file, const char *buf,
 				*tmp = 0;
 				flow_s = dp_atoi(p);
 				flow_e = dp_atoi(tmp + 1);
-			} else if (dp_strncmpi(param_list[i], "DestPort", strlen("DestPort")) == 0) {
+			} else if (dp_strncmpi(param_list[i],
+					"DestPort",
+					strlen("DestPort")) == 0) {
 				PMAC_EG_SET(nDestPortId, param_list[i + 1]);
-			} else if (dp_strncmpi(param_list[i], "RxDmaCH", strlen("RxDmaCH")) == 0) {
+			} else if (dp_strncmpi(param_list[i],
+					"RxDmaCH",
+					strlen("RxDmaCH")) == 0) {
 				PMAC_EG_SET(nRxDmaChanId, param_list[i + 1]);
 			}
 #ifdef xxxxx
 			/*below global flag cannot be editted here*/
-			else if (dp_strncmpi(param_list[i], "MPE1", strlen("MPE1")) == 0)
+			else if (dp_strncmpi(param_list[i],
+					     "MPE1",
+						 strlen("MPE1")) == 0)
 				PMAC_EG_SET(bMpe1Flag, param_list[i + 1]);
-			else if (dp_strncmpi(param_list[i], "MPE2", strlen("MPE2")) == 0)
+			else if (dp_strncmpi(param_list[i],
+					     "MPE2",
+						 strlen("MPE2")) == 0)
 				PMAC_EG_SET(bMpe2Flag, param_list[i + 1]);
-			else if (dp_strncmpi(param_list[i], "DEC", strlen("DEC")) == 0)
+			else if (dp_strncmpi(param_list[i],
+					     "DEC",
+						 strlen("DEC")) == 0)
 				PMAC_EG_SET(bDecFlag, param_list[i + 1]);
-			else if (dp_strncmpi(param_list[i], "ENC", strlen("ENC")) == 0)
+			else if (dp_strncmpi(param_list[i],
+					     "ENC",
+						 strlen("ENC")) == 0)
 				PMAC_EG_SET(bEncFlag, param_list[i + 1]);
-			else if (dp_strncmpi(param_list[i], "ProcFlag", strlen("ProcFlag")) == 0)
+			else if (dp_strncmpi(param_list[i],
+					     "ProcFlag",
+						 strlen("ProcFlag")) == 0)
 				PMAC_EG_SET(bProcFlagsSelect,
 					    param_list[i + 1]);
 #endif
-			else if (dp_strncmpi(param_list[i], "RemL2Hdr", strlen("RemL2Hdr")) == 0)
+			else if (dp_strncmpi(param_list[i],
+					     "RemL2Hdr",
+						 strlen("RemL2Hdr")) == 0)
 				PMAC_EG_SET(bRemL2Hdr, param_list[i + 1]);
-			else if (dp_strncmpi(param_list[i], "RemNum", strlen("RemNum")) == 0)
+			else if (dp_strncmpi(param_list[i],
+					     "RemNum",
+						 strlen("RemNum")) == 0)
 				PMAC_EG_SET(numBytesRem, param_list[i + 1]);
-			else if (dp_strncmpi(param_list[i], "FCS", strlen("FCS")) == 0)
+			else if (dp_strncmpi(param_list[i],
+					     "FCS",
+						 strlen("FCS")) == 0)
 				PMAC_EG_SET(bFcsEna, param_list[i + 1]);
-			else if (dp_strncmpi(param_list[i], "PmacEna", strlen("PmacEna")) == 0)
+			else if (dp_strncmpi(param_list[i],
+					     "PmacEna",
+						 strlen("PmacEna")) == 0)
 				PMAC_EG_SET(bPmacEna, param_list[i + 1]);
-			else if (dp_strncmpi(param_list[i], "TcEnable", strlen("TcEnable")) == 0)
+			else if (dp_strncmpi(param_list[i],
+					     "TcEnable",
+						 strlen("TcEnable")) == 0)
 				PMAC_EG_SET(bTCEnable, param_list[i + 1]);
 			else {
 				PR_INFO("wrong parameter[%d]: %s\n",
@@ -1688,34 +1740,47 @@ static ssize_t proc_gsw_pmac_write(struct file *file, const char *buf,
 		ret = gsw_core_api((dp_gsw_cb)gsw_handle->gsw_pmac_ops
 				   .Pmac_Ig_CfgGet, gsw_handle, &pmac);
 		for (i = start_param; i < num; i += 2) {
-			if (dp_strncmpi(param_list[i], "TxDmaCH", strlen("TxDmaCH")) == 0) {
+			if (dp_strncmpi(param_list[i],
+					"TxDmaCH",
+					strlen("TxDmaCH")) == 0) {
 				PMAC_IG_SET(nTxDmaChanId, param_list[i + 1]);
-			} else if (dp_strncmpi(param_list[i], "ErrDrop", strlen("ErrDrop")) == 0) {
+			} else if (dp_strncmpi(param_list[i],
+					"ErrDrop",
+					strlen("ErrDrop")) == 0) {
 				PMAC_IG_SET(bErrPktsDisc, param_list[i + 1]);
 			} else if (dp_strncmpi(param_list[i],
-					      "ClassEna", strlen("ClassEna")) == 0) {
+					"ClassEna",
+					strlen("ClassEna")) == 0) {
 				PMAC_IG_SET(bClassEna, param_list[i + 1]);
 			} else if (dp_strncmpi(param_list[i],
-					      "ClassDefault", strlen("ClassDefault")) == 0) {
+					"ClassDefault",
+					strlen("ClassDefault")) == 0) {
 				PMAC_IG_SET(bClassDefault, param_list[i + 1]);
-			} else if (dp_strncmpi(param_list[i], "PmacEna", strlen("PmacEna")) == 0) {
+			} else if (dp_strncmpi(param_list[i],
+					"PmacEna",
+					strlen("PmacEna")) == 0) {
 				PMAC_IG_SET(bPmapEna, param_list[i + 1]);
 			} else if (dp_strncmpi(param_list[i],
-					      "PmacDefault", strlen("PmacEna")) == 0) {
+					"PmacDefault",
+					strlen("PmacEna")) == 0) {
 				PMAC_IG_SET(bPmapDefault, param_list[i + 1]);
 			} else if (dp_strncmpi(param_list[i],
-					      "SubIdDefault", strlen("SubIdDefault")) == 0) {
+					"SubIdDefault",
+					strlen("SubIdDefault")) == 0) {
 				 /*changed from bSubIdDefault in GSWIP3.1 */
 				//PMAC_IG_SET(bSubIdDefault, param_list[i + 1]);
 				PMAC_IG_SET(eSubId, param_list[i + 1]);
 			} else if (dp_strncmpi(param_list[i],
-					      "SpIdDefault", strlen("SpIdDefault")) == 0) {
+					      "SpIdDefault",
+						  strlen("SpIdDefault")) == 0) {
 				PMAC_IG_SET(bSpIdDefault, param_list[i + 1]);
 			} else if (dp_strncmpi(param_list[i],
-					      "PmacPresent", strlen("PmacPresent")) == 0) {
+					      "PmacPresent",
+						  strlen("PmacPresent")) == 0) {
 				PMAC_IG_SET(bPmacPresent, param_list[i + 1]);
 			} else if (dp_strncmpi(param_list[i],
-					    "DefaultPmacHdr", strlen("DefaultPmacHdr")) == 0) {
+				"DefaultPmacHdr",
+				strlen("DefaultPmacHdr")) == 0) {
 				char *p = param_list[i + 1];
 				char *tail = p + strlen(p);
 
@@ -1733,7 +1798,8 @@ static ssize_t proc_gsw_pmac_write(struct file *file, const char *buf,
 			PR_ERR("GSW_PMAC_IG_CFG_SET returned failure\n");
 			goto exit;
 		}
-	} else if (dp_strncmpi(param_list[start_param - 1], "reset", strlen("reset")) == 0) {
+	} else if (dp_strncmpi(param_list[start_param - 1],
+			   "reset", strlen("reset")) == 0) {
 		GSW_reset_t reset;
 
 		gsw_core_api((dp_gsw_cb)gsw_handle->gsw_common_ops.Reset,
@@ -2081,7 +2147,8 @@ static ssize_t proc_swdev_brctl_write(struct file *file,
 	str[len] = 0;
 	num = dp_split_buffer(str, param_list, ARRAY_SIZE(param_list));
 
-	if ((num != 2) || (dp_strncmpi(param_list[0], "help", strlen("help")) == 0))
+	if ((num != 2) ||
+	    (dp_strncmpi(param_list[0], "help", strlen("help")) == 0))
 		goto HELP;
 
 	buf1 = kmalloc(MAX_BP_NUM + 1, GFP_KERNEL);
@@ -2173,12 +2240,14 @@ static ssize_t proc_swdev_fdb_write(struct file *file, const char *buf,
 	len -= copy_from_user(str, buf, len);
 	str[len] = 0;
 	num = dp_split_buffer(str, param_list, ARRAY_SIZE(param_list));
-	if ((num != 5) || (dp_strncmpi(param_list[0], "help", strlen("help")) == 0))
+	if ((num != 5) ||
+	    (dp_strncmpi(param_list[0], "help", strlen("help")) == 0))
 		goto HELP;
 
 	if (dp_strncmpi(param_list[0], "fdb", strlen("fdb")) == 0) {
 		if (dp_strncmpi(param_list[1], "add", strlen("add")) == 0) {
-			if (dp_strncmpi(param_list[2], "dev", strlen("dev")) == 0) {
+			if (dp_strncmpi(param_list[2], "dev",
+					strlen("dev")) == 0) {
 				/*fdb add <mac> dev <port>*/
 				tmp =
 				kmalloc(sizeof(struct fdb_tbl *), GFP_KERNEL);
@@ -2192,7 +2261,8 @@ static ssize_t proc_swdev_fdb_write(struct file *file, const char *buf,
 			}
 		}
 		if (dp_strncmpi(param_list[1], "del", strlen("del")) == 0) {
-			if (dp_strncmpi(param_list[2], "dev", strlen("dev")) == 0) {
+			if (dp_strncmpi(param_list[2], "dev",
+					strlen("dev")) == 0) {
 				/*fdb add dev <port> <mac>*/
 				dev = dev_get_by_name(&init_net, param_list[3]);
 				mac_stob(param_list[4], b);
@@ -2271,10 +2341,12 @@ static void pmac_eg_cfg(char *param_list[], int num, dp_pmac_cfg_t *pmac_cfg)
 	for (i = 2; i < num; i += 2) {
 		for (j = 0; j < ARRAY_SIZE(egress_entries); j++) {
 			if (dp_strncmpi(param_list[i],
-				       egress_entries[j].name, strlen(egress_entries[j].name)))
+					egress_entries[j].name,
+					strlen(egress_entries[j].name)))
 				continue;
 			if (dp_strncmpi(egress_entries[j].name,
-				       "rm_l2hdr", strlen("rm_l2hdr")) == 0) {
+					"rm_l2hdr",
+					strlen("rm_l2hdr")) == 0) {
 				if (dp_atoi(param_list[i + 1]) > 0) {
 					pmac_cfg->eg_pmac.rm_l2hdr = 1;
 					value = dp_atoi(param_list[i + 1]);
@@ -2326,7 +2398,9 @@ static ssize_t ep_port_write(struct file *file, const char *buf, size_t count,
 			for (j = 0; j < ARRAY_SIZE(ingress_entries); j++) {
 				if (dp_strncmpi
 				    (param_list[i],
-				     ingress_entries[j].name, strlen(ingress_entries[j].name)) == 0) {
+				     ingress_entries[j].name,
+					 strlen(ingress_entries[j].name))
+					 == 0) {
 					value = dp_atoi(param_list[i + 1]);
 					ingress_entries[j].
 					    ingress_callback(&pmac_cfg,
@@ -2344,7 +2418,8 @@ static ssize_t ep_port_write(struct file *file, const char *buf, size_t count,
 			PR_INFO("pmac set configuration failed\n");
 			return -1;
 		}
-	} else if (dp_strncmpi(param_list[0], "egress", strlen("egress")) == 0) {
+	} else if (dp_strncmpi(param_list[0], "egress",
+	strlen("egress")) == 0) {
 		port = dp_atoi(param_list[1]);
 
 		pmac_eg_cfg(param_list, num, &pmac_cfg);
diff --git a/drivers/net/ethernet/lantiq/tmu/drv_tmu_api.h b/drivers/net/ethernet/lantiq/tmu/drv_tmu_api.h
index 721a7574d00c..cea9c9503b1d 100644
--- a/drivers/net/ethernet/lantiq/tmu/drv_tmu_api.h
+++ b/drivers/net/ethernet/lantiq/tmu/drv_tmu_api.h
@@ -283,9 +283,7 @@ int tmu_ll_chiptest(int layer_mode, int rate_kbps, int rate_port_flag,
 
 #if defined(TMU_LOCAL_STAT_DEBUG)
 
-/**
-   Dump the TMU information.
-*/
+/* Dump the TMU information. */
 void tmu_dump(struct seq_file *s);
 void tmu_eqt_dump(struct seq_file *s);
 void tmu_ept_dump(struct seq_file *s);
diff --git a/drivers/net/ethernet/lantiq/tmu/drv_tmu_ll.c b/drivers/net/ethernet/lantiq/tmu/drv_tmu_ll.c
index 640bc9156a5c..3724e5942bc8 100644
--- a/drivers/net/ethernet/lantiq/tmu/drv_tmu_ll.c
+++ b/drivers/net/ethernet/lantiq/tmu/drv_tmu_ll.c
@@ -3366,8 +3366,14 @@ ssize_t tmu_proc_get_qid_via_index(struct file *file, const char *buf,
 
 	lookup_index = dp_atoi(param_list[1]);
 
-	if ((dp_strncmpi(param_list[0], "set", strlen("set")) == 0) ||
-	    (dp_strncmpi(param_list[0], "write", strlen("write")) == 0)) {
+	if ((dp_strncmpi(param_list[0],
+			 "set",
+			 strlen("set"))
+			 == 0) ||
+	    (dp_strncmpi(param_list[0],
+			 "write",
+			 strlen("write"))
+			 == 0)) {
 		if (!param_list[2]) {
 			TMU_PRINT("wrong command\n");
 			return count;
@@ -5124,7 +5130,7 @@ static struct tmu_dgb_info dbg_enable_mask_str[] = {
 	{"all", "enable all debug", -1}
 };
 
-void tmu_proc_port_write_help()
+void tmu_proc_port_write_help(void)
 {
 	TMU_PRINT("usage for proc %s:\n", PROC_BASE PROC_FILE_EPT);
 	TMU_PRINT("  echo help > %s\n", PROC_BASE PROC_FILE_EPT);
@@ -5517,9 +5523,15 @@ ssize_t tmu_proc_tmu_cascade_write(struct file *file, const char *buf,
 	level = num - 3;
 
 	if (num <= 1 || num > ARRAY_SIZE(param_list)
-	    || dp_strncmpi(param_list[0], "help", strlen("help")) == 0)
+	    || dp_strncmpi(param_list[0],
+			   "help",
+			   strlen("help"))
+			   == 0)
 		tmu_proc_tmu_create_cascade_help();
-	else if (dp_strncmpi(param_list[0], "set_wfq", strlen("set_wfq")) == 0) {
+	else if (dp_strncmpi(param_list[0],
+			     "set_wfq",
+				 strlen("set_wfq"))
+				 == 0) {
 		struct tmu_sched_blk_in_link ilink;
 
 		if (num != 3) {
@@ -5563,11 +5575,17 @@ ssize_t tmu_proc_tmu_cascade_write(struct file *file, const char *buf,
 		}
 
 		tmu_sched_blk_in_link_set(((LINK_B + 0) << 3) + LEAF, &ilink);
-	} else if (dp_strncmpi(param_list[0], "del_q", strlen("del_q")) == 0) {
+	} else if (dp_strncmpi(param_list[0],
+				   "del_q",
+				   strlen("del_q"))
+				   == 0) {
 		qid = dp_atoi(param_list[1]);
 		tmu_egress_queue_delete(qid);
 		TMU_PRINT("\nQueue %d deleted\n\n", qid);
-	} else if (dp_strncmpi(param_list[0], "del_sb", strlen("del_sb")) == 0) {
+	} else if (dp_strncmpi(param_list[0],
+				   "del_sb",
+				   strlen("del_sb"))
+				   == 0) {
 		sbid = dp_atoi(param_list[1]);
 
 		if (tmu_sched_blk_delete(sbid)) {
@@ -5576,7 +5594,10 @@ ssize_t tmu_proc_tmu_cascade_write(struct file *file, const char *buf,
 			TMU_PRINT("has a vaild SB/Queue id)\n\n");
 		} else
 			TMU_PRINT("\nSB %d deleted\n\n", sbid);
-	} else if (dp_strncmpi(param_list[0], "attach_tb", strlen("attach_tb")) == 0) {
+	} else if (dp_strncmpi(param_list[0],
+				   "attach_tb",
+				   strlen("attach_tb"))
+				   == 0) {
 		if (num != 3) {
 			TMU_PRINT("Wrong:echo help > cascade\n");
 			return count;
@@ -5612,7 +5633,10 @@ ssize_t tmu_proc_tmu_cascade_write(struct file *file, const char *buf,
 		}
 
 		tmu_token_bucket_shaper_create(tb, ((LINK_B << 3) + LEAF));
-	} else if (dp_strncmpi(param_list[0], "remove_tb", strlen("remove_tb")) == 0) {
+	} else if (dp_strncmpi(param_list[0],
+				   "remove_tb",
+				   strlen("remove_tb"))
+				   == 0) {
 		if (num != 3) {
 			TMU_PRINT("Wrong: echo help > cascade\n");
 			return count;
@@ -5647,7 +5671,10 @@ ssize_t tmu_proc_tmu_cascade_write(struct file *file, const char *buf,
 		}
 
 		tmu_token_bucket_shaper_delete(tb, ((LINK_B << 3) + LEAF));
-	} else if (dp_strncmpi(param_list[0], "cfg_tb", strlen("cfg_tb")) == 0) {
+	} else if (dp_strncmpi(param_list[0],
+				   "cfg_tb",
+				   strlen("cfg_tb"))
+				   == 0) {
 		uint32_t tbid, cir, pir, cbs, pbs, mode;
 
 		if (num < 7) {
@@ -5670,7 +5697,10 @@ ssize_t tmu_proc_tmu_cascade_write(struct file *file, const char *buf,
 		pbs = dp_atoi(param_list[5]);
 		mode = dp_atoi(param_list[6]);
 		tmu_shaper_cfg_set(tbid, 1, mode, cir, pir, cbs, pbs);
-	} else if (dp_strncmpi(param_list[0], "create", strlen("create")) == 0) {
+	} else if (dp_strncmpi(param_list[0],
+				   "create",
+				   strlen("create"))
+				   == 0) {
 		if (num < 4) {
 			TMU_PRINT("Wrong Parameter(try help): echo help > cascade\n");
 			return count;
@@ -5934,27 +5964,60 @@ uint32_t read_write_reg_tbst(uint32_t set_cmd, uint32_t tbid,
 	while ((tmu_r32(tbstc) & TMU_TBSTC_VAL) == 0)
 		continue;
 
-	if (dp_strncmpi(tsbst_reg_name, "TBSTR0", strlen("TBSTR0")) == 0)
+	if (dp_strncmpi(tsbst_reg_name,
+			"TBSTR0",
+			strlen("TBSTR0"))
+			== 0)
 		reg_r_data = tmu_r32(tbstr0);
-	else if (dp_strncmpi(tsbst_reg_name, "TBSTR1", strlen("TBSTR1")) == 0)
+	else if (dp_strncmpi(tsbst_reg_name,
+			     "TBSTR1",
+				 strlen("TBSTR1"))
+				 == 0)
 		reg_r_data = tmu_r32(tbstr1);
-	else if (dp_strncmpi(tsbst_reg_name, "TBSTR2", strlen("TBSTR2")) == 0)
+	else if (dp_strncmpi(tsbst_reg_name,
+			     "TBSTR2",
+				 strlen("TBSTR2"))
+				 == 0)
 		reg_r_data = tmu_r32(tbstr2);
-	else if (dp_strncmpi(tsbst_reg_name, "TBSTR3", strlen("TBSTR3")) == 0)
+	else if (dp_strncmpi(tsbst_reg_name,
+			     "TBSTR3",
+				 strlen("TBSTR3"))
+				 == 0)
 		reg_r_data = tmu_r32(tbstr3);
-	else if (dp_strncmpi(tsbst_reg_name, "TBSTR4", strlen("TBSTR4")) == 0)
+	else if (dp_strncmpi(tsbst_reg_name,
+			     "TBSTR4",
+				 strlen("TBSTR4"))
+				 == 0)
 		reg_r_data = tmu_r32(tbstr4);
-	else if (dp_strncmpi(tsbst_reg_name, "TBSTR5", strlen("TBSTR5")) == 0)
+	else if (dp_strncmpi(tsbst_reg_name,
+			     "TBSTR5",
+				 strlen("TBSTR5"))
+				 == 0)
 		reg_r_data = tmu_r32(tbstr5);
-	else if (dp_strncmpi(tsbst_reg_name, "TBSTR6", strlen("TBSTR6")) == 0)
+	else if (dp_strncmpi(tsbst_reg_name,
+			     "TBSTR6",
+				 strlen("TBSTR6"))
+				 == 0)
 		reg_r_data = tmu_r32(tbstr6);
-	else if (dp_strncmpi(tsbst_reg_name, "TBSTR7", strlen("TBSTR7")) == 0)
+	else if (dp_strncmpi(tsbst_reg_name,
+			     "TBSTR7",
+				 strlen("TBSTR7"))
+				 == 0)
 		reg_r_data = tmu_r32(tbstr7);
-	else if (dp_strncmpi(tsbst_reg_name, "TBSTR8", strlen("TBSTR8")) == 0)
+	else if (dp_strncmpi(tsbst_reg_name,
+			     "TBSTR8",
+				 strlen("TBSTR8"))
+				 == 0)
 		reg_r_data = tmu_r32(tbstr8);
-	else if (dp_strncmpi(tsbst_reg_name, "TBSTR9", strlen("TBSTR9")) == 0)
+	else if (dp_strncmpi(tsbst_reg_name,
+			     "TBSTR9",
+				 strlen("TBSTR9"))
+				 == 0)
 		reg_r_data = tmu_r32(tbstr9);
-	else if (dp_strncmpi(tsbst_reg_name, "TBSTR10", strlen("TBSTR10")) == 0)
+	else if (dp_strncmpi(tsbst_reg_name,
+			     "TBSTR10",
+				 strlen("TBSTR10"))
+				 == 0)
 		reg_r_data = tmu_r32(tbstr10);
 	else {
 		TMU_PRINT("Not valid register name %s?\n", tsbst_reg_name);
@@ -5963,27 +6026,60 @@ uint32_t read_write_reg_tbst(uint32_t set_cmd, uint32_t tbid,
 
 #else
 
-	if (dp_strncmpi(tsbst_reg_name, "TBSTR0", strlen("TBSTR0")) == 0)
+	if (dp_strncmpi(tsbst_reg_name,
+			"TBSTR0",
+			strlen("TBSTR0"))
+			== 0)
 		reg_r_data = simu_tbstr0[tbid];
-	else if (dp_strncmpi(tsbst_reg_name, "TBSTR1", strlen("TBSTR1")) == 0)
+	else if (dp_strncmpi(tsbst_reg_name,
+			     "TBSTR1",
+				 strlen("TBSTR1"))
+				 == 0)
 		reg_r_data = simu_tbstr1[tbid];
-	else if (dp_strncmpi(tsbst_reg_name, "TBSTR2", strlen("TBSTR2")) == 0)
+	else if (dp_strncmpi(tsbst_reg_name,
+			     "TBSTR2",
+				 strlen("TBSTR2"))
+				 == 0)
 		reg_r_data = simu_tbstr2[tbid];
-	else if (dp_strncmpi(tsbst_reg_name, "TBSTR3", strlen("TBSTR3")) == 0)
+	else if (dp_strncmpi(tsbst_reg_name,
+			     "TBSTR3",
+				 strlen("TBSTR3"))
+				 == 0)
 		reg_r_data = simu_tbstr3[tbid];
-	else if (dp_strncmpi(tsbst_reg_name, "TBSTR4", strlen("TBSTR4")) == 0)
+	else if (dp_strncmpi(tsbst_reg_name,
+			     "TBSTR4",
+				 strlen("TBSTR4"))
+				 == 0)
 		reg_r_data = simu_tbstr4[tbid];
-	else if (dp_strncmpi(tsbst_reg_name, "TBSTR5", strlen("TBSTR5")) == 0)
+	else if (dp_strncmpi(tsbst_reg_name,
+			     "TBSTR5",
+				 strlen("TBSTR5"))
+				 == 0)
 		reg_r_data = simu_tbstr5[tbid];
-	else if (dp_strncmpi(tsbst_reg_name, "TBSTR6", strlen("TBSTR6")) == 0)
+	else if (dp_strncmpi(tsbst_reg_name,
+			     "TBSTR6",
+				 strlen("TBSTR6"))
+				 == 0)
 		reg_r_data = simu_tbstr6[tbid];
-	else if (dp_strncmpi(tsbst_reg_name, "TBSTR7", strlen("TBSTR7")) == 0)
+	else if (dp_strncmpi(tsbst_reg_name,
+			     "TBSTR7",
+				 strlen("TBSTR7"))
+				 == 0)
 		reg_r_data = simu_tbstr7[tbid];
-	else if (dp_strncmpi(tsbst_reg_name, "TBSTR8", strlen("TBSTR8")) == 0)
+	else if (dp_strncmpi(tsbst_reg_name,
+			     "TBSTR8",
+				 strlen("TBSTR8"))
+				 == 0)
 		reg_r_data = simu_tbstr8[tbid];
-	else if (dp_strncmpi(tsbst_reg_name, "TBSTR9", strlen("TBSTR9")) == 0)
+	else if (dp_strncmpi(tsbst_reg_name,
+			     "TBSTR9",
+				 strlen("TBSTR9"))
+				 == 0)
 		reg_r_data = simu_tbstr9[tbid];
-	else if (dp_strncmpi(tsbst_reg_name, "TBSTR10", strlen("TBSTR10")) == 0)
+	else if (dp_strncmpi(tsbst_reg_name,
+			     "TBSTR10",
+				 strlen("TBSTR10"))
+				 == 0)
 		reg_r_data = simu_tbstr10[tbid];
 	else {
 		TMU_PRINT("Not valid register name %s?\n", tsbst_reg_name);
@@ -5998,27 +6094,60 @@ uint32_t read_write_reg_tbst(uint32_t set_cmd, uint32_t tbid,
 		set_val(reg_w_data, *value, bit_mask, bit_offset);
 #if !defined(CONFIG_LTQ_TMU_DDR_SIMULATE_REG)
 
-		if (dp_strncmpi(tsbst_reg_name, "TBSTR0", strlen("TBSTR0")) == 0)
+		if (dp_strncmpi(tsbst_reg_name,
+				"TBSTR0",
+				strlen("TBSTR0"))
+				== 0)
 			tmu_w32(reg_w_data, tbstr0);
-		else if (dp_strncmpi(tsbst_reg_name, "TBSTR1", strlen("TBSTR1")) == 0)
+		else if (dp_strncmpi(tsbst_reg_name,
+				     "TBSTR1",
+					 strlen("TBSTR1"))
+					 == 0)
 			tmu_w32(reg_w_data, tbstr1);
-		else if (dp_strncmpi(tsbst_reg_name, "TBSTR2", strlen("TBSTR2")) == 0)
+		else if (dp_strncmpi(tsbst_reg_name,
+				     "TBSTR2",
+					 strlen("TBSTR2"))
+					 == 0)
 			tmu_w32(reg_w_data, tbstr2);
-		else if (dp_strncmpi(tsbst_reg_name, "TBSTR3", strlen("TBSTR3")) == 0)
+		else if (dp_strncmpi(tsbst_reg_name,
+				     "TBSTR3",
+					 strlen("TBSTR3"))
+					 == 0)
 			tmu_w32(reg_w_data, tbstr3);
-		else if (dp_strncmpi(tsbst_reg_name, "TBSTR4", strlen("TBSTR4")) == 0)
+		else if (dp_strncmpi(tsbst_reg_name,
+				     "TBSTR4",
+					 strlen("TBSTR4"))
+					 == 0)
 			tmu_w32(reg_w_data, tbstr4);
-		else if (dp_strncmpi(tsbst_reg_name, "TBSTR5", strlen("TBSTR5")) == 0)
+		else if (dp_strncmpi(tsbst_reg_name,
+				     "TBSTR5",
+					 strlen("TBSTR5"))
+					 == 0)
 			tmu_w32(reg_w_data, tbstr5);
-		else if (dp_strncmpi(tsbst_reg_name, "TBSTR6", strlen("TBSTR6")) == 0)
+		else if (dp_strncmpi(tsbst_reg_name,
+				     "TBSTR6",
+					 strlen("TBSTR6"))
+					 == 0)
 			tmu_w32(reg_w_data, tbstr6);
-		else if (dp_strncmpi(tsbst_reg_name, "TBSTR7", strlen("TBSTR7")) == 0)
+		else if (dp_strncmpi(tsbst_reg_name,
+				     "TBSTR7",
+					 strlen("TBSTR7"))
+					 == 0)
 			tmu_w32(reg_w_data, tbstr7);
-		else if (dp_strncmpi(tsbst_reg_name, "TBSTR8", strlen("TBSTR8")) == 0)
+		else if (dp_strncmpi(tsbst_reg_name,
+				     "TBSTR8",
+					 strlen("TBSTR8"))
+					 == 0)
 			tmu_w32(reg_w_data, tbstr8);
-		else if (dp_strncmpi(tsbst_reg_name, "TBSTR9", strlen("TBSTR9")) == 0)
+		else if (dp_strncmpi(tsbst_reg_name,
+				     "TBSTR9",
+					 strlen("TBSTR9"))
+					 == 0)
 			tmu_w32(reg_w_data, tbstr9);
-		else if (dp_strncmpi(tsbst_reg_name, "TBSTR10", strlen("TBSTR10")) == 0)
+		else if (dp_strncmpi(tsbst_reg_name,
+				     "TBSTR10",
+					 strlen("TBSTR10"))
+					 == 0)
 			tmu_w32(reg_w_data, tbstr10);
 
 		tmu_w32(TMU_TBSTC_RW_W | tbid, tbstc);
@@ -6028,27 +6157,60 @@ uint32_t read_write_reg_tbst(uint32_t set_cmd, uint32_t tbid,
 
 #else
 
-		if (dp_strncmpi(tsbst_reg_name, "TBSTR0", strlen("TBSTR0")) == 0)
+		if (dp_strncmpi(tsbst_reg_name,
+				"TBSTR0",
+				strlen("TBSTR0"))
+				== 0)
 			simu_tbstr0[tbid] = reg_w_data;
-		else if (dp_strncmpi(tsbst_reg_name, "TBSTR1", strlen("TBSTR1")) == 0)
+		else if (dp_strncmpi(tsbst_reg_name,
+				     "TBSTR1",
+					 strlen("TBSTR1"))
+					 == 0)
 			simu_tbstr1[tbid] = reg_w_data;
-		else if (dp_strncmpi(tsbst_reg_name, "TBSTR2", strlen("TBSTR2")) == 0)
+		else if (dp_strncmpi(tsbst_reg_name,
+				     "TBSTR2",
+					 strlen("TBSTR2"))
+					 == 0)
 			simu_tbstr2[tbid] = reg_w_data;
-		else if (dp_strncmpi(tsbst_reg_name, "TBSTR3", strlen("TBSTR3")) == 0)
+		else if (dp_strncmpi(tsbst_reg_name,
+				     "TBSTR3",
+					 strlen("TBSTR3"))
+					 == 0)
 			simu_tbstr3[tbid] = reg_w_data;
-		else if (dp_strncmpi(tsbst_reg_name, "TBSTR4", strlen("TBSTR4")) == 0)
+		else if (dp_strncmpi(tsbst_reg_name,
+				     "TBSTR4",
+					 strlen("TBSTR4"))
+					 == 0)
 			simu_tbstr4[tbid] = reg_w_data;
-		else if (dp_strncmpi(tsbst_reg_name, "TBSTR5", strlen("TBSTR5")) == 0)
+		else if (dp_strncmpi(tsbst_reg_name,
+				     "TBSTR5",
+					 strlen("TBSTR5"))
+					 == 0)
 			simu_tbstr5[tbid] = reg_w_data;
-		else if (dp_strncmpi(tsbst_reg_name, "TBSTR6", strlen("TBSTR6")) == 0)
+		else if (dp_strncmpi(tsbst_reg_name,
+				     "TBSTR6",
+					 strlen("TBSTR6"))
+					 == 0)
 			simu_tbstr6[tbid] = reg_w_data;
-		else if (dp_strncmpi(tsbst_reg_name, "TBSTR7", strlen("TBSTR7")) == 0)
+		else if (dp_strncmpi(tsbst_reg_name,
+				     "TBSTR7",
+					 strlen("TBSTR7"))
+					 == 0)
 			simu_tbstr7[tbid] = reg_w_data;
-		else if (dp_strncmpi(tsbst_reg_name, "TBSTR8", strlen("TBSTR8")) == 0)
+		else if (dp_strncmpi(tsbst_reg_name,
+				     "TBSTR8",
+					 strlen("TBSTR8"))
+					 == 0)
 			simu_tbstr8[tbid] = reg_w_data;
-		else if (dp_strncmpi(tsbst_reg_name, "TBSTR9", strlen("TBSTR9")) == 0)
+		else if (dp_strncmpi(tsbst_reg_name,
+				     "TBSTR9",
+					 strlen("TBSTR9"))
+					 == 0)
 			simu_tbstr9[tbid] = reg_w_data;
-		else if (dp_strncmpi(tsbst_reg_name, "TBSTR10", strlen("TBSTR10")) == 0)
+		else if (dp_strncmpi(tsbst_reg_name,
+				     "TBSTR10",
+					 strlen("TBSTR10"))
+					 == 0)
 			simu_tbstr10[tbid] = reg_w_data;
 
 #endif
@@ -6073,13 +6235,25 @@ uint32_t read_write_reg_sbit(uint32_t set_cmd, uint32_t sbin,
 	while ((tmu_r32(sbitc) & TMU_SBITC_VAL) == 0)
 		continue;
 
-	if (dp_strncmpi(sbit_reg_name, "SBITR0",strlen("SBITR0")) == 0)
+	if (dp_strncmpi(sbit_reg_name,
+			"SBITR0",
+			strlen("SBITR0"))
+			== 0)
 		reg_r_data = tmu_r32(sbitr0);
-	else if (dp_strncmpi(sbit_reg_name, "SBITR1", strlen("SBITR1")) == 0)
+	else if (dp_strncmpi(sbit_reg_name,
+			     "SBITR1",
+				 strlen("SBITR1"))
+				 == 0)
 		reg_r_data = tmu_r32(sbitr1);
-	else if (dp_strncmpi(sbit_reg_name, "SBITR2", strlen("SBITR2")) == 0)
+	else if (dp_strncmpi(sbit_reg_name,
+			     "SBITR2",
+				 strlen("SBITR2"))
+				 == 0)
 		reg_r_data = tmu_r32(sbitr2);
-	else if (dp_strncmpi(sbit_reg_name, "SBITR3", strlen("SBITR3")) == 0)
+	else if (dp_strncmpi(sbit_reg_name,
+			     "SBITR3",
+				 strlen("SBITR3"))
+				 == 0)
 		reg_r_data = tmu_r32(sbitr3);
 	else {
 		TMU_PRINT("Not valid register name %s?\n", sbit_reg_name);
@@ -6088,13 +6262,25 @@ uint32_t read_write_reg_sbit(uint32_t set_cmd, uint32_t sbin,
 
 #else
 
-	if (dp_strncmpi(sbit_reg_name, "SBITR0", strlen("SBITR0")) == 0)
+	if (dp_strncmpi(sbit_reg_name,
+			"SBITR0",
+			strlen("SBITR0"))
+			== 0)
 		reg_r_data = simu_sbitr0[sbin];
-	else if (dp_strncmpi(sbit_reg_name, "SBITR1", strlen("SBITR1")) == 0)
+	else if (dp_strncmpi(sbit_reg_name,
+			     "SBITR1",
+				 strlen("SBITR1"))
+				 == 0)
 		reg_r_data = simu_sbitr1[sbin];
-	else if (dp_strncmpi(sbit_reg_name, "SBITR2", strlen("SBITR2")) == 0)
+	else if (dp_strncmpi(sbit_reg_name,
+			     "SBITR2",
+				 strlen("SBITR2"))
+				 == 0)
 		reg_r_data = simu_sbitr2[sbin];
-	else if (dp_strncmpi(sbit_reg_name, "SBITR3", strlen("SBITR3")) == 0)
+	else if (dp_strncmpi(sbit_reg_name,
+			     "SBITR3",
+				 strlen("SBITR3"))
+				 == 0)
 		reg_r_data = simu_sbitr3[sbin];
 	else {
 		TMU_PRINT("Not valid register name %s?\n", sbit_reg_name);
@@ -6109,13 +6295,25 @@ uint32_t read_write_reg_sbit(uint32_t set_cmd, uint32_t sbin,
 		set_val(reg_w_data, *value, bit_mask, bit_offset);
 #if !defined(CONFIG_LTQ_TMU_DDR_SIMULATE_REG)
 
-		if (dp_strncmpi(sbit_reg_name, "SBITR0", strlen("SBITR0")) == 0)
+		if (dp_strncmpi(sbit_reg_name,
+				"SBITR0",
+				strlen("SBITR0"))
+				== 0)
 			tmu_w32(reg_w_data, sbitr0);
-		else if (dp_strncmpi(sbit_reg_name, "SBITR1", strlen("SBITR1")) == 0)
+		else if (dp_strncmpi(sbit_reg_name,
+				     "SBITR1",
+					 strlen("SBITR1"))
+					 == 0)
 			tmu_w32(reg_w_data, sbitr1);
-		else if (dp_strncmpi(sbit_reg_name, "SBITR2", strlen("SBITR2")) == 0)
+		else if (dp_strncmpi(sbit_reg_name,
+				     "SBITR2",
+					 strlen("SBITR2"))
+					 == 0)
 			tmu_w32(reg_w_data, sbitr2);
-		else if (dp_strncmpi(sbit_reg_name, "SBITR3", strlen("SBITR3")) == 0)
+		else if (dp_strncmpi(sbit_reg_name,
+				     "SBITR3",
+					 strlen("SBITR3"))
+					 == 0)
 			tmu_w32(reg_w_data, sbitr3);
 
 		tmu_w32(TMU_SBITC_RW_W | TMU_SBITC_SEL | sbin, sbitc);
@@ -6125,13 +6323,25 @@ uint32_t read_write_reg_sbit(uint32_t set_cmd, uint32_t sbin,
 
 #else
 
-		if (dp_strncmpi(sbit_reg_name, "SBITR0", strlen("SBITR0")) == 0)
+		if (dp_strncmpi(sbit_reg_name,
+				"SBITR0",
+				strlen("SBITR0"))
+				== 0)
 			simu_sbitr0[sbin] = reg_w_data;
-		else if (dp_strncmpi(sbit_reg_name, "SBITR1", strlen("SBITR1")) == 0)
+		else if (dp_strncmpi(sbit_reg_name,
+				     "SBITR1",
+					 strlen("SBITR1"))
+					 == 0)
 			simu_sbitr1[sbin] = reg_w_data;
-		else if (dp_strncmpi(sbit_reg_name, "SBITR2", strlen("SBITR2")) == 0)
+		else if (dp_strncmpi(sbit_reg_name,
+				     "SBITR2",
+					 strlen("SBITR2"))
+					 == 0)
 			simu_sbitr2[sbin] = reg_w_data;
-		else if (dp_strncmpi(sbit_reg_name, "SBITR3", strlen("SBITR3")) == 0)
+		else if (dp_strncmpi(sbit_reg_name,
+				     "SBITR3",
+					 strlen("SBITR3"))
+					 == 0)
 			simu_sbitr3[sbin] = reg_w_data;
 
 #endif
@@ -6156,9 +6366,15 @@ uint32_t read_write_reg_sbot(uint32_t set_cmd, uint32_t sbid,
 	while ((tmu_r32(sbotc) & TMU_SBOTC_VAL) == 0)
 		continue;
 
-	if (dp_strncmpi(sbot_reg_name, "SBOTR0", strlen("SBOTR0")) == 0)
+	if (dp_strncmpi(sbot_reg_name,
+			"SBOTR0",
+			strlen("SBOTR0"))
+			== 0)
 		reg_r_data = tmu_r32(sbotr0);
-	else if (dp_strncmpi(sbot_reg_name, "SBOTR1", strlen("SBOTR1")) == 0)
+	else if (dp_strncmpi(sbot_reg_name,
+			     "SBOTR1",
+				 strlen("SBOTR1"))
+				 == 0)
 		reg_r_data = tmu_r32(sbotr1);
 	else {
 		TMU_PRINT("Not valid register name %s?\n", sbot_reg_name);
@@ -6167,9 +6383,15 @@ uint32_t read_write_reg_sbot(uint32_t set_cmd, uint32_t sbid,
 
 #else
 
-	if (dp_strncmpi(sbot_reg_name, "SBOTR0", strlen("SBOTR0")) == 0)
+	if (dp_strncmpi(sbot_reg_name,
+			"SBOTR0",
+			strlen("SBOTR0"))
+			== 0)
 		reg_r_data = simu_sbotr0[sbid];
-	else if (dp_strncmpi(sbot_reg_name, "SBOTR1", strlen("SBOTR1")) == 0)
+	else if (dp_strncmpi(sbot_reg_name,
+			     "SBOTR1",
+				 strlen("SBOTR1"))
+				 == 0)
 		reg_r_data = simu_sbotr1[sbid];
 	else {
 		TMU_PRINT("Not valid register name %s?\n", sbot_reg_name);
@@ -6184,9 +6406,15 @@ uint32_t read_write_reg_sbot(uint32_t set_cmd, uint32_t sbid,
 		set_val(reg_w_data, *value, bit_mask, bit_offset);
 #if !defined(CONFIG_LTQ_TMU_DDR_SIMULATE_REG)
 
-		if (dp_strncmpi(sbot_reg_name, "SBOTR0", strlen("SBOTR0")) == 0)
+		if (dp_strncmpi(sbot_reg_name,
+				"SBOTR0",
+				strlen("SBOTR0"))
+				== 0)
 			tmu_w32(reg_w_data, sbotr0);
-		else if (dp_strncmpi(sbot_reg_name, "SBOTR1", strlen("SBOTR1")) == 0)
+		else if (dp_strncmpi(sbot_reg_name,
+				     "SBOTR1",
+					 strlen("SBOTR1"))
+					 == 0)
 			tmu_w32(reg_w_data, sbotr1);
 
 		tmu_w32(TMU_SBOTC_RW_W | TMU_SBOTC_SEL | sbid, sbotc);
@@ -6196,9 +6424,15 @@ uint32_t read_write_reg_sbot(uint32_t set_cmd, uint32_t sbid,
 
 #else
 
-		if (dp_strncmpi(sbot_reg_name, "SBOTR0", strlen("SBOTR0")) == 0)
+		if (dp_strncmpi(sbot_reg_name,
+				"SBOTR0",
+				strlen("SBOTR0"))
+				== 0)
 			simu_sbotr0[sbid] = reg_w_data;
-		else if (dp_strncmpi(sbot_reg_name, "SBOTR1", strlen("SBOTR1")) == 0)
+		else if (dp_strncmpi(sbot_reg_name,
+				     "SBOTR1",
+					 strlen("SBOTR1"))
+					 == 0)
 			simu_sbotr1[sbid] = reg_w_data;
 
 #endif
@@ -6223,9 +6457,15 @@ uint32_t read_write_reg_epot(uint32_t set_cmd, uint32_t epn,
 	while ((tmu_r32(epmtc) & TMU_EPMTC_EOV) == 0)
 		continue;
 
-	if (dp_strncmpi(epot_reg_name, "EPOT0", strlen("EPOT0")) == 0)
+	if (dp_strncmpi(epot_reg_name,
+			"EPOT0",
+			strlen("EPOT0"))
+			== 0)
 		reg_r_data = tmu_r32(epot0);
-	else if (dp_strncmpi(epot_reg_name, "EPOT1", strlen("EPOT1")) == 0)
+	else if (dp_strncmpi(epot_reg_name,
+			     "EPOT1",
+				 strlen("EPOT1"))
+				 == 0)
 		reg_r_data = tmu_r32(epot1);
 	else {
 		TMU_PRINT("Not valid register name %s?\n", epot_reg_name);
@@ -6234,9 +6474,15 @@ uint32_t read_write_reg_epot(uint32_t set_cmd, uint32_t epn,
 
 #else
 
-	if (dp_strncmpi(epot_reg_name, "EPOT0", strlen("EPOT0")) == 0)
+	if (dp_strncmpi(epot_reg_name,
+			"EPOT0",
+			strlen("EPOT0"))
+			== 0)
 		reg_r_data = simu_epot0[epn];
-	else if (dp_strncmpi(epot_reg_name, "EPOT1", strlen("EPOT1")) == 0)
+	else if (dp_strncmpi(epot_reg_name,
+			     "EPOT1",
+				 strlen("EPOT1"))
+				 == 0)
 		reg_r_data = simu_epot1[epn];
 	else {
 		TMU_PRINT("Not valid register name %s?\n", epot_reg_name);
@@ -6251,9 +6497,15 @@ uint32_t read_write_reg_epot(uint32_t set_cmd, uint32_t epn,
 		set_val(reg_w_data, *value, bit_mask, bit_offset);
 #if !defined(CONFIG_LTQ_TMU_DDR_SIMULATE_REG)
 
-		if (dp_strncmpi(epot_reg_name, "EPOT0", strlen("EPOT0")) == 0)
+		if (dp_strncmpi(epot_reg_name,
+				"EPOT0",
+				strlen("EPOT0"))
+				== 0)
 			tmu_w32(reg_w_data, epot0);
-		else if (dp_strncmpi(epot_reg_name, "EPOT1", strlen("EPOT1")) == 0)
+		else if (dp_strncmpi(epot_reg_name,
+				     "EPOT1",
+					 strlen("EPOT1"))
+					 == 0)
 			tmu_w32(reg_w_data, epot1);
 
 		tmu_w32(TMU_EPMTC_EOW | epn, epmtc);
@@ -6263,9 +6515,15 @@ uint32_t read_write_reg_epot(uint32_t set_cmd, uint32_t epn,
 
 #else
 
-		if (dp_strncmpi(epot_reg_name, "EPOT0", strlen("EPOT0")) == 0)
+		if (dp_strncmpi(epot_reg_name,
+				"EPOT0",
+				strlen("EPOT0"))
+				== 0)
 			simu_epot0[epn] = reg_w_data;
-		else if (dp_strncmpi(epot_reg_name, "EPOT1", strlen("EPOT1")) == 0)
+		else if (dp_strncmpi(epot_reg_name,
+				     "EPOT1",
+					 strlen("EPOT1"))
+					 == 0)
 			simu_epot1[epn] = reg_w_data;
 
 #endif
@@ -6317,9 +6575,15 @@ uint32_t read_write_reg_eptt(uint32_t set_cmd, uint32_t epn,
 		reg_w_data = reg_r_data;
 		set_val(reg_w_data, *value, bit_mask, bit_offset);
 #if !defined(CONFIG_LTQ_TMU_DDR_SIMULATE_REG)
-		if (dp_strncmpi(eptt_reg_name, "EPTT0", strlen("EPTT0")) == 0)
+		if (dp_strncmpi(eptt_reg_name,
+				"EPTT0",
+				strlen("EPTT0"))
+				== 0)
 			tmu_w32(reg_w_data, eptt0);
-		else if (dp_strncmpi(eptt_reg_name, "EPTT1", strlen("EPTT1")) == 0)
+		else if (dp_strncmpi(eptt_reg_name,
+				"EPTT1",
+				strlen("EPTT1"))
+				== 0)
 			tmu_w32(reg_w_data, eptt1);
 
 		tmu_w32(TMU_EPMTC_ETW | epn, epmtc);
@@ -6329,9 +6593,15 @@ uint32_t read_write_reg_eptt(uint32_t set_cmd, uint32_t epn,
 
 #else
 
-		if (dp_strncmpi(eptt_reg_name, "EPTT0", strlen("EPTT0")) == 0)
+		if (dp_strncmpi(eptt_reg_name,
+				"EPTT0",
+				strlen("EPTT0"))
+				== 0)
 			simu_eptt0[epn] = reg_w_data;
-		else if (dp_strncmpi(eptt_reg_name, "EPTT1", strlen("EPTT1")) == 0)
+		else if (dp_strncmpi(eptt_reg_name,
+				     "EPTT1",
+					 strlen("EPTT1"))
+					 == 0)
 			simu_eptt1[epn] = reg_w_data;
 
 #endif
@@ -6371,13 +6641,25 @@ uint32_t read_write_reg_epdt(uint32_t set_cmd, uint32_t epn,
 
 #else
 
-	if (dp_strncmpi(epdt_reg_name, "EPDT0", strlen("EPDT0")) == 0)
+	if (dp_strncmpi(epdt_reg_name,
+			"EPDT0",
+			strlen("EPDT0"))
+			== 0)
 		reg_r_data = simu_epdt0[epn];
-	else if (dp_strncmpi(epdt_reg_name, "EPDT1", strlen("EPDT1")) == 0)
+	else if (dp_strncmpi(epdt_reg_name,
+			     "EPDT1",
+				 strlen("EPDT1"))
+				 == 0)
 		reg_r_data = simu_epdt1[epn];
-	else if (dp_strncmpi(epdt_reg_name, "EPDT2", strlen("EPDT2")) == 0)
+	else if (dp_strncmpi(epdt_reg_name,
+			     "EPDT2",
+				 strlen("EPDT2"))
+				 == 0)
 		reg_r_data = simu_epdt2[epn];
-	else if (dp_strncmpi(epdt_reg_name, "EPDT3", strlen("EPDT3")) == 0)
+	else if (dp_strncmpi(epdt_reg_name,
+			     "EPDT3",
+				 strlen("EPDT3"))
+				 == 0)
 		reg_r_data = simu_epdt3[epn];
 	else {
 		TMU_PRINT("Not valid register name %s?\n", epdt_reg_name);
@@ -6392,13 +6674,25 @@ uint32_t read_write_reg_epdt(uint32_t set_cmd, uint32_t epn,
 		set_val(reg_w_data, *value, bit_mask, bit_offset);
 #if !defined(CONFIG_LTQ_TMU_DDR_SIMULATE_REG)
 
-		if (dp_strncmpi(epdt_reg_name, "EPDT0", strlen("EPDT0")) == 0)
+		if (dp_strncmpi(epdt_reg_name,
+				"EPDT0",
+				strlen("EPDT0"))
+				== 0)
 			tmu_w32(reg_w_data, epdt0);
-		else if (dp_strncmpi(epdt_reg_name, "EPDT1", strlen("EPDT1")) == 0)
+		else if (dp_strncmpi(epdt_reg_name,
+				     "EPDT1",
+					 strlen("EPDT1"))
+					 == 0)
 			tmu_w32(reg_w_data, epdt1);
-		else if (dp_strncmpi(epdt_reg_name, "EPDT2", strlen("EPDT2")) == 0)
+		else if (dp_strncmpi(epdt_reg_name,
+				     "EPDT2",
+					 strlen("EPDT2"))
+					 == 0)
 			tmu_w32(reg_w_data, epdt2);
-		else if (dp_strncmpi(epdt_reg_name, "EPDT3", strlen("EPDT3")) == 0)
+		else if (dp_strncmpi(epdt_reg_name,
+				     "EPDT3",
+					 strlen("EPDT3"))
+					 == 0)
 			tmu_w32(reg_w_data, epdt3);
 
 		tmu_w32(TMU_EPMTC_EDW | epn, epmtc);
@@ -6408,13 +6702,25 @@ uint32_t read_write_reg_epdt(uint32_t set_cmd, uint32_t epn,
 
 #else
 
-		if (dp_strncmpi(epdt_reg_name, "EPDT0", strlen("EPDT0")) == 0)
+		if (dp_strncmpi(epdt_reg_name,
+				"EPDT0",
+				strlen("EPDT0"))
+				== 0)
 			simu_epdt0[epn] = reg_w_data;
-		else if (dp_strncmpi(epdt_reg_name, "EPDT1", strlen("EPDT1")) == 0)
+		else if (dp_strncmpi(epdt_reg_name,
+				     "EPDT1",
+					 strlen("EPDT1"))
+					 == 0)
 			simu_epdt1[epn] = reg_w_data;
-		else if (dp_strncmpi(epdt_reg_name, "EPDT2", strlen("EPDT2")) == 0)
+		else if (dp_strncmpi(epdt_reg_name,
+				     "EPDT2",
+					 strlen("EPDT2"))
+					 == 0)
 			simu_epdt2[epn] = reg_w_data;
-		else if (dp_strncmpi(epdt_reg_name, "EPDT3", strlen("EPDT3")) == 0)
+		else if (dp_strncmpi(epdt_reg_name,
+				     "EPDT3",
+					 strlen("EPDT3"))
+					 == 0)
 			simu_epdt3[epn] = reg_w_data;
 
 #endif
@@ -6538,15 +6844,30 @@ uint32_t read_write_reg_qtht(uint32_t set_cmd, uint32_t qid,
 		set_val(reg_w_data, *value, bit_mask, bit_offset);
 #if !defined(CONFIG_LTQ_TMU_DDR_SIMULATE_REG)
 
-		if (dp_strncmpi(qtht_reg_name, "QTHT0", strlen("QTHT0")) == 0)
+		if (dp_strncmpi(qtht_reg_name,
+				"QTHT0",
+				strlen("QTHT0"))
+				== 0)
 			tmu_w32(reg_w_data, qtht0);
-		else if (dp_strncmpi(qtht_reg_name, "QTHT1", strlen("QTHT1")) == 0)
+		else if (dp_strncmpi(qtht_reg_name,
+				     "QTHT1",
+					 strlen("QTHT1"))
+					 == 0)
 			tmu_w32(reg_w_data, qtht1);
-		else if (dp_strncmpi(qtht_reg_name, "QTHT2", strlen("QTHT2")) == 0)
+		else if (dp_strncmpi(qtht_reg_name,
+				     "QTHT2",
+					 strlen("QTHT2"))
+					 == 0)
 			tmu_w32(reg_w_data, qtht2);
-		else if (dp_strncmpi(qtht_reg_name, "QTHT3", strlen("QTHT3")) == 0)
+		else if (dp_strncmpi(qtht_reg_name,
+				     "QTHT3",
+					 strlen("QTHT3"))
+					 == 0)
 			tmu_w32(reg_w_data, qtht3);
-		else if (dp_strncmpi(qtht_reg_name, "QTHT4", strlen("QTHT4")) == 0)
+		else if (dp_strncmpi(qtht_reg_name,
+				     "QTHT4",
+					 strlen("QTHT4"))
+					 == 0)
 			tmu_w32(reg_w_data, qtht4);
 
 		tmu_w32(TMU_QMTC_QTW | qid, qmtc);
@@ -6556,15 +6877,30 @@ uint32_t read_write_reg_qtht(uint32_t set_cmd, uint32_t qid,
 
 #else
 
-		if (dp_strncmpi(qtht_reg_name, "QTHT0", strlen("QTHT0")) == 0)
+		if (dp_strncmpi(qtht_reg_name,
+				"QTHT0",
+				strlen("QTHT0"))
+				== 0)
 			simu_qtht0[qid] = reg_w_data;
-		else if (dp_strncmpi(qtht_reg_name, "QTHT1", strlen("QTHT1")) == 0)
+		else if (dp_strncmpi(qtht_reg_name,
+				     "QTHT1",
+					 strlen("QTHT1"))
+					 == 0)
 			simu_qtht1[qid] = reg_w_data;
-		else if (dp_strncmpi(qtht_reg_name, "QTHT2", strlen("QTHT2")) == 0)
+		else if (dp_strncmpi(qtht_reg_name,
+				     "QTHT2",
+					 strlen("QTHT2"))
+					 == 0)
 			simu_qtht2[qid] = reg_w_data;
-		else if (dp_strncmpi(qtht_reg_name, "QTHT3", strlen("QTHT3")) == 0)
+		else if (dp_strncmpi(qtht_reg_name,
+				     "QTHT3",
+					 strlen("QTHT3"))
+					 == 0)
 			simu_qtht3[qid] = reg_w_data;
-		else if (dp_strncmpi(qtht_reg_name, "QTHT4", strlen("QTHT4")) == 0)
+		else if (dp_strncmpi(qtht_reg_name,
+				     "QTHT4",
+					 strlen("QTHT4"))
+					 == 0)
 			simu_qtht4[qid] = reg_w_data;
 
 #endif
@@ -6621,11 +6957,20 @@ uint32_t read_write_reg_qoct(uint32_t set_cmd, uint32_t qid,
 		set_val(reg_w_data, *value, bit_mask, bit_offset);
 #if !defined(CONFIG_LTQ_TMU_DDR_SIMULATE_REG)
 
-		if (dp_strncmpi(qoct_reg_name, "QOCT0", strlen("QOCT0")) == 0)
+		if (dp_strncmpi(qoct_reg_name,
+				"QOCT0",
+				strlen("QOCT0"))
+				== 0)
 			tmu_w32(reg_w_data, qoct0);
-		else if (dp_strncmpi(qoct_reg_name, "QOCT1", strlen("QOCT1")) == 0)
+		else if (dp_strncmpi(qoct_reg_name,
+				     "QOCT1",
+					 strlen("QOCT1"))
+					 == 0)
 			tmu_w32(reg_w_data, qoct1);
-		else if (dp_strncmpi(qoct_reg_name, "QOCT2", strlen("QOCT2")) == 0)
+		else if (dp_strncmpi(qoct_reg_name,
+				     "QOCT2",
+					 strlen("QOCT2"))
+					 == 0)
 			tmu_w32(reg_w_data, qoct2);
 
 		tmu_w32(TMU_QMTC_QOW | qid, qmtc);
@@ -6635,14 +6980,23 @@ uint32_t read_write_reg_qoct(uint32_t set_cmd, uint32_t qid,
 
 #else
 
-		if (dp_strncmpi(qoct_reg_name, "QOCT0", strlen("QOCT0")) == 0)
+		if (dp_strncmpi(qoct_reg_name,
+				"QOCT0",
+				strlen("QOCT0"))
+				== 0)
 			simu_qoct0[qid] = reg_w_data;
-		else if (dp_strncmpi(qoct_reg_name, "QOCT1", strlen("QOCT1")) == 0)
+		else if (dp_strncmpi(qoct_reg_name,
+				     "QOCT1",
+					 strlen("QOCT1"))
+					 == 0)
 			simu_qoct1[qid] = reg_w_data;
-		else if (dp_strncmpi(qoct_reg_name, "QOCT2", strlen("QOCT2")) == 0)
+		else if (dp_strncmpi(qoct_reg_name,
+				     "QOCT2",
+					 strlen("QOCT2"))
+					 == 0)
 			simu_qoct2[qid] = reg_w_data;
 
-#endif 
+#endif
 	}
 
 	if (set_cmd)
@@ -6700,13 +7054,25 @@ uint32_t read_write_reg_qdct(uint32_t set_cmd, uint32_t qid,
 		set_val(reg_w_data, *value, bit_mask, bit_offset);
 #if !defined(CONFIG_LTQ_TMU_DDR_SIMULATE_REG)
 
-		if (dp_strncmpi(qdct_reg_name, "QDCT0", strlen("QDCT0")) == 0)
+		if (dp_strncmpi(qdct_reg_name,
+				"QDCT0",
+				strlen("QDCT0"))
+				== 0)
 			tmu_w32(reg_w_data, qdct0);
-		else if (dp_strncmpi(qdct_reg_name, "QDCT1", strlen("QDCT1")) == 0)
+		else if (dp_strncmpi(qdct_reg_name,
+				     "QDCT1",
+					 strlen("QDCT1"))
+					 == 0)
 			tmu_w32(reg_w_data, qdct1);
-		else if (dp_strncmpi(qdct_reg_name, "QDCT2", strlen("QDCT2")) == 0)
+		else if (dp_strncmpi(qdct_reg_name,
+				     "QDCT2",
+					 strlen("QDCT2"))
+					 == 0)
 			tmu_w32(reg_w_data, qdct2);
-		else if (dp_strncmpi(qdct_reg_name, "QDCT3", strlen("QDCT3")) == 0)
+		else if (dp_strncmpi(qdct_reg_name,
+				     "QDCT3",
+					 strlen("QDCT3"))
+					 == 0)
 			tmu_w32(reg_w_data, qdct3);
 
 		tmu_w32(TMU_QMTC_QDW | qid, qmtc);
@@ -6716,13 +7082,25 @@ uint32_t read_write_reg_qdct(uint32_t set_cmd, uint32_t qid,
 
 #else
 
-		if (dp_strncmpi(qdct_reg_name, "QDCT0", strlen("QDCT0")) == 0)
+		if (dp_strncmpi(qdct_reg_name,
+				"QDCT0",
+				strlen("QDCT0"))
+				== 0)
 			simu_qdct0[qid] = reg_w_data;
-		else if (dp_strncmpi(qdct_reg_name, "QDCT1", strlen("QDCT1")) == 0)
+		else if (dp_strncmpi(qdct_reg_name,
+				     "QDCT1",
+					 strlen("QDCT1"))
+					 == 0)
 			simu_qdct1[qid] = reg_w_data;
-		else if (dp_strncmpi(qdct_reg_name, "QDCT2", strlen("QDCT2")) == 0)
+		else if (dp_strncmpi(qdct_reg_name,
+				     "QDCT2",
+					 strlen("QDCT2"))
+					 == 0)
 			simu_qdct2[qid] = reg_w_data;
-		else if (dp_strncmpi(qdct_reg_name, "QDCT3", strlen("QDCT3")) == 0)
+		else if (dp_strncmpi(qdct_reg_name,
+				     "QDCT3",
+					 strlen("QDCT3"))
+					 == 0)
 			simu_qdct3[qid] = reg_w_data;
 
 #endif
@@ -6779,11 +7157,20 @@ uint32_t read_write_reg_qfmt(uint32_t set_cmd, uint32_t qid,
 		set_val(reg_w_data, *value, bit_mask, bit_offset);
 #if !defined(CONFIG_LTQ_TMU_DDR_SIMULATE_REG)
 
-		if (dp_strncmpi(qfmt_reg_name, "QFMT0", strlen("QFMT0")) == 0)
+		if (dp_strncmpi(qfmt_reg_name,
+				"QFMT0",
+				strlen("QFMT0"))
+				== 0)
 			tmu_w32(reg_w_data, qfmt0);
-		else if (dp_strncmpi(qfmt_reg_name, "QFMT1", strlen("QFMT1")) == 0)
+		else if (dp_strncmpi(qfmt_reg_name,
+				     "QFMT1",
+					 strlen("QFMT1"))
+					 == 0)
 			tmu_w32(reg_w_data, qfmt1);
-		else if (dp_strncmpi(qfmt_reg_name, "QFMT2", strlen("QFMT2")) == 0)
+		else if (dp_strncmpi(qfmt_reg_name,
+				     "QFMT2",
+					 strlen("QFMT2"))
+					 == 0)
 			tmu_w32(reg_w_data, qfmt2);
 
 		tmu_w32(TMU_QMTC_QFW | qid, qmtc);
@@ -6793,11 +7180,19 @@ uint32_t read_write_reg_qfmt(uint32_t set_cmd, uint32_t qid,
 
 #else
 
-		if (dp_strncmpi(qfmt_reg_name, "QFMT0", strlen("QFMT0")) == 0)
+		if (dp_strncmpi(qfmt_reg_name,
+				"QFMT0",
+				strlen("QFMT0"))
+				== 0)
 			simu_qfmt0[qid] = reg_w_data;
-		else if (dp_strncmpi(qfmt_reg_name, "QFMT1", strlen("QFMT1")) == 0)
+		else if (dp_strncmpi(qfmt_reg_name,
+				     "QFMT1",
+					 strlen("QFMT1"))
+					 == 0)
 			simu_qfmt1[qid] = reg_w_data;
-		else if (dp_strncmpi(qfmt_reg_name, "QFMT2", strlen("QFMT2")) == 0)
+		else if (dp_strncmpi(qfmt_reg_name,
+				     "QFMT2",
+					 strlen("QFMT2")) == 0)
 			simu_qfmt2[qid] = reg_w_data;
 
 #endif
@@ -7011,13 +7406,25 @@ uint32_t read_write_reg_gothr(uint32_t set_cmd, uint32_t qid,
 		set_val(reg_w_data, *value, bit_mask, bit_offset);
 #if !defined(CONFIG_LTQ_TMU_DDR_SIMULATE_REG)
 
-		if (dp_strncmpi(gothr_reg_name, "GOTHR0", strlen("GOTHR0")) == 0)
+		if (dp_strncmpi(gothr_reg_name,
+				"GOTHR0",
+				strlen("GOTHR0"))
+				== 0)
 			tmu_w32(reg_w_data, gothr[0]);
-		else if (dp_strncmpi(gothr_reg_name, "GOTHR1", strlen("GOTHR1")) == 0)
+		else if (dp_strncmpi(gothr_reg_name,
+				     "GOTHR1",
+					 strlen("GOTHR1"))
+					 == 0)
 			tmu_w32(reg_w_data, gothr[1]);
-		else if (dp_strncmpi(gothr_reg_name, "GOTHR2", strlen("GOTHR2")) == 0)
+		else if (dp_strncmpi(gothr_reg_name,
+				     "GOTHR2",
+					 strlen("GOTHR2"))
+					 == 0)
 			tmu_w32(reg_w_data, gothr[2]);
-		else if (dp_strncmpi(gothr_reg_name, "GOTHR3", strlen("GOTHR3")) == 0)
+		else if (dp_strncmpi(gothr_reg_name,
+				     "GOTHR3",
+					 strlen("GOTHR3"))
+					 == 0)
 			tmu_w32(reg_w_data, gothr[3]);
 
 #else
@@ -7398,6 +7805,7 @@ static unsigned int get_cbm_clock(void)
 int tmu_reset_mib(u32 index)
 {
 	uint32_t qdc[4];
+
 	if (index >= EGRESS_QUEUE_ID_MAX)
 		return -1;
 	reset_enq_counter(index);
@@ -7410,6 +7818,7 @@ int tmu_reset_mib(u32 index)
 int tmu_reset_mib_all(u32 flag)
 {
 	u32 i;
+
 	for (i = 0; i < EGRESS_QUEUE_ID_MAX; i++)
 		tmu_reset_mib(i);
 	return 0;
diff --git a/drivers/net/ethernet/lantiq/tmu/drv_tmu_ll_lookup_proc.c b/drivers/net/ethernet/lantiq/tmu/drv_tmu_ll_lookup_proc.c
index 18399938f398..8f95cb03c22b 100644
--- a/drivers/net/ethernet/lantiq/tmu/drv_tmu_ll_lookup_proc.c
+++ b/drivers/net/ethernet/lantiq/tmu/drv_tmu_ll_lookup_proc.c
@@ -7,7 +7,7 @@
 #define CARE_FLAG      0
 #define CARE_NOT_FLAG  1
 #if 1
-#define LIST_ALL_CASES(t, mask, not_care)  \
+#define LIST_ALL_CASES(t, mask, not_care) \
 	for (t[0] = 0;  t[0] < ((mask[0] == not_care) ? 2 : 1); t[0]++) \
 	for (t[1] = 0;  t[1] < ((mask[1] == not_care) ? 2 : 1); t[1]++) \
 	for (t[2] = 0;  t[2] < ((mask[2] == not_care) ? 2 : 1); t[2]++) \
diff --git a/drivers/net/ethernet/lantiq/tmu/drv_tmu_ll_proc.c b/drivers/net/ethernet/lantiq/tmu/drv_tmu_ll_proc.c
index e56e2c18771e..10e3ea83d070 100644
--- a/drivers/net/ethernet/lantiq/tmu/drv_tmu_ll_proc.c
+++ b/drivers/net/ethernet/lantiq/tmu/drv_tmu_ll_proc.c
@@ -607,11 +607,14 @@ ssize_t tmu_proc_tmu_reg_write(struct file *file, const char *buf,
 	for (i = 0;
 	     i < sizeof(proc_reg_entries) / sizeof(proc_reg_entries[0]);
 	     i++) {
-		if ((dp_strncmpi(proc_reg_entries[i].regname, param_list[1], strlen(param_list[1])) ==
-		     0)
-		    &&
-		    (dp_strncmpi(proc_reg_entries[i].fieldname, param_list[3], strlen(param_list[3]))
-		     == 0)) {
+		if ((dp_strncmpi(proc_reg_entries[i].regname,
+				 param_list[1],
+				 strlen(param_list[1]))
+				 == 0) &&
+		    (dp_strncmpi(proc_reg_entries[i].fieldname,
+				 param_list[3],
+				 strlen(param_list[3]))
+				 == 0)) {
 			regid = dp_atoi(param_list[2]);
 			/**/ if (cmd)
 				value = dp_atoi(param_list[4]);
