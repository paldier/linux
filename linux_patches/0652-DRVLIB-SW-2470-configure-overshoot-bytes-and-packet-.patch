From 2c611dc34cb540f32bc3fe1bfbbe996f75add38c Mon Sep 17 00:00:00 2001
From: kavitha3 <k.subramanian@intel.com>
Date: Tue, 25 Jun 2019 16:43:34 +0800
Subject: [PATCH] DRVLIB_SW-2470: configure overshoot bytes and packet length
 adjustment for EPON in cqmdriver

---
 drivers/net/ethernet/lantiq/cqm/prx300/cqm.c       | 153 ++++++++++++---------
 drivers/net/ethernet/lantiq/cqm/prx300/cqm.h       |   2 +
 .../lantiq/cqm/prx300/reg/cqem_pon_ip_if.h         |   9 ++
 3 files changed, 97 insertions(+), 67 deletions(-)

diff --git a/drivers/net/ethernet/lantiq/cqm/prx300/cqm.c b/drivers/net/ethernet/lantiq/cqm/prx300/cqm.c
index 56d70462d5b1..fbabd59ef3e7 100644
--- a/drivers/net/ethernet/lantiq/cqm/prx300/cqm.c
+++ b/drivers/net/ethernet/lantiq/cqm/prx300/cqm.c
@@ -14,6 +14,7 @@
 #define OWN_BIT  BIT(31)
 #define COMPLETE_BIT  BIT(30)
 #define CQM_PON_IP_BASE_ADDR 0x1000
+#define CQM_PON_IP_PKT_LEN_ADJ_BYTES 9
 #define PRX300_CQM_DROP_INIT ((PRX300_CQM_DROP_Q << 24) | \
 			   (PRX300_CQM_DROP_Q << 16) | \
 			   (PRX300_CQM_DROP_Q << 8) | \
@@ -537,6 +538,9 @@ static s32 config_pib_ctrl(struct pib_ctrl *ctrl, u32 flags)
 	if (flags & FLAG_PIB_DELAY)
 		set_val(base, ctrl->deq_delay, PIB_CTRL_DQ_DLY_MASK,
 			PIB_CTRL_DQ_DLY_POS);
+	if (flags & FLAG_PIB_PKT_LEN_ADJ)
+		set_val(base, ctrl->pkt_len_adj, PIB_CTRL_PKT_LEN_ADJ_EN_MASK,
+			PIB_CTRL_PKT_LEN_ADJ_EN_POS);
 	return CBM_SUCCESS;
 }
 
@@ -701,13 +705,13 @@ static s32 mode_table_set(int cbm_inst, cbm_queue_map_entry_t *entry,
 				     &flag_done.ep_done, entry->ep,
 				     (flags & CBM_QUEUE_MAP_F_EP_DONTCARE),
 				     &qidt_elm.ep, &qidt_idx.ep);
-		break;
+			break;
 		case STATE_MPE1:
 			handle_state(&state, STATE_MPE2, STATE_EP, 2,
 				     &flag_done.mpe1_done, entry->mpe1,
 				     (flags & CBM_QUEUE_MAP_F_MPE1_DONTCARE),
 				     &qidt_elm.mpe1, &qidt_idx.mpe1);
-		break;
+			break;
 		case STATE_MPE2:
 			handle_state(&state, STATE_MPE2, STATE_MPE1, 2,
 				     &flag_done.mpe2_done, entry->mpe2,
@@ -720,7 +724,7 @@ static s32 mode_table_set(int cbm_inst, cbm_queue_map_entry_t *entry,
 				mode, (0x3 << (ep * 2)),
 			(ep * 2));
 		case STATE_NONE:
-		break;
+			break;
 		};
 	}
 	return CBM_SUCCESS;
@@ -796,25 +800,25 @@ static void cqm_qidt_set_mode0(const struct cqm_qidt_elm *qid_set,
 				     &flag_done.cls_done, qid_set->clsid,
 				     qid_mask->classid_mask, &qidt_elm.clsid,
 				     &qidt_idx.clsid);
-		break;
+			break;
 		case STATE_ENC:
 			handle_state(&state, STATE_DEC, STATE_CLASS, 2,
 				     &flag_done.enc_done, qid_set->enc,
 				     qid_mask->enc_mask, &qidt_elm.enc,
 				     &qidt_idx.enc);
-		break;
+			break;
 		case STATE_DEC:
 			handle_state(&state, STATE_FLOWID_LOW, STATE_ENC, 2,
 				     &flag_done.dec_done, qid_set->dec,
 				     qid_mask->dec_mask, &qidt_elm.dec,
 				     &qidt_idx.dec);
-		break;
+			break;
 		case STATE_FLOWID_LOW:
 			handle_state(&state, STATE_FLOWID_HIGH, STATE_DEC, 2,
 				     &flag_done.fl_done, qid_set->flowidl,
 				     qid_mask->flowid_lmask, &qidt_elm.flowidl,
 				     &qidt_idx.flowidl);
-		break;
+			break;
 		case STATE_FLOWID_HIGH:
 			handle_state(&state, STATE_EP, STATE_FLOWID_LOW, 2,
 				     &flag_done.fh_done, qid_set->flowidh,
@@ -825,28 +829,28 @@ static void cqm_qidt_set_mode0(const struct cqm_qidt_elm *qid_set,
 			| ((qidt_elm.dec & 0x1) << 5)
 			| ((qidt_elm.enc & 0x1) << 4)
 			| ((qidt_elm.clsid & 0xf));
-		break;
+			break;
 		case STATE_EP:
 			handle_state(&state, STATE_MPE1, STATE_FLOWID_HIGH, 16,
 				     &flag_done.ep_done, qid_set->ep,
 				     qid_mask->ep_mask, &qidt_elm.ep,
 				     &qidt_idx.ep);
-		break;
+			break;
 		case STATE_MPE1:
 			handle_state(&state, STATE_MPE2, STATE_EP, 2,
 				     &flag_done.mpe1_done, qid_set->mpe1,
 				     qid_mask->mpe1_mask, &qidt_elm.mpe1,
 				     &qidt_idx.mpe1);
-		break;
+			break;
 		case STATE_MPE2:
 			handle_state(&state, STATE_MPE2, STATE_MPE1, 2,
 				     &flag_done.mpe2_done, qid_set->mpe2,
 				     qid_mask->mpe2_mask, &qidt_elm.mpe2,
 				     &qidt_idx.mpe2);
 			cqm_qid_reg_set(&qidt_elm, qid_val, sel_field);
-		break;
+			break;
 		case STATE_NONE:
-		break;
+			break;
 		};
 	}
 }
@@ -881,28 +885,28 @@ static void cqm_qidt_set_mode1(const struct cqm_qidt_elm *qid_set,
 				     qid_mask->sub_if_id_mask,
 				     &qidt_elm.sub_if_id, &qidt_idx.sub_if_id);
 			sel_field = qidt_elm.sub_if_id;
-		break;
+			break;
 		case STATE_EP:
 			handle_state(&state, STATE_MPE1, STATE_SUBIF_ID, 16,
 				     &flag_done.ep_done, qid_set->ep,
 				     qid_mask->ep_mask, &qidt_elm.ep,
 				     &qidt_idx.ep);
-		break;
+			break;
 		case STATE_MPE1:
 			handle_state(&state, STATE_MPE2, STATE_EP, 2,
 				     &flag_done.mpe1_done, qid_set->mpe1,
 				     qid_mask->mpe1_mask, &qidt_elm.mpe1,
 				     &qidt_idx.mpe1);
-		break;
+			break;
 		case STATE_MPE2:
 			handle_state(&state, STATE_MPE2, STATE_MPE1, 2,
 				     &flag_done.mpe2_done, qid_set->mpe2,
 				     qid_mask->mpe2_mask, &qidt_elm.mpe2,
 				     &qidt_idx.mpe2);
 			cqm_qid_reg_set(&qidt_elm, qid_val, sel_field);
-		break;
+			break;
 		case STATE_NONE:
-		break;
+			break;
 		};
 	}
 }
@@ -942,7 +946,7 @@ static void cqm_qidt_set_mode2(const struct cqm_qidt_elm *qid_set,
 				     &flag_done.cls_done, qid_set->clsid,
 				     qid_mask->classid_mask, &qidt_elm.clsid,
 				     &qidt_idx.clsid);
-		break;
+			break;
 		case STATE_SUBIF_ID:
 			handle_state(&state, nxt_st_subif, STATE_CLASS,
 				     16, &flag_done.sub_if_id_done,
@@ -965,28 +969,28 @@ static void cqm_qidt_set_mode2(const struct cqm_qidt_elm *qid_set,
 				     &temp_idx);
 			sel_field = (qidt_elm.sub_if_id << 4) |
 					     (qidt_elm.clsid & 0xf);
-		break;
+			break;
 		case STATE_EP:
 			handle_state(&state, STATE_MPE1, pr_st_ep, 16,
 				     &flag_done.ep_done, qid_set->ep,
 				     qid_mask->ep_mask, &qidt_elm.ep,
 				     &qidt_idx.ep);
-		break;
+			break;
 		case STATE_MPE1:
 			handle_state(&state, STATE_MPE2, STATE_EP, 2,
 				     &flag_done.mpe1_done, qid_set->mpe1,
 				     qid_mask->mpe1_mask, &qidt_elm.mpe1,
 				     &qidt_idx.mpe1);
-		break;
+			break;
 		case STATE_MPE2:
 			handle_state(&state, STATE_MPE2, STATE_MPE1, 2,
 				     &flag_done.mpe2_done, qid_set->mpe2,
 				     qid_mask->mpe2_mask, &qidt_elm.mpe2,
 				     &qidt_idx.mpe2);
 			cqm_qid_reg_set(&qidt_elm, qid_val, sel_field);
-		break;
+			break;
 		case STATE_NONE:
-		break;
+			break;
 		};
 	}
 }
@@ -1019,7 +1023,7 @@ static void cqm_qidt_set_mode3(const struct cqm_qidt_elm *qid_set,
 				     &flag_done.cls_done, (qid_set->clsid & 0x7)
 				     , qid_mask->classid_mask, &qidt_elm.clsid,
 				     &qidt_idx.clsid);
-		break;
+			break;
 		case STATE_SUBIF_ID:
 			handle_state(&state, STATE_EP, STATE_CLASS, 32,
 				     &flag_done.sub_if_id_done,
@@ -1029,28 +1033,28 @@ static void cqm_qidt_set_mode3(const struct cqm_qidt_elm *qid_set,
 				      &qidt_idx.sub_if_id);
 			sel_field = (qidt_elm.sub_if_id << 3) |
 				     (qidt_elm.clsid & 0x7);
-		break;
+			break;
 		case STATE_EP:
 			handle_state(&state, STATE_MPE1, STATE_SUBIF_ID, 16,
 				     &flag_done.ep_done, qid_set->ep,
 				     qid_mask->ep_mask, &qidt_elm.ep,
 				     &qidt_idx.ep);
-		break;
+			break;
 		case STATE_MPE1:
 			handle_state(&state, STATE_MPE2, STATE_EP, 2,
 				     &flag_done.mpe1_done, qid_set->mpe1,
 				     qid_mask->mpe1_mask, &qidt_elm.mpe1,
 				     &qidt_idx.mpe1);
-		break;
+			break;
 		case STATE_MPE2:
 			handle_state(&state, STATE_MPE2, STATE_MPE1, 2,
 				     &flag_done.mpe2_done, qid_set->mpe2,
 				     qid_mask->mpe2_mask, &qidt_elm.mpe2,
 				     &qidt_idx.mpe2);
 			cqm_qid_reg_set(&qidt_elm, qid_val, sel_field);
-		break;
+			break;
 		case STATE_NONE:
-		break;
+			break;
 		};
 	}
 }
@@ -1070,22 +1074,22 @@ static void cqm_qidt_set(const struct cqm_qidt_elm *qid_set,
 	case 0:
 		dev_dbg(cqm_ctrl->dev, "mode0\n");
 		cqm_qidt_set_mode0(qid_set, qid_mask, qid_val);
-	break;
+		break;
 	case 1:
 		dev_dbg(cqm_ctrl->dev, "mode1\n");
 		cqm_qidt_set_mode1(qid_set, qid_mask, qid_val);
-	break;
+		break;
 	case 2:
 		dev_dbg(cqm_ctrl->dev, "mode2\n");
 		cqm_qidt_set_mode2(qid_set, qid_mask, qid_val);
-	break;
+		break;
 	case 3:
 		dev_dbg(cqm_ctrl->dev, "mode3\n");
 		cqm_qidt_set_mode3(qid_set, qid_mask, qid_val);
-	break;
+		break;
 	default:
 		dev_err(cqm_ctrl->dev, "unknown mode\n");
-	break;
+		break;
 	}
 }
 
@@ -1159,24 +1163,24 @@ static s32 queue_map_get(int cbm_inst, s32 queue_id, s32 *num_entries,
 			temp_entry[i].dec = (index & 0x800) >> 11;
 			temp_entry[i].enc = (index & 0x400) >> 10;
 			temp_entry[i].tc = (index & 0x0F);
-		break;
+			break;
 		case 1:
 			dev_dbg(cqm_ctrl->dev, "mode1\n");
 			temp_entry[i].sub_if_id = sel_field;
-		break;
+			break;
 		case 2:
 			dev_dbg(cqm_ctrl->dev, "mode2\n");
 			temp_entry[i].tc = (sel_field & 0x0F);
 			temp_entry[i].sub_if_id = ((sel_field & 0xf0) << 4);
-		break;
+			break;
 		case 3:
 			dev_dbg(cqm_ctrl->dev, "mode3\n");
 			temp_entry[i].tc = (sel_field & 0x07);
 			temp_entry[i].sub_if_id = ((sel_field & 0xf8) >> 3);
-		break;
+			break;
 		default:
 			dev_err(cqm_ctrl->dev, "unknown mode\n");
-		break;
+			break;
 		}
 	}
 	spin_unlock_irqrestore(&cqm_qidt_lock, sys_flag);
@@ -1972,9 +1976,8 @@ static s32 do_port_setting(u32 *pmac, u32 flags, u32 *cbm_port,
 		ctrl.pib_en = 1;
 		config_pib_ctrl(&ctrl, FLAG_PIB_BYPASS | FLAG_PIB_ENABLE);
 		set_ifmux(PRX300_WAN_AON_MODE);
-	break;
+		break;
 	case DP_F_GPON:
-	case DP_F_EPON:
 		/*clear PIB bypass*/
 		ctrl.pib_bypass = 0;
 		ctrl.pib_en = 1;
@@ -1987,10 +1990,26 @@ static s32 do_port_setting(u32 *pmac, u32 flags, u32 *cbm_port,
 			set_ifmux(PRX300_WAN_AON_MODE);
 		else
 			set_ifmux(PRX300_WAN_PON_MODE);
-		if (temp_flags & DP_F_EPON)
-			cbm_w32(cqm_ctrl->cqm + CBM_EPON_BASE,
-				CQM_PON_IP_BASE_ADDR);
-	break;
+		break;
+	case DP_F_EPON:
+		cbm_w32(cqm_ctrl->cqm + CBM_EPON_BASE,
+			CQM_PON_IP_BASE_ADDR);
+		pib_program_overshoot(CQM_PON_IP_PKT_LEN_ADJ_BYTES);
+		/*clear PIB bypass*/
+		ctrl.pib_bypass = 0;
+		ctrl.pib_en = 1;
+		ctrl.wakeup_intr_en = 1;
+		ctrl.pkt_len_adj = 1;
+		config_pib_ctrl(&ctrl,
+				FLAG_PIB_BYPASS |
+				FLAG_PIB_ENABLE |
+				FLAG_PIB_WAKEUP_INTR |
+				FLAG_PIB_PKT_LEN_ADJ);
+		if (cqm_ctrl->force_xpcs)
+			set_ifmux(PRX300_WAN_AON_MODE);
+		else
+			set_ifmux(PRX300_WAN_PON_MODE);
+		break;
 	case DP_F_FAST_WLAN:
 		populate = 0;
 		if (cbm_port[i] != CBM_PORT_NOT_APPL) {
@@ -2001,9 +2020,9 @@ static s32 do_port_setting(u32 *pmac, u32 flags, u32 *cbm_port,
 				*loop = CBM_FAILURE;
 			}
 		}
-	break;
+		break;
 	default:
-	break;
+		break;
 	}
 	if (populate)
 		cqm_populate_entry(local_entry, &phys_port, cbm_port[i], flags,
@@ -2406,7 +2425,7 @@ static s32 dp_enable(struct module *owner, u32 port_id,
 	case DQM_CPU_TYPE:
 	case DQM_ACA_TYPE:
 		init_cqm_deq_cpu_port(port, data->tx_ring_size);
-	break;
+		break;
 	case DQM_PON_TYPE:
 		if (flags & CBM_PORT_F_DISABLE) {
 			cbm_w32((deq + DQ_PON_PORT((port), cfg)), 0x0);
@@ -2422,9 +2441,9 @@ static s32 dp_enable(struct module *owner, u32 port_id,
 				val);
 			pib_port_enable(port, 1);
 		}
-	break;
+		break;
 	case DQM_DMA_TYPE:
-	break;
+		break;
 	default:
 		dev_err(cqm_ctrl->dev, "Unknown port type %d\n", type);
 		return CBM_FAILURE;
@@ -3198,28 +3217,28 @@ static int get_bufsize(int size)
 	switch (size) {
 	case 128:
 		return 0;
-	break;
+		break;
 	case 256:
 		return 1;
-	break;
+		break;
 	case 512:
 		return 2;
-	break;
+		break;
 	case 1024:
 		return 3;
-	break;
+		break;
 	case 2048:
 		return 4;
-	break;
+		break;
 	case 4096:
 		return 5;
-	break;
+		break;
 	case 8192:
 		return 6;
-	break;
+		break;
 	case 10240:
 		return 7;
-	break;
+		break;
 	};
 	return 0;
 }
@@ -3858,19 +3877,19 @@ static int configure_ports(const struct cqm_config *port_config)
 		case DQM_DMA_TYPE:
 		case DQM_PON_TYPE:
 			result = conf_deq_dma_port(&port_config->data.dqm_dma);
-		break;
+			break;
 		case DQM_CPU_TYPE:
 			result = conf_deq_cpu_port(&port_config->data.dqm_cpu);
-		break;
+			break;
 		case DQM_ACA_TYPE:
 			result = conf_deq_aca_port(&port_config->data.dqm_aca);
-		break;
+			break;
 		case EQM_DMA_TYPE:
 			result = conf_enq_dma_port(&port_config->data.eqm_dma);
-		break;
+			break;
 		case EQM_CPU_TYPE:
 			result = conf_enq_cpu_port(&port_config->data.eqm_cpu);
-		break;
+			break;
 		};
 		if (result)
 			return CBM_FAILURE;
@@ -4320,11 +4339,11 @@ static int cqm_prx300_probe(struct platform_device *pdev)
 	switch (pdata->gsw_mode) {
 	case SHORT_QOS_10G:
 		clk_set_rate(cqm_ctrl->cbm_clk, 400000000);
-	break;
+		break;
 	case FULL_QOS_1G:
 	case SHORT_QOS_1G:
 		clk_set_rate(cqm_ctrl->cbm_clk, 250000000);
-	break;
+		break;
 	};
 	dev_info(cqm_ctrl->dev, "CBM Clock: %ldHz\n",
 		 clk_get_rate(cqm_ctrl->cbm_clk));
@@ -4344,9 +4363,9 @@ static int cqm_prx300_probe(struct platform_device *pdev)
 						  eqm_port_info[i].dma_dt_ch,
 						  eqm_port_info[i].
 						  dma_dt_init_type);
-		break;
+			break;
 		default:
-		break;
+			break;
 		}
 	}
 	cqm_debugfs_init(cqm_ctrl);
diff --git a/drivers/net/ethernet/lantiq/cqm/prx300/cqm.h b/drivers/net/ethernet/lantiq/cqm/prx300/cqm.h
index 4110ccf4181f..67a87f5ee841 100644
--- a/drivers/net/ethernet/lantiq/cqm/prx300/cqm.h
+++ b/drivers/net/ethernet/lantiq/cqm/prx300/cqm.h
@@ -38,6 +38,7 @@
 #define FLAG_PIB_WAKEUP_INTR	BIT(4)
 #define FLAG_PIB_BYPASS		BIT(5)
 #define FLAG_PIB_DELAY		BIT(6)
+#define FLAG_PIB_PKT_LEN_ADJ	BIT(7)
 #define DMA_PORT_FOR_FLUSH 25
 #define PRX300_CQM_DROP_Q	0x0
 #define PRX300_CQM_Q_MASK	0xff
@@ -544,6 +545,7 @@ struct pib_ctrl {
 	u32 cmd_illegal_port_intr_en:1;
 	u32 wakeup_intr_en:1;
 	u32 pib_bypass:1;
+	u32 pkt_len_adj:1;
 	u32 deq_delay:4;
 };
 
diff --git a/drivers/net/ethernet/lantiq/cqm/prx300/reg/cqem_pon_ip_if.h b/drivers/net/ethernet/lantiq/cqm/prx300/reg/cqem_pon_ip_if.h
index c49f7cd7cae8..2aa0d68b3038 100644
--- a/drivers/net/ethernet/lantiq/cqm/prx300/reg/cqem_pon_ip_if.h
+++ b/drivers/net/ethernet/lantiq/cqm/prx300/reg/cqem_pon_ip_if.h
@@ -124,6 +124,15 @@
 //! Constant EN - Enable Bypass
 #define CONST_PIB_CTRL_PIB_BYPASS_EN 0x1
 
+//! Field PKT_LEN_ADJ_EN - Enable Packet Length Adjustment
+#define PIB_CTRL_PKT_LEN_ADJ_EN_POS 20
+//! Field PKT_LEN_ADJ_EN - Enable Packet Length Adjustment
+#define PIB_CTRL_PKT_LEN_ADJ_EN_MASK 0x100000
+//! Constant DIS - Disable adj
+#define CONST_PIB_CTRL_PKT_LEN_ADJ_DIS 0x0
+//! Constant EN - Enable Adj
+#define CONST_PIB_CTRL_PIB_PKT_LEN_ADJ_EN 0x1
+
 //! Field DQ_DLY - Dequeue Delay
 #define PIB_CTRL_DQ_DLY_POS 24
 //! Field DQ_DLY - Dequeue Delay
