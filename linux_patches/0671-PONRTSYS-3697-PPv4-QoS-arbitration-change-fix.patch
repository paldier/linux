From 2bb3fa4302ba12df1670210b0ab028771fe5845d Mon Sep 17 00:00:00 2001
From: ofirbitt <ofir1.bitton@intel.com>
Date: Sun, 7 Jul 2019 09:32:30 +0300
Subject: [PATCH] PONRTSYS-3697: PPv4 QoS arbitration change fix

---
 .../net/datapath/dpm/gswip31/datapath_ppv4_api.c   | 32 +++++-----
 .../net/datapath/dpm/gswip32/datapath_ppv4_api.c   |  6 +-
 .../net/ethernet/lantiq/ppv4/qos/pp_qos_debugfs.c  |  8 +--
 drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_fw.c   | 74 ++++++++++++++--------
 drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_main.c |  4 +-
 .../net/ethernet/lantiq/ppv4/qos/pp_qos_utils.c    | 18 ++++--
 include/net/pp_qos_drv.h                           | 14 ++--
 7 files changed, 94 insertions(+), 62 deletions(-)

diff --git a/drivers/net/datapath/dpm/gswip31/datapath_ppv4_api.c b/drivers/net/datapath/dpm/gswip31/datapath_ppv4_api.c
index f97106e295e4..d57d86694e42 100644
--- a/drivers/net/datapath/dpm/gswip31/datapath_ppv4_api.c
+++ b/drivers/net/datapath/dpm/gswip31/datapath_ppv4_api.c
@@ -2174,7 +2174,7 @@ int dp_node_link_get_31(struct dp_node_link *info, int flag)
 
 		if (info->arbi == ARBITRATION_WRR) {
 			info->prio_wfq =
-				queue_cfg.queue_child_prop.bandwidth_share;
+				queue_cfg.queue_child_prop.wrr_weight;
 		} else if (info->arbi == ARBITRATION_WSP) {
 			info->prio_wfq =
 				queue_cfg.queue_child_prop.priority;
@@ -2206,7 +2206,7 @@ int dp_node_link_get_31(struct dp_node_link *info, int flag)
 
 		if (info->arbi == ARBITRATION_WRR) {
 			info->prio_wfq =
-				sched_cfg.sched_child_prop.bandwidth_share;
+				sched_cfg.sched_child_prop.wrr_weight;
 		} else if (info->arbi == ARBITRATION_WSP) {
 			info->prio_wfq =
 				sched_cfg.sched_child_prop.priority;
@@ -2302,11 +2302,11 @@ static int dp_link_set(struct dp_node_link *info, int parent_node, int flag)
 		 */
 		node_id = priv->qos_queue_stat[info->node_id.q_id].node_id;
 		if (info->arbi == ARBITRATION_WRR) {
-			queue_cfg->queue_child_prop.bandwidth_share = 
+			queue_cfg->queue_child_prop.wrr_weight =
 				info->prio_wfq;
 		} else if (info->arbi == ARBITRATION_WSP) {
 			queue_cfg->queue_child_prop.priority = info->prio_wfq;
-		}				
+		}
 		DP_DEBUG(DP_DBG_FLAG_QOS,
 			 "Try to link Q[%d/%d] to parent[%d/%d] port[%d]\n",
 			 info->node_id.q_id,
@@ -2325,12 +2325,12 @@ static int dp_link_set(struct dp_node_link *info, int parent_node, int flag)
 		sched_cfg->sched_child_prop.parent = parent_node;
 
 		if (info->arbi == ARBITRATION_WRR) {
-			sched_cfg->sched_child_prop.bandwidth_share = 
+			sched_cfg->sched_child_prop.wrr_weight =
 				info->prio_wfq;
 		} else if (info->arbi == ARBITRATION_WSP) {
 			sched_cfg->sched_child_prop.priority = info->prio_wfq;
 		}
-		
+
 		sched_cfg->sched_parent_prop.arbitration = arbi_dp2pp(info->arbi);
 		node_id = info->node_id.sch_id;
 
@@ -2468,11 +2468,11 @@ int dp_qos_link_prio_set_31(struct dp_node_prio *info, int flag)
 			return DP_FAILURE;
 		}
 		if (info->arbi == ARBITRATION_WRR) {
-			queue_cfg.queue_child_prop.bandwidth_share = 
+			queue_cfg.queue_child_prop.wrr_weight =
 				info->prio_wfq;
 		} else if (info->arbi == ARBITRATION_WSP) {
 			queue_cfg.queue_child_prop.priority = info->prio_wfq;
-		}		
+		}
 
 		DP_DEBUG(DP_DBG_FLAG_QOS_DETAIL,
 			 "Prio:%d paased to low level for queue[%d]\n",
@@ -2509,11 +2509,11 @@ int dp_qos_link_prio_set_31(struct dp_node_prio *info, int flag)
 			return DP_FAILURE;
 		}
 		if (info->arbi == ARBITRATION_WRR) {
-			sched_cfg.sched_child_prop.bandwidth_share = 
+			sched_cfg.sched_child_prop.wrr_weight =
 				info->prio_wfq;
 		} else if (info->arbi == ARBITRATION_WSP) {
 			sched_cfg.sched_child_prop.priority = info->prio_wfq;
-		}				
+		}
 		DP_DEBUG(DP_DBG_FLAG_QOS_DETAIL,
 			 "Prio:%d paased to low level for Sched[%d]\n",
 			 info->prio_wfq, info->id.sch_id);
@@ -2583,7 +2583,7 @@ int dp_qos_link_prio_get_31(struct dp_node_prio *info, int flag)
 		info->arbi = arbi;
 		if (info->arbi == ARBITRATION_WRR) {
 			info->prio_wfq =
-				queue_cfg.queue_child_prop.bandwidth_share;
+				queue_cfg.queue_child_prop.wrr_weight;
 		} else if (info->arbi == ARBITRATION_WSP) {
 			info->prio_wfq =
 				queue_cfg.queue_child_prop.priority;
@@ -2616,7 +2616,7 @@ int dp_qos_link_prio_get_31(struct dp_node_prio *info, int flag)
 
 		if (info->arbi == ARBITRATION_WRR) {
 			info->prio_wfq =
-				sched_cfg.sched_child_prop.bandwidth_share;
+				sched_cfg.sched_child_prop.wrr_weight;
 		} else if (info->arbi == ARBITRATION_WSP) {
 			info->prio_wfq =
 				sched_cfg.sched_child_prop.priority;
@@ -3559,7 +3559,7 @@ int dp_link_get_31(struct dp_qos_link *cfg, int flag)
 
 	if (cfg->q_arbi == ARBITRATION_WRR) {
 		cfg->q_prio_wfq =
-			queue_cfg.queue_child_prop.bandwidth_share;
+			queue_cfg.queue_child_prop.wrr_weight;
 	} else if (cfg->q_arbi == ARBITRATION_WSP) {
 		cfg->q_prio_wfq =
 			queue_cfg.queue_child_prop.priority;
@@ -3588,7 +3588,7 @@ int dp_link_get_31(struct dp_qos_link *cfg, int flag)
 
 			if (cfg->sch[i].arbi == ARBITRATION_WRR) {
 				cfg->sch[i].prio_wfq =
-					sched_cfg.sched_child_prop.bandwidth_share;
+					sched_cfg.sched_child_prop.wrr_weight;
 			} else if (cfg->sch[i].arbi == ARBITRATION_WSP) {
 				cfg->sch[i].prio_wfq =
 					sched_cfg.sched_child_prop.priority;
@@ -4303,7 +4303,7 @@ int ppv4_queue_port_example(int inst, int dp_port, int t_cont, int q_node)
 	queue_cfg.queue_child_prop.parent = qos_port_node;
 #ifdef EXT_BW
 	queue_cfg.max_burst  = 64;
-	queue_cfg.child.bandwidth_share = 50;
+	queue_cfg.child.wrr_weight = 50;
 	queue_cfg.queue_wred_min_guaranteed = 1;
 	queue_cfg.queue_wred_max_allowed = 10;
 #endif
@@ -4375,7 +4375,7 @@ int ppv4_queue_scheduler(int inst, int dp_port, int t_cont, int q_node,
 	queue_cfg.queue_child_prop.parent = sch_node1;
 #ifdef EXT_BW
 	queue_cfg.max_burst  = 64;
-	queue_cfg.child.bandwidth_share = 50;
+	queue_cfg.child.wrr_weight = 50;
 	queue_cfg.queue_wred_min_guaranteed = 1;
 	queue_cfg.queue_wred_max_allowed = 10;
 #endif
diff --git a/drivers/net/datapath/dpm/gswip32/datapath_ppv4_api.c b/drivers/net/datapath/dpm/gswip32/datapath_ppv4_api.c
index 7d971d0f6e11..c33d34f3a5e5 100644
--- a/drivers/net/datapath/dpm/gswip32/datapath_ppv4_api.c
+++ b/drivers/net/datapath/dpm/gswip32/datapath_ppv4_api.c
@@ -4214,7 +4214,7 @@ int ppv4_queue_port_example(int inst, int dp_port, int t_cont, int q_node)
 	queue_cfg.queue_child_prop.parent = qos_port_node;
 #ifdef EXT_BW
 	queue_cfg.max_burst  = 64;
-	queue_cfg.child.bandwidth_share = 50;
+	queue_cfg.child.wrr_weight = 50;
 	queue_cfg.wred_min_guaranteed = 1;
 	queue_cfg.wred_max_allowed = 10;
 #endif
@@ -4286,7 +4286,7 @@ int ppv4_queue_scheduler(int inst, int dp_port, int t_cont, int q_node,
 	queue_cfg.queue_child_prop.parent = sch_node1;
 #ifdef EXT_BW
 	queue_cfg.max_burst  = 64;
-	queue_cfg.child.bandwidth_share = 50;
+	queue_cfg.child.wrr_weight = 50;
 	queue_cfg.wred_min_guaranteed = 1;
 	queue_cfg.wred_max_allowed = 10;
 #endif
@@ -4577,7 +4577,7 @@ int dp_qos_global_info_get_32(struct dp_qos_cfg_info *info, int flag)
 {
 	struct hal_priv *priv;
 	unsigned int quanta = 0;
-	
+
 	if (!info) {
 		PR_ERR("info cannot be NULL\n");
 		return DP_FAILURE;
diff --git a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_debugfs.c b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_debugfs.c
index 470877630360..ee5c8527ff91 100644
--- a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_debugfs.c
+++ b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_debugfs.c
@@ -651,8 +651,8 @@ static u16 create_sched_props(struct dbg_prop *props, u16 size,
 		&pconf->sched_child_prop.parent);
 	dbg_add_prop(props, &num, size, "priority",
 		"priority (0-7) in WSP", &pconf->sched_child_prop.priority);
-	dbg_add_prop(props, &num, size, "bw_share", "percentage from parent",
-		&pconf->sched_child_prop.bandwidth_share);
+	dbg_add_prop(props, &num, size, "wrr_weight", "percentage from parent",
+		     &pconf->sched_child_prop.wrr_weight);
 
 	return num;
 }
@@ -761,8 +761,8 @@ static u16 create_queue_props(struct dbg_prop *props, u16 size,
 		&pconf->queue_child_prop.parent);
 	dbg_add_prop(props, &num, size, "priority",
 		"priority (0-7) in WSP", &pconf->queue_child_prop.priority);
-	dbg_add_prop(props, &num, size, "bw_share", "percentage from parent",
-		&pconf->queue_child_prop.bandwidth_share);
+	dbg_add_prop(props, &num, size, "wrr_weight", "percentage from parent",
+		     &pconf->queue_child_prop.wrr_weight);
 	dbg_add_prop(props, &num, size, "max_burst", "in kbps (4KB steps)",
 		&pconf->max_burst);
 	dbg_add_prop(props, &num, size, "blocked", "drop enqueued packets",
diff --git a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_fw.c b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_fw.c
index 7772d126ab73..e60df47ee405 100644
--- a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_fw.c
+++ b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_fw.c
@@ -438,6 +438,7 @@ struct cmd_add_port {
 struct cmd_set_port {
 	struct cmd base;
 	unsigned int phy;
+	struct parent_node_properties parent_node_prop;
 	struct port_properties prop;
 	uint32_t modified;
 };
@@ -461,6 +462,7 @@ struct cmd_set_sched {
 	unsigned int phy;
 	unsigned int parent;
 	struct sched_properties prop;
+	struct parent_node_properties parent_node_prop;
 	uint32_t modified;
 };
 
@@ -511,9 +513,7 @@ struct cmd_parent_change {
 	struct cmd base;
 	unsigned int phy;
 	int type;
-	int arbitration;
-	int first;
-	unsigned int num;
+	struct parent_node_properties parent_node_prop;
 };
 
 struct cmd_get_queue_stats {
@@ -861,6 +861,7 @@ static void _create_set_port_cmd(
 		struct cmd_queue *q,
 		uint32_t *pos)
 {
+	const struct qos_node *node;
 	struct cmd_set_port cmd;
 
 	if (PP_QOS_DEVICE_IS_ASSERT(qdev))
@@ -871,6 +872,8 @@ static void _create_set_port_cmd(
 	} else {
 		memset(&cmd, 0, sizeof(cmd));
 		cmd_init(qdev, &(cmd.base), CMD_TYPE_SET_PORT, sizeof(cmd), 0);
+		node = get_const_node_from_phy(qdev->nodes, phy);
+		cmd.parent_node_prop = node->parent_prop;
 		cmd.phy = phy;
 		set_cmd_port_properties(&cmd.prop, conf);
 		cmd.modified = modified;
@@ -941,6 +944,7 @@ static void _create_set_sched_cmd(
 		unsigned int parent,
 		uint32_t modified)
 {
+	const struct qos_node *node;
 	struct cmd_set_sched cmd;
 
 	if (PP_QOS_DEVICE_IS_ASSERT(qdev))
@@ -951,6 +955,8 @@ static void _create_set_sched_cmd(
 	} else {
 		memset(&cmd, 0, sizeof(cmd));
 		cmd_init(qdev, &(cmd.base), CMD_TYPE_SET_SCHED, sizeof(cmd), 0);
+		node = get_const_node_from_phy(qdev->nodes, phy);
+		cmd.parent_node_prop = node->parent_prop;
 		cmd.phy = phy;
 		set_cmd_sched_properties(&cmd.prop, conf);
 		cmd.modified = modified;
@@ -1128,15 +1134,13 @@ void create_parent_change_cmd(struct pp_qos_dev *qdev, unsigned int phy)
 	cmd_init(qdev, &(cmd.base), CMD_TYPE_PARENT_CHANGE, sizeof(cmd), 0);
 	cmd.phy = phy;
 	cmd.type = node->type;
-	cmd.arbitration = node->parent_prop.arbitration;
-	cmd.first = node->parent_prop.first_child_phy;
-	cmd.num = node->parent_prop.num_of_children;
+	cmd.parent_node_prop = node->parent_prop;
 	QOS_LOG_DEBUG("cmd %u:%u CMD_TYPE_PARENT_CHANGE %u first:%u num:%d\n",
-			qdev->drvcmds.cmd_id,
-			qdev->drvcmds.cmd_fw_id,
-			phy,
-			cmd.first,
-			cmd.num);
+		      qdev->drvcmds.cmd_id,
+		      qdev->drvcmds.cmd_fw_id,
+		      phy,
+		      cmd.parent_node_prop.first_child_phy,
+		      cmd.parent_node_prop.num_of_children);
 	cmd_queue_put(qdev->drvcmds.cmdq, &cmd, sizeof(cmd));
 	qdev->drvcmds.cmd_fw_id++;
 }
@@ -2030,14 +2034,38 @@ static void set_common(
 	common->valid = valid;
 }
 
+static void
+update_arbitration(uint32_t *valid,
+		   const struct parent_node_properties *parent_node_prop,
+		   struct fw_set_parent *parent)
+{
+	QOS_BITS_SET(*valid,
+		     TSCD_NODE_CONF_FIRST_CHILD |
+		     TSCD_NODE_CONF_LAST_CHILD  |
+		     TSCD_NODE_CONF_FIRST_WRR_NODE);
+
+	if (parent_node_prop->arbitration == PP_QOS_ARBITRATION_WSP)
+		parent->first_wrr = 0;
+	else
+		parent->first_wrr = parent_node_prop->first_child_phy;
+
+	parent->first = parent_node_prop->first_child_phy;
+	parent->last = parent_node_prop->first_child_phy +
+		parent_node_prop->num_of_children - 1;
+}
+
 static void set_parent(
 		const struct pp_qos_parent_node_properties *conf,
+		const struct parent_node_properties *parent_node_prop,
 		struct fw_set_parent *parent,
 		uint32_t modified)
 {
 	uint32_t valid;
 
 	valid = 0;
+	if (QOS_BITS_IS_SET(modified, QOS_MODIFIED_ARBITRATION))
+		update_arbitration(&valid, parent_node_prop, parent);
+
 	if (QOS_BITS_IS_SET(modified, QOS_MODIFIED_BEST_EFFORT)) {
 		QOS_BITS_SET(valid, TSCD_NODE_CONF_BEST_EFFORT_ENABLE);
 		parent->best_effort_enable = conf->best_effort_enable;
@@ -2054,13 +2082,13 @@ static void set_child(
 
 	if (QOS_BITS_IS_SET(modified, QOS_MODIFIED_BW_WEIGHT)) {
 		QOS_BITS_SET(valid, TSCD_NODE_CONF_NODE_WEIGHT);
-		child->bw_share = conf->bandwidth_share;
+		child->bw_share = conf->wrr_weight;
 	}
 
 	/* Should be changed. Currently both are using bw_share variable */
 	if (QOS_BITS_IS_SET(modified, QOS_MODIFIED_SHARED_GROUP_ID)) {
 		QOS_BITS_SET(valid, TSCD_NODE_CONF_SHARED_BWL_GROUP);
-		child->bw_share = conf->bandwidth_share;
+		child->bw_share = conf->wrr_weight;
 	}
 
 	child->valid = valid;
@@ -2196,7 +2224,8 @@ static uint32_t *set_port_cmd_wrapper(
 
 	modified = cmd->modified;
 	set_common(&cmd->prop.common, &fwdata->common, modified);
-	set_parent(&cmd->prop.parent, &fwdata->parent, modified);
+	set_parent(&cmd->prop.parent, &cmd->parent_node_prop,
+		   &fwdata->parent, modified);
 	fwdata->type_data.port.valid = 0;
 
 	if (QOS_BITS_IS_SET(modified, QOS_MODIFIED_DISABLE)) {
@@ -2243,7 +2272,8 @@ static uint32_t *set_sched_cmd_wrapper(
 
 	modified = cmd->modified;
 	set_common(&cmd->prop.common, &fwdata->common, modified);
-	set_parent(&cmd->prop.parent, &fwdata->parent, modified);
+	set_parent(&cmd->prop.parent, &cmd->parent_node_prop,
+		   &fwdata->parent, modified);
 	set_child(&cmd->prop.child, &fwdata->child, modified);
 	fwdata->type_data.sched.valid = 0;
 
@@ -2402,17 +2432,9 @@ static uint32_t *parent_change_cmd_wrapper(
 		const struct cmd_parent_change *cmd,
 		uint32_t flags)
 {
-	fwdata->parent.valid =
-		TSCD_NODE_CONF_FIRST_CHILD |
-		TSCD_NODE_CONF_LAST_CHILD |
-		TSCD_NODE_CONF_FIRST_WRR_NODE;
-	fwdata->parent.first = cmd->first;
-	fwdata->parent.last = cmd->first + cmd->num - 1;
-	if (cmd->arbitration == PP_QOS_ARBITRATION_WSP)
-		fwdata->parent.first_wrr = 0;
-	else
-		fwdata->parent.first_wrr = cmd->first;
-
+	update_arbitration(&fwdata->parent.valid,
+			   &cmd->parent_node_prop,
+			   &fwdata->parent);
 	fwdata->common.valid = 0;
 	if (cmd->type == TYPE_PORT) {
 		fwdata->type_data.port.valid  = 0;
diff --git a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_main.c b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_main.c
index af88584667a4..0dc01fb988af 100644
--- a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_main.c
+++ b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_main.c
@@ -1265,7 +1265,7 @@ static int _pp_qos_queue_set(
 			  conf->common_prop.shared_bandwidth_group,
 			  conf->queue_child_prop.parent,
 			  conf->queue_child_prop.priority,
-			  conf->queue_child_prop.bandwidth_share,
+			  conf->queue_child_prop.wrr_weight,
 			  conf->max_burst,
 			  conf->blocked,
 			  conf->wred_enable,
@@ -1948,7 +1948,7 @@ int pp_qos_sched_set(
 			  conf->sched_parent_prop.best_effort_enable,
 			  conf->sched_child_prop.parent,
 			  conf->sched_child_prop.priority,
-			  conf->sched_child_prop.bandwidth_share);
+			  conf->sched_child_prop.wrr_weight);
 
 	QOS_LOCK(qdev);
 	PP_QOS_ENTER_FUNC();
diff --git a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_utils.c b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_utils.c
index a318bd8d3e05..cc988b2913c5 100644
--- a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_utils.c
+++ b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_utils.c
@@ -1370,7 +1370,7 @@ static void send_bw_weight_command(struct pp_qos_dev *qdev,
 			&s_conf.sched_parent_prop,
 			&s_conf.sched_child_prop);
 
-		s_conf.sched_child_prop.bandwidth_share = bw_weight;
+		s_conf.sched_child_prop.wrr_weight = bw_weight;
 
 		create_set_sched_cmd(qdev,
 			&s_conf,
@@ -1382,7 +1382,7 @@ static void send_bw_weight_command(struct pp_qos_dev *qdev,
 				NULL,
 				&q_conf.queue_child_prop);
 
-		q_conf.queue_child_prop.bandwidth_share = bw_weight;
+		q_conf.queue_child_prop.wrr_weight = bw_weight;
 
 		create_set_queue_cmd(qdev,
 			&q_conf,
@@ -2120,6 +2120,14 @@ static int parent_cfg_valid(
 	unsigned int num;
 
 	QOS_ASSERT(node_parent(node), "node is not a parent\n");
+
+	if (node->parent_prop.arbitration != PP_QOS_ARBITRATION_WSP &&
+	    node->parent_prop.arbitration != PP_QOS_ARBITRATION_WRR &&
+	    node->parent_prop.arbitration != PP_QOS_ARBITRATION_WFQ) {
+		QOS_LOG_ERR("Unsupported arbitration\n");
+		return 0;
+	}
+
 	if (node->parent_prop.num_of_children > 8) {
 		QOS_LOG_ERR("node has %u children but max allowed is 8\n",
 				node->parent_prop.num_of_children);
@@ -2201,7 +2209,7 @@ int get_node_prop(const struct pp_qos_dev *qdev,
 		child->parent = get_id_from_phy(qdev->mapping,
 				get_virtual_parent_phy(qdev->nodes, node));
 		child->priority = node->child_prop.priority;
-		child->bandwidth_share = node->child_prop.virt_bw_share;
+		child->wrr_weight = node->child_prop.virt_bw_share;
 	}
 
 	return 0;
@@ -2271,8 +2279,8 @@ static int set_child(struct pp_qos_dev *qdev,
 		QOS_BITS_SET(*modified, QOS_MODIFIED_PARENT);
 	}
 
-	if (node->child_prop.virt_bw_share != child->bandwidth_share) {
-		node->child_prop.virt_bw_share = child->bandwidth_share;
+	if (node->child_prop.virt_bw_share != child->wrr_weight) {
+		node->child_prop.virt_bw_share = child->wrr_weight;
 		QOS_BITS_SET(*modified, QOS_MODIFIED_BW_WEIGHT);
 	}
 
diff --git a/include/net/pp_qos_drv.h b/include/net/pp_qos_drv.h
index 5f37d12c5c51..66c4cae074a6 100644
--- a/include/net/pp_qos_drv.h
+++ b/include/net/pp_qos_drv.h
@@ -140,20 +140,22 @@ struct pp_qos_parent_node_properties {
  * @parent:		parent's id
  * @priority:		strict priority, relevant only if parent uses wsp
  *                      arbitration
- * @bandwidth_share:	For WRR, child's weight.
- *                      For example, in case parent has 3 childs - Setting
- *                      weights of 2-1-1 for the childs means that the first
- *                      child will have double credits to transmit comparing to
- *                      other two childs 
+ * @wrr_weight:		For WRR, child's weight.
+ *                      For example, in case parent has 3
+ *                      children setting weights of 2-1-1 for
+ *                      the children means that the first child
+ *                      will have double credits to transmit
+ *                      comparing to other two children. Max 127
  */
 struct pp_qos_child_node_properties {
 	unsigned int	parent;
 	#define QOS_MAX_CHILD_PRIORITY 7
 	unsigned int	priority;
-	unsigned int	bandwidth_share;
+	unsigned int	wrr_weight;
 };
 
 
+
 struct pp_qos_dev;
 
 /******************************************************************************/
