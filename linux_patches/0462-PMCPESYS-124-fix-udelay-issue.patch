From f3085d6da2786f4586fd40ba9983385e7d1a03e3 Mon Sep 17 00:00:00 2001
From: Thomas Bartholomae <t.bartholomae@intel.com>
Date: Wed, 6 Feb 2019 11:24:56 +0100
Subject: [PATCH] PMCPESYS-124: fix udelay issue

---
 drivers/cpufreq/Kconfig              |  4 ++--
 drivers/cpufreq/cpufreq-dt-platdev.c |  2 --
 drivers/cpufreq/xrx500-cpufreq.c     | 45 +++++++++++++++++++++++++++++-------
 3 files changed, 39 insertions(+), 12 deletions(-)

diff --git a/drivers/cpufreq/Kconfig b/drivers/cpufreq/Kconfig
index a8481c8dc16e..7adf5fb351aa 100644
--- a/drivers/cpufreq/Kconfig
+++ b/drivers/cpufreq/Kconfig
@@ -297,9 +297,9 @@ config LOONGSON1_CPUFREQ
 
 config XRX500_CPUFREQ
 	tristate "XRX500 CPUFreq Driver"
-	depends on LANTIQ && CPUFREQ_DT && REGULATOR
+	depends on LANTIQ && CPUFREQ_DT
 	help
-	  This adds the CPUFreq driver for XRX500 Family SoC
+	  This adds the CPUFreq driver for XRX500/PRX300 Family SoC
 
 	  If in doubt, say N.
 
diff --git a/drivers/cpufreq/cpufreq-dt-platdev.c b/drivers/cpufreq/cpufreq-dt-platdev.c
index 2b7727ad926c..71267626456b 100644
--- a/drivers/cpufreq/cpufreq-dt-platdev.c
+++ b/drivers/cpufreq/cpufreq-dt-platdev.c
@@ -28,8 +28,6 @@ static const struct of_device_id machines[] __initconst = {
 
 	{ .compatible = "hisilicon,hi6220", },
 
-	{ .compatible = "intel,falconmx", },
-
 	{ .compatible = "fsl,imx27", },
 	{ .compatible = "fsl,imx51", },
 	{ .compatible = "fsl,imx53", },
diff --git a/drivers/cpufreq/xrx500-cpufreq.c b/drivers/cpufreq/xrx500-cpufreq.c
index e9672d271480..0060b517cfac 100644
--- a/drivers/cpufreq/xrx500-cpufreq.c
+++ b/drivers/cpufreq/xrx500-cpufreq.c
@@ -11,7 +11,6 @@
  * more details.
  *
  */
-
 #define pr_fmt(fmt)	KBUILD_MODNAME ": " fmt
 
 #include <linux/kernel.h>
@@ -25,7 +24,12 @@
 
 #define VERSIONS_COUNT 1
 
-/* Supported XRX500 family SoC HW versions */
+/* OPP supported_hw definition for XRX500/PRX300 Family SoC.
+   This enables us to select only a subset of OPPs from the
+   larger OPP table, based on what version of the hardware we are running on.
+   The representation is 1 bit per version, max 32 bit.
+   This opp_table->supported_hw will be bitwise mask with OPP-DT paramter
+   opp-supported-hw. */
 #define SOC_HW_ID_GRX5838	0x1
 #define SOC_HW_ID_GRX5828	0x2
 #define SOC_HW_ID_GRX5628	0x4
@@ -35,6 +39,16 @@
 #define SOC_HW_ID_GRX3506	0x40
 #define SOC_HW_ID_GRX3508	0x80
 #define SOC_HW_ID_IRX200	0x100
+#define SOC_HW_ID_FMX_FIBERPHY	0x1000
+#define SOC_HW_ID_FMX_SFU	0x2000
+#define SOC_HW_ID_FMX_SFP	0x4000
+#define SOC_HW_ID_FMX_DPU	0x8000
+
+static const struct of_device_id machines[] = {
+	{ .compatible = "lantiq,xrx500", },
+	{ .compatible = "intel,prx300", },
+	{ }
+};
 
 extern unsigned long loops_per_jiffy;
 static int xrx500_cpufreq_transition_notifier(struct notifier_block *nb,
@@ -48,7 +62,7 @@ static int xrx500_cpufreq_transition_notifier(struct notifier_block *nb,
    That means we have to consider that loops_per_jiffy is changed only once
    during one frequency transition.
 */
-static int one_trans = 0;
+static int one_trans;
 static struct notifier_block xrx500_cpufreq_transition_notifier_block = {
 	.notifier_call = xrx500_cpufreq_transition_notifier
 };
@@ -58,12 +72,12 @@ static int xrx500_cpufreq_transition_notifier(struct notifier_block *nb,
 {
 	struct cpufreq_freqs *freq = data;
 
-	if (val == CPUFREQ_PRECHANGE) {
+	if (val == CPUFREQ_PRECHANGE)
 		one_trans = 1;
-	}
 
 	if (val == CPUFREQ_POSTCHANGE) {
 		if (one_trans) {
+			pr_debug("cpu frequency change: %d kHz\n", freq->new);
 			loops_per_jiffy = cpufreq_scale(loops_per_jiffy,
 							freq->old,
 							freq->new);
@@ -97,6 +111,14 @@ static unsigned int xrx500_pnum2version(struct device *dev, unsigned int id)
 		return SOC_HW_ID_GRX3508;
 	case SOC_ID_IRX200:
 		return SOC_HW_ID_IRX200;
+	case SOC_ID_FMX_FIBERPHY:
+		return SOC_HW_ID_FMX_FIBERPHY;
+	case SOC_ID_FMX_SFU:
+		return SOC_HW_ID_FMX_SFU;
+	case SOC_ID_FMX_SFP:
+		return SOC_HW_ID_FMX_SFP;
+	case SOC_ID_FMX_DPU:
+		return SOC_HW_ID_FMX_DPU;
 	default:
 		return -EINVAL;
 	}
@@ -112,7 +134,7 @@ int xrx500_opp_set_supported_hw(struct device *cpu_dev)
 
 	version = xrx500_pnum2version(cpu_dev, id);
 	if (version < 0) {
-		dev_err(cpu_dev, "unknown xrx500 chip id (0x%x)\n", id);
+		dev_err(cpu_dev, "unknown chip id (0x%x)\n", id);
 		return ret;
 	}
 
@@ -128,10 +150,17 @@ int xrx500_opp_set_supported_hw(struct device *cpu_dev)
 static int xrx500_cpufreq_driver_init(void)
 {
 	struct platform_device_info devinfo = { .name = "cpufreq-dt", };
+	struct device_node *np = of_find_node_by_path("/");
 	struct device *cpu_dev;
+	const struct of_device_id *match;
 	int ret;
 
-	if ((!of_machine_is_compatible("lantiq,xrx500")))
+	if (!np)
+		return -ENODEV;
+
+	match = of_match_node(machines, np);
+	of_node_put(np);
+	if (!match)
 		return -ENODEV;
 
 	cpu_dev = get_cpu_device(0);
@@ -159,6 +188,6 @@ static int xrx500_cpufreq_driver_init(void)
 }
 module_init(xrx500_cpufreq_driver_init);
 
-MODULE_DESCRIPTION("XRX500 Family SoC CPUFreq driver");
+MODULE_DESCRIPTION("XRX500/PRX300 Family SoC CPUFreq driver");
 MODULE_AUTHOR("Waldemar Rymarkiewicz <waldemarx.rymarkiewicz@intel.com>");
 MODULE_LICENSE("GPL v2");
