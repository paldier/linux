From b19ad0a626efff9db5ee3497710d128beb9dc528 Mon Sep 17 00:00:00 2001
From: Dinesh Sudham <dineshx.sudham@intel.com>
Date: Thu, 14 Feb 2019 14:37:51 +0800
Subject: [PATCH] DRVLIB_SW-1492: Klockwork fixes in Switch api driver

---
 drivers/net/ethernet/lantiq/switch-api/gsw_defconf.c   | 14 ++++++++++++--
 drivers/net/ethernet/lantiq/switch-api/gsw_flow_pce.c  |  5 +++++
 drivers/net/ethernet/lantiq/switch-api/gsw_init.c      | 16 ++++++++++++++++
 drivers/net/ethernet/lantiq/switch-api/mac/xgmac_ptp.c |  2 +-
 4 files changed, 34 insertions(+), 3 deletions(-)

diff --git a/drivers/net/ethernet/lantiq/switch-api/gsw_defconf.c b/drivers/net/ethernet/lantiq/switch-api/gsw_defconf.c
index 27ae5d3c8529..d0624d4988b8 100644
--- a/drivers/net/ethernet/lantiq/switch-api/gsw_defconf.c
+++ b/drivers/net/ethernet/lantiq/switch-api/gsw_defconf.c
@@ -75,9 +75,14 @@ int gsw_set_def_pce_qmap(struct core_ops *ops)
 {
 	int i = 0, j = 0;
 	GSW_QoS_queuePort_t q_map;
-	ethsw_api_dev_t *gswdev = GSW_PDATA_GET(ops);
 	int num_of_elem =
 		(sizeof(gsw_pce_path) / sizeof(struct _gsw_pce_path));
+	ethsw_api_dev_t *gswdev = GSW_PDATA_GET(ops);
+
+	if (gswdev == NULL) {
+		pr_err("%s:%s:%d", __FILE__, __func__, __LINE__);
+		return GSW_statusErr;
+	}
 
 	for (j = 0; j < num_of_elem; j++) {
 		for (i = gsw_pce_path[j].tc_from;
@@ -224,8 +229,13 @@ int gsw_get_def_bypass_qmap(struct core_ops *ops)
 int gsw_misc_config(struct core_ops *ops)
 {
 	GSW_register_t reg;
-	ethsw_api_dev_t *gswdev = GSW_PDATA_GET(ops);
 	int i = 0;
+	ethsw_api_dev_t *gswdev = GSW_PDATA_GET(ops);
+
+	if (gswdev == NULL) {
+		pr_err("%s:%s:%d", __FILE__, __func__, __LINE__);
+		return GSW_statusErr;
+	}
 
 	/* Ignore Undersized frames and forward to CPU for the MAC ports
 	 * MAC logical ports start from 2
diff --git a/drivers/net/ethernet/lantiq/switch-api/gsw_flow_pce.c b/drivers/net/ethernet/lantiq/switch-api/gsw_flow_pce.c
index 1e4a9a3477b2..bbf3379be721 100644
--- a/drivers/net/ethernet/lantiq/switch-api/gsw_flow_pce.c
+++ b/drivers/net/ethernet/lantiq/switch-api/gsw_flow_pce.c
@@ -1505,6 +1505,11 @@ int gsw_pmicro_code_init_f24s(void *cdev)
 	pctbl_prog_t tbl_entry;
 	ethsw_api_dev_t *gswdev = GSW_PDATA_GET(cdev);
 
+	if (gswdev == NULL) {
+		pr_err("%s:%s:%d", __FILE__, __func__, __LINE__);
+		return GSW_statusErr;
+	}
+
 	printk("PCE f24s micro-code init\n");
 	/* Disable all physical port  */
 
diff --git a/drivers/net/ethernet/lantiq/switch-api/gsw_init.c b/drivers/net/ethernet/lantiq/switch-api/gsw_init.c
index e4708a69c1ec..2cd469571239 100644
--- a/drivers/net/ethernet/lantiq/switch-api/gsw_init.c
+++ b/drivers/net/ethernet/lantiq/switch-api/gsw_init.c
@@ -448,6 +448,10 @@ int GSW_SMDIO_DataRead(void *cdev, GSW_MDIO_data_t *pPar)
 	int ret = 0;
 	ethsw_api_dev_t *pethdev = GSW_PDATA_GET(cdev);
 
+	if (pethdev == NULL) {
+		pr_err("%s:%s:%d", __FILE__, __func__, __LINE__);
+		return GSW_statusErr;
+	}
 #ifdef CONFIG_X86_INTEL_CE2700
 	u32 data;
 	ret = DWC_ETH_QOS_mdio_read_direct(MDIO_BUS_NUMBER_0, C45_ENABLED,
@@ -456,6 +460,10 @@ int GSW_SMDIO_DataRead(void *cdev, GSW_MDIO_data_t *pPar)
 #else
 	struct core_ops *gsw_ops;
 	gsw_ops = gsw_get_swcore_ops(pethdev->parent_devid);
+	if(!gsw_ops) {
+		pr_err("%s:%s:%d", __FILE__, __func__, __LINE__);
+		return GSW_statusErr;
+	}
 	gsw_ops->gsw_common_ops.MDIO_DataRead(gsw_ops, pPar);
 
 #endif
@@ -467,12 +475,20 @@ int GSW_SMDIO_DataWrite(void *cdev, GSW_MDIO_data_t *pPar)
 	int ret = 0;
 	ethsw_api_dev_t *pethdev = GSW_PDATA_GET(cdev);
 
+	if (pethdev == NULL) {
+		pr_err("%s:%s:%d", __FILE__, __func__, __LINE__);
+		return GSW_statusErr;
+	}
 #ifdef CONFIG_X86_INTEL_CE2700
 	ret = DWC_ETH_QOS_mdio_write_direct(MDIO_BUS_NUMBER_0, C45_ENABLED,
 					    MDIO_ADDR_LANTIQ, MMD_DISABLED, pPar->nAddressReg & 0x1F, pPar->nData & 0xFFFF);
 #else
 	struct core_ops *gsw_ops;
 	gsw_ops = gsw_get_swcore_ops(pethdev->parent_devid);
+	if(!gsw_ops) {
+		pr_err("%s:%s:%d", __FILE__, __func__, __LINE__);
+		return GSW_statusErr;
+	}
 	gsw_ops->gsw_common_ops.MDIO_DataWrite(gsw_ops, pPar);
 #endif
 
diff --git a/drivers/net/ethernet/lantiq/switch-api/mac/xgmac_ptp.c b/drivers/net/ethernet/lantiq/switch-api/mac/xgmac_ptp.c
index c1ff6c2d18a5..9a9b47242284 100644
--- a/drivers/net/ethernet/lantiq/switch-api/mac/xgmac_ptp.c
+++ b/drivers/net/ethernet/lantiq/switch-api/mac/xgmac_ptp.c
@@ -626,7 +626,7 @@ static void xgmac_extts_isr_handler(struct mac_prv_data *pdata,
 #ifdef CONFIG_PTP_1588_CLOCK
 	u8 val, i;
 	struct ptp_clock_event event;
-	u64 ts[N_EXT_TS];
+	u64 ts[N_EXT_TS] = {0};
 	u8 ts_valid[N_EXT_TS] = {0};
 	u8 cnt = MAC_GET_VAL(tstamp_sts, MAC_TSTAMP_STSR, ATSNS);
 
