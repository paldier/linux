From 7d3ad34fcba8edeba14a0c055e8bf94ab6643ebc Mon Sep 17 00:00:00 2001
From: Hua Ma <hua.ma@linux.intel.com>
Date: Thu, 21 Jun 2018 17:38:09 +0800
Subject: [PATCH] Add support for net phy common

---
 drivers/net/macvlan.c                      | 26 +++++++++++++++++++++++---
 drivers/net/phy/Kconfig                    |  5 +++++
 drivers/net/phy/Makefile                   |  1 +
 drivers/net/wireless/marvell/mwifiex/11h.c |  2 +-
 4 files changed, 30 insertions(+), 4 deletions(-)

diff --git a/drivers/net/macvlan.c b/drivers/net/macvlan.c
index b1dcc7448b4f..64a59e80ffe1 100644
--- a/drivers/net/macvlan.c
+++ b/drivers/net/macvlan.c
@@ -34,6 +34,7 @@
 #include <net/rtnetlink.h>
 #include <net/xfrm.h>
 #include <linux/netpoll.h>
+#include <../net/bridge/br_private.h>
 
 #define MACVLAN_HASH_BITS	8
 #define MACVLAN_HASH_SIZE	(1<<MACVLAN_HASH_BITS)
@@ -406,6 +407,23 @@ static void macvlan_forward_source(struct sk_buff *skb,
 	}
 }
 
+static struct macvlan_dev *macvlan_slave_lookup(const struct macvlan_port *port)
+{
+	struct macvlan_dev *vlan;
+	struct net_bridge_port *brport;
+	int i;
+
+	for (i = 0; i < MACVLAN_HASH_SIZE; i++) {
+		hlist_for_each_entry_rcu(vlan, &port->vlan_hash[i], hlist) {
+			brport = br_port_get_rtnl(vlan->dev);
+			if (brport != NULL) {
+				return vlan;
+			}
+		}
+	}
+	return NULL;
+}
+
 /* called under rcu_read_lock() from netif_receive_skb */
 static rx_handler_result_t macvlan_handle_frame(struct sk_buff **pskb)
 {
@@ -453,9 +471,11 @@ static rx_handler_result_t macvlan_handle_frame(struct sk_buff **pskb)
 					      struct macvlan_dev, list);
 	else
 		vlan = macvlan_hash_lookup(port, eth->h_dest);
-	if (!vlan || vlan->mode == MACVLAN_MODE_SOURCE)
-		return RX_HANDLER_PASS;
-
+	if (vlan == NULL || vlan->mode == MACVLAN_MODE_SOURCE) {
+		vlan = macvlan_slave_lookup(port);
+		if (NULL == vlan  || vlan->mode == MACVLAN_MODE_SOURCE)
+			return RX_HANDLER_PASS;
+	}
 	dev = vlan->dev;
 	if (unlikely(!(dev->flags & IFF_UP))) {
 		kfree_skb(skb);
diff --git a/drivers/net/phy/Kconfig b/drivers/net/phy/Kconfig
index 2651c8d8de2f..fe074f5e2fc1 100644
--- a/drivers/net/phy/Kconfig
+++ b/drivers/net/phy/Kconfig
@@ -226,6 +226,11 @@ config DP83867_PHY
 	---help---
 	  Currently supports the DP83867 PHY.
 
+config LANTIQ_PHY
+	tristate "Driver for Lantiq PHYs"
+	---help---
+	  Supports the 11G and 22F PHYs.
+
 config FIXED_PHY
 	tristate "MDIO Bus/PHY emulation with fixed speed/link PHYs"
 	depends on PHYLIB
diff --git a/drivers/net/phy/Makefile b/drivers/net/phy/Makefile
index e58667d111e7..19a1bab1c687 100644
--- a/drivers/net/phy/Makefile
+++ b/drivers/net/phy/Makefile
@@ -43,6 +43,7 @@ obj-$(CONFIG_LXT_PHY)		+= lxt.o
 obj-$(CONFIG_MARVELL_PHY)	+= marvell.o
 obj-$(CONFIG_MICREL_KS8995MA)	+= spi_ks8995.o
 obj-$(CONFIG_MICREL_PHY)	+= micrel.o
+obj-$(CONFIG_LANTIQ_PHY)        += lantiq.o
 obj-$(CONFIG_MICROCHIP_PHY)	+= microchip.o
 obj-$(CONFIG_MICROSEMI_PHY)	+= mscc.o
 obj-$(CONFIG_NATIONAL_PHY)	+= national.o
diff --git a/drivers/net/wireless/marvell/mwifiex/11h.c b/drivers/net/wireless/marvell/mwifiex/11h.c
index 43dccd5b0291..d29e7dfe51fc 100644
--- a/drivers/net/wireless/marvell/mwifiex/11h.c
+++ b/drivers/net/wireless/marvell/mwifiex/11h.c
@@ -266,7 +266,7 @@ int mwifiex_11h_handle_radar_detected(struct mwifiex_private *priv,
 		mwifiex_dbg(priv->adapter, ERROR,
 			    "Failed to stop CAC in FW\n");
 	cfg80211_radar_event(priv->adapter->wiphy, &priv->dfs_chandef,
-			     GFP_KERNEL);
+			     0, GFP_KERNEL);
 	mwifiex_dbg(priv->adapter, MSG, "regdomain: %d\n",
 		    rdr_event->reg_domain);
 	mwifiex_dbg(priv->adapter, MSG, "radar detection type: %d\n",
