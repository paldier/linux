From b21f73d828a47b81bc99b865d3408a11f8aca6f6 Mon Sep 17 00:00:00 2001
From: Hua Ma <hua.ma@linux.intel.com>
Date: Thu, 21 Jun 2018 17:37:54 +0800
Subject: [PATCH] Add support for lantiq gphy firmware loader

---
 drivers/net/ethernet/lantiq/ltq_vrx318.c    | 694 ++++++++++++++++++++++++++++
 drivers/net/ethernet/lantiq/ltq_vrx318.h    | 201 ++++++++
 drivers/net/ethernet/lantiq/xrx500_phy_fw.c | 179 +++++++
 drivers/net/ethernet/lantiq/xrx500_phy_fw.h |  14 +
 drivers/net/phy/lantiq.c                    | 238 ++++++++++
 5 files changed, 1326 insertions(+)

diff --git a/drivers/net/ethernet/lantiq/ltq_vrx318.c b/drivers/net/ethernet/lantiq/ltq_vrx318.c
new file mode 100644
index 000000000000..381bc2822236
--- /dev/null
+++ b/drivers/net/ethernet/lantiq/ltq_vrx318.c
@@ -0,0 +1,694 @@
+/*
+ *  This program is free software; you can redistribute it and/or modify it
+ *  under the terms of the GNU General Public License version 2 as published
+ *  by the Free Software Foundation.
+ *
+ *  Copyright (C) 2011~2014 Lei Chuanhua <chuanhua.lei@lantiq.com>
+ */
+/*!
+  \defgroup VRX318_INTERNAL Internal functions
+  \ingroup VRX318
+  \brief IFX PCIe EP internal driver functions
+*/
+
+/*!
+  \defgroup VRX318_OS OS APIs
+  \ingroup VRX318
+  \brief IFX PCIe EP OS APIs for driver interface
+*/
+
+/*!
+   \file ifxmips_pcie_ep_vrx318.c
+   \ingroup VRX318
+   \brief SmartPHY PCIe EP address mapping driver source file
+*/
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/types.h>
+#include <linux/atomic.h>
+#include <linux/uaccess.h>
+#include <linux/io.h>
+#include <linux/pci.h>
+#include <linux/pci_regs.h>
+
+#include <lantiq.h>
+#include <lantiq_pcie.h>
+#include "ltq_vrx318.h"
+
+#define ltq_vrx318_r32    ltq_r32
+#define ltq_vrx318_w32    ltq_w32
+#define MS(_v, _f)  (((_v) & (_f)) >> _f##_S)
+#define SM(_v, _f)  (((_v) << _f##_S) & (_f))
+
+/* #define LTQ_EP_DBG */
+
+#define VRX318_DRV_VERSION "3.0.0 "
+const char vrx318_driver_version[] = VRX318_DRV_VERSION;
+
+static struct pcie_ep_info g_pcie_ep_info;
+static const char ltq_pcie_driver_name[] = "ltq_pcie";
+static DEFINE_SPINLOCK(pcie_ep_lock);
+
+int ifx_pcie_ep_dev_num_get(int *dev_num)
+{
+	if ((g_pcie_ep_info.dev_num <= 0)
+		|| (g_pcie_ep_info.dev_num > IFX_PCIE_EP_MAX_NUM)) {
+		return -EIO;
+	}
+
+	*dev_num = g_pcie_ep_info.dev_num;
+	return 0;
+}
+EXPORT_SYMBOL_GPL(ifx_pcie_ep_dev_num_get);
+
+int ifx_pcie_ep_dev_info_req(int dev_idx, ifx_pcie_ep_int_module_t module,
+			ifx_pcie_ep_dev_t *dev)
+{
+	int i;
+	struct pcie_ep_dev_priv *ep;
+	if ((dev_idx < 0) || (dev_idx >= IFX_PCIE_EP_MAX_NUM)) {
+		dev_err(dev->dev, "%s invalid device index %d\n",
+			__func__, dev_idx);
+		return -EIO;
+	}
+	ep = &g_pcie_ep_info.pcie_ep[dev_idx];
+	if (atomic_read(&ep->refcnt) >= PCIE_EP_MAX_REFCNT) {
+		dev_err(dev->dev, "%s mismatch request/release module usage\n",
+			__func__);
+		return -EIO;
+	}
+
+	switch (module) {
+	case IFX_PCIE_EP_INT_PPE:
+		dev->irq = ep->irq_base;
+		break;
+
+	case IFX_PCIE_EP_INT_MEI:
+		dev->irq = ep->irq_base + 1;
+		/* XXX, Hardcode workaround for PCIe switch bonding for RC0 */
+		if (dev->irq == 158)
+			dev->irq = 30;
+		else if (dev->irq == 166)
+			dev->irq = 38;
+
+		break;
+
+	case IFX_PCIE_EP_INT_DYING_GASP:
+	case IFX_PCIE_EP_INT_EDMA:
+	case IFX_PCIE_EP_INT_FPI_BCU:
+	case IFX_PCIE_EP_INT_ARC_LED0:
+	case IFX_PCIE_EP_INT_ARC_LED1:
+		dev->irq = ep->irq_base + 2;
+		break;
+
+	case IFX_PCIE_EP_INT_DMA:
+		dev->irq = ep->irq_base + 3;
+		if (dev->irq == 158)
+			dev->irq = 30;
+		else if (dev->irq == 166)
+			dev->irq = 38;
+
+		break;
+
+	default:
+		dev->irq = ep->irq_base;
+		break;
+	}
+	dev->dev = ep->dev;
+	dev->membase = ep->membase;
+	dev->phy_membase = ep->phy_membase;
+	dev->peer_num = ep->peer_num;
+	for (i = 0; i < dev->peer_num; i++) {
+		dev->peer_membase[i] = ep->peer_membase[i];
+		dev->peer_phy_membase[i] = ep->peer_phy_membase[i];
+	}
+	atomic_inc(&ep->refcnt);
+	return 0;
+}
+EXPORT_SYMBOL_GPL(ifx_pcie_ep_dev_info_req);
+
+int ifx_pcie_ep_dev_info_release(int dev_idx)
+{
+	struct pcie_ep_dev_priv *ep;
+
+	if ((dev_idx < 0) || (dev_idx >= IFX_PCIE_EP_MAX_NUM)) {
+		pr_err("%s invalid device index %d\n",
+			__func__, dev_idx);
+		return -EIO;
+	}
+	ep = &g_pcie_ep_info.pcie_ep[dev_idx];
+	if (atomic_read(&ep->refcnt) <= 0) {
+		pr_err("%s mismatch request/release module usage\n",
+			__func__);
+		return -EIO;
+	}
+	atomic_dec(&ep->refcnt);
+	return 0;
+}
+EXPORT_SYMBOL_GPL(ifx_pcie_ep_dev_info_release);
+
+static DEFINE_PCI_DEVICE_TABLE(ltq_pcie_id_table) = {
+	{0x1bef, 0x0020, PCI_ANY_ID, PCI_ANY_ID}, /* SmartPHY */
+	{0x1bef, 0x0100, PCI_ANY_ID, PCI_ANY_ID}, /* GRX500 mapped VRX318 */
+	{0},
+};
+
+/**
+ * \fn  static int pci_msi_max_vector_get(struct pci_dev *dev, int *nvec)
+ *
+ * \brief  This function tries to get device's MSI interrupt vector number
+ *
+ * \param  dev      Device to operate
+ * \param  nvec     Numer of interrupts to get
+ * \return 0        on success
+ * \return -EINVAL  The device doesn't support MSI capability
+ *
+ * \ingroup IFX_PCIE_EP_VRX318_INTERNAL
+ */
+static int pci_msi_max_vector_get(struct pci_dev *dev, int *nvec)
+{
+	int pos, maxvec;
+	u16 msgctl;
+
+	pos = pci_find_capability(dev, PCI_CAP_ID_MSI);
+	if (!pos)
+		return -EINVAL;
+
+	pci_read_config_word(dev, pos + PCI_MSI_FLAGS, &msgctl);
+	maxvec = 1 << ((msgctl & PCI_MSI_FLAGS_QMASK) >> 1);
+	*nvec = maxvec;
+	return 0;
+}
+
+/**
+ * \fn  static int pci_msi_max_vector_set(struct pci_dev *dev, int nvec)
+ *
+ * \brief  This function tries to set device's MSI interrupt vector number
+ *
+ * \param  dev      Device to operate
+ * \param  nvec     Numer of interrupts to set
+ * \return 0        on success
+ * \return -EINVAL  The device doesn't support MSI capability or invalid
+ *                  interrupt number
+ *
+ * \remark smartPHY only supports 1 or 2 or 4 interrupts depend on other
+ *         module usage
+ * \ingroup IFX_PCIE_EP_VRX318_INTERNAL
+ */
+static int pci_msi_max_vector_set(struct pci_dev *dev, int nvec)
+{
+	int pos;
+	u16 msgctl;
+
+	if ((nvec != 1) && (nvec != 2) && (nvec != 4))
+		return -EINVAL;
+
+	pos = pci_find_capability(dev, PCI_CAP_ID_MSI);
+	if (!pos)
+		return -EINVAL;
+
+	pci_read_config_word(dev, pos + PCI_MSI_FLAGS, &msgctl);
+	msgctl &= ~PCI_MSI_FLAGS_QSIZE;
+	msgctl |= (nvec >> 1) << 4;
+	pci_write_config_word(dev, pos + PCI_MSI_FLAGS, msgctl);
+	pci_read_config_word(dev, pos + PCI_MSI_FLAGS, &msgctl);
+	/* ICU control if necessary */
+	return 0;
+}
+
+#ifdef LTQ_EP_DBG
+static void ltq_pcie_iatu_dump(struct pci_dev *pdev, int outbound)
+{
+	u32 val;
+
+	switch (outbound) {
+	case 0:
+		/* Inbound iATU0 */
+		pci_read_config_dword(pdev, PCIE_PL_IATU_VIEWPORT, &val);
+		val &= ~PCIE_PL_IATU_REGION_IDX;
+		/* Inbound, region0 */
+		val |= PCIE_PL_IATU_REGION_INBOUND |
+			SM(PCIE_PL_IATU_REGION0, PCIE_PL_IATU_REGION_IDX);
+		pci_write_config_dword(pdev, PCIE_PL_IATU_VIEWPORT, val);
+		break;
+	case 1:
+	default:
+		pci_read_config_dword(pdev, PCIE_PL_IATU_VIEWPORT, &val);
+		val &= ~PCIE_PL_IATU_REGION_IDX;
+		/* Outbound, region1 */
+		val &= ~PCIE_PL_IATU_REGION_INBOUND;
+		val |= SM(PCIE_PL_IATU_REGION0, PCIE_PL_IATU_REGION_IDX);
+		pci_write_config_dword(pdev, PCIE_PL_IATU_VIEWPORT, val);
+		break;
+	}
+	pr_info("iATU %s\n", outbound ? "Outbound" : "Inbound");
+	pci_read_config_dword(pdev, PCIE_PL_IATU_VIEWPORT, &val);
+	pr_info("PCIE_PL_IATU_VIEWPORT: %08x\n", val);
+	pci_read_config_dword(pdev, PCIE_PL_IATU_REGION_LOWER_BASE_ADDR, &val);
+	pr_info("PCIE_PL_IATU_REGION_LOWER_BASE_ADDR: %08x\n", val);
+	pci_read_config_dword(pdev, PCIE_PL_IATU_REGION_UPPER_BASE_ADDR, &val);
+	pr_info("PCIE_PL_IATU_REGION_UPPER_BASE_ADDR: %08x\n", val);
+	pci_read_config_dword(pdev, PCIE_PL_IATU_REGION_LIMIT, &val);
+	pr_info("PCIE_PL_IATU_REGION_LIMIT: %08x\n", val);
+	pci_read_config_dword(pdev, PCIE_PL_IATU_REGION_LOWER_TARGET_ADDR,
+			&val);
+	pr_info("PCIE_PL_IATU_REGION_LOWER_TARGET_ADDR: %08x\n", val);
+	pci_read_config_dword(pdev, PCIE_PL_IATU_REGION_UPPER_TARGET_ADDR,
+			&val);
+	pr_info("PCIE_PL_IATU_REGION_UPPER_TARGET_ADDR: %08x\n", val);
+	pci_read_config_dword(pdev, PCIE_PL_IATU_REGION_CTRL1, &val);
+	pr_info("PCIE_PL_IATU_REGION_CTRL1: %08x\n", val);
+	pci_read_config_dword(pdev, PCIE_PL_IATU_REGION_CTRL2, &val);
+	pr_info("PCIE_PL_IATU_REGION_CTRL2: %08x\n", val);
+}
+#endif /* LTQ_EP_DBG */
+
+/**
+ * \fn  static void  ltq_pcie_iatu_setup(struct pci_dev *pdev)
+ *
+ * \brief  This function configures smartPHY PCIe EP inbound address
+ *         translation iATU0 and Outbound address translation <iATU1>.
+ *         Detailed information, please refer to related design
+ *         documentation.
+ *
+ * \param  dev      PCI device to configure
+ * \return none
+ *
+ * \ingroup IFX_PCIE_EP_VRX318_INTERNAL
+ */
+static void ltq_pcie_iatu_setup(struct pci_dev *pdev)
+{
+	u32 val;
+
+	/* Inbound iATU0 */
+	pci_read_config_dword(pdev, PCIE_PL_IATU_VIEWPORT, &val);
+	val &= ~PCIE_PL_IATU_REGION_IDX;
+	/* Inbound, region0 */
+	val |= PCIE_PL_IATU_REGION_INBOUND | SM(PCIE_PL_IATU_REGION0,
+		PCIE_PL_IATU_REGION_IDX);
+	pci_write_config_dword(pdev, PCIE_PL_IATU_VIEWPORT, val);
+
+	/* BAR match used, there is no need to configure
+	 * base and limit register
+	 */
+	pci_write_config_dword(pdev, PCIE_PL_IATU_REGION_LOWER_TARGET_ADDR,
+		(u32) PCIE_EP_INBOUND_INTERNAL_BASE);
+
+	pci_write_config_dword(pdev, PCIE_PL_IATU_REGION_UPPER_TARGET_ADDR, 0);
+
+	pci_write_config_dword(pdev, PCIE_PL_IATU_REGION_CTRL1, 0);
+	/* Inbound BAR match, BAR0 used only */
+	val = PCIE_PL_IATU_REGION_MATCH_EN | PCIE_PL_IATU_REGION_EN |
+		SM(PCIE_PL_IATU_REGION_BAR0, PCIE_PL_IATU_REGION_BAR);
+	pci_write_config_dword(pdev, PCIE_PL_IATU_REGION_CTRL2, val);
+
+	/* Outbound iATU1 */
+	pci_read_config_dword(pdev, PCIE_PL_IATU_VIEWPORT, &val);
+	val &= ~PCIE_PL_IATU_REGION_IDX;
+	/* Outbound, region0 */
+	val &= ~PCIE_PL_IATU_REGION_INBOUND;
+	val |= SM(PCIE_PL_IATU_REGION0, PCIE_PL_IATU_REGION_IDX);
+	pci_write_config_dword(pdev, PCIE_PL_IATU_VIEWPORT, val);
+
+	/* 32 bit only, base address  */
+	pci_write_config_dword(pdev, PCIE_PL_IATU_REGION_LOWER_BASE_ADDR,
+		(u32) PCIE_EP_OUTBOUND_INTERNAL_BASE);
+	pci_write_config_dword(pdev, PCIE_PL_IATU_REGION_UPPER_BASE_ADDR,
+		0);
+
+	/* Region limit from phymem to phymem + memsize -1 */
+	pci_write_config_dword(pdev, PCIE_PL_IATU_REGION_LIMIT,
+		(u32) PCIE_EP_OUTBOUND_INTERNAL_BASE +
+		PCIE_EP_OUTBOUND_MEMSIZE - 1);
+
+	/* Mapped to 0x00000000 ~ 0x3FFFFFFF, total 2GB */
+	pci_write_config_dword(pdev, PCIE_PL_IATU_REGION_LOWER_TARGET_ADDR, 0);
+
+	pci_write_config_dword(pdev, PCIE_PL_IATU_REGION_UPPER_TARGET_ADDR, 0);
+
+	pci_write_config_dword(pdev, PCIE_PL_IATU_REGION_CTRL1, 0);
+	/* Outbound, address match */
+	val = PCIE_PL_IATU_REGION_EN;
+	pci_write_config_dword(pdev, PCIE_PL_IATU_REGION_CTRL2, val);
+
+#ifdef LTQ_EP_DBG
+	ltq_pcie_iatu_dump(pdev, 0); /* Inbound */
+	ltq_pcie_iatu_dump(pdev, 1); /* Outbound */
+#endif /* LTQ_EP_DBG */
+}
+
+#ifdef CONFIG_SOC_GRX500
+static void ltq_pcie_rc_fmt_cfg(struct pcie_ep_dev_priv *ep)
+{
+	int i;
+	struct ltq_sys_data *soc_data = ep->soc_data;
+
+	for (i = 0; i < ep->peer_num; i++) {
+		ltq_vrx318_w32(PCIE_FMT_IN_LOW_ADDR_0 + PCIE_FMT_SIZE * i,
+			soc_data->app_base + PCIE_FMT_ADDR_IN_LBASE_0
+			+ PCIE_FMT_REG_OFF * i);
+		ltq_vrx318_w32(PCIE_FMT_IN_HIGH_ADDR_0 + PCIE_FMT_SIZE * i,
+			soc_data->app_base + PCIE_FMT_ADDR_IN_UBASE_0
+			+ PCIE_FMT_REG_OFF * i);
+		ltq_vrx318_w32(ep->peer_phy_membase[i],
+			soc_data->app_base + PCIE_FMT_ADDR_OUT_LBASE_0
+			+ PCIE_FMT_REG_OFF * i);
+		/* Back up the original RC physical address */
+		ep->org_peer_phy_membase[i] = ep->peer_phy_membase[i];
+		ep->org_peer_membase[i] = ep->peer_membase[i];
+		/* Fill new mapped address */
+		ep->peer_phy_membase[i] =
+			PCIE_FMT_IN_LOW_ADDR_0 + PCIE_FMT_SIZE * i;
+		ltq_vrx318_w32(0x00000001,
+			soc_data->app_base + PCIE_FMT_ADDR_EN_0
+			+ PCIE_FMT_REG_OFF * i);
+#ifdef LTQ_EP_DBG
+		dev_info(ep->dev, "low addr %p value 0x%08x\n",
+			soc_data->app_base + PCIE_FMT_ADDR_IN_LBASE_0
+			+ PCIE_FMT_REG_OFF * i,
+			ltq_vrx318_r32(soc_data->app_base
+			+ PCIE_FMT_ADDR_IN_LBASE_0
+			+ PCIE_FMT_REG_OFF * i));
+		dev_info(ep->dev, "upper addr %p value 0x%08x\n",
+			soc_data->app_base + PCIE_FMT_ADDR_IN_UBASE_0
+			+ PCIE_FMT_REG_OFF * i,
+			ltq_vrx318_r32(soc_data->app_base
+				+ PCIE_FMT_ADDR_IN_UBASE_0
+				+ PCIE_FMT_REG_OFF * i));
+		dev_info(ep->dev, "target addr %p value 0x%08x\n",
+			soc_data->app_base + PCIE_FMT_ADDR_OUT_LBASE_0
+				+ PCIE_FMT_REG_OFF * i,
+			ltq_vrx318_r32(soc_data->app_base
+				+ PCIE_FMT_ADDR_OUT_LBASE_0
+				+ PCIE_FMT_REG_OFF * i));
+		dev_info(ep->dev, "status addr %p value 0x%08x\n",
+			soc_data->app_base + PCIE_FMT_ADDR_EN_0
+				+ PCIE_FMT_REG_OFF * i,
+			ltq_vrx318_r32(soc_data->app_base
+				+ PCIE_FMT_ADDR_EN_0
+				+ PCIE_FMT_REG_OFF * i));
+		dev_info(ep->dev, "Map from 0x%08x--> 0x%08x\n",
+			 ep->peer_phy_membase[i], ep->org_peer_phy_membase[i]);
+#endif /* LTQ_EP_DBG */
+	}
+}
+#endif /* CONFIG_SOC_GRX500 */
+
+/**
+ * \fn  static int ltq_pcie_probe(struct pci_dev *pdev,
+ *	const struct pci_device_id *id)
+ *
+ * \brief This function initializes an adapter identified by
+ *	  a pci_dev structure. The OS initialization, configuring
+ *	  of the adapter private structure.
+ *
+ * \param  pdev     PCI device information struct
+ * \param  id       entry in ltq_pcie_id_table
+ * \return 0        OK
+ * \return -ENODEV  Failed to initialize an adapter identified by pci_dev
+ *
+ * \ingroup IFX_PCIE_EP_VRX318_OS
+ */
+static int
+ltq_pcie_probe(struct pci_dev *pdev, const struct pci_device_id *id)
+{
+	int i;
+	int j;
+	int k;
+	struct device *dev;
+	unsigned long phymem;
+	void __iomem *mem;
+	size_t memsize;
+	static int cards_found;
+	int nvec, err;
+	struct pcie_ep_adapter *adapter;
+	struct pcie_ep_dev_priv *priv;
+	struct pci_bus *bus;
+	int peer_num;
+	u32 reg;
+
+	bus = pdev->bus;
+	dev = &pdev->dev;
+	err = pci_enable_device(pdev);
+	if (err)
+		return err;
+
+	/* XXX 32-bit addressing only */
+	if (pci_set_dma_mask(pdev, DMA_BIT_MASK(32))) {
+		pr_err("%s: 32-bit DMA not available\n",
+			__func__);
+		goto bad;
+	}
+
+	pci_set_master(pdev);
+
+	/* Physical address */
+	phymem = pci_resource_start(pdev, 0); /* BAR zero */
+	memsize = pci_resource_len(pdev, 0);
+	if (!request_mem_region(phymem, memsize, ltq_pcie_driver_name)) {
+		dev_err(dev, "%s: cannot reserve PCI memory region\n",
+			__func__);
+		goto bad;
+	}
+
+	/* Virtual address */
+	mem = ioremap_nocache(phymem, memsize);
+	if (!mem) {
+		dev_err(dev, "%s: cannot remap PCI memory region\n",
+			__func__);
+		goto bad1;
+	}
+
+	adapter = kmalloc(sizeof(struct pcie_ep_adapter), GFP_KERNEL);
+	if (adapter == NULL)
+		goto err_mem;
+
+	pci_set_drvdata(pdev, adapter);
+
+	err = pci_msi_max_vector_get(pdev, &nvec);
+	if (err) {
+		dev_err(dev, "%s: device doesn't support MSI, error code: %d",
+			__func__, err);
+		goto err_msi;
+	}
+
+	/* Overwrite maximum vector number according to
+	 * the specific requirement
+	 */
+	if (nvec > PCIE_EP_DEFAULT_MSI_VECTOR)
+		nvec = PCIE_EP_DEFAULT_MSI_VECTOR;
+
+	pci_msi_max_vector_set(pdev, nvec);
+
+	err = pci_enable_msi_exact(pdev, nvec);
+	if (err) {
+		dev_err(dev, "%s: Failed to enable MSI interrupts for the device error code: %d\n",
+			__func__, err);
+		goto err_msi;
+	}
+
+	/* Enough information to configure address translation */
+	ltq_pcie_iatu_setup(pdev);
+
+	adapter->pdev = pdev;
+	adapter->device_id = pdev->device;
+	adapter->mem = mem;
+	adapter->phy_mem = phymem;
+	adapter->memsize = memsize;
+	adapter->msi_nvec = nvec;
+	adapter->irq_base = pdev->irq;
+	adapter->card_num = cards_found++; /* Logical index */
+	/* EMI control stuff */
+	reg = ltq_vrx318_r32(adapter->mem + PCIE_EP_IF_CLK);
+	reg |= PCIE_EP_IF_CLK_NO_36MHZ_CLKOUT;
+	ltq_vrx318_w32(reg, adapter->mem + PCIE_EP_IF_CLK);
+
+	reg = ltq_vrx318_r32(adapter->mem + PCIE_EP_P0_ALTSEL1);
+	reg &= ~PCIE_EP_P0_ALTSEL1_PIN1_SET;
+	ltq_vrx318_w32(reg, adapter->mem + PCIE_EP_P0_ALTSEL1);
+	priv = &g_pcie_ep_info.pcie_ep[adapter->card_num];
+	spin_lock(&pcie_ep_lock);
+	g_pcie_ep_info.dev_num = cards_found; /* Existing cards */
+	atomic_set(&priv->refcnt, 0);
+	priv->dev = &pdev->dev;
+#ifdef CONFIG_SOC_GRX500
+	priv->soc_data = pdev->sysdata;
+#endif /* CONFIG_SOC_GRX500 */
+	priv->card_idx = adapter->card_num;
+	priv->membase = adapter->mem;
+	priv->phy_membase = adapter->phy_mem;
+	priv->memsize = adapter->memsize;
+	priv->irq_base = adapter->irq_base;
+	priv->irq_num = adapter->msi_nvec;
+
+	/* More cards supported, exchange address information
+	 * For example, suppose three cards dected.
+	 * 0, <1, 2>
+	 * 1, <0, 2>
+	 * 2, <0, 1>
+	 * For four cards detected
+	 * 0, <1, 2, 3>
+	 * 1, <0, 2, 3>
+	 * 2, <0, 1, 3>
+	 * 3, <0, 1, 2>
+	 * and etc
+	 */
+	if (cards_found > 1) {
+		peer_num = cards_found - 1;
+		for (i = 0; i < cards_found; i++) {
+			struct pcie_ep_dev_priv *ep =
+				&g_pcie_ep_info.pcie_ep[i];
+			j = 0;
+			k = 0;
+			ep->peer_num = peer_num;
+			do {
+				if (j == i) {
+					j++;
+					continue;
+				}
+				ep->peer_membase[k] =
+					g_pcie_ep_info.pcie_ep[j].membase;
+				ep->peer_phy_membase[k] =
+					g_pcie_ep_info.pcie_ep[j].phy_membase;
+				ep->peer_memsize[k] =
+					g_pcie_ep_info.pcie_ep[j].memsize;
+				k++;
+				j++;
+			} while ((k < peer_num) && (j < cards_found));
+		}
+	}
+	spin_unlock(&pcie_ep_lock);
+#ifdef CONFIG_SOC_GRX500
+	for (i = 0; i < cards_found; i++) {
+		priv = &g_pcie_ep_info.pcie_ep[i];
+		ltq_pcie_rc_fmt_cfg(priv);
+	}
+#endif /* CONFIG_SOC_GRX500 */
+
+#ifdef LTQ_EP_DBG
+	dev_info(dev, "Total cards found %d\n", cards_found);
+	/* Dump detailed debug information */
+	for (i = 0; i < cards_found; i++) {
+		priv = &g_pcie_ep_info.pcie_ep[i];
+		dev_info(dev, "card %d attached\n", priv->card_idx);
+		dev_info(dev, "irq base %d irq numbers %d\n",
+			priv->irq_base, priv->irq_num);
+		dev_info(dev, "its own phy membase  0x%08x virtual membase 0x%p size 0x%08x\n",
+			priv->phy_membase, priv->membase, priv->memsize);
+		if (cards_found > 1) {
+			for (j = 0; j < priv->peer_num; j++)
+				dev_info(dev, "its peer phy membase 0x%08x virtual membase 0x%p size 0x%08x\n",
+			#ifdef CONFIG_SOC_GRX500
+				priv->org_peer_phy_membase[j],
+			#else
+				priv->peer_phy_membase[j],
+			#endif
+				priv->peer_membase[j], priv->peer_memsize[j]);
+		}
+	}
+#endif /* LTQ_EP_DBG */
+	return 0;
+err_msi:
+	kfree(adapter);
+err_mem:
+	iounmap(mem);
+bad1:
+	release_mem_region(phymem, memsize);
+bad:
+	pci_disable_device(pdev);
+	return -ENODEV;
+}
+
+/**
+ * \fn  static void ltq_pcie_remove(struct pci_dev *pdev)
+ *
+ * \brief  This function is called by the PCI subsystem to alert the driver
+ *         that it should release a PCI device because the driver is going
+ *         to be removed from memory.
+ *
+ * \param  pdev     PCI device information struct
+ * \return none
+ *
+ * \ingroup IFX_PCIE_EP_VRX318_OS
+ */
+static void ltq_pcie_remove(struct pci_dev *pdev)
+{
+
+	struct device *dev = &pdev->dev;
+	struct pcie_ep_adapter *adapter =
+		(struct pcie_ep_adapter *)pci_get_drvdata(pdev);
+	struct pcie_ep_dev_priv *priv =
+		&g_pcie_ep_info.pcie_ep[adapter->card_num];
+	if (atomic_read(&priv->refcnt) != 0)
+		dev_err(dev, "%s still being used, can't remove\n", __func__);
+
+	iounmap(adapter->mem);
+	release_mem_region(adapter->phy_mem, adapter->memsize);
+	pci_disable_msi(pdev);
+	pci_disable_device(pdev);
+	kfree(adapter);
+	adapter = NULL;
+}
+
+MODULE_DEVICE_TABLE(pci, ltq_pcie_id_table);
+
+static struct pci_driver ltq_pcie_driver = {
+	.name = (char *) ltq_pcie_driver_name,
+	.id_table = ltq_pcie_id_table,
+	.probe = ltq_pcie_probe,
+	.remove = ltq_pcie_remove,
+	/* PM not supported */
+	/* AER is controlled by RC */
+};
+
+/**
+ * \fn  static int __init init_ltq_pcie(void)
+ *
+ * \brief  This function registered PCIe EP device driver with OS PCI subsystem
+ *         and initializes PCIe EP address mapping driver.
+ *
+ * \return 0 on success
+ * \return -ENODEV No related PCIe EP found
+ *
+ * \ingroup IFX_PCIE_EP_VRX318_OS
+ */
+static int __init init_ltq_pcie(void)
+{
+	memset(&g_pcie_ep_info, 0, sizeof(struct pcie_ep_info));
+
+	if (pci_register_driver(&ltq_pcie_driver) < 0) {
+		pr_err("%s: No devices found, driver not installed.\n",
+			__func__);
+		return -ENODEV;
+	}
+	pr_info("Lantiq VRX318 Version %s", vrx318_driver_version);
+	return 0;
+}
+
+module_init(init_ltq_pcie);
+
+/**
+ * \fn  static void __exit exit_ltq_pcie(void)
+ *
+ * \brief  This function unregister PCIe EP device driver with OS PCI subsystem
+ *
+ * \return none
+ *
+ * \ingroup IFX_PCIE_EP_VRX318_OS
+ */
+static void __exit exit_ltq_pcie(void)
+{
+	pci_unregister_driver(&ltq_pcie_driver);
+
+	pr_info("%s: %s driver unloaded\n", __func__,
+		ltq_pcie_driver_name);
+}
+
+module_exit(exit_ltq_pcie);
+
+MODULE_LICENSE("GPL");
+MODULE_AUTHOR("Chuanhua.Lei@lantiq.com");
+MODULE_SUPPORTED_DEVICE("Lantiq SmartPHY PCIe EP");
+MODULE_DESCRIPTION("Lantiq SmartPHY PCIe EP address mapping driver");
+
+
diff --git a/drivers/net/ethernet/lantiq/ltq_vrx318.h b/drivers/net/ethernet/lantiq/ltq_vrx318.h
new file mode 100644
index 000000000000..c831656583d1
--- /dev/null
+++ b/drivers/net/ethernet/lantiq/ltq_vrx318.h
@@ -0,0 +1,201 @@
+/*
+ *  This program is free software; you can redistribute it and/or modify it
+ *  under the terms of the GNU General Public License version 2 as published
+ *  by the Free Software Foundation.
+ *
+ *  Copyright (C) 2011~2013 Lei Chuanhua <chuanhua.lei@lantiq.com>
+ */
+ /*!
+ \file ltq_vrx318.h
+ \ingroup VRX318
+ \brief header file for SmartPHY PCIe EP address mapping driver internal
+  definition
+*/
+#ifndef LTQ_VRX318_H
+#define LTQ_VRX318_H
+
+#include <linux/types.h>
+#include <linux/pci.h>
+
+#include <lantiq_pcie.h>
+
+#define IFX_PCIE_EP_MAX_NUM		(IFX_PCIE_EP_MAX_PEER + 1)
+
+/* Maximum 4, if PCIe switch attached, 2 is used. 2 is also default one */
+#ifdef CONFIG_LANITQ_VRX318_PCIE_SWITCH_DSL_BONDING
+#define PCIE_EP_DEFAULT_MSI_VECTOR	2
+#else
+#define PCIE_EP_DEFAULT_MSI_VECTOR	4
+#endif /*  CONFIG_LANITQ_VRX318_PCIE_SWITCH_DSL_BONDING */
+
+#define PCIE_EP_MAX_REFCNT		IFX_PCIE_EP_INT_MODULE_MAX
+
+/* iATU specific register offset definition */
+
+/* View Point Register */
+#define PCIE_PL_IATU_VIEWPORT		0x900
+
+#define PCIE_PL_IATU_REGION_IDX		0x0000000F
+#define PCIE_PL_IATU_REGION_IDX_S	0
+
+/* Inbound and outbound has seperate regions,
+ * each one has 8 regions from index 0
+ */
+enum {
+	PCIE_PL_IATU_REGION0 = 0,
+	PCIE_PL_IATU_REGION1,
+	PCIE_PL_IATU_REGION2,
+	PCIE_PL_IATU_REGION3,
+	PCIE_PL_IATU_REGION4,
+	PCIE_PL_IATU_REGION5,
+	PCIE_PL_IATU_REGION6,
+	PCIE_PL_IATU_REGION7,
+};
+#define PCIE_PL_IATU_REGION_INBOUND	0x80000000
+
+/* Region control registe for all kinds of types */
+#define PCIE_PL_IATU_REGION_CTRL1	0x904
+
+#define PCIE_PL_IATU_REGION_CTRL2	0x908
+#define PCIE_PL_IATU_REGION_BAR		0x00000700
+#define PCIE_PL_IATU_REGION_BAR_S	8
+
+enum {
+	PCIE_PL_IATU_REGION_BAR0 = 0,
+	PCIE_PL_IATU_REGION_BAR1,
+	PCIE_PL_IATU_REGION_BAR2,
+	PCIE_PL_IATU_REGION_BAR3,
+	PCIE_PL_IATU_REGION_BAR4,
+	PCIE_PL_IATU_REGION_BAR5,
+};
+#define PCIE_PL_IATU_REGION_MATCH_EN	0x40000000
+#define PCIE_PL_IATU_REGION_EN		0x80000000
+
+#define PCIE_PL_IATU_REGION_LOWER_BASE_ADDR	0x90C
+#define PCIE_PL_IATU_REGION_UPPER_BASE_ADDR	0x910
+#define PCIE_PL_IATU_REGION_LIMIT		0x914
+#define PCIE_PL_IATU_REGION_LOWER_TARGET_ADDR	0x918
+#define PCIE_PL_IATU_REGION_UPPER_TARGET_ADDR	0x91C
+
+/* Target & Base address definition for Inbound/Outbound */
+
+/* Inbound address translation for iATU0 */
+#define PCIE_EP_INBOUND_INTERNAL_BASE		0x1E000000
+#define PCIE_EP_OUTBOUND_INTERNAL_BASE		0x20000000
+#define PCIE_EP_OUTBOUND_MEMSIZE		0x40000000
+
+/* EMI control stuff */
+/* 36MHz clockout */
+#define PCIE_EP_IF_CLK				0x00003024
+#define PCIE_EP_IF_CLK_NO_36MHZ_CLKOUT		0x00000400
+
+/* GPIO 1 Alternate1 Set/Clear */
+#define PCIE_EP_P0_ALTSEL1			0x00102B20
+#define PCIE_EP_P0_ALTSEL1_PIN1_SET		0x00000002
+
+#ifdef CONFIG_SOC_GRX500
+/* PCie 2.0  VRX318 hacking from SoC RC stuff */
+#define PCIE_FMT_ADDR_IN_LBASE_0	0xA0
+#define PCIE_FMT_ADDR_IN_UBASE_0	0xA4
+#define PCIE_FMT_ADDR_OUT_LBASE_0	0xA8
+#define PCIE_FMT_ADDR_EN_0		0xAC
+
+#define PCIE_FMT_ADDR_IN_LBASE_1	0xB0
+#define PCIE_FMT_ADDR_IN_UBASE_1	0xB4
+#define PCIE_FMT_ADDR_OUT_LBASE_1	0xB8
+#define PCIE_FMT_ADDR_EN_1		0xBC
+
+#define PCIE_FMT_ADDR_IN_LBASE_2	0xC0
+#define PCIE_FMT_ADDR_IN_UBASE_2	0xC4
+#define PCIE_FMT_ADDR_OUT_LBASE_2	0xC8
+#define PCIE_FMT_ADDR_EN_2		0xCC
+#define PCIE_FMT_REG_OFF		0x10
+
+#define PCIE_FMT_ADDR_EN		0x1
+
+#define PCIE_FMT_IN_LOW_ADDR_0		0x9E800000
+#define PCIE_FMT_IN_HIGH_ADDR_0		0x9EFFFFFF
+
+#define PCIE_FMT_IN_LOW_ADDR_1		0x9F000000
+#define PCIE_FMT_IN_HIGH_ADDR_1		0x9F7FFFFF
+
+#define PCIE_FMT_IN_LOW_ADDR_2		0x9F800000
+#define PCIE_FMT_IN_HIGH_ADDR_2		0x9FFFFFFF
+#define PCIE_FMT_SIZE			0x00800000
+#endif /* CONFIG_SOC_GRX500 */
+
+#ifdef CONFIG_SOC_GRX500
+struct ltq_sys_data {
+	/*!< PCI controller information used as system specific information */
+	struct pci_controller pcic;
+	void __iomem	*app_base;
+};
+#endif /* CONFIG_SOC_GRX500 */
+
+/* Structure used to extract attached EP detailed information for
+ * PPE/DSL_MEI driver/Bonding
+ */
+struct pcie_ep_dev_priv {
+	struct device *dev;
+	u32 card_idx; /*!< EP logical index, the first found one will be 0
+			regardless of RC physical index
+			*/
+	u32 irq_base; /*!< The first MSI interrupt number */
+	u32 irq_num; /*!< How many MSI interrupt supported */
+	u8 __iomem *membase;  /*!< The EP inbound memory base address
+				derived from BAR0, SoC virtual address
+				for PPE/DSL_MEI driver
+				*/
+	u32 phy_membase; /*!< The EP inbound memory base address
+				derived from BAR0, physical address for
+				PPE FW
+				*/
+	size_t memsize; /*!< The EP inbound memory window size */
+	u32 peer_num;  /*!< Bonding peer number available */
+	/*!< The bonding peer EP inbound memory base address derived from
+	 * its BAR0, SoC virtual address for PPE/DSL_MEI driver
+	 */
+
+	u8 __iomem *peer_membase[IFX_PCIE_EP_MAX_PEER];
+
+	/*!< The bonding peer EP inbound memory base address derived from
+	 * its BAR0, physical address for PPE FW
+	 */
+	u32 peer_phy_membase[IFX_PCIE_EP_MAX_PEER];
+
+	/*!< The bonding peer inbound memory window size */
+	size_t peer_memsize[IFX_PCIE_EP_MAX_PEER];
+	atomic_t refcnt; /*!< The EP mapping driver referenced times
+				by other modules
+				*/
+#ifdef CONFIG_SOC_GRX500
+	struct ltq_sys_data *soc_data;
+	u8 __iomem *org_peer_membase[IFX_PCIE_EP_MAX_PEER];
+	u32 org_peer_phy_membase[IFX_PCIE_EP_MAX_PEER];
+#endif /* CONFIG_SOC_GRX500 */
+};
+
+struct pcie_ep_info {
+	int dev_num;
+	struct pcie_ep_dev_priv pcie_ep[IFX_PCIE_EP_MAX_NUM];
+};
+
+/* Card specific private data structure */
+struct pcie_ep_adapter {
+	/* OS defined structs */
+	struct pci_dev *pdev;
+	unsigned long phy_mem; /* Physical address */
+	u8 __iomem *mem; /* Virtual address */
+	size_t memsize;
+	u32 card_num; /* EP card index */
+	u32 rc_phy_idx; /* Attached which RC */
+
+	/* PCI config space info */
+	u16 device_id;
+	u16 irq_base; /* irq base for multiple MSI */
+	u32 msi_nvec; /* MSI vector number supported */
+};
+
+#endif /* LTQ_VRX318_H */
+
+
diff --git a/drivers/net/ethernet/lantiq/xrx500_phy_fw.c b/drivers/net/ethernet/lantiq/xrx500_phy_fw.c
new file mode 100644
index 000000000000..b723f217fc98
--- /dev/null
+++ b/drivers/net/ethernet/lantiq/xrx500_phy_fw.c
@@ -0,0 +1,179 @@
+/*
+ *  This program is free software; you can redistribute it and/or modify it
+ *  under the terms of the GNU General Public License version 2 as published
+ *  by the Free Software Foundation.
+ *
+ *  Copyright (C) 2012 John Crispin <blogic@openwrt.org>
+ */
+
+#include <linux/delay.h>
+#include <linux/dma-mapping.h>
+#include <linux/module.h>
+#include <linux/firmware.h>
+#include <linux/of_platform.h>
+#include <linux/reset.h>
+
+#include <lantiq_soc.h>
+
+#define XRX200_GPHY_FW_ALIGN	(16 * 1024)
+/* GPHY related */
+struct reset_control *phy_rst;
+static int g_xway_gphy_fw_loaded;
+
+#define RCU_RD_GPHY2_XRX500 BIT(29)
+#define RCU_RD_GPHY3_XRX500 BIT(28)
+#define RCU_RD_GPHY4_XRX500 BIT(26)
+#define RCU_RD_GPHY5_XRX500 BIT(25)
+#define RCU_RD_GPHYF_XRX500 BIT(31)
+
+/* xRX500 gphy (GSW-L) registers */
+#define GPHY2_LBADR_XRX500     0x0228
+#define GPHY2_MBADR_XRX500     0x022C
+#define GPHY3_LBADR_XRX500     0x0238
+#define GPHY3_MBADR_XRX500     0x023c
+#define GPHY4_LBADR_XRX500     0x0248
+#define GPHY4_MBADR_XRX500     0x024C
+#define GPHY5_LBADR_XRX500     0x0258
+#define GPHY5_MBADR_XRX500     0x025C
+#define GPHYF_LBADR_XRX500     0x0268
+#define GPHYF_MBADR_XRX500     0x026C
+
+/* reset / boot a gphy */
+static struct ltq_xrx500_gphy_reset {
+	       u32 rd;
+	       u32 addr;
+	} xrx500_gphy[] = {
+		       {RCU_RD_GPHY2_XRX500, GPHY2_LBADR_XRX500},
+		       {RCU_RD_GPHY3_XRX500, GPHY3_LBADR_XRX500},
+		       {RCU_RD_GPHY4_XRX500, GPHY4_LBADR_XRX500},
+		       {RCU_RD_GPHY5_XRX500, GPHY5_LBADR_XRX500},
+		       {RCU_RD_GPHYF_XRX500, GPHYF_LBADR_XRX500},
+		};
+
+#define GSW_L_TOP_BASE 0xBC003C00
+static void gsw_reg_w32(u32 val, u32 reg_off)
+{
+	ltq_w32(val, (void __iomem *)(GSW_L_TOP_BASE + reg_off));
+}
+
+/* reset and boot a gphy. these phys only exist on xrx200 SoC */
+int xrx500_gphy_boot(struct device *dev, unsigned int id, dma_addr_t dev_addr)
+{
+	if (of_machine_is_compatible("lantiq,grx500")) {
+		if (id > 4) {
+			dev_info(dev, "%u is an invalid gphy id\n", id);
+			return -EINVAL;
+		}
+		reset_control_assert(phy_rst);
+		gsw_reg_w32((dev_addr & 0xFFFF), xrx500_gphy[id].addr);
+		gsw_reg_w32(((dev_addr >> 16) & 0xFFFF),
+			    (xrx500_gphy[id].addr + 4));
+		reset_control_deassert(phy_rst);
+		dev_info(dev, "booting GPHY%u firmware at %X for GRX500\n",
+			 id, dev_addr);
+	}
+	return 0;
+}
+
+static dma_addr_t xway_gphy_load(struct platform_device *pdev)
+{
+	const struct firmware *fw;
+	dma_addr_t dev_addr = 0;
+	const char *fw_name;
+	void *fw_addr;
+	size_t size;
+
+	if (of_property_read_string(pdev->dev.of_node, "firmware", &fw_name)) {
+		dev_err(&pdev->dev, "failed to load firmware filename\n");
+		return 0;
+	}
+
+	dev_info(&pdev->dev, "requesting %s\n", fw_name);
+	if (request_firmware(&fw, fw_name, &pdev->dev)) {
+		dev_err(&pdev->dev, "failed to load firmware: %s\n", fw_name);
+		return 0;
+	}
+
+	/**
+	 * GPHY cores need the firmware code in a persistent and contiguous
+	 * memory area with a 16 kB boundary aligned start address
+	 */
+	size = fw->size + XRX200_GPHY_FW_ALIGN;
+
+	fw_addr = dma_alloc_coherent(&pdev->dev, size, &dev_addr, GFP_KERNEL);
+	if (fw_addr) {
+		fw_addr = PTR_ALIGN(fw_addr, XRX200_GPHY_FW_ALIGN);
+		dev_addr = ALIGN(dev_addr, XRX200_GPHY_FW_ALIGN);
+		memcpy(fw_addr, fw->data, fw->size);
+	} else {
+		dev_err(&pdev->dev, "failed to alloc firmware memory\n");
+	}
+
+	release_firmware(fw);
+	return dev_addr;
+}
+
+static int xway_phy_fw_probe(struct platform_device *pdev)
+{
+	dma_addr_t fw_addr;
+	struct property *pp;
+	unsigned char *phyids;
+	int i, ret = 0;
+	char phy_str[7];
+
+	fw_addr = xway_gphy_load(pdev);
+	if (!fw_addr)
+		return -EPROBE_DEFER;
+
+	pp = of_find_property(pdev->dev.of_node, "phy_id", NULL);
+	if (!pp)
+		return -ENOENT;
+
+	phyids = pp->value;
+	for (i = 0; i < pp->length && !ret; i++) {
+		sprintf(phy_str, "phy%d", phyids[i]);
+		phy_rst = devm_reset_control_get(&pdev->dev, phy_str);
+		if (IS_ERR(phy_rst))
+			return PTR_ERR(phy_rst);
+		ret = xrx500_gphy_boot(&pdev->dev, phyids[i], fw_addr);
+	}
+	if (!ret)
+		mdelay(100);
+
+	g_xway_gphy_fw_loaded = 1;
+	return ret;
+}
+
+bool is_xway_gphy_fw_loaded(void)
+{
+	if (g_xway_gphy_fw_loaded)
+		return true;
+	else
+		return false;
+}
+EXPORT_SYMBOL(is_xway_gphy_fw_loaded);
+
+static const struct of_device_id xway_phy_match[] = {
+	{ .compatible = "lantiq,phy-xrx500" },
+	{},
+};
+MODULE_DEVICE_TABLE(of, xway_phy_match);
+
+static struct platform_driver xway_phy_driver = {
+	.probe = xway_phy_fw_probe,
+	.driver = {
+		.name = "phy-xrx500",
+		.owner = THIS_MODULE,
+		.of_match_table = xway_phy_match,
+	},
+};
+
+int __init xrx500_phy_fw_init(void)
+{
+	return platform_driver_register(&xway_phy_driver);
+}
+module_init(xrx500_phy_fw_init);
+
+MODULE_AUTHOR("John Crispin <blogic@openwrt.org>");
+MODULE_DESCRIPTION("Lantiq XRX200 PHY Firmware Loader");
+MODULE_LICENSE("GPL");
diff --git a/drivers/net/ethernet/lantiq/xrx500_phy_fw.h b/drivers/net/ethernet/lantiq/xrx500_phy_fw.h
new file mode 100644
index 000000000000..dcf2aaeae589
--- /dev/null
+++ b/drivers/net/ethernet/lantiq/xrx500_phy_fw.h
@@ -0,0 +1,14 @@
+/*
+ *  This program is free software; you can redistribute it and/or modify it
+ *  under the terms of the GNU General Public License version 2 as published
+ *  by the Free Software Foundation.
+ *
+ *  Copyright (C) 2016 Intel Corporation.
+ */
+
+#ifndef _XRX500_PHY_FW_
+#define _XRX500_PHY_FW_
+
+bool is_xway_gphy_fw_loaded(void);
+
+#endif
diff --git a/drivers/net/phy/lantiq.c b/drivers/net/phy/lantiq.c
new file mode 100644
index 000000000000..ebf32b0a473f
--- /dev/null
+++ b/drivers/net/phy/lantiq.c
@@ -0,0 +1,238 @@
+/*
+ *   This program is free software; you can redistribute it and/or modify
+ *   it under the terms of the GNU General Public License as published by
+ *   the Free Software Foundation; either version 2 of the License, or
+ *   (at your option) any later version.
+ *
+ *   This program is distributed in the hope that it will be useful,
+ *   but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *   GNU General Public License for more details.
+ *
+ *   You should have received a copy of the GNU General Public License
+ *   along with this program; if not, write to the Free Software
+ *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.
+ *
+ *   Copyright (C) 2012 Daniel Schwierzeck <daniel.schwierzeck@googlemail.com>
+ */
+
+#include <linux/module.h>
+#include <linux/phy.h>
+
+#define MII_MMDCTRL		0x0d
+#define MII_MMDDATA		0x0e
+
+#define MII_VR9_11G_IMASK	0x19	/* interrupt mask */
+#define MII_VR9_11G_ISTAT	0x1a	/* interrupt status */
+
+#define INT_VR9_11G_WOL		BIT(15)	/* Wake-On-LAN */
+#define INT_VR9_11G_ANE		BIT(11)	/* Auto-Neg error */
+#define INT_VR9_11G_ANC		BIT(10)	/* Auto-Neg complete */
+#define INT_VR9_11G_ADSC	BIT(5)	/* Link auto-downspeed detect */
+#define INT_VR9_11G_DXMC	BIT(2)	/* Duplex mode change */
+#define INT_VR9_11G_LSPC	BIT(1)	/* Link speed change */
+#define INT_VR9_11G_LSTC	BIT(0)	/* Link state change */
+#define INT_VR9_11G_MASK	(INT_VR9_11G_LSTC | INT_VR9_11G_ADSC)
+
+#define ADVERTISED_MPD		BIT(10)	/* Multi-port device */
+
+#define MMD_DEVAD		0x1f
+#define MMD_ACTYPE_SHIFT	14
+#define MMD_ACTYPE_ADDRESS	(0 << MMD_ACTYPE_SHIFT)
+#define MMD_ACTYPE_DATA		(1 << MMD_ACTYPE_SHIFT)
+#define MMD_ACTYPE_DATA_PI	(2 << MMD_ACTYPE_SHIFT)
+#define MMD_ACTYPE_DATA_PIWR	(3 << MMD_ACTYPE_SHIFT)
+
+static __maybe_unused int vr9_gphy_mmd_read(struct phy_device *phydev,
+						u16 regnum)
+{
+	phy_write(phydev, MII_MMDCTRL, MMD_ACTYPE_ADDRESS | MMD_DEVAD);
+	phy_write(phydev, MII_MMDDATA, regnum);
+	phy_write(phydev, MII_MMDCTRL, MMD_ACTYPE_DATA | MMD_DEVAD);
+
+	return phy_read(phydev, MII_MMDDATA);
+}
+
+static __maybe_unused int vr9_gphy_mmd_write(struct phy_device *phydev,
+						u16 regnum, u16 val)
+{
+	phy_write(phydev, MII_MMDCTRL, MMD_ACTYPE_ADDRESS | MMD_DEVAD);
+	phy_write(phydev, MII_MMDDATA, regnum);
+	phy_write(phydev, MII_MMDCTRL, MMD_ACTYPE_DATA | MMD_DEVAD);
+	phy_write(phydev, MII_MMDDATA, val);
+
+	return 0;
+}
+
+static int vr9_gphy_config_init(struct phy_device *phydev)
+{
+	int err;
+
+	pr_debug("%s\n", __func__);
+
+	/* Mask all interrupts */
+	err = phy_write(phydev, MII_VR9_11G_IMASK, 0);
+	if (err)
+		return err;
+
+	/* Clear all pending interrupts */
+	phy_read(phydev, MII_VR9_11G_ISTAT);
+
+	/* Fake clearing of interrupt */
+	vr9_gphy_mmd_write(phydev, 0x707, 0x11);
+
+	vr9_gphy_mmd_write(phydev, 0x1e0, 0xc5);
+	vr9_gphy_mmd_write(phydev, 0x1e1, 0x67);
+	vr9_gphy_mmd_write(phydev, 0x1e2, 0x42);
+	vr9_gphy_mmd_write(phydev, 0x1e3, 0x10);
+	vr9_gphy_mmd_write(phydev, 0x1e4, 0x70);
+	vr9_gphy_mmd_write(phydev, 0x1e5, 0x03);
+	vr9_gphy_mmd_write(phydev, 0x1e6, 0x20);
+	vr9_gphy_mmd_write(phydev, 0x1e7, 0x00);
+	vr9_gphy_mmd_write(phydev, 0x1e8, 0x40);
+	vr9_gphy_mmd_write(phydev, 0x1e9, 0x20);
+
+	return 0;
+}
+
+static int vr9_gphy_config_aneg(struct phy_device *phydev)
+{
+	int reg, err;
+
+	/* Advertise as multi-port device */
+	reg = phy_read(phydev, MII_CTRL1000);
+	reg |= ADVERTISED_MPD;
+	err = phy_write(phydev, MII_CTRL1000, reg);
+	if (err)
+		return err;
+
+	return genphy_config_aneg(phydev);
+}
+
+static int vr9_gphy_ack_interrupt(struct phy_device *phydev)
+{
+	int reg;
+
+	/*
+	 * Possible IRQ numbers:
+	 * - IM3_IRL18 for GPHY0
+	 * - IM3_IRL17 for GPHY1
+	 *
+	 * Due to a silicon bug IRQ lines are not really independent from
+	 * each other. Sometimes the two lines are driven at the same time
+	 * if only one GPHY core raises the interrupt.
+	 */
+
+	reg = phy_read(phydev, MII_VR9_11G_ISTAT);
+
+	/* Fake clearing of interrupt */
+	vr9_gphy_mmd_write(phydev, 0x707, 0x11);
+
+	return (reg < 0) ? reg : 0;
+}
+
+static int vr9_gphy_did_interrupt(struct phy_device *phydev)
+{
+	int reg;
+
+	reg = phy_read(phydev, MII_VR9_11G_ISTAT);
+
+	return reg > 0;
+}
+
+static int vr9_gphy_config_intr(struct phy_device *phydev)
+{
+	int err;
+
+	if (phydev->interrupts == PHY_INTERRUPT_ENABLED) {
+		/* Fake clearing of interrupt */
+		vr9_gphy_mmd_write(phydev, 0x707, 0x11);
+		err = phy_write(phydev, MII_VR9_11G_IMASK, INT_VR9_11G_MASK);
+	} else {
+		err = phy_write(phydev, MII_VR9_11G_IMASK, 0);
+	}
+	return err;
+}
+
+static struct phy_driver lantiq_phy[] = {
+	{
+		.phy_id		= 0xd565a400,
+		.phy_id_mask	= 0xffffffff,
+		.name		= "Lantiq XWAY PEF7071",
+		.features	= (PHY_GBIT_FEATURES | SUPPORTED_Pause),
+		.flags		= 0, /*PHY_HAS_INTERRUPT,*/
+		.config_init	= vr9_gphy_config_init,
+		.config_aneg	= vr9_gphy_config_aneg,
+		.read_status	= genphy_read_status,
+		.ack_interrupt	= vr9_gphy_ack_interrupt,
+		.did_interrupt	= vr9_gphy_did_interrupt,
+		.config_intr	= vr9_gphy_config_intr,
+	}, {
+		.phy_id		= 0x030260D0,
+		.phy_id_mask	= 0xfffffff0,
+		.name		= "Lantiq XWAY VR9 GPHY 11G v1.3",
+		.features	= (PHY_GBIT_FEATURES | SUPPORTED_Pause),
+		.flags		= 0, /*PHY_HAS_INTERRUPT,*/
+		.config_init	= vr9_gphy_config_init,
+		.config_aneg	= vr9_gphy_config_aneg,
+		.read_status	= genphy_read_status,
+		.ack_interrupt	= vr9_gphy_ack_interrupt,
+		.did_interrupt	= vr9_gphy_did_interrupt,
+		.config_intr	= vr9_gphy_config_intr,
+	}, {
+		.phy_id		= 0xd565a408,
+		.phy_id_mask	= 0xfffffff8,
+		.name		= "Lantiq XWAY VR9 GPHY 11G v1.4",
+		.features	= (PHY_GBIT_FEATURES | SUPPORTED_Pause),
+		.flags		= /*0,*/ PHY_HAS_INTERRUPT,
+		.config_init	= vr9_gphy_config_init,
+		.config_aneg	= vr9_gphy_config_aneg,
+		.read_status	= genphy_read_status,
+		.ack_interrupt	= vr9_gphy_ack_interrupt,
+		/*.did_interrupt	= vr9_gphy_did_interrupt,*/
+		.config_intr	= vr9_gphy_config_intr,
+	}, {
+		.phy_id		= 0xd565a418,
+		.phy_id_mask	= 0xfffffff8,
+		.name		= "Lantiq XWAY XRX PHY22F v1.4",
+		.features	= (PHY_BASIC_FEATURES | SUPPORTED_Pause),
+		.flags		= 0, /*PHY_HAS_INTERRUPT,*/
+		.config_init	= vr9_gphy_config_init,
+		.config_aneg	= vr9_gphy_config_aneg,
+		.read_status	= genphy_read_status,
+		.ack_interrupt	= vr9_gphy_ack_interrupt,
+		.did_interrupt	= vr9_gphy_did_interrupt,
+		.config_intr	= vr9_gphy_config_intr,
+	},
+};
+
+#if 0
+static int __init ltq_phy_init(void)
+{
+	int i;
+
+	for (i = 0; i < ARRAY_SIZE(lantiq_phy); i++) {
+		int err = phy_driver_register(&lantiq_phy[i]);
+		if (err)
+			pr_err("lantiq_phy: failed to load %s\n", lantiq_phy[i].name);
+	}
+
+	pr_info("%s success !\n", __func__);
+
+	return 0;
+}
+
+static void __exit ltq_phy_exit(void)
+{
+	int i;
+
+	for (i = 0; i < ARRAY_SIZE(lantiq_phy); i++)
+		phy_driver_unregister(&lantiq_phy[i]);
+}
+#endif
+
+module_phy_driver(lantiq_phy);
+
+MODULE_DESCRIPTION("Lantiq PHY drivers");
+MODULE_AUTHOR("Daniel Schwierzeck <daniel.schwierzeck@googlemail.com>");
+MODULE_LICENSE("GPL");
