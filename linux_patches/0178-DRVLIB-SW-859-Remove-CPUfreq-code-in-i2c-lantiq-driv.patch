From 819bcc7ab1694ec05b993d2876a6810971e09700 Mon Sep 17 00:00:00 2001
From: Peter Harliman Liem <peter.harliman.liem@intel.com>
Date: Thu, 2 Aug 2018 09:44:13 +0800
Subject: [PATCH] DRVLIB_SW-859 - Remove CPUfreq code in i2c-lantiq driver

The code was coming from old ugw7 kernel and never actually
used right now (macro is always disabled). It was added
few years back to workaround TX underrun issue in i2c.
Around a year ago, that underrun issue resurfaced, and in
the end we solved it by increasing TX write size. Hence,
the old cpufreq code is no longer needed.

See also:
- https://jira-chd.intel.com/browse/DRVLIB_SW-147
- https://jira-chd.intel.com/browse/IPSUP-49372
---
 drivers/i2c/busses/i2c-lantiq.c | 233 +---------------------------------------
 1 file changed, 2 insertions(+), 231 deletions(-)

diff --git a/drivers/i2c/busses/i2c-lantiq.c b/drivers/i2c/busses/i2c-lantiq.c
index a0ff6a61321c..3c286813f954 100644
--- a/drivers/i2c/busses/i2c-lantiq.c
+++ b/drivers/i2c/busses/i2c-lantiq.c
@@ -41,11 +41,6 @@
 #include <linux/wait.h>
 #include "i2c-lantiq.h"
 
-#ifdef CONFIG_LTQ_CPUFREQ
-#define LTQ_I2C_SUPPORT_COC 1
-#include <cpufreq/ltq_cpufreq.h>
-#endif
-
 #define LTQ_I2C_KERNEL_CLOCK (10*1000*1000)
 
 
@@ -83,16 +78,6 @@
 #define LTQ_I2C_TX_UFL			(1 << 4)
 #define LTQ_I2C_TX_OFL			(1 << 5)
 
-#ifdef LTQ_I2C_SUPPORT_COC
-#define LTQ_I2CCOCDRV_BUSY	1
-#define LTQ_I2CCOCDRV_IDLE	0
-
-/* this ID represent the I2C interface No. (0, 1, 2, 3, ...) */
-#define LTQ_I2C_ID		0
-
-#define LTQ_I2C_NORMAL_CPU_FREQUENCY 600000
-#endif
-
 struct ltq_i2c {
 	struct mutex mutex;
 
@@ -134,12 +119,7 @@ struct ltq_i2c {
 		BURST = 0,
 		LAST_BURST
 	} last_burst; /* last burst indicator */
-#ifdef LTQ_I2C_SUPPORT_COC
-	enum ltq_cpufreq_state i2c_cocdrv_ps;
-	int ltq_i2c_cpu_frequency;
-	int ltq_i2c_clock_change;
-	int i2c_cocdrv_busy;
-#endif
+
 	/* master status codes */
 	enum {
 		STATUS_IDLE,
@@ -151,175 +131,6 @@ struct ltq_i2c {
 	} status;
 };
 
-#ifdef LTQ_I2C_SUPPORT_COC
-#define LTQ_I2CCOCDRV_BUSY	1
-#define LTQ_I2CCOCDRV_IDLE	0
-
-/* this ID represent the I2C interface No. (0, 1, 2, 3, ...) */
-#define LTQ_I2C_ID		0
-
-#define LTQ_I2C_COC_BUSY	1
-#define LTQ_I2C_COC_IDLE	0
-
-struct ltq_i2c *i2c_priv;
-
-
-static int ltq_i2c_cocdrv_stateget(enum ltq_cpufreq_state *state)
-{
-	/* dev_info(i2c_priv->dev, "%s is called\n", __func__); */
-	*state = i2c_priv->i2c_cocdrv_ps;
-	return LTQ_CPUFREQ_RETURN_SUCCESS;
-}
-
-static int ltq_i2c_cocdrv_fss_ena(int ena)
-{
-	/* pr_info("%s is called\n", __func__); */
-	if (ena)
-		pr_debug("enable frequency scaling\n");
-	else
-		pr_debug("disable frequency scaling\n");
-
-	return LTQ_CPUFREQ_RETURN_SUCCESS;
-}
-
-
-static int ltq_i2c_cocdrv_prechange(enum ltq_cpufreq_module module,
-			enum ltq_cpufreq_state new_state,
-			enum ltq_cpufreq_state old_state)
-{
-	/* pr_info("%s is called new_state[%d]\n",__func__, new_state); */
-	return LTQ_CPUFREQ_RETURN_SUCCESS;
-}
-
-static int ltq_i2c_cocdrv_statechange(enum ltq_cpufreq_state new_state)
-{
-	/* pr_info("%s is called new_state[%d]\n",__func__, new_state); */
-	return LTQ_CPUFREQ_RETURN_SUCCESS;
-}
-
-static int ltq_i2c_cocdrv_postchange(enum ltq_cpufreq_module module,
-			enum ltq_cpufreq_state new_state,
-			enum ltq_cpufreq_state old_state)
-{
-	unsigned long freq;
-	/*
-	 * dev_info(i2c_priv->dev, "%s is called\n", __func__);
-	 * pr_info("%s is called\n", __func__);
-	 */
-	freq = ltq_cpufreq_get_khz_from_ps(new_state);
-	/* pr_info("ps = %d, freq = %d\n", new_state, freq); */
-	if (freq == 0)
-		return LTQ_CPUFREQ_RETURN_DENIED;
-	if (freq != i2c_priv->ltq_i2c_cpu_frequency) {
-		i2c_priv->ltq_i2c_cpu_frequency = freq;
-		i2c_priv->ltq_i2c_clock_change = 1;
-	}
-	i2c_priv->i2c_cocdrv_ps = new_state;
-	return LTQ_CPUFREQ_RETURN_SUCCESS;
-}
-
-/* keep track of frequency transitions */
-static int i2c_cpufreq_notifier(
-	struct notifier_block *nb,
-	unsigned long val,
-	void *data)
-{
-	struct cpufreq_freqs *freq = data;
-	enum ltq_cpufreq_state new_state, old_state;
-	int ret;
-	/* dev_info(i2c_priv->dev, "%s is called\n", __func__); */
-
-	new_state = ltq_cpufreq_get_ps_from_khz(freq->new);
-	if (new_state == LTQ_CPUFREQ_PS_UNDEF)
-		return NOTIFY_STOP_MASK | (LTQ_CPUFREQ_MODULE_I2C<<4);
-	old_state = ltq_cpufreq_get_ps_from_khz(freq->old);
-	if (old_state == LTQ_CPUFREQ_PS_UNDEF)
-		return NOTIFY_STOP_MASK | (LTQ_CPUFREQ_MODULE_I2C<<4);
-	if (val == CPUFREQ_PRECHANGE) {
-		ret = ltq_i2c_cocdrv_prechange(LTQ_CPUFREQ_MODULE_I2C,
-						new_state, old_state);
-		if (ret < 0)
-			return NOTIFY_STOP_MASK | (LTQ_CPUFREQ_MODULE_I2C<<4);
-		ret = ltq_i2c_cocdrv_statechange(new_state);
-		if (ret < 0)
-			return NOTIFY_STOP_MASK | (LTQ_CPUFREQ_MODULE_I2C<<4);
-	} else if (val == CPUFREQ_POSTCHANGE) {
-		ret = ltq_i2c_cocdrv_postchange(LTQ_CPUFREQ_MODULE_I2C,
-						new_state, old_state);
-		if (ret < 0)
-			return NOTIFY_STOP_MASK | (LTQ_CPUFREQ_MODULE_I2C<<4);
-	} else {
-		return NOTIFY_OK | (LTQ_CPUFREQ_MODULE_I2C<<4);
-	}
-	return NOTIFY_OK | (LTQ_CPUFREQ_MODULE_I2C<<4);
-}
-
-
-static struct notifier_block i2c_cpufreq_notifier_block = {
-	.notifier_call = i2c_cpufreq_notifier
-};
-
-struct ltq_cpufreq_module_info i2c_cocdrv_feature_fss = {
-.name                           = "I2C frequency scaling support",
-.pmcuModule                     = LTQ_CPUFREQ_MODULE_I2C,
-.pmcuModuleNr                   = LTQ_I2C_ID,
-.powerFeatureStat               = 1,
-.ltq_cpufreq_state_get          = ltq_i2c_cocdrv_stateget,
-.ltq_cpufreq_pwr_feature_switch = ltq_i2c_cocdrv_fss_ena,
-};
-
-void ltq_i2c_coc_idle(struct ltq_i2c *priv)
-{
-	int ret = LTQ_CPUFREQ_RETURN_SUCCESS;
-
-	ret = ltq_cpufreq_state_req(LTQ_CPUFREQ_MODULE_I2C,
-			LTQ_I2C_ID,
-			LTQ_CPUFREQ_PS_D0D3
-			);
-	if (ret != LTQ_CPUFREQ_RETURN_SUCCESS)
-		dev_err(priv->dev, "Power state request D0D3 failed");
-}
-
-static int ltq_i2c_cpufreq_init(struct ltq_i2c *priv)
-{
-	struct ltq_cpufreq *i2c_cpufreq_p;
-
-	priv->i2c_cocdrv_ps = LTQ_CPUFREQ_PS_D0;
-	priv->ltq_i2c_clock_change = 0;
-	priv->ltq_i2c_cpu_frequency = LTQ_I2C_NORMAL_CPU_FREQUENCY;
-	i2c_cpufreq_p = ltq_cpufreq_get();
-	if (i2c_cpufreq_p == NULL) {
-		dev_err(priv->dev, "CPUFREQ registration failed.\n");
-		return -1;
-	}
-	if (cpufreq_register_notifier(&i2c_cpufreq_notifier_block,
-						CPUFREQ_TRANSITION_NOTIFIER)) {
-		dev_err(priv->dev, "Fail in registering I2C to CPUFreq\n");
-		return -1;
-	}
-	list_add_tail(&i2c_cocdrv_feature_fss.list,
-			&i2c_cpufreq_p->list_head_module);
-
-	dev_info(priv->dev, "Register I2CCOCDRV to CPUFREQ.\n");
-	return LTQ_CPUFREQ_RETURN_SUCCESS;
-}
-
-static int ltq_i2c_cpufreq_exit(struct ltq_i2c *priv)
-{
-	/* set status of i2ccocdrv inside CPUFreq to don't care */
-	ltq_i2c_coc_idle(priv);
-
-	if (cpufreq_unregister_notifier(&i2c_cpufreq_notifier_block,
-						CPUFREQ_TRANSITION_NOTIFIER)) {
-		dev_err(priv->dev, "CPUFREQ unregistration failed.");
-		return -1;
-	}
-	list_del(&i2c_cocdrv_feature_fss.list);
-	return LTQ_CPUFREQ_RETURN_SUCCESS;
-}
-
-#endif /* LTQ_I2C_SUPPORT_COC */
-
 static irqreturn_t ltq_i2c_isr(int irq, void *dev_id);
 
 /**
@@ -406,11 +217,7 @@ static int ltq_i2c_hw_set_clock(struct i2c_adapter *adap)
 	u32 rmc = 0;
 
 	/* clock changed? */
-	if (priv->input_clock == input_clock
-#ifdef LTQ_I2C_SUPPORT_COC
-		&& i2c_priv->ltq_i2c_clock_change == 0
-#endif
-		)
+	if (priv->input_clock == input_clock)
 		return 0;
 
 	/* recalculate RMC value */
@@ -433,17 +240,6 @@ static int ltq_i2c_hw_set_clock(struct i2c_adapter *adap)
 
 	i2c_w32(rmc << I2C_CLC_RMC_OFFSET, clc);
 
-#ifdef LTQ_I2C_SUPPORT_COC
-	if (i2c_priv->ltq_i2c_clock_change) {
-		/* base on the frequency, select the correct divider value
-		 * currently, for low frequency, divider will be 5
-		 */
-		i2c_priv->ltq_i2c_clock_change = 0;
-		if (i2c_priv->ltq_i2c_cpu_frequency <
-			LTQ_I2C_NORMAL_CPU_FREQUENCY)
-			dec = dec * 10;
-	}
-#endif
 	if (dec <= 6) {
 		dev_info(priv->dev, "dec is too small [%d]", dec);
 		return -ENXIO;
@@ -664,9 +460,6 @@ static void ltq_i2c_xfer_init(struct ltq_i2c *priv)
 	ltq_i2c_hw_init(adap);
 	i2c_w32(LTQ_I2C_IMSC_DEFAULT_MASK, imsc);
 	/* trigger transfer of first msg */
-#ifdef LTQ_I2C_SUPPORT_COC
-	i2c_priv->i2c_cocdrv_busy = LTQ_I2CCOCDRV_BUSY;
-#endif
 	ltq_i2c_set_tx_len(priv);
 }
 static void dump_msgs(struct i2c_msg msgs[], int num, int rx)
@@ -767,9 +560,6 @@ static int ltq_i2c_xfer(struct i2c_adapter *adap, struct i2c_msg msgs[],
 
 done:
 	ltq_i2c_release_bus(priv);
-#ifdef LTQ_I2C_SUPPORT_COC
-	i2c_priv->i2c_cocdrv_busy = LTQ_I2CCOCDRV_IDLE;
-#endif
 	if (priv->rx_thread_status != RX_THREAD_STOP) {
 		priv->rx_thread_force_stop = 1;
 		if (wait_event_interruptible_timeout(
@@ -1018,9 +808,6 @@ static int ltq_i2c_probe(struct platform_device *pdev)
 		return -ENOMEM;
 	}
 
-#ifdef LTQ_I2C_SUPPORT_COC
-	i2c_priv = priv;
-#endif
 	adap = &priv->adap;
 	i2c_set_adapdata(adap, priv);
 	adap->owner = THIS_MODULE;
@@ -1156,9 +943,6 @@ static int ltq_i2c_probe(struct platform_device *pdev)
 		dev_err(&pdev->dev, "can't register I2C adapter\n");
 		goto out;
 	}
-#ifdef LTQ_I2C_SUPPORT_COC
-	/*ltq_i2c_cpufreq_init(priv);*/
-#endif
 
 	pm_runtime_mark_last_busy(priv->dev);
 	pm_runtime_put_autosuspend(priv->dev);
@@ -1195,9 +979,6 @@ static int ltq_i2c_remove(struct platform_device *pdev)
 			LTQ_I2C_RX_FIFO_TIMEOUT*3) <= 0)
 			dev_err(priv->dev, "RX Threaded could not stop!!!\n");
 	}
-#ifdef LTQ_I2C_SUPPORT_COC
-	ltq_i2c_cpufreq_exit(priv);
-#endif
 
 	/* disable bus */
 	i2c_w32_mask(I2C_RUN_CTRL_RUN_EN, 0, run_ctrl);
@@ -1285,16 +1066,6 @@ static int __init ltq_i2c_init(void)
 
 subsys_initcall(ltq_i2c_init);
 
-
-#ifdef LTQ_I2C_SUPPORT_COC
-static int __init ltq_i2c_coc_init(void)
-{
-	ltq_i2c_cpufreq_init(i2c_priv);
-	return 0;
-}
-module_init(ltq_i2c_coc_init)
-#endif
-
 /* module_platform_driver(ltq_i2c_driver); */
 
 MODULE_DESCRIPTION("Lantiq I2C bus adapter");
