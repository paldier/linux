From f0e731ed3beea007ead15d52a4c6214d6caf9e14 Mon Sep 17 00:00:00 2001
From: yixin zhu <yixin.zhu@intel.com>
Date: Wed, 23 Jan 2019 14:02:20 +0800
Subject: [PATCH] DRVLIB_SW-1151: fix clock becomes slow issue

---
 drivers/clocksource/mips-gic-timer.c | 30 ++++++++++++++++++++++++++++++
 kernel/time/timekeeping.c            |  4 +++-
 2 files changed, 33 insertions(+), 1 deletion(-)

diff --git a/drivers/clocksource/mips-gic-timer.c b/drivers/clocksource/mips-gic-timer.c
index b1c15bfa4e1d..aa3e20bfd893 100755
--- a/drivers/clocksource/mips-gic-timer.c
+++ b/drivers/clocksource/mips-gic-timer.c
@@ -8,6 +8,7 @@
 #include <linux/clk.h>
 #include <linux/clockchips.h>
 #include <linux/cpu.h>
+#include <linux/cpufreq.h>
 #include <linux/init.h>
 #include <linux/interrupt.h>
 #include <linux/irqchip/mips-gic.h>
@@ -16,6 +17,7 @@
 #include <linux/percpu.h>
 #include <linux/smp.h>
 #include <linux/time.h>
+#include <linux/timekeeping.h>
 #include <linux/sched_clock.h>
 
 static DEFINE_PER_CPU(struct clock_event_device, gic_clockevent_device);
@@ -223,3 +225,31 @@ static int __init gic_clocksource_of_init(struct device_node *node)
 }
 CLOCKSOURCE_OF_DECLARE(mips_gic_timer, "mti,gic-timer",
 		       gic_clocksource_of_init);
+static int
+gic_cpufreq_notifier(struct notifier_block *nb, unsigned long event, void *data)
+{
+	struct cpufreq_freqs *freq = data;
+
+	if (event == CPUFREQ_POSTCHANGE) {
+		if (gic_frequency == freq->new * 1000)
+			return 0;
+
+		gic_frequency = freq->new * 1000;
+		__clocksource_update_freq_hz(&gic_clocksource, gic_frequency);
+		on_each_cpu(gic_update_frequency, (void *)gic_frequency, 1);
+		timekeeping_notify(&gic_clocksource);
+	}
+
+	return 0;
+}
+
+static struct notifier_block gic_cpufreq_nb = {
+	.notifier_call = gic_cpufreq_notifier,
+};
+
+static int __init cpufreq_register_gic_scaling(void)
+{
+	cpufreq_register_notifier(&gic_cpufreq_nb, CPUFREQ_TRANSITION_NOTIFIER);
+	return 0;
+}
+device_initcall(cpufreq_register_gic_scaling);
diff --git a/kernel/time/timekeeping.c b/kernel/time/timekeeping.c
index e24e1f0c5690..e2c54ec45264 100644
--- a/kernel/time/timekeeping.c
+++ b/kernel/time/timekeeping.c
@@ -1368,7 +1368,9 @@ int timekeeping_notify(struct clocksource *clock)
 {
 	struct timekeeper *tk = &tk_core.timekeeper;
 
-	if (tk->tkr_mono.clock == clock)
+	if (tk->tkr_mono.clock == clock &&
+		tk->tkr_mono.mult == clock->mult &&
+		tk->tkr_mono.shift == clock->shift)
 		return 0;
 	stop_machine(change_clocksource, clock, NULL);
 	tick_clock_notify();
