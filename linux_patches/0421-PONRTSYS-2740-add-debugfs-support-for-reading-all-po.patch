From 74b77e4e10cf33c04474e8f3738777ff4c939286 Mon Sep 17 00:00:00 2001
From: Oren Bakshe <oren.bakshe@intel.com>
Date: Tue, 8 Jan 2019 17:03:37 +0200
Subject: [PATCH] PONRTSYS-2740: add debugfs support for reading all
 port/sched/queue configuration

---
 .../net/ethernet/lantiq/ppv4/qos/pp_qos_debugfs.c  | 257 +++++++++++----------
 1 file changed, 141 insertions(+), 116 deletions(-)

diff --git a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_debugfs.c b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_debugfs.c
index 3f50a6348487..e0d51457e256 100644
--- a/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_debugfs.c
+++ b/drivers/net/ethernet/lantiq/ppv4/qos/pp_qos_debugfs.c
@@ -161,13 +161,13 @@ static ssize_t remove_shared_bwl_group_help(struct file *file,
 
 #define DBG_MAX_PROPS	(32)
 
-struct dbg_set_props {
+struct dbg_prop {
 	char		field[32];
 	char		desc[128];
 	unsigned int	*dest;
 };
 
-struct dbg_set_props_cbs {
+struct dbg_props_cbs {
 	int (*first_prop_cb)(struct pp_qos_dev *qdev,
 			     char *field,
 			     unsigned int val,
@@ -178,14 +178,14 @@ struct dbg_set_props_cbs {
 			     void *user_data);
 };
 
-static ssize_t qos_dbg_set_props(struct file *fp,
-				 const char __user *user_buffer,
-				 size_t cnt,
-				 loff_t *pos,
-				 struct dbg_set_props_cbs *cbs,
-				 struct dbg_set_props props[],
-				 u16 num_elems,
-				 void *user_data)
+static ssize_t qos_dbg_props(struct file *fp,
+			     const char __user *user_buffer,
+			     size_t cnt,
+			     loff_t *pos,
+			     struct dbg_props_cbs *cbs,
+			     struct dbg_prop props[],
+			     u16 num_props,
+			     void *user_data)
 {
 	int rc;
 	unsigned int first_prop = 1;
@@ -200,6 +200,7 @@ static ssize_t qos_dbg_set_props(struct file *fp,
 	char *ptr;
 	char *pval;
 	u16 ind;
+	u16 num_changed = 0;
 
 	pdev = (struct platform_device *)(fp->private_data);
 	pdata = platform_get_drvdata(pdev);
@@ -248,19 +249,32 @@ static ssize_t qos_dbg_set_props(struct file *fp,
 			}
 		}
 
-		for (ind = 0; ind < num_elems ; ind++) {
+		for (ind = 0; ind < num_props ; ind++) {
 			if (!strncmp(field, props[ind].field,
 				strlen(props[ind].field))) {
 				*(props[ind].dest) = res;
+				num_changed++;
 				break;
 			}
 		}
 
-		if (ind == num_elems)
+		if (ind == num_props)
 			dev_err(&pdev->dev, "Not supported field %s", field);
 	}
 
 	if (id != PP_QOS_INVALID_ID) {
+		/* If only logical id was set, print current configuration */
+		if (num_changed == 1) {
+			pr_info("Current configuration:\n");
+
+			for (ind = 0; ind < num_props ; ind++) {
+				pr_info("%-30s%u\n",
+					props[ind].field, *props[ind].dest);
+			}
+
+			return rc;
+		}
+
 		if (cbs && cbs->done_props_cb) {
 			if (cbs->done_props_cb(qdev, id, user_data)) {
 				dev_err(&pdev->dev, "done_props_cb failed\n");
@@ -272,20 +286,20 @@ static ssize_t qos_dbg_set_props(struct file *fp,
 	return rc;
 }
 
-static ssize_t qos_dbg_set_props_help(struct file *file,
-				      char __user *user_buf,
-				      size_t count,
-				      loff_t *ppos,
-				      const char *name,
-				      const char *format,
-				      struct dbg_set_props props[],
-				      u16 num_elems)
+static ssize_t qos_dbg_props_help(struct file *file,
+				  char __user *user_buf,
+				  size_t count,
+				  loff_t *ppos,
+				  const char *name,
+				  const char *format,
+				  struct dbg_prop props[],
+				  u16 num_props)
 {
 	char	*buff;
 	u32	len = 0;
 	u16	ind;
 	ssize_t	ret = 0;
-	u16	size = sizeof(props[0]) * num_elems + 256;
+	u16	size = sizeof(props[0]) * num_props + 256;
 
 	buff = kmalloc(size, GFP_KERNEL);
 	if (!buff)
@@ -293,10 +307,12 @@ static ssize_t qos_dbg_set_props_help(struct file *file,
 
 	len += scnprintf(buff + len, size - len, "<---- %s---->\n", name);
 	len += scnprintf(buff + len, size - len, "[FORMAT] %s\n", format);
+	len += scnprintf(buff + len, size - len,
+			 "[FORMAT] If only id is set, operation is get conf\n");
 	len += scnprintf(buff + len, size - len, "Supported fields\n");
 	len += scnprintf(buff + len, size - len, "================\n");
 
-	for (ind = 0; ind < num_elems ; ind++) {
+	for (ind = 0; ind < num_props ; ind++) {
 		len += scnprintf(buff + len, size - len, "%-30s%s\n",
 				 props[ind].field, props[ind].desc);
 	}
@@ -307,7 +323,7 @@ static ssize_t qos_dbg_set_props_help(struct file *file,
 	return ret;
 }
 
-static void dbg_add_prop(struct dbg_set_props *props, u16 *pos, u16 size,
+static void dbg_add_prop(struct dbg_prop *props, u16 *pos, u16 size,
 		const char *name, const char *desc, unsigned int *dest)
 {
 	if (*pos >= size) {
@@ -322,7 +338,7 @@ static void dbg_add_prop(struct dbg_set_props *props, u16 *pos, u16 size,
 	(*pos)++;
 }
 
-static u16 create_port_props(struct dbg_set_props *props, u16 size,
+static u16 create_port_props(struct dbg_prop *props, u16 size,
 		unsigned int *id, struct pp_qos_port_conf *pconf)
 {
 	u16 num = 0;
@@ -383,62 +399,61 @@ static int port_done_props_cb(struct pp_qos_dev *qdev,
 	return 0;
 }
 
-static ssize_t set_port(struct file *fp,
-			const char __user *user_buffer,
-			size_t cnt,
-			loff_t *pos)
+static ssize_t port(struct file *fp,
+		    const char __user *user_buffer,
+		    size_t cnt,
+		    loff_t *pos)
 {
 	struct pp_qos_port_conf conf;
-	struct dbg_set_props_cbs cbs = {port_first_prop_cb,
-					port_done_props_cb};
+	struct dbg_props_cbs cbs = {port_first_prop_cb, port_done_props_cb};
 	unsigned int id = PP_QOS_INVALID_ID;
-	u16 num_elems;
+	u16 num_props;
 	ssize_t ret;
-	struct dbg_set_props *props;
+	struct dbg_prop *props;
 
-	props = kmalloc_array(DBG_MAX_PROPS, sizeof(struct dbg_set_props),
+	props = kmalloc_array(DBG_MAX_PROPS, sizeof(struct dbg_prop),
 			      GFP_KERNEL);
 	if (!props)
 		return -ENOMEM;
 
-	num_elems = create_port_props(props, DBG_MAX_PROPS, &id, &conf);
+	num_props = create_port_props(props, DBG_MAX_PROPS, &id, &conf);
 
-	ret = qos_dbg_set_props(fp, user_buffer, cnt, pos, &cbs,
-				props, num_elems, &conf);
+	ret = qos_dbg_props(fp, user_buffer, cnt, pos, &cbs,
+			    props, num_props, &conf);
 	kfree(props);
 
 	return ret;
 }
 
-static ssize_t set_port_help(struct file *file,
-			     char __user *user_buf,
-			     size_t count,
-			     loff_t *ppos)
+static ssize_t port_help(struct file *file,
+			 char __user *user_buf,
+			 size_t count,
+			 loff_t *ppos)
 {
 	unsigned int id = PP_QOS_INVALID_ID;
 	struct pp_qos_port_conf conf;
 	const char *name = "set port";
 	const char *format =
-		"echo port=[logical_id] [field]=[value]... > set_port";
-	u16 num_elems;
+		"echo port=[logical_id] [field]=[value]... > port";
+	u16 num_props;
 	ssize_t ret;
-	struct dbg_set_props *props;
+	struct dbg_prop *props;
 
-	props = kmalloc_array(DBG_MAX_PROPS, sizeof(struct dbg_set_props),
+	props = kmalloc_array(DBG_MAX_PROPS, sizeof(struct dbg_prop),
 			      GFP_KERNEL);
 	if (!props)
 		return -ENOMEM;
 
-	num_elems = create_port_props(props, DBG_MAX_PROPS, &id, &conf);
+	num_props = create_port_props(props, DBG_MAX_PROPS, &id, &conf);
 
-	ret = qos_dbg_set_props_help(file, user_buf, count, ppos, name, format,
-				props, num_elems);
+	ret = qos_dbg_props_help(file, user_buf, count, ppos, name, format,
+				 props, num_props);
 	kfree(props);
 
 	return ret;
 }
 
-static u16 create_sched_props(struct dbg_set_props *props, u16 size,
+static u16 create_sched_props(struct dbg_prop *props, u16 size,
 		unsigned int *id, struct pp_qos_sched_conf *pconf)
 {
 	u16 num = 0;
@@ -497,62 +512,61 @@ static int sched_done_props_cb(struct pp_qos_dev *qdev,
 	return 0;
 }
 
-static ssize_t set_sched(struct file *fp,
-			 const char __user *user_buffer,
-			 size_t cnt,
-			 loff_t *pos)
+static ssize_t sched(struct file *fp,
+		     const char __user *user_buffer,
+		     size_t cnt,
+		     loff_t *pos)
 {
 	struct pp_qos_sched_conf conf;
-	struct dbg_set_props_cbs cbs = {sched_first_prop_cb,
-					sched_done_props_cb};
+	struct dbg_props_cbs cbs = {sched_first_prop_cb, sched_done_props_cb};
 	unsigned int id = PP_QOS_INVALID_ID;
-	u16 num_elems;
+	u16 num_props;
 	ssize_t ret;
-	struct dbg_set_props *props;
+	struct dbg_prop *props;
 
-	props = kmalloc_array(DBG_MAX_PROPS, sizeof(struct dbg_set_props),
+	props = kmalloc_array(DBG_MAX_PROPS, sizeof(struct dbg_prop),
 			      GFP_KERNEL);
 	if (!props)
 		return -ENOMEM;
 
-	num_elems = create_sched_props(props, DBG_MAX_PROPS, &id, &conf);
+	num_props = create_sched_props(props, DBG_MAX_PROPS, &id, &conf);
 
-	ret = qos_dbg_set_props(fp, user_buffer, cnt, pos, &cbs,
-				props, num_elems, &conf);
+	ret = qos_dbg_props(fp, user_buffer, cnt, pos, &cbs,
+			    props, num_props, &conf);
 	kfree(props);
 
 	return ret;
 }
 
-static ssize_t set_sched_help(struct file *file,
-			      char __user *user_buf,
-			      size_t count,
-			      loff_t *ppos)
+static ssize_t sched_help(struct file *file,
+			  char __user *user_buf,
+			  size_t count,
+			  loff_t *ppos)
 {
 	unsigned int id = PP_QOS_INVALID_ID;
 	struct pp_qos_sched_conf conf;
 	const char *name = "set sched";
 	const char *format =
-		"echo sched=[logical_id] [field]=[value]... > set_sched";
-	u16 num_elems;
+		"echo sched=[logical_id] [field]=[value]... > sched";
+	u16 num_props;
 	ssize_t ret;
-	struct dbg_set_props *props;
+	struct dbg_prop *props;
 
-	props = kmalloc_array(DBG_MAX_PROPS, sizeof(struct dbg_set_props),
+	props = kmalloc_array(DBG_MAX_PROPS, sizeof(struct dbg_prop),
 			      GFP_KERNEL);
 	if (!props)
 		return -ENOMEM;
 
-	num_elems = create_sched_props(props, DBG_MAX_PROPS, &id, &conf);
+	num_props = create_sched_props(props, DBG_MAX_PROPS, &id, &conf);
 
-	ret = qos_dbg_set_props_help(file, user_buf, count, ppos, name, format,
-				props, num_elems);
+	ret = qos_dbg_props_help(file, user_buf, count, ppos, name, format,
+				 props, num_props);
 	kfree(props);
 
 	return ret;
 }
 
-static u16 create_queue_props(struct dbg_set_props *props, u16 size,
+static u16 create_queue_props(struct dbg_prop *props, u16 size,
 		unsigned int *id, struct pp_qos_queue_conf *pconf)
 {
 	u16 num = 0;
@@ -642,56 +656,55 @@ static int queue_done_props_cb(struct pp_qos_dev *qdev,
 	return 0;
 }
 
-static ssize_t set_queue(struct file *fp,
-			 const char __user *user_buffer,
-			 size_t cnt,
-			 loff_t *pos)
+static ssize_t queue(struct file *fp,
+		     const char __user *user_buffer,
+		     size_t cnt,
+		     loff_t *pos)
 {
 	struct pp_qos_queue_conf conf;
-	struct dbg_set_props_cbs cbs = {queue_first_prop_cb,
-					queue_done_props_cb};
+	struct dbg_props_cbs cbs = {queue_first_prop_cb, queue_done_props_cb};
 	unsigned int id = PP_QOS_INVALID_ID;
-	u16 num_elems;
+	u16 num_props;
 	ssize_t ret;
-	struct dbg_set_props *props;
+	struct dbg_prop *props;
 
-	props = kmalloc_array(DBG_MAX_PROPS, sizeof(struct dbg_set_props),
+	props = kmalloc_array(DBG_MAX_PROPS, sizeof(struct dbg_prop),
 			      GFP_KERNEL);
 	if (!props)
 		return -ENOMEM;
 
-	num_elems = create_queue_props(props, DBG_MAX_PROPS, &id, &conf);
+	num_props = create_queue_props(props, DBG_MAX_PROPS, &id, &conf);
 
-	ret = qos_dbg_set_props(fp, user_buffer, cnt, pos, &cbs,
-				props, num_elems, &conf);
+	ret = qos_dbg_props(fp, user_buffer, cnt, pos, &cbs,
+			    props, num_props, &conf);
 	kfree(props);
 
 	return ret;
 }
 
-static ssize_t set_queue_help(struct file *file,
-			      char __user *user_buf,
-			      size_t count,
-			      loff_t *ppos)
+static ssize_t queue_help(struct file *file,
+			  char __user *user_buf,
+			  size_t count,
+			  loff_t *ppos)
 {
 	unsigned int id = PP_QOS_INVALID_ID;
 	struct pp_qos_queue_conf conf;
 	const char *name = "set queue";
 	const char *format =
-		"echo queue=[logical_id] [field]=[value]... > set_queue";
-	u16 num_elems;
+		"echo queue=[logical_id] [field]=[value]... > queue";
+	u16 num_props;
 	ssize_t ret;
-	struct dbg_set_props *props;
+	struct dbg_prop *props;
 
-	props = kmalloc_array(DBG_MAX_PROPS, sizeof(struct dbg_set_props),
+	props = kmalloc_array(DBG_MAX_PROPS, sizeof(struct dbg_prop),
 			      GFP_KERNEL);
 	if (!props)
 		return -ENOMEM;
 
-	num_elems = create_queue_props(props, DBG_MAX_PROPS, &id, &conf);
+	num_props = create_queue_props(props, DBG_MAX_PROPS, &id, &conf);
 
-	ret = qos_dbg_set_props_help(file, user_buf, count, ppos, name, format,
-				props, num_elems);
+	ret = qos_dbg_props_help(file, user_buf, count, ppos, name, format,
+				 props, num_props);
 	kfree(props);
 
 	return ret;
@@ -711,24 +724,24 @@ static const struct file_operations debug_remove_shared_bwl_group_fops = {
 	.llseek  = default_llseek,
 };
 
-static const struct file_operations debug_set_port_fops = {
+static const struct file_operations debug_port_fops = {
 	.open    = simple_open,
-	.read    = set_port_help,
-	.write   = set_port,
+	.read    = port_help,
+	.write   = port,
 	.llseek  = default_llseek,
 };
 
-static const struct file_operations debug_set_sched_fops = {
+static const struct file_operations debug_sched_fops = {
 	.open    = simple_open,
-	.read    = set_sched_help,
-	.write   = set_sched,
+	.read    = sched_help,
+	.write   = sched,
 	.llseek  = default_llseek,
 };
 
-static const struct file_operations debug_set_queue_fops = {
+static const struct file_operations debug_queue_fops = {
 	.open    = simple_open,
-	.read    = set_queue_help,
-	.write   = set_queue,
+	.read    = queue_help,
+	.write   = queue,
 	.llseek  = default_llseek,
 };
 
@@ -974,6 +987,17 @@ static int pp_qos_dbg_gen_show(struct seq_file *s, void *unused)
 
 			seq_printf(s, "Used nodes:\t%u\nPorts:\t\t%u\nScheds:\t\t%u\nQueues:\t\t%u\nInternals:\t%u\n",
 					used, ports, scheds, queues, internals);
+			seq_printf(s, "Total Res:\t%u\n",
+				   qdev->hwconf.wred_total_avail_resources);
+			seq_printf(s, "QM ddr start:\t%#x\n",
+				   qdev->hwconf.qm_ddr_start);
+			seq_printf(s, "QM num pages:\t%u\n",
+				   qdev->hwconf.qm_num_pages);
+			seq_printf(s, "clock:\t\t%u\n", qdev->hwconf.qos_clock);
+			seq_printf(s, "wred p const:\t%u\n",
+				   qdev->hwconf.wred_const_p);
+			seq_printf(s, "max q size:\t%u\n",
+				   qdev->hwconf.wred_max_q_size);
 		} else {
 			seq_puts(s, "Device is not ready !!!!\n");
 		}
@@ -1389,16 +1413,8 @@ static int fw_logger_set(void *data, u64 val)
 		 (u32)val);
 
 	switch (val) {
-	case 0:
-		dev_info(&pdev->dev, "Optional levels:\n");
-		dev_info(&pdev->dev, "Fatal: %d\n", UC_LOGGER_LEVEL_FATAL);
-		dev_info(&pdev->dev, "Warning: %d\n", UC_LOGGER_LEVEL_WARNING);
-		dev_info(&pdev->dev, "Info: %d\n", UC_LOGGER_LEVEL_INFO);
-		dev_info(&pdev->dev, "Debug: %d\n", UC_LOGGER_LEVEL_DEBUG);
-		dev_info(&pdev->dev, "Register Dump: %d\n",
-			 UC_LOGGER_LEVEL_DUMP_REGS);
-		break;
 	case UC_LOGGER_LEVEL_FATAL:
+	case UC_LOGGER_LEVEL_ERROR:
 	case UC_LOGGER_LEVEL_WARNING:
 	case UC_LOGGER_LEVEL_INFO:
 	case UC_LOGGER_LEVEL_DEBUG:
@@ -1407,6 +1423,15 @@ static int fw_logger_set(void *data, u64 val)
 		break;
 	default:
 		dev_info(&pdev->dev, "Not supported fw logger level");
+		dev_info(&pdev->dev, "Optional levels:\n");
+		dev_info(&pdev->dev, "Fatal: %d\n", UC_LOGGER_LEVEL_FATAL);
+		dev_info(&pdev->dev, "Error: %d\n", UC_LOGGER_LEVEL_ERROR);
+		dev_info(&pdev->dev, "Warning: %d\n", UC_LOGGER_LEVEL_WARNING);
+		dev_info(&pdev->dev, "Info: %d\n", UC_LOGGER_LEVEL_INFO);
+		dev_info(&pdev->dev, "Debug: %d\n", UC_LOGGER_LEVEL_DEBUG);
+		dev_info(&pdev->dev, "Register Dump: %d\n",
+			 UC_LOGGER_LEVEL_DUMP_REGS);
+		break;
 	}
 
 	return 0;
@@ -1459,9 +1484,9 @@ static struct debugfs_file qos_debugfs_files[] = {
 	{"tree", &debug_tree_fops, 0400},
 	{"add_shared_bwl_group", &debug_add_shared_bwl_group_fops, 0400},
 	{"remove_shared_bwl_group", &debug_remove_shared_bwl_group_fops, 0400},
-	{"set_port", &debug_set_port_fops, 0400},
-	{"set_sched", &debug_set_sched_fops, 0400},
-	{"set_queue", &debug_set_queue_fops, 0400},
+	{"port", &debug_port_fops, 0400},
+	{"sched", &debug_sched_fops, 0400},
+	{"queue", &debug_queue_fops, 0400},
 };
 
 int qos_dbg_dev_init(struct platform_device *pdev)
