From f7f16da5e27a24baeea6499df492d32df55846f0 Mon Sep 17 00:00:00 2001
From: Rekha Eswaran <rekha.eswaran@intel.com>
Date: Tue, 14 Aug 2018 18:42:20 +0800
Subject: [PATCH] DRVLIB_SW-853: DP export ctp_tc api and return 'inst' for
 bridge device

---
 .../net/ethernet/lantiq/datapath/datapath_instance.c    |  2 +-
 drivers/net/ethernet/lantiq/datapath/datapath_ioctl.h   |  2 +-
 drivers/net/ethernet/lantiq/datapath/datapath_misc.c    | 17 +++++++++++++++++
 drivers/net/ethernet/lantiq/datapath/datapath_swdev.c   |  8 +++++---
 drivers/net/ethernet/lantiq/datapath/datapath_swdev.h   |  2 +-
 5 files changed, 25 insertions(+), 6 deletions(-)

diff --git a/drivers/net/ethernet/lantiq/datapath/datapath_instance.c b/drivers/net/ethernet/lantiq/datapath/datapath_instance.c
index 1e898c84d481..c942287e8e71 100644
--- a/drivers/net/ethernet/lantiq/datapath/datapath_instance.c
+++ b/drivers/net/ethernet/lantiq/datapath/datapath_instance.c
@@ -277,7 +277,7 @@ int dp_inst_add_dev(struct net_device *dev, char *subif_name, int inst,
 					 sizeof(*dev->netdev_ops),
 					 (void **)&dp_dev->old_dev_ops,
 					 &dp_dev->new_dev_ops,
-					 (unsigned long)&dp_ndo_setup_tc);
+					 &dp_ndo_setup_tc);
 			if (err)
 				return DP_FAILURE;
 		}
diff --git a/drivers/net/ethernet/lantiq/datapath/datapath_ioctl.h b/drivers/net/ethernet/lantiq/datapath/datapath_ioctl.h
index 14fa2165769d..436e378b4723 100644
--- a/drivers/net/ethernet/lantiq/datapath/datapath_ioctl.h
+++ b/drivers/net/ethernet/lantiq/datapath/datapath_ioctl.h
@@ -14,7 +14,7 @@ int dp_ops_reset(struct dp_dev *dp_dev,
 		 struct net_device *dev);
 int dp_ops_set(void **dev_ops, int ops_cb_offset,
 	       size_t ops_size, void **dp_orig_ops_cb,
-		   void *dp_new_ops, void *new_ops_cb);
+	       void *dp_new_ops, void *new_ops_cb);
 
 #endif
 /*DATAPATH_IOCTL_H*/
diff --git a/drivers/net/ethernet/lantiq/datapath/datapath_misc.c b/drivers/net/ethernet/lantiq/datapath/datapath_misc.c
index d5a328c9a305..977155eee35c 100644
--- a/drivers/net/ethernet/lantiq/datapath/datapath_misc.c
+++ b/drivers/net/ethernet/lantiq/datapath/datapath_misc.c
@@ -1121,3 +1121,20 @@ int print_symbol_name(unsigned long addr)
 	return 0;
 }
 
+int dp_ctp_tc_map_set(struct dp_tc_cfg *tc, int flag)
+
+{
+	dp_subif_t subif = {0};
+
+	if (dp_get_netif_subifid(tc->dev, NULL, NULL, NULL, &subif, 0)) {
+		DP_DEBUG(DP_DBG_FLAG_DBG, "get subifid fail(%s)\n",
+			 tc->dev ? tc->dev->name : "NULL");
+		return DP_FAILURE;
+	} else {
+		if (!dp_port_prop[subif.inst].info.dp_ctp_tc_map_set)
+			return DP_FAILURE;
+		return dp_port_prop[subif.inst].info.
+					dp_ctp_tc_map_set(tc, flag);
+	}
+}
+EXPORT_SYMBOL(dp_ctp_tc_map_set);
diff --git a/drivers/net/ethernet/lantiq/datapath/datapath_swdev.c b/drivers/net/ethernet/lantiq/datapath/datapath_swdev.c
index 18e1d88ab513..7aabed2ca367 100644
--- a/drivers/net/ethernet/lantiq/datapath/datapath_swdev.c
+++ b/drivers/net/ethernet/lantiq/datapath/datapath_swdev.c
@@ -62,15 +62,17 @@ u16 dp_swdev_cal_hash(unsigned char *name)
 	return (u16)(hash & 0x3F);
 }
 
-int dp_get_fid_by_brname(struct net_device *dev)
+int dp_get_fid_by_brname(struct net_device *dev, int *inst)
 {
 	struct br_info *br_info;
 
 	br_info = dp_swdev_bridge_entry_lookup(dev->name);
-	if (!br_info)
+	if (!br_info) {
 		return -1;
-	else
+	} else {
+		*inst = br_info->inst;
 		return br_info->fid;
+	}
 }
 
 int dp_swdev_chk_bport_in_br(struct net_device *bp_dev, int bport, int inst)
diff --git a/drivers/net/ethernet/lantiq/datapath/datapath_swdev.h b/drivers/net/ethernet/lantiq/datapath/datapath_swdev.h
index 75071d09cfcc..2aaf94b44653 100644
--- a/drivers/net/ethernet/lantiq/datapath/datapath_swdev.h
+++ b/drivers/net/ethernet/lantiq/datapath/datapath_swdev.h
@@ -63,7 +63,7 @@ int dp_swdev_bridge_id_entry_free(int instance);
 int dp_swdev_bridge_id_entry_init(void);
 struct br_info *dp_swdev_bridge_entry_lookup(char *br_name);
 int dp_swdev_chk_bport_in_br(struct net_device *bp_dev, int bport, int inst);
-int dp_get_fid_by_brname(struct net_device *dev);
+int dp_get_fid_by_brname(struct net_device *dev, int *inst);
 u16 crc_cal(const u8 *data, u16 len);
 u16 dp_swdev_cal_hash(u8 *dev_name);
 void dp_switchdev_exit(void);
