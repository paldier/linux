From ab2a92ec873d0e8f457bcaa5aadebdf66d46d4d0 Mon Sep 17 00:00:00 2001
From: Peter Harliman Liem <peter.harliman.liem@intel.com>
Date: Thu, 6 Sep 2018 13:10:21 +0800
Subject: [PATCH] DRVLIB_SW-894 - add soc data to gphy-fw driver

- Add soc_data to handle soc-dependent functions/data
  Corresponding codes are reorganized for this reason.
---
 drivers/net/ethernet/lantiq/xrx500_phy_fw.c | 222 +++++++++++++++++-----------
 1 file changed, 134 insertions(+), 88 deletions(-)

diff --git a/drivers/net/ethernet/lantiq/xrx500_phy_fw.c b/drivers/net/ethernet/lantiq/xrx500_phy_fw.c
index 56b716bede51..bc44fc893326 100644
--- a/drivers/net/ethernet/lantiq/xrx500_phy_fw.c
+++ b/drivers/net/ethernet/lantiq/xrx500_phy_fw.c
@@ -19,10 +19,17 @@
 
 struct xway_gphy_data {
 	struct device *dev;
-	struct reset_control *phy_rst[3];
 
-	dma_addr_t dma_addr; /* DMA address */
-	void *virt_addr; /* virtual address */
+	struct reset_control *phy_rst[5];
+	size_t fw_size;
+	dma_addr_t dma_addr;
+	void *virt_addr;
+
+	/* SoC specific functions/data */
+	const struct xway_gphy_soc_data {
+		int (*boot_func)(struct xway_gphy_data *);
+		int (*dt_parse_func)(struct xway_gphy_data *);
+	} *soc_data;
 };
 
 /* GPHY related */
@@ -83,27 +90,73 @@ static void gsw_reg_w32_mask(u32 base, u32 clear, u32 val, u32 reg_off)
 }
 
 /* xrx500 specific boot sequence */
-static int xrx500_gphy_boot(struct xway_gphy_data *priv, unsigned int id)
+static int xrx500_gphy_boot(struct xway_gphy_data *priv)
 {
-	if (id > 4) {
-		dev_info(priv->dev, "%u is an invalid gphy id\n", id);
-		return -EINVAL;
+	int i;
+
+	for (i = 0; i < 5; i++) {
+		if (!priv->phy_rst[i])
+			continue;
+
+		reset_control_assert(priv->phy_rst[i]);
+		gsw_reg_w32(GSW_L_TOP_BASE, (priv->dma_addr & 0xFFFF),
+			    xrx500_gphy[i]);
+		gsw_reg_w32(GSW_L_TOP_BASE, ((priv->dma_addr >> 16) & 0xFFFF),
+			    (xrx500_gphy[i] + 4));
+		reset_control_deassert(priv->phy_rst[i]);
+		dev_info(priv->dev, "booting GPHY%u firmware for GRX500\n", i);
+	}
+
+	return 0;
+}
+
+static int xrx500_dt_parse(struct xway_gphy_data *priv)
+{
+	struct property *pp;
+	unsigned char *phyids;
+	char phy_str[16];
+	int i;
+	int ret;
+
+	pp = of_find_property(priv->dev->of_node, "phy_id", NULL);
+	if (!pp)
+		return -ENOENT;
+
+	phyids = pp->value;
+	for (i = 0; i < pp->length && !ret; i++) {
+		sprintf(phy_str, "phy%d", phyids[i]);
+
+		priv->phy_rst[i] = devm_reset_control_get(priv->dev, phy_str);
+		if (IS_ERR(priv->phy_rst[i])) {
+			dev_err(priv->dev, "fail to get %s prop\n", phy_str);
+			return PTR_ERR(priv->phy_rst[i]);
+		}
 	}
-	reset_control_assert(priv->phy_rst[0]);
-	gsw_reg_w32(GSW_L_TOP_BASE, (priv->dma_addr & 0xFFFF),
-		    xrx500_gphy[id]);
-	gsw_reg_w32(GSW_L_TOP_BASE, ((priv->dma_addr >> 16) & 0xFFFF),
-		    (xrx500_gphy[id] + 4));
-	reset_control_deassert(priv->phy_rst[0]);
-	dev_info(priv->dev, "booting GPHY%u firmware at %X for GRX500\n",
-		 id, priv->dma_addr);
 
 	return 0;
 }
 
 /* prx300 specific boot sequence */
-static int prx300_gphy_boot(struct xway_gphy_data *priv, unsigned int id)
+static int prx300_gphy_boot(struct xway_gphy_data *priv)
 {
+	void *virt_addr;
+
+	/* Temporary workaround for PRX300 GPHY issue.
+	 * Firmware loading in PRX300 GPHY does not work if address
+	 * is in DDR. For this reason we hardcode the address to SRAM
+	 * location (which is assumed to be free at the beginning of
+	 * boot).
+	 */
+	virt_addr = devm_ioremap_nocache(priv->dev, PRX300_FW_LOAD_ADDR,
+					 priv->fw_size);
+	memcpy(virt_addr, priv->virt_addr, priv->fw_size);
+	dma_free_coherent(priv->dev, priv->fw_size, priv->virt_addr,
+			  priv->dma_addr);
+	priv->dma_addr = (dma_addr_t)PRX300_FW_LOAD_ADDR;
+	priv->virt_addr = virt_addr;
+	dev_info(priv->dev, "Temporary use SRAM for firmware %p:%x\n",
+		 priv->virt_addr, priv->dma_addr);
+
 	/* set LAN interface to GPHY */
 	gsw_reg_w32_mask(PRX300_CHIP_TOP, 0x2, 0x0, PRX300_IFMUX_CFG);
 
@@ -148,18 +201,46 @@ static int prx300_gphy_boot(struct xway_gphy_data *priv, unsigned int id)
 	/* delay to wait until firmware boots up */
 	msleep(100);
 
-	dev_info(priv->dev, "booting GPHY%u firmware at %X for PRX300\n",
-		 id, priv->dma_addr);
+	dev_info(priv->dev, "booting GPHY firmware for PRX300\n");
 
 	devm_iounmap(priv->dev, priv->virt_addr);
 	return 0;
 }
 
+static int prx300_dt_parse(struct xway_gphy_data *priv)
+{
+	char phy_str[16];
+
+	sprintf(phy_str, "phy%d", 0);
+	priv->phy_rst[0] = devm_reset_control_get(priv->dev, phy_str);
+	if (IS_ERR(priv->phy_rst[0])) {
+		dev_err(priv->dev, "fail to get %s prop\n", phy_str);
+		return PTR_ERR(priv->phy_rst[0]);
+	}
+
+	/* phy cdb reset */
+	sprintf(phy_str, "phy_cdb%d", 0);
+	priv->phy_rst[1] = devm_reset_control_get(priv->dev, phy_str);
+	if (IS_ERR(priv->phy_rst[1])) {
+		dev_err(priv->dev, "fail to get %s prop\n", phy_str);
+		return PTR_ERR(priv->phy_rst[1]);
+	}
+
+	/* phy power down */
+	sprintf(phy_str, "phy_pwr_down%d", 0);
+	priv->phy_rst[2] = devm_reset_control_get(priv->dev, phy_str);
+	if (IS_ERR(priv->phy_rst[2])) {
+		dev_err(priv->dev, "fail to get %s prop\n", phy_str);
+		return PTR_ERR(priv->phy_rst[2]);
+	}
+
+	return 0;
+}
+
 static int xway_gphy_load(struct xway_gphy_data *priv)
 {
 	const struct firmware *fw;
 	const char *fw_name;
-	size_t size;
 
 	if (of_property_read_string(priv->dev->of_node, "firmware", &fw_name)) {
 		dev_err(priv->dev, "failed to load firmware filename\n");
@@ -176,27 +257,9 @@ static int xway_gphy_load(struct xway_gphy_data *priv)
 	 * GPHY cores need the firmware code in a persistent and contiguous
 	 * memory area with a 16 kB boundary aligned start address
 	 */
-	size = fw->size + XRX200_GPHY_FW_ALIGN;
-
-	if (of_device_is_compatible(priv->dev->of_node, "intel,phy-prx300")) {
-		/* Temporary workaround for PRX300 GPHY issue.
-		 * Firmware loading in PRX300 GPHY does not work if address
-		 * is in DDR. For this reason we hardcode the address to SRAM
-		 * location (which is assumed to be free at the beginning of
-		 * boot).
-		 */
-		priv->dma_addr = (dma_addr_t)PRX300_FW_LOAD_ADDR;
-		priv->virt_addr = devm_ioremap_nocache(priv->dev,
-						       PRX300_FW_LOAD_ADDR,
-						       size);
-		dev_info(priv->dev, "Temporary use SRAM for firmware %p:%x\n",
-			 priv->virt_addr, priv->dma_addr);
-	} else {
-		priv->virt_addr = dma_alloc_coherent(priv->dev, size,
-						     &priv->dma_addr,
-						     GFP_KERNEL);
-	}
-
+	priv->fw_size = fw->size + XRX200_GPHY_FW_ALIGN;
+	priv->virt_addr = dma_alloc_coherent(priv->dev, priv->fw_size,
+					     &priv->dma_addr, GFP_KERNEL);
 	if (!priv->virt_addr) {
 		dev_err(priv->dev, "failed to alloc firmware memory\n");
 		release_firmware(fw);
@@ -213,10 +276,7 @@ static int xway_gphy_load(struct xway_gphy_data *priv)
 
 static int xway_phy_fw_probe(struct platform_device *pdev)
 {
-	struct property *pp;
-	unsigned char *phyids;
-	int i, ret = 0;
-	char phy_str[16];
+	int ret = 0;
 	struct xway_gphy_data *priv;
 
 	priv = devm_kzalloc(&pdev->dev, sizeof(*priv), GFP_KERNEL);
@@ -225,56 +285,26 @@ static int xway_phy_fw_probe(struct platform_device *pdev)
 		return -ENOMEM;
 	}
 
+	priv->soc_data = of_device_get_match_data(&pdev->dev);
+	if (!priv->soc_data) {
+		dev_err(&pdev->dev, "Failed to find soc data!\n");
+		return -ENODEV;
+	}
+
 	priv->dev = &pdev->dev;
 	platform_set_drvdata(pdev, priv);
 
+	ret = priv->soc_data->dt_parse_func(priv);
+	if (ret)
+		return -EINVAL;
+
 	ret = xway_gphy_load(priv);
 	if (ret)
 		return -EPROBE_DEFER;
 
-	pp = of_find_property(pdev->dev.of_node, "phy_id", NULL);
-	if (!pp)
-		return -ENOENT;
-
-	phyids = pp->value;
-	for (i = 0; i < pp->length && !ret; i++) {
-		sprintf(phy_str, "phy%d", phyids[i]);
-		priv->phy_rst[0] = devm_reset_control_get(&pdev->dev, phy_str);
-		if (IS_ERR(priv->phy_rst[0])) {
-			dev_err(&pdev->dev, "fail to get %s prop\n", phy_str);
-			return PTR_ERR(priv->phy_rst[0]);
-		}
-
-		if (of_device_is_compatible(pdev->dev.of_node,
-					    "lantiq,phy-xrx500")) {
-			ret = xrx500_gphy_boot(priv, phyids[i]);
-		} else if (of_device_is_compatible(pdev->dev.of_node,
-						   "intel,phy-prx300")) {
-			/* phy cdb reset */
-			sprintf(phy_str, "phy_cdb%d", phyids[i]);
-			priv->phy_rst[1] = devm_reset_control_get(&pdev->dev,
-								  phy_str);
-			if (IS_ERR(priv->phy_rst[1])) {
-				dev_err(&pdev->dev, "fail to get %s prop\n",
-					phy_str);
-				return PTR_ERR(priv->phy_rst[1]);
-			}
-
-			/* phy power down */
-			sprintf(phy_str, "phy_pwr_down%d", phyids[i]);
-			priv->phy_rst[2] = devm_reset_control_get(&pdev->dev,
-								  phy_str);
-			if (IS_ERR(priv->phy_rst[2])) {
-				dev_err(&pdev->dev, "fail to get %s prop\n",
-					phy_str);
-				return PTR_ERR(priv->phy_rst[2]);
-			}
-
-			ret = prx300_gphy_boot(priv, phyids[i]);
-		}
-	}
+	ret = priv->soc_data->boot_func(priv);
 	if (!ret)
-		mdelay(100);
+		msleep(100);
 
 	g_xway_gphy_fw_loaded = 1;
 	return ret;
@@ -289,9 +319,25 @@ bool is_xway_gphy_fw_loaded(void)
 }
 EXPORT_SYMBOL(is_xway_gphy_fw_loaded);
 
+static struct xway_gphy_soc_data xrx500_gphy_data = {
+	.boot_func = &xrx500_gphy_boot,
+	.dt_parse_func = &xrx500_dt_parse,
+};
+
+static struct xway_gphy_soc_data prx300_gphy_data = {
+	.boot_func = &prx300_gphy_boot,
+	.dt_parse_func = &prx300_dt_parse,
+};
+
 static const struct of_device_id xway_phy_match[] = {
-	{ .compatible = "lantiq,phy-xrx500" },
-	{ .compatible = "intel,phy-prx300" },
+	{
+		.compatible = "lantiq,phy-xrx500",
+		.data = &xrx500_gphy_data,
+	},
+	{
+		.compatible = "intel,phy-prx300",
+		.data = &prx300_gphy_data,
+	},
 	{},
 };
 MODULE_DEVICE_TABLE(of, xway_phy_match);
