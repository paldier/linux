From 38046971442debd784ad97797643a7c286fde60a Mon Sep 17 00:00:00 2001
From: vayyathx <vijayakannanx.ayyathurai@intel.com>
Date: Thu, 18 Oct 2018 22:44:42 +0800
Subject: [PATCH] DRVLIB_SW-945: Remove metering support in ethernet driver

---
 drivers/net/ethernet/lantiq/ltq_eth_drv_xrx500.c | 333 -----------------------
 1 file changed, 333 deletions(-)

diff --git a/drivers/net/ethernet/lantiq/ltq_eth_drv_xrx500.c b/drivers/net/ethernet/lantiq/ltq_eth_drv_xrx500.c
index c03b179e8c51..83e21aa991c2 100644
--- a/drivers/net/ethernet/lantiq/ltq_eth_drv_xrx500.c
+++ b/drivers/net/ethernet/lantiq/ltq_eth_drv_xrx500.c
@@ -2,7 +2,6 @@
 /* Copyright (C) 2009~2015 Lantiq Deutschland GmbH
  * Copyright (C) 2016~2018 Intel Corporation.
  */
-
 #define CONFIG_USERSPACE_LINK_NOTIFICATION
 
 #include <linux/version.h>
@@ -90,19 +89,6 @@ static int32_t dp_fp_restart_tx(struct net_device *);
 static int32_t dp_fp_rx(struct net_device *, struct net_device *,
 			struct sk_buff *, int32_t);
 
-#ifdef CONFIG_XRX500_ETH_DRV_COC_SUPPORT
-static int32_t dp_fp_coc_confirm(enum ltq_cpufreq_state new_state,
-				 enum ltq_cpufreq_state old_state, u32 flags);
-DECLARE_BITMAP(g_ltq_eth_intr_type, LTQ_ETH_NUM_INTERRUPTS);
-static u32 g_ltq_eth_gswl_irq;
-static struct tasklet_struct gswl_tasklet;
-
-DECLARE_BITMAP(g_ltq_pae_intr_type, LTQ_ETH_NUM_INTERRUPTS);
-static u32 g_ltq_pae_irq;
-static struct tasklet_struct pae_tasklet;
-static enum ltq_cpufreq_state g_ltq_eth_drv_coc_state = LTQ_CPUFREQ_PS_D0;
-#endif
-
 static struct xrx500_hw xrx500_hw;
 
 static char wan_iface[IFNAMSIZ] = "eth1";
@@ -1294,9 +1280,6 @@ static int xrx500_of_iface(struct xrx500_hw *hw, struct device_node *iface,
 	cb.stop_fn = (dp_stop_tx_fn_t)dp_fp_stop_tx;
 	cb.restart_fn  = (dp_restart_tx_fn_t)dp_fp_restart_tx;
 	cb.rx_fn = (dp_rx_fn_t)dp_fp_rx;
-#ifdef CONFIG_XRX500_ETH_DRV_COC_SUPPORT
-	cb.dp_coc_confirm_stat_fn = (dp_coc_confirm_stat) dp_fp_coc_confirm;
-#endif
 
 	if (dp_register_dev(priv->owner, dp_port_id, &cb, 0) != DP_SUCCESS) {
 		pr_err("dp_register_dev failed for %s\n and port_id %d",
@@ -1642,282 +1625,6 @@ static int xrx500_mdio_probe(struct net_device *dev, struct xrx500_port *port)
 	return 0;
 }
 
-#ifdef CONFIG_XRX500_ETH_DRV_COC_SUPPORT
-/* switch api related routines */
-/*Base address GSWIP-L */
-static void __iomem *ltq_eth_gswl_base = (void __iomem *)KSEG1ADDR(0x1c000000);
-/* Base address GSWIP-R */
-static void __iomem *ltq_eth_gswr_base = (void __iomem *)KSEG1ADDR(0x1a000000);
-
-/** read the gswitch register */
-static void ltq_eth_gsw_r32(void __iomem *gsw_base, short offset, short shift,
-			    short size, u32 *value)
-{
-	u32 rvalue, mask;
-
-	rvalue = ltq_r32(gsw_base + (offset * 4));
-	mask = (1 << size) - 1;
-	rvalue = (rvalue >> shift);
-	*value = (rvalue & mask);
-}
-
-/** read and update the GSWIP register */
-static void ltq_eth_gsw_w32(void __iomem *gsw_base, short offset, short shift,
-			    short size, u32 value)
-{
-	u32 rvalue, mask;
-
-	rvalue = ltq_r32(gsw_base + (offset * 4));
-	mask = (1 << size) - 1;
-	mask = (mask << shift);
-	value = ((value << shift) & mask);
-	value = ((rvalue & ~mask) | value);
-	ltq_w32(value, (gsw_base + (offset * 4)));
-}
-
-static int32_t dp_fp_coc_confirm(enum ltq_cpufreq_state new_state,
-				 enum ltq_cpufreq_state old_state,
-				 u32 flags)
-{
-	GSW_register_t reg_cfg;
-	int ret;
-
-	if ((new_state != g_ltq_eth_drv_coc_state) &&
-	    (new_state != LTQ_CPUFREQ_PS_D0)) {
-		pr_debug("%s: CoC state changed from: %d to : %d enable irq!\n",
-			 __func__, g_ltq_eth_drv_coc_state, new_state);
-
-		/* Do the GSW-L configuration */
-		struct core_ops *ops = gsw_get_swcore_ops(0);
-
-		if (!ops) {
-			pr_err("%s: Open SWAPI device FAILED!\n", __func__);
-			return -EIO;
-		}
-
-		/* Clear the BM interrupt */
-		gsw_reg_set_val(ops, 0x55, 0x100);
-
-		/* Enable the BM interrupt */
-		gsw_reg_set_bit(ops, 0x14, 0x1);
-
-		/* Enable the QCGN interrupt */
-		gsw_reg_set_bit(ops, 0x54, 0x100);
-
-		/* Do the PAE configuration */
-		ops = gsw_get_swcore_ops(1);
-
-		if (!ops) {
-			pr_err("%s: Open SWAPI device FAILED!\n", __func__);
-			return -EIO;
-		}
-
-		/* Clear all the pending metering interrupt */
-		gsw_reg_set_val(ops, 0x489, 0x100);
-
-		/* Enable the PCE interrupt */
-		gsw_reg_set_bit(ops, 0x14, 0x2);
-
-		/* Enable PCE interrupt for port 0 */
-		gsw_reg_set_bit(ops, 0x465, 0x1);
-
-		/* Enable metering interrupt inside PCE */
-		gsw_reg_set_bit(ops, 0x488, 0x100);
-
-	} else if (g_ltq_eth_drv_coc_state != new_state &&
-		   new_state == LTQ_CPUFREQ_PS_D0) {
-		pr_debug("%s: CoC state changed from : %d to : %d.\n",
-			 __func__, g_ltq_eth_drv_coc_state, new_state);
-		/*disable_irq(g_ltq_eth_gswl_irq);*/
-	} else {
-		pr_debug("duplicate call to confirm to new state: %d!\n",
-			 new_state);
-	}
-
-	g_ltq_eth_drv_coc_state =  new_state;
-	return 0;
-}
-
-static void ltq_eth_gswl_tasklet(unsigned long ptr)
-{
-	GSW_register_t reg_cfg;
-	GSW_API_HANDLE gswl;
-	u32 intr_type, irq_status;
-	int ret = 0;
-
-	pr_debug("tasklet called..\n");
-	/* Do the GSW-L configuration */
-	struct core_ops *ops = gsw_get_swcore_ops(0);
-
-	if (!ops) {
-		pr_err("%s: Open SWAPI device FAILED!\n", __func__);
-		return -EIO;
-	}
-
-	while (!bitmap_empty(g_ltq_eth_intr_type, LTQ_ETH_NUM_INTERRUPTS)) {
-		intr_type = find_first_bit(g_ltq_eth_intr_type,
-					   LTQ_ETH_NUM_INTERRUPTS);
-
-		/* Read the status */
-		switch (intr_type) {
-		case 1:
-
-			irq_status = gsw_reg_get_val(ops, 0x55);
-			pr_debug("BM interrupt with status: %x!\n", irq_status);
-
-			/* Egress Queue Congestion Status Change */
-			if (irq_status & 0x100) {
-				/* Mask the interrupt */
-				gsw_reg_clr_bit(ops, 0x54, 0x100);
-
-				/* Clear all the interrupts */
-				gsw_reg_set_val(ops, 0x55, irq_status);
-
-				/* Clear at the top level */
-				gsw_reg_set_val(ops, 0x15, 1);
-
-				/* There is some traffic, so call the dp library
-				 * to change the power state to upscale
-				 */
-				dp_coc_new_stat_req(LTQ_CPUFREQ_PS_D0,
-						    DP_COC_REQ_ETHERNET);
-
-			} else {
-				pr_err("non QCGN interrupts from BM are not handled !");
-			}
-			clear_bit(1, g_ltq_eth_intr_type);
-			break;
-
-		default:
-			pr_err("%s: this irq is not handled..\n", __func__);
-			break;
-		}
-	}
-}
-
-static irqreturn_t ltq_eth_gswl_isr(int irq, void *dev_id)
-{
-	u32 irq_status, irq_mask;
-
-	ltq_eth_gsw_r32(ltq_eth_gswl_base, 0x15, 0, 16, &irq_status);
-
-	/* Buffer Manager Interrupt */
-	if (irq_status & 0x1) {
-		/* Mask the BM Interrupt */
-		ltq_eth_gsw_r32(ltq_eth_gswl_base, 0x14, 0, 16, &irq_mask);
-
-		irq_mask &= ~0x1;
-		ltq_eth_gsw_w32(ltq_eth_gswl_base, 0x14, 0, 16, irq_mask);
-
-		set_bit(1, g_ltq_eth_intr_type);
-
-		/* Schedule the tasklet */
-		tasklet_schedule(&gswl_tasklet);
-	} else {
-		pr_err("%s: ..........: %x", __func__, irq_status);
-	}
-
-	return IRQ_HANDLED;
-}
-
-/* PAE interrupt related */
-
-static irqreturn_t ltq_eth_pae_isr(int irq, void *dev_id)
-{
-	u32 irq_status, irq_mask;
-
-	ltq_eth_gsw_r32(ltq_eth_gswr_base, 0x15, 0, 16, &irq_status);
-
-	/* PCE interrupt */
-	if (irq_status & 0x2) {
-		ltq_eth_gsw_r32(ltq_eth_gswr_base, 0x14, 0, 16, &irq_mask);
-
-		irq_mask &= ~0x2;
-		ltq_eth_gsw_w32(ltq_eth_gswr_base, 0x14, 0, 16, irq_mask);
-
-		set_bit(2, g_ltq_pae_intr_type);
-
-		/* Schedule the tasklet */
-		tasklet_schedule(&pae_tasklet);
-	} else {
-		pr_err("%s: ..........: %x", __func__, irq_status);
-	}
-	return IRQ_HANDLED;
-}
-
-static void ltq_eth_pae_tasklet(unsigned long ptr)
-{
-	GSW_register_t reg_cfg;
-	GSW_API_HANDLE gswr;
-	u32 intr_type, pce_irq_status;
-	int ret;
-
-	pr_debug("PAE tasklet called..\n");
-	struct core_ops *ops = gsw_get_swcore_ops(1);
-
-	if (!ops) {
-		pr_err("%s: Open SWAPI device FAILED!\n", __func__);
-		return -EIO;
-	}
-
-	while (!bitmap_empty(g_ltq_pae_intr_type, LTQ_ETH_NUM_INTERRUPTS)) {
-		intr_type = find_first_bit(g_ltq_pae_intr_type,
-					   LTQ_ETH_NUM_INTERRUPTS);
-
-		switch (intr_type) {
-		/* PCE interrupt */
-		case 2:
-			/* Find out the port */
-
-			pr_debug("PCE isr_0: %x!\n",
-				 gsw_reg_get_val(ops, 0x467));
-
-			/* Support only for port 0 */
-			if (gsw_reg_get_val(ops, 0x467) & 0x1) {
-				pce_irq_status = gsw_reg_get_val(ops, 0x489);
-				pr_debug("PCE isr_0 internal: %x!\n",
-					 pce_irq_status);
-
-				/* Metering based bp status change interrupt */
-				if (pce_irq_status & 0x100) {
-					/* Mask the interrupt */
-					gsw_reg_clr_bit(ops, 0x488, 0x100);
-
-					/* Clear all the interrupts */
-					gsw_reg_set_val(ops, 0x467, 1);
-
-					gsw_reg_set_val(ops, 0x489,
-							pce_irq_status);
-
-					/* There is some traffic, so call the
-					 * datapth library to change the power
-					 * state to upscale
-					 */
-					dp_coc_new_stat_req(LTQ_CPUFREQ_PS_D0,
-							    DP_COC_REQ_ETHERNET);
-
-				} else {
-					pr_err("non metering intr not handled!");
-					break;
-				}
-
-				clear_bit(2, g_ltq_pae_intr_type);
-			} else {
-				pr_err("%s: only port 0 irq is handled..\n",
-				       __func__);
-				return;
-			}
-
-			break;
-
-		default:
-			pr_err("%s: this irq is not handled..\n", __func__);
-			break;
-		}
-	}
-}
-#endif
-
 /* Initialization Ethernet module */
 static int ltq_eth_drv_init(struct platform_device *pdev)
 {
@@ -1925,9 +1632,6 @@ static int ltq_eth_drv_init(struct platform_device *pdev)
 	struct device_node *node = pdev->dev.of_node;
 	struct device_node *mdio_np, *iface_np;
 	struct mii_bus *bus;
-#ifdef CONFIG_XRX500_ETH_DRV_COC_SUPPORT
-	struct resource irqres[2];
-#endif
 
 	memset(g_ltq_eth_module, 0, sizeof(g_ltq_eth_module));
 
@@ -2011,43 +1715,6 @@ static int ltq_eth_drv_init(struct platform_device *pdev)
 	/* Register the netlink notification */
 	ltq_eth_genetlink_init();
 #endif
-
-#ifdef CONFIG_XRX500_ETH_DRV_COC_SUPPORT
-
-	if (of_irq_to_resource_table(node, irqres, 2) == 2) {
-		/* GSW-L interrupt */
-		if (devm_request_irq(&pdev->dev, irqres[0].start,
-				     ltq_eth_gswl_isr, 0,
-				     "gswl_irq", NULL)) {
-			pr_err("%s: failed to request gswl irq - ", __func__);
-			goto err1;
-		}
-
-		tasklet_init(&gswl_tasklet, ltq_eth_gswl_tasklet, 0);
-		bitmap_zero(g_ltq_eth_intr_type, LTQ_ETH_NUM_INTERRUPTS);
-		/* Keep the interrupt disabled till the low power mode*/
-		/*disable_irq(irqres.start);*/
-		g_ltq_eth_gswl_irq = irqres[0].start;
-
-		/* PAE interrupt */
-		if (devm_request_irq(&pdev->dev, irqres[1].start,
-				     ltq_eth_pae_isr, 0,
-				     "pae_irq", NULL)) {
-			pr_err("%s: failed to request pae irq - ",
-			       __func__);
-			goto err1;
-		}
-
-		tasklet_init(&pae_tasklet, ltq_eth_pae_tasklet, 0);
-		bitmap_zero(g_ltq_pae_intr_type, LTQ_ETH_NUM_INTERRUPTS);
-		g_ltq_pae_irq = irqres[1].start;
-	} else {
-		pr_err("%s: couldn't get irq from device tree for CoC.\n",
-		       __func__);
-	}
-
-err1:
-#endif
 	pr_info("Lantiq ethernet driver for XRX500 init.\n");
 	return 0;
 }
