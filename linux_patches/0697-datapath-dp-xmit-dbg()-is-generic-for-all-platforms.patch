From b260ed4413f2218865092751d7ee00725366f342 Mon Sep 17 00:00:00 2001
From: Li Yin <yin1.li@intel.com>
Date: Thu, 9 May 2019 11:38:45 +0800
Subject: [PATCH] datapath: dp_xmit_dbg() is generic for all platforms

---
 drivers/net/datapath/dpm/datapath_tx.c         |  88 ++++++++++++++++++++
 drivers/net/datapath/dpm/datapath_tx.h         |   4 +
 drivers/net/datapath/dpm/gswip32/datapath_tx.c | 106 ++-----------------------
 3 files changed, 97 insertions(+), 101 deletions(-)

diff --git a/drivers/net/datapath/dpm/datapath_tx.c b/drivers/net/datapath/dpm/datapath_tx.c
index 101964df7a43..86ea8e1b5c28 100644
--- a/drivers/net/datapath/dpm/datapath_tx.c
+++ b/drivers/net/datapath/dpm/datapath_tx.c
@@ -46,6 +46,94 @@ struct dp_tx_context {
 
 static struct dp_tx_context *dp_tx_ctx;
 
+void dp_tx_dbg(char *title, struct sk_buff *skb, s32 ep, s32 len, u32 flags,
+	       struct pmac_tx_hdr *pmac, struct dp_subif *rx_subif,
+	       int need_pmac, int gso, int checksum)
+{
+#if defined(DP_SKB_HACK)
+	DP_DEBUG(DP_DBG_FLAG_DUMP_TX,
+		 "%s: dp_xmit:skb->data/len=0x%px/%d data_ptr=%x from port=%d and subitf=%d\n",
+		 title,
+		 skb->data, len,
+		 ((struct dma_tx_desc_2 *)&skb->DW2)->field.data_ptr,
+		 ep, rx_subif->subif);
+#endif
+	if (dp_dbg_flag & DP_DBG_FLAG_DUMP_TX_DATA) {
+		if (pmac) {
+			dp_dump_raw_data((char *)pmac, PMAC_SIZE, "Tx Data");
+			dp_dump_raw_data(skb->data,
+					 skb->len,
+					 "Tx Data");
+		} else
+			dp_dump_raw_data(skb->data,
+					 skb->len,
+					 "Tx Data");
+	}
+
+	DP_DEBUG(DP_DBG_FLAG_DUMP_TX_SUM,
+		 "ip_summed=%s(%d) encapsulation=%s\n",
+		 dp_skb_csum_str(skb), skb->ip_summed,
+		 skb->encapsulation ? "Yes" : "No");
+
+	if (skb->encapsulation)
+		DP_DEBUG(DP_DBG_FLAG_DUMP_TX_SUM,
+			 "inner ip start=0x%lx(%d), transport=0x%lx(%d)\n",
+			 (unsigned long)skb_inner_network_header(skb),
+			 (int)(skb_inner_network_header(skb) -
+			       skb->data),
+			 (unsigned long)
+			 skb_inner_transport_header(skb),
+			 (int)(skb_inner_transport_header(skb) -
+			       skb_inner_network_header(skb)));
+	else
+		DP_DEBUG(DP_DBG_FLAG_DUMP_TX_SUM,
+			 "ip start=0x%lx(%d), transport=0x%lx(%d)\n",
+			 (unsigned long) skb_network_header(skb),
+			 (int)(skb_network_header(skb) - skb->data),
+			 (unsigned long)skb_transport_header(skb),
+			 (int)(skb_transport_header(skb) -
+			       skb_network_header(skb)));
+
+	if (dp_dbg_flag & DP_DBG_FLAG_DUMP_TX_DESCRIPTOR)
+#if defined(DP_SKB_HACK)
+		dp_port_prop[0].info.dump_tx_dma_desc(
+			(struct dma_tx_desc_0 *)&skb->DW0,
+			(struct dma_tx_desc_1 *)&skb->DW1,
+			(struct dma_tx_desc_2 *)&skb->DW2,
+			(struct dma_tx_desc_3 *)&skb->DW3);
+#else
+	;
+#endif
+
+	DP_DEBUG(DP_DBG_FLAG_DUMP_TX, "flags=0x%x skb->len=%d\n",
+		 flags, skb->len);
+	DP_DEBUG(DP_DBG_FLAG_DUMP_TX,
+		 "skb->data=0x%px with pmac hdr size=%zu\n", skb->data,
+		 sizeof(struct pmac_tx_hdr));
+
+	if (need_pmac) { /*insert one pmac header */
+		DP_DEBUG(DP_DBG_FLAG_DUMP_TX,
+			 "need pmac\n");
+
+		if (pmac && (dp_dbg_flag & DP_DBG_FLAG_DUMP_TX_DESCRIPTOR))
+			dp_port_prop[0].info.dump_tx_pmac(pmac);
+	} else {
+		DP_DEBUG(DP_DBG_FLAG_DUMP_TX, "no pmac\n");
+	}
+
+	if (gso)
+		DP_DEBUG(DP_DBG_FLAG_DUMP_TX, "GSO pkt\n");
+	else
+		DP_DEBUG(DP_DBG_FLAG_DUMP_TX, "Non-GSO pkt\n");
+
+	if (checksum)
+		DP_DEBUG(DP_DBG_FLAG_DUMP_TX, "Need checksum offload\n");
+	else
+		DP_DEBUG(DP_DBG_FLAG_DUMP_TX, "No need checksum offload pkt\n");
+
+	DP_DEBUG(DP_DBG_FLAG_DUMP_TX, "\n\n");
+}
+
 int dp_tx_err(struct sk_buff *skb, struct dp_tx_common *cmn, int ret)
 {
 	switch (ret) {
diff --git a/drivers/net/datapath/dpm/datapath_tx.h b/drivers/net/datapath/dpm/datapath_tx.h
index eb423c869d48..b7bb7f8b5326 100644
--- a/drivers/net/datapath/dpm/datapath_tx.h
+++ b/drivers/net/datapath/dpm/datapath_tx.h
@@ -17,4 +17,8 @@ int dp_tx_start(struct sk_buff *skb, struct dp_tx_common *cmn);
 
 int dp_tx_err(struct sk_buff *skb, struct dp_tx_common *cmn, int ret);
 
+void dp_tx_dbg(char *title, struct sk_buff *skb, s32 ep, s32 len, u32 flags,
+	       struct pmac_tx_hdr *pmac, struct dp_subif *rx_subif,
+	       int need_pmac, int gso, int checksum);
+
 #endif /* end of include guard: DATAPATH_TX_H_7PAJCKO6 */
diff --git a/drivers/net/datapath/dpm/gswip32/datapath_tx.c b/drivers/net/datapath/dpm/gswip32/datapath_tx.c
index 1a32c6a2b46e..bc040266987f 100644
--- a/drivers/net/datapath/dpm/gswip32/datapath_tx.c
+++ b/drivers/net/datapath/dpm/gswip32/datapath_tx.c
@@ -79,102 +79,6 @@ int dp_tx_init_32(int inst)
 	return dp_tx_update_list();
 }
 
-void dp_xmit_dbg(
-	char *title,
-	struct sk_buff *skb,
-	s32 ep,
-	s32 len,
-	u32 flags,
-	struct pmac_tx_hdr *pmac,
-	dp_subif_t *rx_subif,
-	int need_pmac,
-	int gso,
-	int checksum)
-{
-#if defined(DP_SKB_HACK)
-	DP_DEBUG(DP_DBG_FLAG_DUMP_TX,
-		 "%s: dp_xmit:skb->data/len=0x%px/%d data_ptr=%x from port=%d and subitf=%d\n",
-		 title,
-		 skb->data, len,
-		 ((struct dma_tx_desc_2 *)&skb->DW2)->field.data_ptr,
-		 ep, rx_subif->subif);
-#endif
-	if (dp_dbg_flag & DP_DBG_FLAG_DUMP_TX_DATA) {
-		if (pmac) {
-			dp_dump_raw_data((char *)pmac, PMAC_SIZE, "Tx Data");
-			dp_dump_raw_data(skb->data,
-					 skb->len,
-					 "Tx Data");
-		} else
-			dp_dump_raw_data(skb->data,
-					 skb->len,
-					 "Tx Data");
-	}
-
-	DP_DEBUG(DP_DBG_FLAG_DUMP_TX_SUM,
-		 "ip_summed=%s(%d) encapsulation=%s\n",
-		 dp_skb_csum_str(skb), skb->ip_summed,
-		 skb->encapsulation ? "Yes" : "No");
-
-	if (skb->encapsulation)
-		DP_DEBUG(DP_DBG_FLAG_DUMP_TX_SUM,
-			 "inner ip start=0x%lx(%d), transport=0x%lx(%d)\n",
-			 (unsigned long)skb_inner_network_header(skb),
-			 (int)(skb_inner_network_header(skb) -
-			       skb->data),
-			 (unsigned long)
-			 skb_inner_transport_header(skb),
-			 (int)(skb_inner_transport_header(skb) -
-			       skb_inner_network_header(skb)));
-	else
-		DP_DEBUG(DP_DBG_FLAG_DUMP_TX_SUM,
-			 "ip start=0x%lx(%d), transport=0x%lx(%d)\n",
-			 (unsigned long) skb_network_header(skb),
-			 (int)(skb_network_header(skb) - skb->data),
-			 (unsigned long)skb_transport_header(skb),
-			 (int)(skb_transport_header(skb) -
-			       skb_network_header(skb)));
-
-	if (dp_dbg_flag & DP_DBG_FLAG_DUMP_TX_DESCRIPTOR)
-#if defined(DP_SKB_HACK)
-		dp_port_prop[0].info.dump_tx_dma_desc(
-			(struct dma_tx_desc_0 *)&skb->DW0,
-			(struct dma_tx_desc_1 *)&skb->DW1,
-			(struct dma_tx_desc_2 *)&skb->DW2,
-			(struct dma_tx_desc_3 *)&skb->DW3);
-#else
-	;
-#endif
-
-	DP_DEBUG(DP_DBG_FLAG_DUMP_TX, "flags=0x%x skb->len=%d\n",
-		 flags, skb->len);
-	DP_DEBUG(DP_DBG_FLAG_DUMP_TX,
-		 "skb->data=0x%px with pmac hdr size=%zu\n", skb->data,
-		 sizeof(struct pmac_tx_hdr));
-
-	if (need_pmac) { /*insert one pmac header */
-		DP_DEBUG(DP_DBG_FLAG_DUMP_TX,
-			 "need pmac\n");
-
-		if (pmac && (dp_dbg_flag & DP_DBG_FLAG_DUMP_TX_DESCRIPTOR))
-			dp_port_prop[0].info.dump_tx_pmac(pmac);
-	} else {
-		DP_DEBUG(DP_DBG_FLAG_DUMP_TX, "no pmac\n");
-	}
-
-	if (gso)
-		DP_DEBUG(DP_DBG_FLAG_DUMP_TX, "GSO pkt\n");
-	else
-		DP_DEBUG(DP_DBG_FLAG_DUMP_TX, "Non-GSO pkt\n");
-
-	if (checksum)
-		DP_DEBUG(DP_DBG_FLAG_DUMP_TX, "Need checksum offload\n");
-	else
-		DP_DEBUG(DP_DBG_FLAG_DUMP_TX, "No need checksum offload pkt\n");
-
-	DP_DEBUG(DP_DBG_FLAG_DUMP_TX, "\n\n");
-}
-
 int32_t dp_xmit_32(struct net_device *rx_if, dp_subif_t *rx_subif,
 		   struct sk_buff *skb, int32_t len, uint32_t flags)
 {
@@ -232,8 +136,8 @@ int32_t dp_xmit_32(struct net_device *rx_if, dp_subif_t *rx_subif,
 		return dp_tx_err(skb, &tx.cmn, DP_XMIT_ERR_NULL_IF);
 
 	if (unlikely(dp_dbg_flag))
-		dp_xmit_dbg("\nOrig", skb, tx.cmn.dpid, len, flags,
-			    NULL, rx_subif, 0, 0, flags & DP_TX_CAL_CHKSUM);
+		dp_tx_dbg("\nOrig", skb, tx.cmn.dpid, len, flags, NULL,
+			  rx_subif, 0, 0, flags & DP_TX_CAL_CHKSUM);
 
 	/**********************************************
 	 *Must put these 4 lines after INSERT_PMAC
@@ -401,9 +305,9 @@ int32_t dp_xmit_32(struct net_device *rx_if, dp_subif_t *rx_subif,
 	if (unlikely(dp_dbg_flag)) {
 		bool insert = tx.cmn.flags & DP_TX_FLAG_INSERT_PMAC;
 
-		dp_xmit_dbg("After", skb, tx.cmn.dpid, len, flags,
-			    insert ? &pmac : NULL, rx_subif, insert,
-			    skb_is_gso(skb), tx_chksum_flag);
+		dp_tx_dbg("After", skb, tx.cmn.dpid, len, flags,
+			  insert ? &pmac : NULL, rx_subif, insert,
+			  skb_is_gso(skb), tx_chksum_flag);
 	}
 
 	err_ret = dp_tx_start(skb, &tx.cmn);
