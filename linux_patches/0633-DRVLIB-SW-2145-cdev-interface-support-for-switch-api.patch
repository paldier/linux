From 330a403f9f3bab9a9b21ac4bf3cd21d12c87909b Mon Sep 17 00:00:00 2001
From: Dinesh Sudham <dineshx.sudham@intel.com>
Date: Tue, 4 Jun 2019 16:24:45 +0800
Subject: [PATCH] DRVLIB_SW-2145: cdev interface support for switch-api

---
 drivers/net/ethernet/lantiq/switch-api/gsw_init.c  |  5 +++
 .../ethernet/lantiq/switch-api/gsw_ioctl_wrapper.c | 52 ++++++++++++++++++++--
 .../ethernet/lantiq/switch-api/gsw_ioctl_wrapper.h |  1 +
 .../ethernet/lantiq/switch-api/gswip_dev/gsw_dev.c |  1 +
 include/net/switch_api/gsw_dev.h                   |  3 ++
 5 files changed, 59 insertions(+), 3 deletions(-)

diff --git a/drivers/net/ethernet/lantiq/switch-api/gsw_init.c b/drivers/net/ethernet/lantiq/switch-api/gsw_init.c
index 2afb34e690ac..9fa0a2702f4a 100644
--- a/drivers/net/ethernet/lantiq/switch-api/gsw_init.c
+++ b/drivers/net/ethernet/lantiq/switch-api/gsw_init.c
@@ -981,6 +981,11 @@ int ltq_gsw_api_register(struct platform_device *pdev)
 		}
 	}
 
+	result = gsw_cdev_interface(GSW_API_MAJOR_NUMBER, device_id, gswdev);
+	if (result != 0) {
+		pr_err("Failed to create cdev interface\n");
+		return result;
+	}
 
 	if (device_id == 0) {
 		/* Init FLOW Switch Core Layer */
diff --git a/drivers/net/ethernet/lantiq/switch-api/gsw_ioctl_wrapper.c b/drivers/net/ethernet/lantiq/switch-api/gsw_ioctl_wrapper.c
index 7e949129ab9e..4cb786fc6051 100644
--- a/drivers/net/ethernet/lantiq/switch-api/gsw_ioctl_wrapper.c
+++ b/drivers/net/ethernet/lantiq/switch-api/gsw_ioctl_wrapper.c
@@ -20,6 +20,7 @@ ioctl_wrapper_ctx_t *ioctlwrapctx = NULL;
 static int gsw_api_open(struct inode *inode, struct file *filp);
 static int gsw_api_release(struct inode *inode, struct file *filp);
 static long gsw_api_ioctl(struct file *filp, u32 cmd, unsigned long arg);
+static struct class *gswss_class = NULL;
 #endif
 
 ioctl_cmd_handle_t *gsw_api_alloc_cmd_handle(void)
@@ -249,24 +250,69 @@ static int gsw_api_release(struct inode *inode,
 	return 0;
 }
 
+int gsw_cdev_interface(u32 major, u32 device_id, struct gswss *gswdev)
+{
+	int ret;
+
+	cdev_init(&gswdev->gswss_cdev, &swapi_fops);
+	gswdev->gswss_cdev.owner = THIS_MODULE;
+	ret = cdev_add(&gswdev->gswss_cdev, MKDEV(major, device_id), 1);
+	if (ret < 0) {
+		pr_err("Failed to add cdev\n");
+		goto fail_add_cdev;
+	}
+	if (!device_create(gswss_class, NULL, MKDEV(major, device_id),
+			  NULL, "switch_api/%d", device_id)) {
+		ret = -EINVAL;
+		pr_debug("failed to create device\n");
+		goto fail_create_device;
+	}
+	return 0;
+
+fail_add_cdev:
+	unregister_chrdev_region(MKDEV(major, 0), MINORMASK);
+	return -1;
+fail_create_device:
+	class_destroy(gswss_class);
+	return -1;
+}
+
 int gsw_api_drv_register(u32 major)
 {
 	int result;
-	result = register_chrdev(major, ETHSW_API_DEV_NAME, &swapi_fops);
+	dev_t dev_num;
+
+	/* Device Number */
+	dev_num = MKDEV(major, 0);
+	result = register_chrdev_region(dev_num, MINORMASK, ETHSW_API_DEV_NAME);
 
 	if (result < 0) {
 		pr_err("SWAPI: Register Char Dev failed with %d !!!\n", result);
-		return result;
+		goto fail_register_chrdev_region;
 	}
 
+	/* Register the device class */
+	gswss_class = class_create(THIS_MODULE, ETHSW_API_DEV_NAME);
+	if (!gswss_class) {
+		result = -EEXIST;
+		pr_err("SWAPI: failed to create class %d\n", result);
+		goto fail_create_class;
+	}
 	pr_debug("SWAPI: Registered char device [%s] with major no [%d]\n",
 		 ETHSW_API_DEV_NAME, major);
 	return 0;
+
+fail_create_class:
+	unregister_chrdev_region(MKDEV(major, 0), MINORMASK);
+	return -1;
+fail_register_chrdev_region:
+	return result;
 }
 
 int gsw_api_drv_unregister(u32 major)
 {
-	unregister_chrdev(major, ETHSW_API_DEV_NAME);
+	class_destroy(gswss_class);
+	unregister_chrdev_region(MKDEV(major, 0), MINORMASK);
 	return 0;
 }
 
diff --git a/drivers/net/ethernet/lantiq/switch-api/gsw_ioctl_wrapper.h b/drivers/net/ethernet/lantiq/switch-api/gsw_ioctl_wrapper.h
index ba96b9314ff6..06d2b54816fd 100644
--- a/drivers/net/ethernet/lantiq/switch-api/gsw_ioctl_wrapper.h
+++ b/drivers/net/ethernet/lantiq/switch-api/gsw_ioctl_wrapper.h
@@ -97,6 +97,7 @@ void	*ioctl_wrapper_init(ioctl_wrapper_init_t *pinit);
 int ioctl_wrapper_dev_add(ioctl_wrapper_ctx_t *pioctldev,
 			  void *pcoredev, u8 mnum);
 int gsw_api_ioctl_wrapper_cleanup(void);
+int gsw_cdev_interface(u32, u32, struct gswss *);
 
 
 
diff --git a/drivers/net/ethernet/lantiq/switch-api/gswip_dev/gsw_dev.c b/drivers/net/ethernet/lantiq/switch-api/gswip_dev/gsw_dev.c
index 9786d2e7df6f..7a1520693434 100644
--- a/drivers/net/ethernet/lantiq/switch-api/gswip_dev/gsw_dev.c
+++ b/drivers/net/ethernet/lantiq/switch-api/gswip_dev/gsw_dev.c
@@ -527,6 +527,7 @@ static int gsw_remove_devices(struct device *parent)
 	struct gswss *gswdev = dev_get_drvdata(parent);
 	int i = 0;
 
+	cdev_del(&gswdev->gswss_cdev);
 	gsw_remove_data(parent->id);
 
 	if (gswdev->adap_ops)
diff --git a/include/net/switch_api/gsw_dev.h b/include/net/switch_api/gsw_dev.h
index 9676694a78f5..4ee4bb6c5fbb 100644
--- a/include/net/switch_api/gsw_dev.h
+++ b/include/net/switch_api/gsw_dev.h
@@ -17,6 +17,7 @@
 #include <net/switch_api/mac_ops.h>
 #include <net/switch_api/gsw_flow_ops.h>
 #include <net/switch_api/lantiq_gsw_api.h>
+#include <linux/cdev.h>
 
 #define MAX_GSWDEV		16
 #define MAC_DEV_NAME		"gsw_mac"
@@ -41,6 +42,8 @@ struct gswss {
 	struct platform_device *core_dev;
 	/* Number of Mac Subdevice in this GSWIP SubSystem */
 	u32 mac_subdevs_cnt;
+	/* cdev interface for GSWIP SubSystem */
+	struct cdev gswss_cdev;
 	/* Mac Platform device for each Mac Subdevice */
 	struct platform_device *mac_dev[];
 };
