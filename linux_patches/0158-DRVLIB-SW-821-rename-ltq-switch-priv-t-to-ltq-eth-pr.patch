From a32c79213a31359ca1611bb3b3a17e257cacadaf Mon Sep 17 00:00:00 2001
From: "Ma, Hua" <hua.ma@intel.com>
Date: Thu, 19 Jul 2018 14:32:33 +0800
Subject: [PATCH] DRVLIB_SW-821: rename ltq_switch_priv_t to ltq_eth_priv

---
 drivers/net/ethernet/lantiq/ltq_eth_drv_xrx500.c | 40 ++++++++++++------------
 drivers/net/ethernet/lantiq/ltq_eth_drv_xrx500.h |  4 +--
 2 files changed, 22 insertions(+), 22 deletions(-)

diff --git a/drivers/net/ethernet/lantiq/ltq_eth_drv_xrx500.c b/drivers/net/ethernet/lantiq/ltq_eth_drv_xrx500.c
index 3606ac14c0ad..dad37e292a92 100644
--- a/drivers/net/ethernet/lantiq/ltq_eth_drv_xrx500.c
+++ b/drivers/net/ethernet/lantiq/ltq_eth_drv_xrx500.c
@@ -169,7 +169,7 @@ static void get_drvinfo(struct net_device *dev, struct ethtool_drvinfo *info)
 /* Get the network device settings  */
 static int get_settings(struct net_device *dev, struct ethtool_cmd *cmd)
 {
-	struct ltq_switch_priv_t *priv;
+	struct ltq_eth_priv *priv;
 	int i;
 
 	priv = netdev_priv(dev);
@@ -185,7 +185,7 @@ static int get_settings(struct net_device *dev, struct ethtool_cmd *cmd)
 /* Set the network device settings */
 static int set_settings(struct net_device *dev, struct ethtool_cmd *cmd)
 {
-	struct ltq_switch_priv_t *priv;
+	struct ltq_eth_priv *priv;
 	int i;
 
 	priv = netdev_priv(dev);
@@ -201,7 +201,7 @@ static int set_settings(struct net_device *dev, struct ethtool_cmd *cmd)
 #if IS_ENABLED(CONFIG_LTQ_DATAPATH_PTP1588)
 static int get_tsinfo(struct net_device *dev, struct ethtool_ts_info *ts_info)
 {
-	struct ltq_switch_priv_t *priv;
+	struct ltq_eth_priv *priv;
 	struct mac_ops *ops;
 
 	priv = netdev_priv(dev);
@@ -283,7 +283,7 @@ static int ltq_eth_stop(struct net_device *dev)
 /* Uninit the network device interface*/
 static void ltq_eth_uninit(struct net_device *dev)
 {
-	struct ltq_switch_priv_t *priv;
+	struct ltq_eth_priv *priv;
 	int ret;
 
 	pr_debug("%s called for device %s\n", __func__, dev->name);
@@ -308,7 +308,7 @@ static void ltq_eth_uninit(struct net_device *dev)
 /* Send the packet to netwrok rx queue */
 static void eth_rx(struct net_device *dev, int len, struct sk_buff *skb)
 {
-	struct ltq_switch_priv_t *priv;
+	struct ltq_eth_priv *priv;
 
 	priv = netdev_priv(dev);
 	skb->dev = dev;
@@ -389,7 +389,7 @@ rtnl_link_stats64 *ltq_get_stats(struct net_device *dev,
 				 struct rtnl_link_stats64 *storage)
 {
 #ifndef CONFIG_LTQ_DATAPATH_MIB
-	struct ltq_switch_priv_t *priv = netdev_priv(dev);
+	struct ltq_eth_priv *priv = netdev_priv(dev);
 	*storage = priv->stats;
 #else
 	dp_get_netif_stats(dev, NULL, storage, 0);
@@ -406,7 +406,7 @@ static void ltq_tx_timeout(struct net_device *dev)
 static int ltq_set_mac_address(struct net_device *dev, void *p)
 {
 	struct sockaddr *addr = p;
-	struct ltq_switch_priv_t *priv = netdev_priv(dev);
+	struct ltq_eth_priv *priv = netdev_priv(dev);
 
 	pr_debug("set_mac_addr called\n");
 	if (netif_running(dev))
@@ -472,7 +472,7 @@ u16 gsw_reg_get_val(struct core_ops *ops, u16 nRegAddr)
 
 static int ltq_enable_gsw_l_jumbo(struct net_device *dev)
 {
-	struct ltq_switch_priv_t *priv = netdev_priv(dev);
+	struct ltq_eth_priv *priv = netdev_priv(dev);
 	struct core_ops *ops;
 
 	pr_info("%s called for id: %d\n", __func__, priv->id);
@@ -501,7 +501,7 @@ static int ltq_enable_gsw_l_jumbo(struct net_device *dev)
 
 static int ltq_disable_gsw_l_jumbo(struct net_device *dev)
 {
-	struct ltq_switch_priv_t *priv = netdev_priv(dev);
+	struct ltq_eth_priv *priv = netdev_priv(dev);
 	struct core_ops *ops;
 
 	pr_info("%s called for id: %d\n", __func__, priv->id);
@@ -578,7 +578,7 @@ static int ltq_disable_gsw_r_jumbo(struct net_device *dev)
 /* Change the MTU value of the netwrok device interfaces */
 static int ltq_change_mtu(struct net_device *dev, int new_mtu)
 {
-	struct ltq_switch_priv_t *priv = netdev_priv(dev);
+	struct ltq_eth_priv *priv = netdev_priv(dev);
 
 	if (new_mtu < ETH_ZLEN || new_mtu > LTQ_ETH_MAX_DATA_LEN)
 		return -EINVAL;
@@ -610,7 +610,7 @@ static int ltq_change_mtu(struct net_device *dev, int new_mtu)
 
 static int ltq_start_xmit(struct sk_buff *skb, struct net_device *dev)
 {
-	struct ltq_switch_priv_t *priv = netdev_priv(dev);
+	struct ltq_eth_priv *priv = netdev_priv(dev);
 	int ret;
 	int len;
 
@@ -646,7 +646,7 @@ static int ltq_ioctl(struct net_device *dev, struct ifreq *ifr, int cmd)
 static int ltq_eth_init(struct net_device *dev)
 {
 	int i;
-	struct ltq_switch_priv_t *priv;
+	struct ltq_eth_priv *priv;
 	int ret;
 
 	priv = netdev_priv(dev);
@@ -977,7 +977,7 @@ ltq_eth_drv_eth_addr_setup(struct net_device *dev, int port, int wan)
 	int i = 0;
 	u8 *macaddr_param = NULL;
 	u8 values[ETH_ALEN] = {0};
-	struct ltq_switch_priv_t *priv = netdev_priv(dev);
+	struct ltq_eth_priv *priv = netdev_priv(dev);
 
 	if (is_valid_ether_addr(dev->dev_addr))
 		return;
@@ -1134,7 +1134,7 @@ static void ltq_eth_genetlink_exit(void)
 static int phy_netdevice_event(struct notifier_block *nb, unsigned long action,
 			       void *ptr)
 {
-	struct ltq_switch_priv_t *priv = NULL;
+	struct ltq_eth_priv *priv = NULL;
 	struct net_device *dev = NULL;
 
 	if (!ptr)
@@ -1162,7 +1162,7 @@ xrx500_of_port(struct net_device *dev, struct device_node *port)
 {
 	const __be32 *addr, *id = of_get_property(port, "reg", NULL);
 	struct resource irqres;
-	struct ltq_switch_priv_t *priv = netdev_priv(dev);
+	struct ltq_eth_priv *priv = netdev_priv(dev);
 	struct xrx500_port *p = &priv->port[priv->num_port];
 
 	if (!id)
@@ -1223,7 +1223,7 @@ xrx500_of_port(struct net_device *dev, struct device_node *port)
 static int xrx500_of_iface(struct xrx500_hw *hw, struct device_node *iface,
 			   struct platform_device *pdev)
 {
-	struct ltq_switch_priv_t *priv;
+	struct ltq_eth_priv *priv;
 	struct device_node *port;
 	const __be32 *wan;
 	u32 dp_dev_port_param, dp_port_id_param, xgmac_id_param;
@@ -1233,7 +1233,7 @@ static int xrx500_of_iface(struct xrx500_hw *hw, struct device_node *iface,
 	int ret;
 
 	/* alloc the network device */
-	hw->devs[hw->num_devs] = alloc_etherdev(sizeof(ltq_switch_priv_t));
+	hw->devs[hw->num_devs] = alloc_etherdev(sizeof(struct ltq_eth_priv));
 
 	if (!hw->devs[hw->num_devs]) {
 		pr_debug("allocated failed for interface %d\n",
@@ -1535,7 +1535,7 @@ static void xrx500_gmac_update(struct xrx500_port *port)
 #endif
 static void xrx500_mdio_link(struct net_device *dev)
 {
-	struct ltq_switch_priv_t *priv;
+	struct ltq_eth_priv *priv;
 	int i;
 
 	priv = netdev_priv(dev);
@@ -1565,7 +1565,7 @@ static void xrx500_mdio_link(struct net_device *dev)
 static int xrx500_mdio_probe(struct net_device *dev, struct xrx500_port *port)
 {
 	struct phy_device *phydev = NULL;
-	struct ltq_switch_priv_t *priv = NULL;
+	struct ltq_eth_priv *priv = NULL;
 	struct mii_bus *bus = NULL;
 
 	priv = netdev_priv(dev);
@@ -2041,7 +2041,7 @@ static void ltq_eth_drv_exit(struct platform_device *pdev)
 	int i, ret, j;
 
 	for (i = 0; i < xrx500_hw.num_devs; i++) {
-		struct ltq_switch_priv_t *priv;
+		struct ltq_eth_priv *priv;
 		struct net_device *dev = xrx500_hw.devs[i];
 
 		if (!dev)
diff --git a/drivers/net/ethernet/lantiq/ltq_eth_drv_xrx500.h b/drivers/net/ethernet/lantiq/ltq_eth_drv_xrx500.h
index a4d285b8fbda..27b166dc136f 100644
--- a/drivers/net/ethernet/lantiq/ltq_eth_drv_xrx500.h
+++ b/drivers/net/ethernet/lantiq/ltq_eth_drv_xrx500.h
@@ -47,7 +47,7 @@ struct xrx500_hw {
 /**
  * This structure is used internal purpose
  */
-struct ltq_switch_priv_t {
+struct ltq_eth_priv {
 	/*!< network device interface Statistics */
 	struct rtnl_link_stats64 stats;
 	/*!< structure of dma device information */
@@ -88,7 +88,7 @@ struct ltq_switch_priv_t {
 	#define FLAG_ADV_1000HALF       0x00010000
 	#define FLAG_ADV_1000FULL       0x00020000
 	#define FLAG_INTERNAL_PHY       0x00100000
-} ltq_switch_priv_t;
+};
 
 /**
  * This structure is used internal purpose
