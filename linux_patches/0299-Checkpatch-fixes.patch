From 290a5dc789d45a812bd47424ab82f42647728299 Mon Sep 17 00:00:00 2001
From: kavitha3 <k.subramanian@intel.com>
Date: Mon, 1 Oct 2018 16:30:50 +0800
Subject: [PATCH] Checkpatch fixes

---
 drivers/net/ethernet/lantiq/cqm/falconmx/cqm.c | 19 +++++++------------
 1 file changed, 7 insertions(+), 12 deletions(-)

diff --git a/drivers/net/ethernet/lantiq/cqm/falconmx/cqm.c b/drivers/net/ethernet/lantiq/cqm/falconmx/cqm.c
index 5e120eeb8ba9..586533aae1ec 100644
--- a/drivers/net/ethernet/lantiq/cqm/falconmx/cqm.c
+++ b/drivers/net/ethernet/lantiq/cqm/falconmx/cqm.c
@@ -14,7 +14,6 @@
 			   (TYPE == DP_F_DEQ_CPU1) ||\
 			   (TYPE == DP_F_DEQ_MPE) ||\
 			   (TYPE == DP_F_DEQ_DL))
-#define ASSIGN_BSL(val) ((val > 0) ? val : 0x2800)
 static const char cqm_name[] = "cqm";
 static void __iomem *bufreq[CQM_FMX_NUM_POOLS];
 static void __iomem *eqmdesc[4];
@@ -61,7 +60,7 @@ struct cqm_buf_dbg_cnt cqm_dbg_cntrs[CQM_MAX_POLICY_NUM][CQM_MAX_POOL_NUM];
 
 static int get_buff_resv_bytes(int cbm_inst, int size)
 {
-	int bsl_thr_val = 0;
+	int bsl_thr_val = 0x2800;
 
 	dev_info(cqm_ctrl->dev, "BSL thres %d size %d\n", BSL_THRES, size);
 
@@ -1431,7 +1430,6 @@ static void *cqm_buff_alloc_by_policy_fmx(u32 pid, u32 flag, u32 policy)
 	u32 policy_t;
 	u32 buff_base, buff_size, index;
 
-
 	if (pid >= CPU_EQM_PORT_NUM) {
 		dev_err(cqm_ctrl->dev, "illegal pid: %d\n", pid);
 		return NULL;
@@ -1469,7 +1467,6 @@ static void *cqm_buff_alloc_by_policy_fmx(u32 pid, u32 flag, u32 policy)
 	pool_t = bm_pool_conf[j].pool;
 	policy_t = bm_pool_conf[j].policy;
 	add_metadata(buff_base, pool_t, policy_t);
-	pr_info("buff_base 0x%p\n", buff_base);
 	UP_STATS(cqm_dbg_cntrs[policy_t][pool_t].alloc_cnt);
 	return (void *)buff_base + CQM_POOL_METADATA;
 }
@@ -1529,7 +1526,6 @@ static void *cqm_buffer_alloc(u32 pid, u32 flag, u32 size, u32 *buf_size)
 	local_irq_restore(sys_flag);
 	v_buf_addr = (uint8_t *)__va(buf_addr);
 	get_buffer_base_index(v_buf_addr, &buff_base, &buff_size, &index);
-	pr_info("buff_base 0x%p\n", buff_base);
 	add_metadata(buff_base, pool_t, policy_t);
 	return (void *)buff_base + CQM_POOL_METADATA;
 }
@@ -2152,14 +2148,14 @@ static s32 dp_enable(struct module *owner, u32 port_id,
 				ops->gsw_pmac_ops.Pmac_Gbl_CfgGet(ops,
 						&glbl_cfg);
 			val = get_buff_resv_bytes(0, 3);
-			glbl_cfg.nMaxJumboLen = ASSIGN_BSL(val);
+			glbl_cfg.nMaxJumboLen = val;
 			val = get_buff_resv_bytes(0, 0);
-                        glbl_cfg.nBslThreshold[0] = ASSIGN_BSL(val);
+			glbl_cfg.nBslThreshold[0] = val;
 			val = get_buff_resv_bytes(0, 1);
-                        glbl_cfg.nBslThreshold[1] = ASSIGN_BSL(val);
+			glbl_cfg.nBslThreshold[1] = val;
 			val = get_buff_resv_bytes(0, 2);
-                        glbl_cfg.nBslThreshold[2] = ASSIGN_BSL(val);
-				
+			glbl_cfg.nBslThreshold[2] = val;
+
 			if (ops)
 				ops->gsw_pmac_ops.Pmac_Gbl_CfgSet(ops,
 						&glbl_cfg);
@@ -3401,7 +3397,7 @@ static int conf_enq_dma_port(const struct eqm_dma_port *dma_ptr)
 
 	j = 0;
 	if ((cqm_ctrl->num_pools + 1) < range)
-		range = cqm_ctrl->num_pools + 1; 
+		range = cqm_ctrl->num_pools + 1;
 	while (j < range) {
 		index = port + j;
 		p_info = &eqm_port_info[index];
@@ -3600,7 +3596,6 @@ static int conf_bm(struct cqm_data *pdata)
 
 		 /* Pool size loop*/
 		for (j = 0; j < p_param[i].num_pools_in_policy; j++) {
-			pr_info("am here\n");
 			p_param[i].pools_in_policy[j].pool_id = (i + j);
 			p_param[i].pools_in_policy[j].max_allowed =
 			cqm_ctrl->fmx_pool_ptrs[i + j];
