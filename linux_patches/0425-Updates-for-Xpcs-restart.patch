From 02049c684c59ccb7e3d886d8b555618623608ea3 Mon Sep 17 00:00:00 2001
From: thampan <joby.thampan@intel.com>
Date: Thu, 13 Dec 2018 22:27:41 +0800
Subject: [PATCH] Updates for Xpcs restart

---
 drivers/net/ethernet/lantiq/ltq_eth_drv_xrx500.c |  10 +-
 drivers/net/ethernet/lantiq/xpcs/xpcs.c          | 128 +++++++++++++++++++++--
 drivers/net/ethernet/lantiq/xpcs/xpcs.h          |   8 ++
 3 files changed, 135 insertions(+), 11 deletions(-)

diff --git a/drivers/net/ethernet/lantiq/ltq_eth_drv_xrx500.c b/drivers/net/ethernet/lantiq/ltq_eth_drv_xrx500.c
index a10b52008274..5dd2e6d1aeb7 100644
--- a/drivers/net/ethernet/lantiq/ltq_eth_drv_xrx500.c
+++ b/drivers/net/ethernet/lantiq/ltq_eth_drv_xrx500.c
@@ -33,6 +33,7 @@
 #include <net/switch_api/gsw_dev.h>
 #include "xrx500_phy_fw.h"
 #include "ltq_eth_drv_xrx500.h"
+#include "xpcs/xpcs.h"
 
 #define LTQ_ETH_MAX_DATA_LEN 9000
 
@@ -256,7 +257,7 @@ static int  ethtool_eee_set(struct net_device *dev,
 }
 
 /* Structure of the ether tool operation  */
-static const struct ethtool_ops ethtool_ops = {
+static struct ethtool_ops ethtool_ops = {
 	.get_drvinfo		= get_drvinfo,
 	.get_settings		= get_settings,
 	.set_settings		= set_settings,
@@ -716,6 +717,13 @@ static int ltq_eth_init(struct net_device *dev)
 			pr_warn("connect phy of port %d failed\n",
 				priv->port[i].num);
 		dev->ethtool_ops = &ethtool_ops;
+		
+		if (!priv->port[i].phy_node) {
+			ethtool_ops.get_link_ksettings = 
+				serdes_ethtool_get_link_ksettings;
+			ethtool_ops.set_link_ksettings = 
+				serdes_ethtool_set_link_ksettings;
+		}
 	}
 
 	if (priv->lct_en == 1) {
diff --git a/drivers/net/ethernet/lantiq/xpcs/xpcs.c b/drivers/net/ethernet/lantiq/xpcs/xpcs.c
index ea0f81b246d1..a9ec3147c942 100644
--- a/drivers/net/ethernet/lantiq/xpcs/xpcs.c
+++ b/drivers/net/ethernet/lantiq/xpcs/xpcs.c
@@ -22,6 +22,10 @@
 #include <linux/phy/phy.h>
 #include <linux/reset.h>
 #include "xpcs.h"
+#include <linux/netdevice.h>
+#include <net/datapath_api.h>
+#include "../ltq_eth_drv_xrx500.h"
+
 
 #define MAX_BUSY_RETRY	2000
 #define XPCS_IRQ_NAME "xpcs_irq"
@@ -873,11 +877,6 @@ static int xpcs_init(struct xpcs_prv_data *pdata)
 		return -EINVAL;
 	}
 
-	if (xpcs_sysfs_init(pdata)) {
-		dev_dbg(pdata->dev, "%s: sysfs init failed!\n", pdata->name);
-		return -EINVAL;
-	}
-
 	return ret;
 }
 
@@ -948,11 +947,11 @@ static int xpcs_parse_dts(struct platform_device *pdev,
 }
 #endif
 
-static int xpcs_reset(struct platform_device *pdev)
+static int xpcs_reset(struct device *dev)
 {
 	struct reset_control *xpcs_rst;
 
-	xpcs_rst = devm_reset_control_get(&pdev->dev, XPCS_RESET_NAME);
+	xpcs_rst = devm_reset_control_get(dev, XPCS_RESET_NAME);
 
 	if (IS_ERR(xpcs_rst))
 		return -1;
@@ -964,13 +963,112 @@ static int xpcs_reset(struct platform_device *pdev)
 	return 0;
 }
 
+struct xpcs_prv_data *priv_data[MAX_XPCS] = {0};
+
+int serdes_ethtool_get_link_ksettings(struct net_device *dev,
+				   struct ethtool_link_ksettings *cmd)
+{
+	struct ltq_eth_priv *priv = netdev_priv(dev);
+
+	serdes_ethtool_ksettings_get(priv->xgmac_id, cmd);
+
+	return 0;
+}
+EXPORT_SYMBOL(serdes_ethtool_get_link_ksettings);
+
+int serdes_ethtool_set_link_ksettings(struct net_device *dev,
+				   const struct ethtool_link_ksettings *cmd)
+{
+	struct ltq_eth_priv *priv = netdev_priv(dev);
+	int ret = 0;
+
+	ret = serdes_ethtool_ksettings_set(priv->xgmac_id, cmd);
+
+	return ret;
+}
+EXPORT_SYMBOL(serdes_ethtool_set_link_ksettings);
+
+void serdes_ethtool_ksettings_get(u32 idx,
+			       struct ethtool_link_ksettings *cmd)
+{
+	struct xpcs_prv_data *pdata = priv_data[idx];
+
+	if (pdata->mode == TENG_KR_MODE)
+		cmd->base.speed = SPEED_10000;
+	else if (pdata->mode == ONEG_XAUI_MODE)
+		cmd->base.speed = SPEED_1000;
+
+	return;
+}
+
+int serdes_ethtool_ksettings_set(u32 idx,
+			      const struct ethtool_link_ksettings *cmd)
+{
+	u32 speed = cmd->base.speed;
+	u32 mode;
+	struct xpcs_prv_data *pdata = priv_data[idx];
+
+	printk("Speed got is %d priv_data[idx].mode\n",speed);
+	
+	if (speed != SPEED_10000 &&
+	    speed != SPEED_1000)
+		return -EINVAL;
+
+	if (speed == SPEED_10000 && (pdata->mode != TENG_KR_MODE)) {
+		printk("Mode changing to: %s\n","10G");
+		mode = TENG_KR_MODE;
+	} else if (speed == SPEED_1000 && (pdata->mode != ONEG_XAUI_MODE)) {
+		printk("Mode changing to: %s\n","1G");
+		mode = ONEG_XAUI_MODE;
+	}
+
+	/* Restart Xpcs & PHY */
+	xpcs_reinit(idx, mode);
+
+	return 0;
+}
+
+int xpcs_reinit(int idx, u32 mode)
+{
+	struct xpcs_prv_data *pdata = priv_data[idx];
+	struct device *dev = pdata->dev;
+	struct phy *phy = pdata->phy;
+	int ret = 0;
+
+	/* RCU reset PHY */
+	phy_power_off(phy);
+
+	/* RCU reset XPCS */
+	ret = xpcs_reset(dev);	
+	if (ret < 0) {
+		dev_dbg(dev, "xpcs_reset err %s.\n", pdata->name);
+		return ret;
+	}
+
+	/* Power ON PHY */
+	phy_power_on(pdata->phy);
+
+	/* Change mode to new mode */
+	pdata->mode = mode;
+
+	/* Power ON XPCS */
+	ret = xpcs_init(pdata);
+	if (ret < 0) {
+		dev_dbg(dev, "xpcs_init err %s.\n", pdata->name);
+		return ret;
+	}
+
+	return ret;
+}
+
 static int xpcs_probe(struct platform_device *pdev)
 {
 	struct resource *res;
-	struct xpcs_prv_data *pdata = NULL;
 	struct device *dev = &pdev->dev;
 	int ret = XPCS_SUCCESS;
-
+	struct xpcs_prv_data *pdata;
+	int i = 0;
+	
 	if (dev->of_node) {
 		if (xpcs_parse_dts(pdev, &pdata) != XPCS_SUCCESS) {
 			dev_dbg(dev, "xpcs dt parse failed!\n");
@@ -986,6 +1084,11 @@ static int xpcs_probe(struct platform_device *pdev)
 		}
 	}
 
+	for (i = 0; i < MAX_XPCS; i++) {
+		if (!priv_data[i])
+			priv_data[i] = pdata;
+	}
+
 	pdata->id = pdev->id;
 	pdata->dev = dev;
 
@@ -1028,7 +1131,7 @@ static int xpcs_probe(struct platform_device *pdev)
 		return -EINVAL;
 	}
 
-	if (xpcs_reset(pdev)) {
+	if (xpcs_reset(dev)) {
 		dev_err(dev, "Failed to do %s reset:\n", pdata->name);
 		return -EINVAL;
 	}
@@ -1039,6 +1142,11 @@ static int xpcs_probe(struct platform_device *pdev)
 		return -EINVAL;
 	}
 
+	if (xpcs_sysfs_init(pdata)) {
+		dev_dbg(dev, "%s: sysfs init failed!\n", pdata->name);
+		return -EINVAL;
+	}
+
 	dev_info(dev, "%s Initialized!!\n", pdata->name);
 
 	return XPCS_SUCCESS;
diff --git a/drivers/net/ethernet/lantiq/xpcs/xpcs.h b/drivers/net/ethernet/lantiq/xpcs/xpcs.h
index e6b344ac8b70..e6455d55e9c9 100644
--- a/drivers/net/ethernet/lantiq/xpcs/xpcs.h
+++ b/drivers/net/ethernet/lantiq/xpcs/xpcs.h
@@ -2,6 +2,7 @@
 #define _XPCS_H_
 
 #include <linux/types.h>
+#include <linux/ethtool.h>
 
 #define XPCS_SUCCESS			0
 #define XPCS_FAILURE			-1
@@ -543,6 +544,8 @@
 #define PCS_DIG_STS_PSEQ_STATE_POS		2
 #define PCS_DIG_STS_PSEQ_STATE_WIDTH		3
 
+#define MAX_XPCS 3
+
 enum {
 	BACKPL_ETH_PCS = 0,
 	OTHER_PCS_CONFIG = 1
@@ -760,6 +763,11 @@ static inline void XPCS_RGWR(struct xpcs_prv_data *pdata, u32 reg, u32 val)
 	} while (0)
 
 int xpcs_sysfs_init(struct xpcs_prv_data *priv);
+int serdes_ethtool_get_link_ksettings(struct net_device *dev, struct ethtool_link_ksettings *cmd);
+int serdes_ethtool_set_link_ksettings(struct net_device *dev, const struct ethtool_link_ksettings *cmd);
+void serdes_ethtool_ksettings_get(u32 idx, struct ethtool_link_ksettings *cmd);
+int serdes_ethtool_ksettings_set(u32 idx, const struct ethtool_link_ksettings *cmd);
+int xpcs_reinit(int idx, u32 mode);
 
 #endif
 
