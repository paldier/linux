From bed9879abb7bc12dede3fc85b07f4ab55c09d9bd Mon Sep 17 00:00:00 2001
From: Dinesh Sudham <dineshx.sudham@intel.com>
Date: Tue, 14 May 2019 15:35:18 +0800
Subject: [PATCH] DRVLIB_SW-2299: Integrating GSWIP3.2 changes into 8.x master

---
 include/net/switch_api/gsw_flow_ops.h      |  42 ++++-
 include/net/switch_api/gsw_ioctlcmd_type.h |   4 +
 include/net/switch_api/lantiq_gsw.h        | 263 +++++++++++++++++++++++++++--
 include/net/switch_api/lantiq_gsw_flow.h   | 183 ++++++++++++++++++++
 4 files changed, 481 insertions(+), 11 deletions(-)

diff --git a/include/net/switch_api/gsw_flow_ops.h b/include/net/switch_api/gsw_flow_ops.h
index 769a143819e2..7f0d83ee29fc 100644
--- a/include/net/switch_api/gsw_flow_ops.h
+++ b/include/net/switch_api/gsw_flow_ops.h
@@ -571,12 +571,16 @@ struct debug_ops {
 	GSW_return_t (*Lmac)(void *, GSW_MAC_Cli_t *);
 	/* Command: GSW_MACSEC_CFG ; Index: 0x13 */
 	GSW_return_t (*Macsec)(void *, GSW_MAC_cfg_t *);
-	/* Command: GSW_DUMP_MEM ; Index: 0x14 */
+	/* Command: GSW_PMACBR_CFG ; Index: 0x14 */
+	GSW_return_t (*Pmacbr)(void *, GSW_MAC_cfg_t *);
+	/* Command: GSW_DUMP_MEM ; Index: 0x15 */
 	GSW_return_t (*DumpMem)(void *, GSW_table_t *);
 	/* Command: GSW_DEBUG_PRINT_PCEIRQ_LIST ; Index: 0x15 */
 	GSW_return_t (*DEBUG_PrintPceIrqList)(void *);
 	/* Command: GSW_DEBUG_RMON_PORT_GET ; Index: 0x16 */
 	GSW_return_t (*DEBUG_RMON_Port_Get)(void *, GSW_Debug_RMON_Port_cnt_t *);
+	/* Command: GSW_DEBUG_TUNNELTEMP_STATUS ; Index: 0x18 */
+	GSW_return_t (*DEBUG_TunnelTempTableStatus)(void *, GSW_debug_t *);
 };
 
 struct irq_ops {
@@ -592,6 +596,31 @@ struct irq_ops {
 	GSW_return_t (*IRQ_Disable)(void *, GSW_Irq_Op_t *);
 };
 
+struct pbb_ops {
+	/* Command: (NULL); Index: 0x00 */
+	GSW_return_t (*null)(void);
+	/* Command: GSW_PBB_TUNNEL_TEMPLATE_ALLOC ; Index: 0x01 */
+	GSW_return_t (*PBB_TemplateAlloc)(void *, GSW_PBB_Tunnel_Template_Config_t *);
+	/* Command: GSW_PBB_TUNNEL_TEMPLATE_FREE ; Index: 0x02 */
+	GSW_return_t (*PBB_TemplateFree)(void *, GSW_PBB_Tunnel_Template_Config_t *);
+	/* Command: GSW_PBB_TUNNEL_TEMPLATE_SET ; Index: 0x03 */
+	GSW_return_t (*PBB_TemplateSet)(void *, GSW_PBB_Tunnel_Template_Config_t *);
+	/* Command: GSW_PBB_TUNNEL_TEMPLATE_GET ; Index: 0x04 */
+	GSW_return_t (*PBB_TemplateGet)(void *, GSW_PBB_Tunnel_Template_Config_t *);
+};
+
+struct gpid_ops {
+	/* Command: (NULL); Index: 0x00 */
+	GSW_return_t (*null)(void);
+	/* Command: GSW_LPID_TO_GPID_ASSIGNMENT_SET ; Index: 0x01 */
+	GSW_return_t (*LpidToGpid_AssignmentSet)(void *, GSW_LPID_to_GPID_Assignment_t *);
+	/* Command: GSW_LPID_TO_GPID_ASSIGNMENT_GET ; Index: 0x02 */
+	GSW_return_t (*LpidToGpid_AssignmentGet)(void *, GSW_LPID_to_GPID_Assignment_t *);
+	/* Command: GSW_GPID_TO_LPID_ASSIGNMENT_SET ; Index: 0x03 */
+	GSW_return_t (*GpidToLpid_AssignmentSet)(void *, GSW_GPID_to_LPID_Assignment_t *);
+	/* Command: GSW_GPID_TO_LPID_ASSIGNMENT_GET ; Index: 0x04 */
+	GSW_return_t (*GpidToLpid_AssignmentGet)(void *, GSW_GPID_to_LPID_Assignment_t *);
+};
 
 struct core_ops {
 	/**Switch Opertations**/
@@ -698,10 +727,21 @@ struct core_ops {
 	 NOTE: Applicable for GSWIP 3.1/GSWIP 3.0/GSWIP 2.2*/
 
 	struct common_ops			gsw_common_ops;
+
 	/*Debug Purpose for GSWIP 3.1*/
 	struct debug_ops			gsw_debug_ops;
 
 	struct irq_ops			gsw_irq_ops;
+
+	/*PBB Tunnel template configuration ops
+	 applicable for GSWIP-3.2*/
+	struct pbb_ops gsw_pbb_ops;
+
+	/*logical port to global port assignment
+	  global port to logical port assignment
+	  configuration ops
+	  applicable for GSWIP-3.2*/
+	struct gpid_ops gsw_gpid_ops;
 };
 
 
diff --git a/include/net/switch_api/gsw_ioctlcmd_type.h b/include/net/switch_api/gsw_ioctlcmd_type.h
index 233d3870d73a..f839376e29a6 100644
--- a/include/net/switch_api/gsw_ioctlcmd_type.h
+++ b/include/net/switch_api/gsw_ioctlcmd_type.h
@@ -56,6 +56,10 @@ this software module.
 #define GSW_DEBUG_MAGIC				('V')
 /* IRQ */
 #define GSW_IRQ_MAGIC				('T')
+/* PBB - GSWIP-3.2 */
+#define GSW_PBB_MAGIC				('X')
+/* GPID - GSWIP-3.2 */
+#define GSW_GPID_MAGIC				('M')
 
 #endif
 
diff --git a/include/net/switch_api/lantiq_gsw.h b/include/net/switch_api/lantiq_gsw.h
index 5ab1c02ad9b5..19f1b2ecbceb 100644
--- a/include/net/switch_api/lantiq_gsw.h
+++ b/include/net/switch_api/lantiq_gsw.h
@@ -22,6 +22,7 @@
 /* Local Macros & Definitions    */
 /* ============================= */
 #include "gsw_types.h"
+#include "gsw_ioctlcmd_type.h"
 #include "mac_ops.h"
 
 /** \defgroup GSW_GROUP GSWIP Functional APIs
@@ -139,6 +140,9 @@ typedef struct {
 	1: the entry is changed and not accessed yet */
 
 	ltq_bool_t bEntryChanged;
+
+	/** Associated Mac address -(GSWIP-3.2)*/
+	u8 nAssociatedMAC[GSW_MAC_ADDR_LEN];
 } GSW_MAC_tableRead_t;
 
 /** \brief Search for a MAC address entry in the address table.
@@ -200,15 +204,15 @@ typedef struct {
 	    "Source MAC Address Filtering and Destination MAC Address Filtering"
 	    for more detail. */
 	u8 nFilterFlag;
-
 	/** Packet is marked as IGMP controlled if destination MAC address matches
 	    MAC in this entry. (GSWIP-3.1 only) */
 	ltq_bool_t bIgmpControlled;
-
 	/** Changed
 	0: the entry is not changed
 	1: the entry is changed and not accessed yet */
 	ltq_bool_t bEntryChanged;
+	/** Associated Mac address -(GSWIP-3.2)*/
+	u8 nAssociatedMAC[GSW_MAC_ADDR_LEN];
 } GSW_MAC_tableQuery_t;
 
 /** \brief MAC Table Entry to be added.
@@ -270,6 +274,9 @@ typedef struct {
 	/** Packet is marked as IGMP controlled if destination MAC address matches
 	    MAC in this entry. (GSWIP-3.1 only) */
 	ltq_bool_t bIgmpControlled;
+
+	/** Associated Mac address -(GSWIP-3.2)*/
+	u8 nAssociatedMAC[GSW_MAC_ADDR_LEN];
 } GSW_MAC_tableAdd_t;
 
 /** \brief MAC Table Entry to be removed.
@@ -1189,6 +1196,13 @@ typedef struct {
 //   u32	nPbs;
 	/** Meter colour mode **/
 	u32 nColourBlindMode;
+	/** Enable/Disable Packet Mode. 0- Byte, 1 - Pkt */
+	ltq_bool_t bPktMode;
+	/** Enable/Disable local overhead for metering rate calculation. */
+	ltq_bool_t	bLocalOverhd;
+	/** Local overhead for metering rate calculation when
+	    \ref GSW_QoS_meterCfg_t::bLocalOverhd is TRUE. */
+	u32 nLocaloverhd;
 } GSW_QoS_meterCfg_t;
 
 /** \brief Specifies the direction for ingress and egress.
@@ -1347,6 +1361,12 @@ typedef struct {
 	    If there is no redirection required, it should be same as "nPortId".
 	    GSWIP-3.0/3.1 only. */
 	u8	nRedirectPortId;
+
+	/**To enable Ingress PCE Bypass.Applicable for GSWIP 3.2*/
+	ltq_bool_t	bEnableIngressPceBypass;
+	/*Internal purpose only - user not allowed to use it
+	  Applicable for GSWIP 3.2 only*/
+	ltq_bool_t	bReservedPortMode;
 } GSW_QoS_queuePort_t;
 
 /** \brief Reserved egress queue buffer segments.
@@ -1803,7 +1823,7 @@ typedef enum {
 	/** Link down. */
 	GSW_PORT_LINK_DOWN	= 1,
 	/** Link Auto. */
-	GSW_PORT_LINK_AUTO	= 2,	
+	GSW_PORT_LINK_AUTO	= 2,
 } GSW_portLink_t;
 
 /** \brief Enumeration used for Switch capability types. GSWIP-3.0 only capabilities are explicitly indicated.
@@ -2149,6 +2169,16 @@ typedef struct {
 	GSW_CPU_ParserHeaderCfg_t  eMPE1MPE2ParserCfg;
 	/** GSWIP-3.1 FCS tx Operations. */
 	GSW_FCS_TxOps_t bFcsTxOps;
+	/** GSWIP-3.2 Time Stamp Field Removal for PTP Packet
+	    0 - DIS Removal is disabled
+	    1 - EN Removal is enabled
+	*/
+	ltq_bool_t	bTsPtp;
+	/** GSWIP-3.2 Time Stamp Field Removal for Non-PTP Packet
+	    0 - DIS Removal is disabled
+	    1 - EN Removal is enabled
+	*/
+	ltq_bool_t	bTsNonptp;
 } GSW_CPU_PortCfg_t;
 
 /** \brief Ethernet layer-2 header selector, when adding or removing on
@@ -2389,6 +2419,17 @@ typedef struct {
 	ltq_bool_t	bMonitorPort;
 	/* Monitoring Sub-IF id */
 	u16	nSubIfId;
+	/**Enable Ingress Mirror Constants.Only valid when ingress PCE bypass
+	is enabled.Applicable for GSWIP 3.2*/
+	ltq_bool_t	bEnableIngressMirror;
+	/**Enable Egress Mirror Constants.Applicable for GSWIP 3.2*/
+	ltq_bool_t	bEnableEgressMirror;
+	/**Monitor Lpid, if Ingress or Egress Mirroring enabled.
+	   Applicable for GSWIP 3.2*/
+	u16 nMonitorLpId;
+	ltq_bool_t	bEnableMonitorQmap;
+	u16 nMonitorQid;
+	u16 nRedirectPortId;
 } GSW_monitorPortCfg_t;
 
 /** \brief MDIO Interface Configuration.
@@ -2424,6 +2465,24 @@ typedef struct {
 	u8 argv[15][30];
 } GSW_MAC_cfg_t;
 
+/** \brief MACSec Cli struct.
+     MACSec Cli struct for passing args and argument values. */
+typedef struct {
+	/** Command Type */
+	u32 cmdType;
+	/** Devid=0 Ingress, Devid=1 Egress */
+	u32 devid;
+	/** RegAddr */
+	u32 nRegAddr;
+	/** RegValue */
+	u32 nData;
+	u32 sa_st;
+	u32 sa_end;
+	u32 sptagen;
+	u32 mtinfoen;
+	u32 val;
+} GSW_MACSec_cfg_t;
+
 /** \brief MMD Register Access. The 'nData' value is directly written
     to the device register or read from the device. Some PHY
     device registers have standard bit definitions as stated in
@@ -3061,6 +3120,18 @@ typedef struct {
 	u32 nEgressPktsCount;
 	/** Total Engress Bytes Count in Applicable only for GSWIP 3.1 (32-bits) */
 	u32 nEgressBytesCount;
+	/** Ingress header Packet Count Applicable only for GSWIP 3.2 (32-bits) */
+	u32 nIngressHdrPktsCount;
+	/** Ingress header Byte Count Applicable only for GSWIP 3.2 (32-bits) */
+	u32 nIngressHdrBytesCount;
+	/** Egress header Packet Count Applicable only for GSWIP 3.2 (32-bits) */
+	u32 nEgressHdrPktsCount;
+	/** Egress header Byte Count Applicable only for GSWIP 3.2 (32-bits) */
+	u32 nEgressHdrBytesCount;
+	/** Egress header Discard Packet Count Applicable only for GSWIP 3.2 (32-bits) */
+	u32 nEgressHdrDiscPktsCount;
+	/** Egress header Discard Byte Count Applicable only for GSWIP 3.2 (32-bits) */
+	u32 nEgressHdrDiscBytesCount;
 } GSW_PMAC_Cnt_t;
 
 
@@ -3190,6 +3261,27 @@ typedef struct {
 	u64	nRxBadBytes;
 	/** Transmit Good Byte Count (64 bit). */
 	u64	nTxGoodBytes;
+	/**For GSWIP V32 only **/
+	/** Receive Unicast Packet Count for Yellow & Red packet. */
+	u32	nRxUnicastPktsYellowRed;
+	/** Receive Broadcast Packet Count for Yellow & Red packet. */
+	u32	nRxBroadcastPktsYellowRed;
+	/** Receive Multicast Packet Count for Yellow & Red packet. */
+	u32	nRxMulticastPktsYellowRed;
+	/** Receive Good Byte Count (64 bit) for Yellow & Red packet. */
+	u64 nRxGoodBytesYellowRed;
+	/** Receive Packet Count for Yellow & Red packet.  */
+	u32 nRxGoodPktsYellowRed;
+	/** Transmit Unicast Packet Count for Yellow & Red packet. */
+	u32	nTxUnicastPktsYellowRed;
+	/** Transmit Broadcast Packet Count for Yellow & Red packet. */
+	u32	nTxBroadcastPktsYellowRed;
+	/** Transmit Multicast Packet Count for Yellow & Red packet. */
+	u32	nTxMulticastPktsYellowRed;
+	/** Transmit Good Byte Count (64 bit) for Yellow & Red packet. */
+	u64 nTxGoodBytesYellowRed;
+	/** Transmit Packet Count for Yellow & Red packet.  */
+	u32 nTxGoodPktsYellowRed;
 } GSW_Debug_RMON_Port_cnt_t;
 
 
@@ -3242,6 +3334,13 @@ typedef enum {
 	GSW_EXTENDEDVLAN_FILTER_TPID_VTETYPE = 2
 } GSW_ExtendedVlanFilterTpid_t;
 
+typedef enum {
+	GSW_EXTENDEDVLAN_TPID_VTETYPE_1 = 0,
+	GSW_EXTENDEDVLAN_TPID_VTETYPE_2 = 1,
+	GSW_EXTENDEDVLAN_TPID_VTETYPE_3 = 2,
+	GSW_EXTENDEDVLAN_TPID_VTETYPE_4 = 3
+} GSW_ExtendedVlan_4_Tpid_Mode_t;
+
 /** \brief Extended VLAN Filter DEI Field.
     Used by \ref GSW_EXTENDEDVLAN_filterVLAN_t. */
 typedef enum {
@@ -3292,6 +3391,9 @@ typedef struct {
 /** \brief Extended VLAN Filter.
     Used by \ref GSW_EXTENDEDVLAN_config_t. */
 typedef struct {
+	/** Filter on Original Packet. */
+	ltq_bool_t bOriginalPacketFilterMode;
+	GSW_ExtendedVlan_4_Tpid_Mode_t eFilter_4_Tpid_Mode;
 	/** Filter for outer VLAN tag. */
 	GSW_EXTENDEDVLAN_filterVLAN_t sOuterVlan;
 	/** Filter for inner VLAN tag. */
@@ -3390,6 +3492,8 @@ typedef struct {
 	/** Number of VLAN tag(s) to remove. */
 	GSW_ExtendedVlanTreatmentRemoveTag_t eRemoveTag;
 
+	GSW_ExtendedVlan_4_Tpid_Mode_t eTreatment_4_Tpid_Mode;
+
 	/** Enable outer VLAN tag add/modification. */
 	ltq_bool_t bAddOuterVlan;
 	/** If bAddOuterVlan is TRUE, add or modify outer VLAN tag. */
@@ -4264,6 +4368,39 @@ typedef struct {
 	u32 nBridgePortId;
 } GSW_CTP_portAssignment_t;
 
+/** \brief GPID Assignment/association with logical port.
+    Used by \ref GSW_LPID_TO_GPID_ASSIGNMENT_SET
+    and \ref GSW_LPID_TO_GPID_ASSIGNMENT_GET. */
+typedef struct {
+	/** Logical Port Id. The valid range is hardware dependent. */
+	u32 nLogicalPortId;
+
+	/** First Global Port ID mapped to above logical port ID.
+	    */
+	u32 nFirstGlobalPortId;
+	/** Total number of Global Ports mapped above logical port ID. */
+	u32 nNumberOfGlobalPort;
+	/** To configure Valid bits for SunInterface id LP mode: others. */
+	u32 nValidBits;
+}  GSW_LPID_to_GPID_Assignment_t;
+
+/** \brief Logical port and subif Assignment/association with global port.
+    Used by \ref GSW_GPID_TO_LPID_ASSIGNMENT_SET
+    and \ref GSW_GPID_TO_LPID_ASSIGNMENT_GET. */
+typedef struct {
+	u32 nGlobalPortId;
+	/** Logical Port Id. The valid range is hardware dependent. */
+	u32 nLogicalPortId;
+
+	/** Sub Interface Group field.
+	    */
+	u8 nSubIf_GroupField;
+	/** Sub-interface ID override bit and sub-interface ID group field:
+	If it is set, sub-interface group ID is from the table.
+		Otherwise, it is from the descriptor. */
+	ltq_bool_t nSubIf_GroupField_OverRide;
+} GSW_GPID_to_LPID_Assignment_t;
+
 /** \brief Color Marking Table.
     There are standards to define the marking table. User should use
     \ref GSW_QOS_COLOR_MARKING_TABLE_SET to initialize the table before color
@@ -4338,6 +4475,79 @@ typedef struct {
 	    only index 0-7 is valid. */
 	u16 nPortmap[16];
 } GSW_MACFILTER_default_t;
+
+/** \brief I-TAG header defintion .GSWIP-3.2 only
+	Used by \ref GSW_PBB_Tunnel_Template_Config_t*/
+typedef struct {
+	/**I-TAG TPID -2 bytes field*/
+	ltq_bool_t bTpidEnable;
+	u16 nTpid;
+
+	/**I-TAG PCP -3 Bit field*/
+	ltq_bool_t bPcpEnable;
+	u8 nPcp;
+
+	/**I-TAG DEI -1 Bit field*/
+	ltq_bool_t bDeiEnable;
+	u8 nDei;
+
+	/**I-TAG UAC -1 Bit field*/
+	ltq_bool_t bUacEnable;
+	u8 nUac;
+
+	/**I-TAG RES -3 Bit field*/
+	ltq_bool_t bResEnable;
+	u8 nRes;
+
+	/**I-TAG SID -24 Bit field*/
+	ltq_bool_t bSidEnable;
+	u32 nSid;
+} GSW_I_TAG_Config_t;
+
+/** \brief B-TAG header defintion .GSWIP-3.2 only
+	Used by \ref GSW_PBB_Tunnel_Template_Config_t*/
+typedef struct {
+	/**B-TAG TPID -2 bytes field*/
+	ltq_bool_t bTpidEnable;
+	u16 nTpid;
+
+	/**B-TAG PCP -3 Bit field*/
+	ltq_bool_t bPcpEnable;
+	u8 nPcp;
+
+	/**B-TAG DEI -1 Bit field*/
+	ltq_bool_t bDeiEnable;
+	u8 nDei;
+
+	/**B-TAG VID -12 Bit field*/
+	ltq_bool_t bVidEnable;
+	u16 nVid;
+} GSW_B_TAG_Config_t;
+
+/** \brief Tunnel Template Configuration.GSWIP-3.2 only
+    Used by \ref GSW_PBB_TunnelTempate_Config_Set and \ref GSW_PBB_TunnelTempate_Config_Get
+    For \ref GSW_PBB_TunnelTempate_Free, this field should be valid ID returned by
+	    \ref GSW_PBB_TunnelTempate_Alloc.*/
+typedef struct {
+	u32 nTunnelTemplateId;
+
+	/** I-Header Destination Address*/
+	ltq_bool_t bIheaderDstMACEnable;
+	u8 nIheaderDstMAC[GSW_MAC_ADDR_LEN];
+
+	/** I-Header source Address*/
+	ltq_bool_t bIheaderSrcMACEnable;
+	u8 nIheaderSrcMAC[GSW_MAC_ADDR_LEN];
+
+	/** I-Tag*/
+	ltq_bool_t bItagEnable;
+	GSW_I_TAG_Config_t sItag;
+
+	/** B-Tag*/
+	ltq_bool_t bBtagEnable;
+	GSW_B_TAG_Config_t sBtag;
+} GSW_PBB_Tunnel_Template_Config_t;
+
 /*@}*/ /* GSW_IOCTL_GSWIP31 */
 
 /* -------------------------------------------------------------------------- */
@@ -7451,7 +7661,18 @@ typedef struct {
    - GSW_statusOk: if successful
    - An error code in case an error occurs
 */
-#define GSW_MACSEC_CFG	_IOWR(GSW_DEBUG_MAGIC, 0x13, GSW_MAC_cfg_t)
+#define GSW_MACSEC_CFG	_IOWR(GSW_DEBUG_MAGIC, 0x13, GSW_MACSec_cfg_t)
+/**
+   \brief PMACBR Cfg Commands to Read and write operation
+   GSW_PMACBR_CFG.
+   \remarks The function returns an error code in case an error occurs.
+            The error code is described in \ref GSW_return_t.
+   \return Return value as follows:
+   - GSW_statusOk: if successful
+   - An error code in case an error occurs
+*/
+#define GSW_PMACBR_CFG	_IOWR(GSW_DEBUG_MAGIC, 0x14, GSW_MAC_cfg_t)
+
 /**
    \brief DUMP MEM operation
    GSW_DUMP_MEM.
@@ -7461,20 +7682,42 @@ typedef struct {
    - GSW_statusOk: if successful
    - An error code in case an error occurs
 */
-#define GSW_DUMP_MEM	_IOWR(GSW_DEBUG_MAGIC, 0x14, GSW_table_t)
+#define GSW_DUMP_MEM	_IOWR(GSW_DEBUG_MAGIC, 0x15, GSW_table_t)
 
-#define GSW_DEBUG_PRINT_PCEIRQ_LIST 		_IO(GSW_DEBUG_MAGIC, 0x15)
-#define GSW_DEBUG_RMON_PORT_GET				_IOWR(GSW_DEBUG_MAGIC, 0x16, GSW_Debug_RMON_Port_cnt_t)
+#define GSW_DEBUG_PRINT_PCEIRQ_LIST 		_IO(GSW_DEBUG_MAGIC, 0x16)
+#define GSW_DEBUG_RMON_PORT_GET				_IOWR(GSW_DEBUG_MAGIC, 0x17, GSW_Debug_RMON_Port_cnt_t)
+#define GSW_DEBUG_TUNNELTEMP_STATUS 		_IOWR(GSW_DEBUG_MAGIC, 0x18, GSW_debug_t)
 
 /**
-	\brief Following are for GSWIP IRQ operation
+   \brief Following are for GSWIP IRQ operation
 
-	\param GSW_Irq_Op_t Pointer to \ref GSW_Irq_Op_t.
+   \param GSW_Irq_Op_t Pointer to \ref GSW_Irq_Op_t.
 */
-
 #define GSW_IRQ_REGISTER 	_IOWR(GSW_IRQ_MAGIC, 0x01, GSW_Irq_Op_t)
 #define GSW_IRQ_UNREGISTER 	_IOWR(GSW_IRQ_MAGIC, 0x02, GSW_Irq_Op_t)
 #define GSW_IRQ_ENABLE 		_IOWR(GSW_IRQ_MAGIC, 0x03, GSW_Irq_Op_t)
 #define GSW_IRQ_DISBALE 	_IOWR(GSW_IRQ_MAGIC, 0x04, GSW_Irq_Op_t)
 
+/**
+   \brief Following are for GSWIP 3.2 PBB Tunnel template operation
+
+   \param GSW_PBB_Tunnel_Template_Config_t Pointer to \ref GSW_PBB_Tunnel_Template_Config_t.
+*/
+#define GSW_PBB_TUNNEL_TEMPLATE_ALLOC 	_IOWR(GSW_PBB_MAGIC, 0x01, GSW_PBB_Tunnel_Template_Config_t)
+#define GSW_PBB_TUNNEL_TEMPLATE_FREE 	_IOWR(GSW_PBB_MAGIC, 0x02, GSW_PBB_Tunnel_Template_Config_t)
+#define GSW_PBB_TUNNEL_TEMPLATE_SET 	_IOWR(GSW_PBB_MAGIC, 0x03, GSW_PBB_Tunnel_Template_Config_t)
+#define GSW_PBB_TUNNEL_TEMPLATE_GET 	_IOWR(GSW_PBB_MAGIC, 0x04, GSW_PBB_Tunnel_Template_Config_t)
+
+/**
+   \brief Following are for GSWIP 3.2 LPID->GPID/GPID->LPID operation
+
+   \param GSW_LPID_to_GPID_Assignment_t Pointer to \ref GSW_LPID_to_GPID_Assignment_t.
+   \param GSW_GPID_to_LPID_Assignment_t Pointer to \ref GSW_GPID_to_LPID_Assignment_t.
+
+*/
+#define GSW_LPID_TO_GPID_ASSIGNMENT_SET 	_IOWR(GSW_GPID_MAGIC, 0x01, GSW_LPID_to_GPID_Assignment_t)
+#define GSW_LPID_TO_GPID_ASSIGNMENT_GET 	_IOWR(GSW_GPID_MAGIC, 0x02, GSW_LPID_to_GPID_Assignment_t)
+#define GSW_GPID_TO_LPID_ASSIGNMENT_SET 	_IOWR(GSW_GPID_MAGIC, 0x03, GSW_GPID_to_LPID_Assignment_t)
+#define GSW_GPID_TO_LPID_ASSIGNMENT_GET 	_IOWR(GSW_GPID_MAGIC, 0x04, GSW_GPID_to_LPID_Assignment_t)
+
 #endif    /* _LANTIQ_GSW_H_ */
diff --git a/include/net/switch_api/lantiq_gsw_flow.h b/include/net/switch_api/lantiq_gsw_flow.h
index 0defbed612ee..f7fedd5b117a 100644
--- a/include/net/switch_api/lantiq_gsw_flow.h
+++ b/include/net/switch_api/lantiq_gsw_flow.h
@@ -472,6 +472,60 @@ typedef struct {
 	ltq_bool_t bInsertionFlag_Enable;
 	/** Inserted packet by CPU to data path. For GSWIP-3.1 only */
 	u16 nInsertionFlag;
+
+	/*The below flexible field are Applicable for GSWIP 3.2 only*/
+
+	ltq_bool_t bFlexibleField4Enable;
+	/** Flexible Field 4 exclude mode 1 enable and 0 disable**/
+	ltq_bool_t bFlexibleField4_ExcludeEnable;
+	/** Flexible Field 4 parser mask or range selction - 0 mask/1 range**/
+	ltq_bool_t bFlexibleField4_RangeEnable;
+	/** Flexible Field 4 parser out put index 0-127**/
+	u8 nFlexibleField4_ParserIndex;
+	/** Flexible Field 4 value. 16 bit value for pattern match**/
+	u16 nFlexibleField4_Value;
+	/** Flexible Field 4 mask or range value.If bFlexibleField4_MaskEnable is 1 then
+		 this 16 bit feid will be Mask or it will be Range**/
+	u16 nFlexibleField4_MaskOrRange;
+
+	ltq_bool_t bFlexibleField3Enable;
+	/** Flexible Field 3 exclude mode 1 enable and 0 disable**/
+	ltq_bool_t bFlexibleField3_ExcludeEnable;
+	/** Flexible Field 3 parser mask or range selction - 0 mask/1 range**/
+	ltq_bool_t bFlexibleField3_RangeEnable;
+	/** Flexible Field 3 parser out put index 0-127**/
+	u8 nFlexibleField3_ParserIndex;
+	/** Flexible Field 3 value. 16 bit value for pattern match**/
+	u16 nFlexibleField3_Value;
+	/** Flexible Field 3 mask or range value.If bFlexibleField4_MaskEnable is 1 then
+	  this 16 bit feid will be Mask or it will be Range**/
+	u16 nFlexibleField3_MaskOrRange;
+
+	ltq_bool_t bFlexibleField2Enable;
+	/** Flexible Field 2 exclude mode 1 enable and 0 disable**/
+	ltq_bool_t bFlexibleField2_ExcludeEnable;
+	/** Flexible Field 2 parser mask or range selction - 0 mask/1 range**/
+	ltq_bool_t bFlexibleField2_RangeEnable;
+	/** Flexible Field 2 parser out put index 0-127**/
+	u8 nFlexibleField2_ParserIndex;
+	/** Flexible Field 2 value. 16 bit value for pattern match**/
+	u16 nFlexibleField2_Value;
+	/** Flexible Field 2 mask or range value.If bFlexibleField4_MaskEnable is 1 then
+		  this 16 bit feid will be Mask or it will be Range**/
+	u16 nFlexibleField2_MaskOrRange;
+
+	ltq_bool_t bFlexibleField1Enable;
+	/** Flexible Field 1 exclude mode 1 enable and 0 disable**/
+	ltq_bool_t bFlexibleField1_ExcludeEnable;
+	/** Flexible Field 1 parser mask or range selction - 0 mask/1 range**/
+	ltq_bool_t bFlexibleField1_RangeEnable;
+	/** Flexible Field 1 parser out put index 0-127**/
+	u8 nFlexibleField1_ParserIndex;
+	/** Flexible Field 1 value. 16 bit value for pattern match**/
+	u16 nFlexibleField1_Value;
+	/** Flexible Field 1 mask or range value.If bFlexibleField4_MaskEnable is 1 then
+		  this 16 bit feid will be Mask or it will be Range**/
+	u16 nFlexibleField1_MaskOrRange;
 } GSW_PCE_pattern_t;
 
 /** \brief IGMP Snooping Control.
@@ -710,6 +764,127 @@ typedef enum {
 	GSW_PCE_PROCESSING_PATH_BOTH = 3,
 } GSW_PCE_ProcessingPathAction_t;
 
+typedef enum {
+	/** No change in packet. */
+	GSW_PCE_I_HEADER_OPERATION_NOCHANGE = 0,
+	/** Insert I-Header for Non-PBB packet */
+	GSW_PCE_I_HEADER_OPERATION_INSERT = 1,
+	/** Remove I-Header for PBB packet
+	   (Removes both I-Header and B-Tag)*/
+	GSW_PCE_I_HEADER_OPERATION_REMOVE = 2,
+	/** Replace the I-Header Fields for PBB packet */
+	GSW_PCE_I_HEADER_OPERATION_REPLACE = 3,
+} GSW_PCE_IheaderOperationMode;
+
+typedef enum {
+	/** No change in B-TAG for PBB packet. */
+	GSW_PCE_B_TAG_OPERATION_NOCHANGE = 0,
+	/** Insert B-TAG for PBB packet */
+	GSW_PCE_B_TAG_OPERATION_INSERT = 1,
+	/** Remove B-TAG for PBB packet */
+	GSW_PCE_B_TAG_OPERATION_REMOVE = 2,
+	/** Replace B-TAG fields for PBB packet */
+	GSW_PCE_B_TAG_OPERATION_REPLACE = 3,
+} GSW_PCE_BtagOperationMode;
+
+typedef enum {
+	/** Outer Mac address is selected for learning
+		non-PBB packet or PBB encapsulation*/
+	GSW_PCE_OUTER_MAC_SELECTED = 0,
+	/** inner Mac address is selected for learning
+		PBB decapsulation*/
+	GSW_PCE_INNER_MAC_SELECTED = 1,
+} GSW_PCE_MacTableMacinMacSelect;
+
+typedef struct {
+	/** Destination Sub IF ID Group Field Action Enable*/
+	ltq_bool_t bDestSubIFIDActionEnable;
+	/** Destination Sub IF ID Group Field Assignment Enable*/
+	ltq_bool_t bDestSubIFIDAssignmentEnable;
+	/** Destination Sub IF ID Group Field Assignment*/
+	u8	nDestSubIFGrp_Field;
+
+} GSW_PCE_ActionDestSubIF_t;
+
+typedef struct {
+	/** Action enable I-Header*/
+	ltq_bool_t bIheaderActionEnable;
+	/** I-Header Operation Mode*/
+	GSW_PCE_IheaderOperationMode eIheaderOpMode;
+
+	/** Enable Tunnel Id for I-Header Known traffic*/
+	ltq_bool_t bTunnelIdKnownTrafficEnable;
+	/** Tunnel Template Index for I-Header Known traffic
+		this field should be valid ID returned by
+	    \ref GSW_PBB_TunnelTempate_Alloc and
+	     Configured Using GSW_PBB_TunnelTempate_Config_Set*/
+	u8 nTunnelIdKnownTraffic;
+
+	/** Enable Tunnel Id for I-Header UnKnown traffic*/
+	ltq_bool_t bTunnelIdUnKnownTrafficEnable;
+	/** Tunnel Template Index for I-Header UnKnown traffic
+		this field should be valid ID returned by
+	    \ref GSW_PBB_TunnelTempate_Alloc and
+	     Configured Using GSW_PBB_TunnelTempate_Config_Set*/
+	u8 nTunnelIdUnKnownTraffic;
+
+	/** Incase of I-Header operation mode is Insertion
+	    and bB_DstMac_FromMacTableEnable is enabled,
+	    the B-DA is from Mac table instead of tunnel template*/
+	ltq_bool_t bB_DstMac_FromMacTableEnable;
+
+	/** Replace B-SA from tunnel template*/
+	ltq_bool_t bReplace_B_SrcMacEnable;
+	/** Replace B-DA from tunnel template*/
+	ltq_bool_t bReplace_B_DstMacEnable;
+	/** Replace I-Tag Res from tunnel template*/
+	ltq_bool_t bReplace_I_TAG_ResEnable;
+	/** Replace I-Tag UAC from tunnel template*/
+	ltq_bool_t bReplace_I_TAG_UacEnable;
+	/** Replace I-Tag DEI from tunnel template*/
+	ltq_bool_t bReplace_I_TAG_DeiEnable;
+	/** Replace I-Tag PCP from tunnel template*/
+	ltq_bool_t bReplace_I_TAG_PcpEnable;
+	/** Replace I-Tag SID from tunnel template*/
+	ltq_bool_t bReplace_I_TAG_SidEnable;
+	/** Replace I-Tag TPID from tunnel template*/
+	ltq_bool_t bReplace_I_TAG_TpidEnable;
+
+	/** Action enable B-TAG*/
+	ltq_bool_t bBtagActionEnable;
+	/** B-Tag Operation Mode*/
+	GSW_PCE_BtagOperationMode eBtagOpMode;
+	/** Enable Process Id for B-TAG Known traffic*/
+	ltq_bool_t bProcessIdKnownTrafficEnable;
+	/** Tunnel Template Index for B-TAG Known traffic
+		this field should be valid ID returned by
+	    \ref GSW_PBB_TunnelTempate_Alloc and
+	     Configured Using GSW_PBB_TunnelTempate_Config_Set*/
+	u8 nProcessIdKnownTraffic;
+
+	/** Enable Process Id for B-TAG UnKnown traffic*/
+	ltq_bool_t bProcessIdUnKnownTrafficEnable;
+	/** Tunnel Template Index for B-TAG UnKnown traffic
+		this field should be valid ID returned by
+	    \ref GSW_PBB_TunnelTempate_Alloc and
+	     Configured Using GSW_PBB_TunnelTempate_Config_Set*/
+	u8 nProcessIdUnKnownTraffic;
+
+	/** Replace B-Tag DEI from tunnel template*/
+	ltq_bool_t bReplace_B_TAG_DeiEnable;
+	/** Replace B-Tag PCP from tunnel template*/
+	ltq_bool_t bReplace_B_TAG_PcpEnable;
+	/** Replace B-Tag SID from tunnel template*/
+	ltq_bool_t bReplace_B_TAG_VidEnable;
+	/** Replace B-Tag TPID from tunnel template*/
+	ltq_bool_t bReplace_B_TAG_TpidEnable;
+
+	/**Action enable Mac Table MacinMac*/
+	ltq_bool_t bMacTableMacinMacActionEnable;
+	/**Select Mac Table MacinMac Action */
+	GSW_PCE_MacTableMacinMacSelect eMacTableMacinMacSelect;
+} GSW_PCE_ActionPBB_t;
+
 /** \brief Packet Classification Engine Action Configuration.
     GSWIP-3.0 extension actions are explicitly indicated.
     Used by \ref GSW_PCE_rule_t. */
@@ -891,6 +1066,14 @@ typedef struct {
 	    and/or OAM process (bOamEnable is set). For GSWIP-3.1 only. Refer to
 	    GSWIP-3.1 Hardware Architecture Spec (HAS) for more detail. */
 	u32 nRecordId;
+
+	/** Configure PBB action. For GSWIP-3.2 only*/
+	ltq_bool_t	bPBB_Action_Enable;
+	GSW_PCE_ActionPBB_t sPBB_Action;
+
+	/** For Enabling Dest SubIF ID Group field in TFLOW.Valid only For GSWIP-3.2 only*/
+	ltq_bool_t	bDestSubIf_Action_Enable;
+	GSW_PCE_ActionDestSubIF_t sDestSubIF_Action;
 } GSW_PCE_action_t;
 
 /** \brief Parameter to add/read a rule to/from the packet classification engine.
