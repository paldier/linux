From c174a13203b864ff06988d94188ac58dcb915bae Mon Sep 17 00:00:00 2001
From: Zahari Doychev <zahari.doychev@intel.com>
Date: Sun, 17 Jun 2018 14:16:27 +0000
Subject: [PATCH] net: sched: new tc action to support color marking

PONRTSYS-2415: This is an initial version of the tc action to support
confiugration of packet color marking offload.

Signed-off-by: Zahari Doychev <zahari.doychev@intel.com>
---
 include/net/tc_act/tc_colmark.h        |   4 +-
 include/uapi/linux/tc_act/tc_colmark.h |  10 +-
 net/sched/Kconfig                      |  11 ++
 net/sched/Makefile                     |   1 +
 net/sched/act_colmark.c                | 215 +++++++++++++++++++++++++++++++++
 5 files changed, 234 insertions(+), 7 deletions(-)

diff --git a/include/net/tc_act/tc_colmark.h b/include/net/tc_act/tc_colmark.h
index 7cee48ddd10b..2b5870d70b4b 100644
--- a/include/net/tc_act/tc_colmark.h
+++ b/include/net/tc_act/tc_colmark.h
@@ -7,8 +7,8 @@
 
 struct tcf_colmark {
 	struct tc_action	common;
-	enum tc_col_precedence	precedence; /* packet drop precedence marker */
-	enum tc_maeter_type	type;  /* color marker type: srTCM, trTCM */
+	enum tc_drop_precedence	precedence; /* packet drop precedence marker */
+	enum tc_meter_type	type;  /* color marker type: srTCM, trTCM */
 	bool			blind;
 	u32			flags;
 };
diff --git a/include/uapi/linux/tc_act/tc_colmark.h b/include/uapi/linux/tc_act/tc_colmark.h
index d0ad86ee9311..74f44da641fd 100644
--- a/include/uapi/linux/tc_act/tc_colmark.h
+++ b/include/uapi/linux/tc_act/tc_colmark.h
@@ -4,11 +4,11 @@
 
 #include <linux/pkt_cls.h>
 
-#define TCA_ACT_COLMARK		27
+#define TCA_ACT_COLMARK			27
 
-#define COLMARK_F_MODE		0x1
-#define COLMARK_F_MARKER	0x2
-#define COLMARK_F_MTYPE		0x4
+#define COLMARK_F_MODE			0x1
+#define COLMARK_F_DROP_PRECEDENCE	0x2
+#define COLMARK_F_METER_TYPE		0x4
 
 enum tc_drop_precedence {
 	NO_MARKING,
@@ -35,7 +35,7 @@ enum {
 	TCA_COLMARK_TM,
 	TCA_COLMARK_PARMS,
 	TCA_COLMARK_MODE,
-	TCA_COLMARK_DROP_PRECEDEMCE,
+	TCA_COLMARK_DROP_PRECEDENCE,
 	TCA_COLMARK_METER_TYPE,
 	TCA_COLMARK_PAD,
 	__TCA_COLMARK_MAX
diff --git a/net/sched/Kconfig b/net/sched/Kconfig
index a970e65ebb6e..78aee6e7696e 100644
--- a/net/sched/Kconfig
+++ b/net/sched/Kconfig
@@ -812,6 +812,17 @@ config NET_CLS_IND
 	  classification based on the incoming device. This option is
 	  likely to disappear in favour of the metadata ematch.
 
+config NET_ACT_COLMARK
+	tristate "Color marking"
+	depends on NET_CLS_ACT
+	---help---
+	  Say Y here to configure color marking type and mode.
+
+	  If unsure, say N.
+
+	  To compile this code as a module, choose M here: the
+	  module will be called act_colmark.
+
 endif # NET_SCHED
 
 config NET_SCH_FIFO
diff --git a/net/sched/Makefile b/net/sched/Makefile
index 4bdda3634e0b..bffb3fd18dd6 100644
--- a/net/sched/Makefile
+++ b/net/sched/Makefile
@@ -25,6 +25,7 @@ obj-$(CONFIG_NET_IFE_SKBMARK)	+= act_meta_mark.o
 obj-$(CONFIG_NET_IFE_SKBPRIO)	+= act_meta_skbprio.o
 obj-$(CONFIG_NET_IFE_SKBTCINDEX)	+= act_meta_skbtcindex.o
 obj-$(CONFIG_NET_ACT_TUNNEL_KEY)+= act_tunnel_key.o
+obj-$(CONFIG_NET_ACT_COLMARK)	+= act_colmark.o
 obj-$(CONFIG_NET_SCH_FIFO)	+= sch_fifo.o
 obj-$(CONFIG_NET_SCH_CBQ)	+= sch_cbq.o
 obj-$(CONFIG_NET_SCH_HTB)	+= sch_htb.o
diff --git a/net/sched/act_colmark.c b/net/sched/act_colmark.c
new file mode 100644
index 000000000000..83744ffeea0a
--- /dev/null
+++ b/net/sched/act_colmark.c
@@ -0,0 +1,215 @@
+// SPDX-License-Identifier: GPL-2.0
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/kernel.h>
+#include <linux/skbuff.h>
+#include <linux/rtnetlink.h>
+#include <net/netlink.h>
+#include <net/pkt_sched.h>
+
+#include <linux/tc_act/tc_colmark.h>
+#include <net/tc_act/tc_colmark.h>
+
+#define COLMARK_TAB_MASK	256
+
+static unsigned int colmark_net_id;
+static struct tc_action_ops act_colmark_ops;
+
+static int tcf_colmark(struct sk_buff *skb, const struct tc_action *a,
+		       struct tcf_result *res)
+{
+	struct tcf_colmark *d = to_colmark(a);
+
+	/* TODO: add real implementation in the future. Currently only offload
+	 * path is supported
+	 */
+
+	return d->tcf_action;
+}
+
+static const struct nla_policy colmark_policy[TCA_COLMARK_MAX + 1] = {
+	[TCA_COLMARK_PARMS]		= { .len = sizeof(struct tc_colmark) },
+	[TCA_COLMARK_MODE]		= { .len = NLA_U8 },
+	[TCA_COLMARK_DROP_PRECEDENCE]	= { .len = NLA_U8 },
+	[TCA_COLMARK_METER_TYPE]	= { .len = NLA_U8 },
+};
+
+static int tcf_colmark_init(struct net *net, struct nlattr *nla,
+			    struct nlattr *est, struct tc_action **a,
+			    int ovr, int bind)
+{
+	struct tc_action_net *tn = net_generic(net, colmark_net_id);
+	struct nlattr *tb[TCA_COLMARK_MAX + 1];
+	struct tc_colmark *parm;
+	struct tcf_colmark *d;
+	u32 flags = 0;
+	u8 *mode = NULL, *precedence = NULL, *type = NULL;
+	bool exists = false;
+	int ret = 0, err;
+
+	if (!nla)
+		return -EINVAL;
+
+	err = nla_parse_nested(tb, TCA_COLMARK_MAX, nla, colmark_policy);
+	if (err < 0)
+		return err;
+
+	if (!tb[TCA_COLMARK_PARMS])
+		return -EINVAL;
+
+	if (tb[TCA_COLMARK_MODE]) {
+		flags |= COLMARK_F_MODE;
+		mode = nla_data(tb[TCA_COLMARK_MODE]);
+	}
+
+	if (tb[TCA_COLMARK_DROP_PRECEDENCE]) {
+		flags |= COLMARK_F_DROP_PRECEDENCE;
+		precedence = nla_data(tb[TCA_COLMARK_DROP_PRECEDENCE]);
+	}
+
+	if (tb[TCA_COLMARK_METER_TYPE]) {
+		flags |= COLMARK_F_METER_TYPE;
+		type = nla_data(tb[TCA_COLMARK_METER_TYPE]);
+	}
+
+	parm = nla_data(tb[TCA_COLMARK_PARMS]);
+
+	exists = tcf_hash_check(tn, parm->index, a, bind);
+	if (exists && bind)
+		return 0;
+
+	if (!flags) {
+		if (exists)
+			tcf_hash_release(*a, bind);
+		return -EINVAL;
+	}
+
+	if (!exists) {
+		ret = tcf_hash_create(tn, parm->index, est, a,
+				      &act_colmark_ops, bind, false);
+		if (ret)
+			return ret;
+
+		d = to_colmark(*a);
+		ret = ACT_P_CREATED;
+	} else {
+		d = to_colmark(*a);
+		tcf_hash_release(*a, bind);
+		if (!ovr)
+			return -EEXIST;
+	}
+
+	d->flags = flags;
+	if (flags & COLMARK_F_MODE)
+		d->blind = *mode  ? true : false;
+	if (flags & COLMARK_F_DROP_PRECEDENCE)
+		d->precedence = *precedence;
+	if (flags & COLMARK_F_METER_TYPE)
+		d->type = *type;
+
+	d->tcf_action = parm->action;
+
+	if (ret == ACT_P_CREATED)
+		tcf_hash_insert(tn, *a);
+	return ret;
+}
+
+static int tcf_colmark_dump(struct sk_buff *skb, struct tc_action *a,
+			    int bind, int ref)
+{
+	unsigned char *b = skb_tail_pointer(skb);
+	struct tcf_colmark *d = to_colmark(a);
+	struct tc_colmark opt = {
+		.index   = d->tcf_index,
+		.refcnt  = d->tcf_refcnt - ref,
+		.bindcnt = d->tcf_bindcnt - bind,
+		.action  = d->tcf_action,
+	};
+	struct tcf_t t;
+
+	if (nla_put(skb, TCA_COLMARK_PARMS, sizeof(opt), &opt))
+		goto nla_put_failure;
+	if ((d->flags & COLMARK_F_MODE) &&
+	    nla_put_u8(skb, TCA_COLMARK_MODE, d->blind ? 1 : 0))
+		goto nla_put_failure;
+	if ((d->flags & COLMARK_F_DROP_PRECEDENCE) &&
+	    nla_put_u8(skb, TCA_COLMARK_DROP_PRECEDENCE, d->precedence))
+		goto nla_put_failure;
+	if ((d->flags & COLMARK_F_METER_TYPE) &&
+	    nla_put_u8(skb, TCA_COLMARK_METER_TYPE, d->type))
+		goto nla_put_failure;
+
+	tcf_tm_dump(&t, &d->tcf_tm);
+	if (nla_put_64bit(skb, TCA_COLMARK_TM, sizeof(t), &t, TCA_COLMARK_PAD))
+		goto nla_put_failure;
+	return skb->len;
+
+nla_put_failure:
+	nlmsg_trim(skb, b);
+	return -1;
+}
+
+static int tcf_colmark_walker(struct net *net, struct sk_buff *skb,
+			      struct netlink_callback *cb, int type,
+			      const struct tc_action_ops *ops)
+{
+	struct tc_action_net *tn = net_generic(net, colmark_net_id);
+
+	return tcf_generic_walker(tn, skb, cb, type, ops);
+}
+
+static int tcf_colmark_search(struct net *net, struct tc_action **a, u32 index)
+{
+	struct tc_action_net *tn = net_generic(net, colmark_net_id);
+
+	return tcf_hash_search(tn, a, index);
+}
+
+static struct tc_action_ops act_colmark_ops = {
+	.kind		=	"colmark",
+	.type		=	TCA_ACT_COLMARK,
+	.owner		=	THIS_MODULE,
+	.act		=	tcf_colmark,
+	.dump		=	tcf_colmark_dump,
+	.init		=	tcf_colmark_init,
+	.walk		=	tcf_colmark_walker,
+	.lookup		=	tcf_colmark_search,
+	.size		=	sizeof(struct tcf_colmark),
+};
+
+static __net_init int colmark_init_net(struct net *net)
+{
+	struct tc_action_net *tn = net_generic(net, colmark_net_id);
+
+	return tc_action_net_init(tn, &act_colmark_ops, COLMARK_TAB_MASK);
+}
+
+static void __net_exit colmark_exit_net(struct net *net)
+{
+	struct tc_action_net *tn = net_generic(net, colmark_net_id);
+
+	tc_action_net_exit(tn);
+}
+
+static struct pernet_operations colmark_net_ops = {
+	.init = colmark_init_net,
+	.exit = colmark_exit_net,
+	.id   = &colmark_net_id,
+	.size = sizeof(struct tc_action_net),
+};
+
+static int __init colmark_init_module(void)
+{
+	return tcf_register_action(&act_colmark_ops, &colmark_net_ops);
+}
+
+static void __exit colmark_cleanup_module(void)
+{
+	tcf_unregister_action(&act_colmark_ops, &colmark_net_ops);
+}
+
+module_init(colmark_init_module);
+module_exit(colmark_cleanup_module);
+
+MODULE_DESCRIPTION("Packet color marking");
+MODULE_LICENSE("GPL");
