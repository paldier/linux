From 1c19e62f57129dbc0b7b7b57e8d6e1f01990bc79 Mon Sep 17 00:00:00 2001
From: "Rywacki, KamilX" <kamilx.rywacki@intel.com>
Date: Mon, 22 Jul 2019 12:25:43 +0200
Subject: [PATCH] PONRTSYS-4637: DSCP2PCP table full

- Improve DSCP logging
---
 .../net/ethernet/lantiq/switch-api/gsw_flow_core.c | 24 ++++++++++++++--------
 1 file changed, 16 insertions(+), 8 deletions(-)

diff --git a/drivers/net/ethernet/lantiq/switch-api/gsw_flow_core.c b/drivers/net/ethernet/lantiq/switch-api/gsw_flow_core.c
index 24e770661e9c..764172eff983 100644
--- a/drivers/net/ethernet/lantiq/switch-api/gsw_flow_core.c
+++ b/drivers/net/ethernet/lantiq/switch-api/gsw_flow_core.c
@@ -19901,7 +19901,8 @@ GSW_return_t GSW_ExtendedVlanSet(void *cdev, GSW_EXTENDEDVLAN_config_t *parm)
 				ret = GSW_QOS_Dscp2PcpTableGet(cdev, &dscp2pcp_get);
 
 				if (ret == GSW_statusErr) {
-					pr_err("ERROR: GSW_QOS_Dscp2PcpTableGet");
+					pr_err("ERROR:%s, GSW_QOS_Dscp2PcpTableGet failed\n",
+						__func__);
 					goto UNLOCK_AND_RETURN;
 				}
 
@@ -19918,7 +19919,8 @@ GSW_return_t GSW_ExtendedVlanSet(void *cdev, GSW_EXTENDEDVLAN_config_t *parm)
 				if (all_entry_match) {
 					dscp2pcp_pointer = idx;
 					dscp2pcpmatch_found = 1;
-					pr_err("dscp2pcpmatch_found : dscp2pcp_pointer = %d\n", dscp2pcp_pointer);
+					pr_debug("INFO:%s, dscp2pcpmatch_found-dscp2pcp_pointer:(%d)\n",
+						__func__, dscp2pcp_pointer);
 				}
 			}
 		}
@@ -19937,17 +19939,20 @@ GSW_return_t GSW_ExtendedVlanSet(void *cdev, GSW_EXTENDEDVLAN_config_t *parm)
 			  corresponding dscp2pcp table index
 			*/
 			if (empty_dscp2pcptblslot_found) {
-				pr_err("empty_dscp2pcptblslot_found : dscp2pcp_pointer = %d\n", dscp2pcp_pointer);
+				pr_debug("INFO:%s, empty_dscp2pcptblslot_found-dscp2pcp_pointer:(%d)\n",
+					__func__, dscp2pcp_pointer);
 				memcpy(dscp2pcp_set.nMap, parm->sTreatment.nDscp2PcpMap, (sizeof(u8) * 64));
 				dscp2pcp_set.nIndex = dscp2pcp_pointer;
 				ret = GSW_QOS_Dscp2PcpTableSet(cdev, &dscp2pcp_set);
 
 				if (ret == GSW_statusErr) {
-					pr_err("ERROR: GSW_QOS_Dscp2PcpTableSet\n");
+					pr_err("ERROR:%s, GSW_QOS_Dscp2PcpTableSet failed\n",
+						__func__);
 					goto UNLOCK_AND_RETURN;
 				}
 			} else {
-				pr_err("dscp2pcp table full\n");
+				pr_err("ERROR:%s, DSCP2PCP table is full\n",
+					__func__);
 				ret = GSW_statusErr;
 				goto UNLOCK_AND_RETURN;
 			}
@@ -20444,12 +20449,14 @@ GSW_return_t GSW_ExtendedVlanGet(void *cdev, GSW_EXTENDEDVLAN_config_t *parm)
 
 	if (bDscp2PcpMapEnable) {
 		dscp2pcp_pointer = ((tbl_prog.val[3] & 0x70) >> 4);
-		pr_err("dscp pointer = %d\n", dscp2pcp_pointer);
+		pr_debug("INFO:%s, dscp2pcp_pointer:(%d)\n", __func__,
+			dscp2pcp_pointer);
 
 		/** Get DSCP2PCP map **/
 		/*This dscp2pcp idx should be in use*/
 		if (!gswdev->dscp2pcp_idx[dscp2pcp_pointer].IndexInUse) {
-			printk("ERROR dscp2pcp_pointer not in use %d \n", dscp2pcp_pointer);
+			pr_err("ERROR:%s, dscp2pcp_pointer not in use:(%d)\n",
+				__func__, dscp2pcp_pointer);
 			goto UNLOCK_AND_RETURN;
 		}
 
@@ -20457,7 +20464,8 @@ GSW_return_t GSW_ExtendedVlanGet(void *cdev, GSW_EXTENDEDVLAN_config_t *parm)
 		ret = GSW_QOS_Dscp2PcpTableGet(cdev, &dscp2pcp_get);
 
 		if (ret == GSW_statusErr) {
-			pr_err("%s:%s:%d - GSW_QOS_Dscp2PcpTableGet", __FILE__, __func__, __LINE__);
+			pr_err("ERROR:%s, GSW_QOS_Dscp2PcpTableGet failed\n",
+				__func__);
 			goto UNLOCK_AND_RETURN;
 		}
 
