From 75595e7a2691db7131ee9ae5f844971ea2164f97 Mon Sep 17 00:00:00 2001
From: Peter Harliman Liem <peter.harliman.liem@intel.com>
Date: Wed, 30 Jan 2019 16:49:35 +0800
Subject: [PATCH] DRVLIB_SW-991 - Add 2.5G advertising support for ethtool/P31G

Linux PHY framework does not support 2500BaseT, hence
we need to manually configure this inside eth & phy driver.
Only advertising mode manipulation is added (manual speed selection
would require even more patches inside PHY framework).

PHY header patch/extension is required since 2500BaseT require
new 64-bit structure in ethtool header, which is not supported
in linux 4.9. For this the aim is to make the patch as minimal
as possible. Refer to notes from ethtool.h:
https://elixir.bootlin.com/linux/v4.9.154/ident/ETHTOOL_LINK_MODE_2500baseT_Full_BIT
---
 drivers/net/ethernet/lantiq/ltq_eth_drv_xrx500.c |  60 ++++++++++++-
 drivers/net/phy/lantiq.c                         | 105 ++++++++++++++++++++++-
 include/linux/phy.h                              |   8 ++
 3 files changed, 168 insertions(+), 5 deletions(-)

diff --git a/drivers/net/ethernet/lantiq/ltq_eth_drv_xrx500.c b/drivers/net/ethernet/lantiq/ltq_eth_drv_xrx500.c
index 6e95fd696281..26eec9d9fc3f 100644
--- a/drivers/net/ethernet/lantiq/ltq_eth_drv_xrx500.c
+++ b/drivers/net/ethernet/lantiq/ltq_eth_drv_xrx500.c
@@ -190,6 +190,62 @@ static int set_settings(struct net_device *dev, struct ethtool_cmd *cmd)
 	return -ENODEV;
 }
 
+static int get_link_ksettings(struct net_device *dev,
+			      struct ethtool_link_ksettings *cmd)
+{
+	int ret;
+
+	ret = phy_ethtool_get_link_ksettings(dev, cmd);
+	if (ret)
+		return ret;
+
+	/* Linux PHY framework does not yet support 2500baseT,
+	 * so we need to configure manually here.
+	 */
+	if (test_bit(ETHTOOL_LINK_MODE_2500baseT_Full_BIT,
+		     dev->phydev->extended_supported))
+		__set_bit(ETHTOOL_LINK_MODE_2500baseT_Full_BIT,
+			  cmd->link_modes.supported);
+	else
+		__clear_bit(ETHTOOL_LINK_MODE_2500baseT_Full_BIT,
+			    cmd->link_modes.supported);
+
+	if (test_bit(ETHTOOL_LINK_MODE_2500baseT_Full_BIT,
+		     dev->phydev->extended_advertising))
+		__set_bit(ETHTOOL_LINK_MODE_2500baseT_Full_BIT,
+			  cmd->link_modes.advertising);
+	else
+		__clear_bit(ETHTOOL_LINK_MODE_2500baseT_Full_BIT,
+			    cmd->link_modes.advertising);
+
+	if (test_bit(ETHTOOL_LINK_MODE_2500baseT_Full_BIT,
+		     dev->phydev->extended_lp_advertising))
+		__set_bit(ETHTOOL_LINK_MODE_2500baseT_Full_BIT,
+			  cmd->link_modes.lp_advertising);
+	else
+		__clear_bit(ETHTOOL_LINK_MODE_2500baseT_Full_BIT,
+			    cmd->link_modes.lp_advertising);
+
+	return 0;
+}
+
+static int set_link_ksettings(struct net_device *dev,
+			      const struct ethtool_link_ksettings *cmd)
+{
+	/* Linux PHY framework does not yet support 2500baseT,
+	 * so we need to configure manually here.
+	 */
+	if (test_bit(ETHTOOL_LINK_MODE_2500baseT_Full_BIT,
+		     cmd->link_modes.advertising))
+		__set_bit(ETHTOOL_LINK_MODE_2500baseT_Full_BIT,
+			  dev->phydev->extended_advertising);
+	else
+		__clear_bit(ETHTOOL_LINK_MODE_2500baseT_Full_BIT,
+			    dev->phydev->extended_advertising);
+
+	return phy_ethtool_set_link_ksettings(dev, cmd);
+}
+
 /* Reset the device */
 static int nway_reset(struct net_device *dev)
 {
@@ -312,8 +368,8 @@ static const struct ethtool_ops ethtool_ops = {
 	.set_settings		= set_settings,
 	.nway_reset		= nway_reset,
 	.get_link		= ethtool_op_get_link,
-	.get_link_ksettings	= phy_ethtool_get_link_ksettings,
-	.set_link_ksettings	= phy_ethtool_set_link_ksettings,
+	.get_link_ksettings	= get_link_ksettings,
+	.set_link_ksettings	= set_link_ksettings,
 	.get_eee		= ethtool_eee_get,
 	.set_eee		= ethtool_eee_set,
 };
diff --git a/drivers/net/phy/lantiq.c b/drivers/net/phy/lantiq.c
index 98768d081e5a..c6fd680e5244 100644
--- a/drivers/net/phy/lantiq.c
+++ b/drivers/net/phy/lantiq.c
@@ -43,6 +43,15 @@
 #define MMD_ACTYPE_DATA_PI	(2 << MMD_ACTYPE_SHIFT)
 #define MMD_ACTYPE_DATA_PIWR	(3 << MMD_ACTYPE_SHIFT)
 
+/* p31g aneg dev */
+#define MMD_DEVANEG		0x07
+#define P31G_ANEG_MGBT_AN_CTRL	0x20
+#define CTRL_AB_2G5BT_BIT	BIT(7)
+#define CTRL_AB_FR_2G5BT	BIT(5)
+#define P31G_ANEG_MGBT_AN_STAT	0x21
+#define STAT_AB_2G5BT_BIT	BIT(5)
+#define STAT_AB_FR_2G5BT	BIT(3)
+
 static __maybe_unused int vr9_gphy_mmd_read(struct phy_device *phydev,
 						u16 regnum)
 {
@@ -154,6 +163,96 @@ static int vr9_gphy_config_intr(struct phy_device *phydev)
 	return err;
 }
 
+/* direct clause-45 read */
+static __maybe_unused int p31g_gphy_mmd_read(struct phy_device *phydev,
+					     u32 devad, u32 regnum)
+{
+	regnum = MII_ADDR_C45 | ((devad & 0x1f) << 16) |
+		 (regnum & 0xffff);
+	return phy_read(phydev, regnum);
+}
+
+/* direct clause-45 write */
+static __maybe_unused int p31g_gphy_mmd_write(struct phy_device *phydev,
+					      u32 devad, u32 regnum, u32 val)
+{
+	regnum = MII_ADDR_C45 | ((devad & 0x1f) << 16) |
+		 (regnum & 0xffff);
+	return phy_write(phydev, regnum, val);
+}
+
+static int p31g_gphy_config_init(struct phy_device *phydev)
+{
+	vr9_gphy_config_init(phydev);
+
+	/* Linux PHY framework does not have a way yet to define
+	 * support for 2500baseT, therefore we set the bit directly here
+	 */
+	__set_bit(ETHTOOL_LINK_MODE_2500baseT_Full_BIT,
+		  phydev->extended_supported);
+	__set_bit(ETHTOOL_LINK_MODE_2500baseT_Full_BIT,
+		  phydev->extended_advertising);
+
+	return 0;
+}
+
+static int p31g_gphy_config_aneg(struct phy_device *phydev)
+{
+	int reg, old_reg, ret;
+	bool support_2G5BT;
+
+	/* configure 2.5G advertising */
+	support_2G5BT = test_bit(ETHTOOL_LINK_MODE_2500baseT_Full_BIT,
+				 phydev->extended_advertising);
+	reg = p31g_gphy_mmd_read(phydev, MMD_DEVANEG, P31G_ANEG_MGBT_AN_CTRL);
+	old_reg = reg;
+
+	if (support_2G5BT)
+		reg |= CTRL_AB_2G5BT_BIT | CTRL_AB_FR_2G5BT;
+	else
+		reg &= ~(CTRL_AB_2G5BT_BIT | CTRL_AB_FR_2G5BT);
+
+	if (old_reg != reg)
+		p31g_gphy_mmd_write(phydev, MMD_DEVANEG, P31G_ANEG_MGBT_AN_CTRL,
+				    reg);
+
+	ret = vr9_gphy_config_aneg(phydev);
+	if (ret)
+		return ret;
+
+	/* restart aneg if 2.5G adv bit changes */
+	if (phydev->autoneg == AUTONEG_ENABLE && (old_reg != reg))
+		return genphy_restart_aneg(phydev);
+
+	return 0;
+}
+
+static int p31g_gphy_read_status(struct phy_device *phydev)
+{
+	int ret, reg;
+
+	ret = genphy_read_status(phydev);
+	if (ret)
+		return ret;
+
+	/* check for 2.5G lp advertising and speed */
+	reg = p31g_gphy_mmd_read(phydev, MMD_DEVANEG, P31G_ANEG_MGBT_AN_STAT);
+	if (reg & (STAT_AB_2G5BT_BIT | STAT_AB_FR_2G5BT)) {
+		__set_bit(ETHTOOL_LINK_MODE_2500baseT_Full_BIT,
+			  phydev->extended_lp_advertising);
+
+		reg = p31g_gphy_mmd_read(phydev, MMD_DEVANEG,
+					 P31G_ANEG_MGBT_AN_CTRL);
+		if (reg & (CTRL_AB_2G5BT_BIT | CTRL_AB_FR_2G5BT))
+			phydev->speed = SPEED_2500;
+	} else {
+		__clear_bit(ETHTOOL_LINK_MODE_2500baseT_Full_BIT,
+			    phydev->extended_lp_advertising);
+	}
+
+	return 0;
+}
+
 static struct phy_driver lantiq_phy[] = {
 	{
 		.phy_id		= 0xd565a400,
@@ -209,9 +308,9 @@ static struct phy_driver lantiq_phy[] = {
 		.name		= "Intel GPHY 31G",
 		.features	= (PHY_GBIT_FEATURES | SUPPORTED_Pause),
 		.flags		= PHY_HAS_INTERRUPT,
-		.config_init	= vr9_gphy_config_init,
-		.config_aneg	= vr9_gphy_config_aneg,
-		.read_status	= genphy_read_status,
+		.config_init	= p31g_gphy_config_init,
+		.config_aneg	= p31g_gphy_config_aneg,
+		.read_status	= p31g_gphy_read_status,
 		.ack_interrupt	= vr9_gphy_ack_interrupt,
 		.config_intr	= vr9_gphy_config_intr,
 	},
diff --git a/include/linux/phy.h b/include/linux/phy.h
index 867110c9d707..9ea8b3b58db7 100644
--- a/include/linux/phy.h
+++ b/include/linux/phy.h
@@ -397,6 +397,14 @@ struct phy_device {
 	u32 advertising;
 	u32 lp_advertising;
 
+	/* Extended 64-bit support flag. These are added to add ethtool
+	 * support for 2.5GBaseT. Starting from linux 4.14, we may be
+	 * able to discard this, and use phylink support instead.
+	 */
+	__ETHTOOL_DECLARE_LINK_MODE_MASK(extended_supported);
+	__ETHTOOL_DECLARE_LINK_MODE_MASK(extended_advertising);
+	__ETHTOOL_DECLARE_LINK_MODE_MASK(extended_lp_advertising);
+
 	/* Energy efficient ethernet modes which should be prohibited */
 	u32 eee_broken_modes;
 
