From 6a0ff97622d272f464cae8d82c6a6f091ae28dea Mon Sep 17 00:00:00 2001
From: Rekha Eswaran <rekha.eswaran@intel.com>
Date: Wed, 8 Aug 2018 18:51:28 +0800
Subject: [PATCH] DRVLIB_SW-866: datapath lookup proc & queue setting changes

---
 drivers/net/ethernet/lantiq/datapath/datapath.h    |   2 +-
 .../net/ethernet/lantiq/datapath/datapath_proc.c   |   1 +
 .../ethernet/lantiq/datapath/datapath_proc_qos.c   |  67 ++-------
 .../lantiq/datapath/gswip31/datapath_gswip.c       |   1 +
 .../lantiq/datapath/gswip31/datapath_lookup_proc.c |  29 ++--
 .../lantiq/datapath/gswip31/datapath_misc.c        |  11 +-
 .../lantiq/datapath/gswip31/datapath_ppv4_api.c    | 151 ++++++---------------
 include/net/datapath_api_qos.h                     | 102 ++------------
 8 files changed, 91 insertions(+), 273 deletions(-)

diff --git a/drivers/net/ethernet/lantiq/datapath/datapath.h b/drivers/net/ethernet/lantiq/datapath/datapath.h
index be8b7debcdb2..8ce19ed2ffb1 100644
--- a/drivers/net/ethernet/lantiq/datapath/datapath.h
+++ b/drivers/net/ethernet/lantiq/datapath/datapath.h
@@ -443,7 +443,7 @@ struct pmac_port_info {
 	u32 vap_offset; /*shift bits to get vap value */
 	u32 vap_mask; /*get final vap after bit shift */
 	u8  cqe_lu_mode; /*cqe lookup mode */
-
+	u32 gsw_mode; /*gswip mode for subif */
 	u32 flag_other; /*save flag from cbm_dp_port_alloc */
 	u32 deq_port_base; /*CQE Dequeue Port */
 	u32 deq_port_num;  /*for PON IP: 64 ports, others: 1 */
diff --git a/drivers/net/ethernet/lantiq/datapath/datapath_proc.c b/drivers/net/ethernet/lantiq/datapath/datapath_proc.c
index 81c159b25270..5dc54c28dc97 100644
--- a/drivers/net/ethernet/lantiq/datapath/datapath_proc.c
+++ b/drivers/net/ethernet/lantiq/datapath/datapath_proc.c
@@ -132,6 +132,7 @@ int proc_port_dump(struct seq_file *s, int pos)
 			seq_printf(s, "%s ", dp_port_type_str[i]);
 	}
 	seq_puts(s, "\n");
+	seq_printf(s, "    mode:              %d\n", port->cqe_lu_mode);
 	seq_printf(s, "    cb->rx_fn:         0x%0x\n", (u32)port->cb.rx_fn);
 	seq_printf(s, "    cb->restart_fn:    0x%0x\n",
 		   (u32)port->cb.restart_fn);
diff --git a/drivers/net/ethernet/lantiq/datapath/datapath_proc_qos.c b/drivers/net/ethernet/lantiq/datapath/datapath_proc_qos.c
index 1166a29ca0ea..085091aa1900 100644
--- a/drivers/net/ethernet/lantiq/datapath/datapath_proc_qos.c
+++ b/drivers/net/ethernet/lantiq/datapath/datapath_proc_qos.c
@@ -1270,62 +1270,19 @@ ssize_t proc_qos_write(struct file *file, const char *buf, size_t count,
 
 		qmap_set.q_id = dp_atoi(param_list[1]);
 
-		if (dp_strncmpi(param_list[2], "mode0", strlen("mode0")) == 0) {
-			if (num < 10) {
-				PR_INFO("Wrong Parameter(try help):%s\n",
-					"echo help > /sys/kernel/debug/dp/qos");
-				return count;
-			}
-			qmap_set.qm_mode = DP_Q_MAP_MODE0;
-			qmap_set.map.map0.mpe1 = dp_atoi(param_list[3]);
-			qmap_set.map.map0.mpe2 = dp_atoi(param_list[4]);
-			qmap_set.map.map0.dp_port = dp_atoi(param_list[5]);
-			qmap_set.map.map0.flowid = dp_atoi(param_list[6]);
-			qmap_set.map.map0.dec = dp_atoi(param_list[7]);
-			qmap_set.map.map0.enc = dp_atoi(param_list[8]);
-			qmap_set.map.map0.class = dp_atoi(param_list[9]);
-		} else if (dp_strncmpi(param_list[2], "mode1",
-				       strlen("mode1")) == 0) {
-			if (num < 7) {
-				PR_INFO("Wrong Parameter(try help):%s\n",
-					"echo help > /sys/kernel/debug/dp/qos");
-				return count;
-			}
-			qmap_set.qm_mode = DP_Q_MAP_MODE1;
-			qmap_set.map.map1.mpe1 = dp_atoi(param_list[3]);
-			qmap_set.map.map1.mpe2 = dp_atoi(param_list[4]);
-			qmap_set.map.map1.dp_port = dp_atoi(param_list[5]);
-			qmap_set.map.map1.subif = dp_atoi(param_list[6]);
-		} else if (dp_strncmpi(param_list[2], "mode2",
-				       strlen("mode2")) == 0) {
-			if (num < 7) {
-				PR_INFO("Wrong Parameter(try help):%s\n",
-					"echo help > /sys/kernel/debug/dp/qos");
-				return count;
-			}
-			qmap_set.qm_mode = DP_Q_MAP_MODE2;
-			qmap_set.map.map2.mpe1 = dp_atoi(param_list[3]);
-			qmap_set.map.map2.mpe2 = dp_atoi(param_list[4]);
-			qmap_set.map.map2.dp_port = dp_atoi(param_list[5]);
-			qmap_set.map.map2.subif = dp_atoi(param_list[6]);
-			qmap_set.map.map2.class = dp_atoi(param_list[7]);
-		} else if (dp_strncmpi(param_list[2], "mode3",
-				       strlen("mode3")) == 0) {
-			if (num < 7) {
-				PR_INFO("Wrong Parameter(try help):%s\n",
-					"echo help > /sys/kernel/debug/dp/qos");
-				return count;
-			}
-			qmap_set.qm_mode = DP_Q_MAP_MODE3;
-			qmap_set.map.map3.mpe1 = dp_atoi(param_list[3]);
-			qmap_set.map.map3.mpe2 = dp_atoi(param_list[4]);
-			qmap_set.map.map3.dp_port = dp_atoi(param_list[5]);
-			qmap_set.map.map3.subif = dp_atoi(param_list[6]);
-			qmap_set.map.map3.class = dp_atoi(param_list[7]);
-		} else {
-			PR_ERR("unknown mode provided!\n");
+		if (num < 10) {
+			PR_INFO("Wrong Parameter(try help):%s\n",
+				"echo help > /sys/kernel/debug/dp/qos");
+			return count;
 		}
-
+		qmap_set.map.mpe1 = dp_atoi(param_list[2]);
+		qmap_set.map.mpe2 = dp_atoi(param_list[3]);
+		qmap_set.map.dp_port = dp_atoi(param_list[4]);
+		qmap_set.map.flowid = dp_atoi(param_list[5]);
+		qmap_set.map.dec = dp_atoi(param_list[6]);
+		qmap_set.map.enc = dp_atoi(param_list[7]);
+		qmap_set.map.class = dp_atoi(param_list[8]);
+		qmap_set.map.subif = dp_atoi(param_list[9]);
 		if (dp_queue_map_set(&qmap_set, 0)) {
 			PR_ERR("dp_queue_map_set failed\n");
 			return count;
diff --git a/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_gswip.c b/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_gswip.c
index 055d096c5b26..9e2608d37e7a 100644
--- a/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_gswip.c
+++ b/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_gswip.c
@@ -600,6 +600,7 @@ struct gsw_itf *ctp_port_assign(int inst, u8 ep, int bp_default,
 	ctp_assign.nFirstCtpPortId = 0;
 	ctp_assign.nNumberOfCtpPort = assign->num;
 	dp_port_info[inst][ep].cqe_lu_mode = assign->lookup_mode;
+	dp_port_info[inst][ep].gsw_mode = (u32)assign->emode;
 	if (gsw_core_api((dp_gsw_cb)gsw_handle->gsw_ctp_ops
 			  .CTP_PortAssignmentAlloc,
 			  gsw_handle,
diff --git a/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_lookup_proc.c b/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_lookup_proc.c
index 118898f557f9..b045a98ea213 100644
--- a/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_lookup_proc.c
+++ b/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_lookup_proc.c
@@ -333,6 +333,7 @@ int find_pattern(int port_id, struct seq_file *s, int qid)
 	int arr[] = {13, 12, 11, 10, 9, 8, /*7,6,5,4, */ 3, 2, 1, 0 };
 	int inst = 0;
 	struct hal_priv *priv = (struct hal_priv *)dp_port_prop[inst].priv_hal;
+	u32 mode = dp_port_info[inst][port_id].cqe_lu_mode;
 
 	left_n = 1 << (LOOKUP_FIELD_BITS - 4);	/*maximum lookup entried */
 	lookup_match_num = 0;
@@ -355,27 +356,31 @@ int find_pattern(int port_id, struct seq_file *s, int qid)
 		if (!f) {
 			f = 1;
 			proc_printf(s,
-				    "EP%-2d:%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s\n",
+				    "EP%-2d:%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%5s%s%d\n",
 				    tmp_pattern_port_id, "F2", "F1",
 				    "DEC", "ENC", "MPE2", "MPE1", "EP3",
 				    "EP2", "EP1", "EP0", "C3", "C2", "C1",
-				    "C0", "qid", "id");
+				    "C0", "qid", "id", "mode", "=", mode);
 		}
 		deq_port = priv->qos_queue_stat[lookup_match_qid[i]].deq_port;
 		flag_s = get_dma_flags_str31(deq_port, flag_buf,
 					     sizeof(flag_buf));
 
-		proc_printf(s, "    ");
-		for (j = LOOKUP_FIELD_BITS - 1; j >= 0; j--) {
-			if ((lookup_match_mask[i] >> j) & 1)
-				proc_printf(s, "%5c", 'x');
-			else
-				proc_printf(s, "%5d",
-					    (lookup_match_index[i] >> j) &
-					    1);
+		if (lookup_match_qid[i] != priv->ppv4_drop_q) {
+			proc_printf(s, "    ");
+			for (j = LOOKUP_FIELD_BITS - 1; j >= 0; j--) {
+				if ((lookup_match_mask[i] >> j) & 1)
+					proc_printf(s, "%5c", 'x');
+				else
+					proc_printf(s, "%5d",
+						    (lookup_match_index[i] >> j)
+									& 1);
+			}
+
+			proc_printf(s, "  ->%-3d(0x%04x)%s\n",
+				    lookup_match_qid[i],
+				    lookup_match_index[i], flag_s);
 		}
-		proc_printf(s, "->%-3d(0x%04x)%s\n", lookup_match_qid[i],
-			    lookup_match_index[i], flag_s);
 	}
 	if (s && seq_has_overflowed(s))
 		return -1;
diff --git a/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_misc.c b/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_misc.c
index ab319734902c..179172f2fe5d 100644
--- a/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_misc.c
+++ b/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_misc.c
@@ -537,6 +537,7 @@ int alloc_q_to_port(struct ppv4_q_sch_port *info, u32 flag)
 int dp_platform_queue_set(int inst, u32 flag)
 {
 	int ret, i;
+	u32 mode;
 	struct ppv4_queue q = {0};
 	cbm_queue_map_entry_t lookup = {0};
 	struct cbm_cpu_port_data cpu_data = {0};
@@ -566,7 +567,6 @@ int dp_platform_queue_set(int inst, u32 flag)
 		PR_INFO("drop queue: %d\n", priv->ppv4_drop_q);
 	}
 	/*Map all lookup entry to drop queue at the beginning*/
-	lookup.mode = CQE_LU_MODE0;
 	cbm_queue_map_set(dp_port_prop[inst].cbm_inst, priv->ppv4_drop_q,
 			  &lookup,
 			  CBM_QUEUE_MAP_F_FLOWID_L_DONTCARE |
@@ -581,9 +581,10 @@ int dp_platform_queue_set(int inst, u32 flag)
 
 	/*Set CPU port to Mode0 only*/
 	dp_port_info[inst][0].cqe_lu_mode = CQE_LU_MODE0;
-	lookup.mode = CQE_LU_MODE0;
+	mode = CQE_LU_MODE0;
 	lookup.ep = PMAC_CPU_ID;
 	cqm_mode_table_set(dp_port_prop[inst].cbm_inst, &lookup,
+			   mode,
 			   CBM_QUEUE_MAP_F_MPE1_DONTCARE |
 			   CBM_QUEUE_MAP_F_MPE2_DONTCARE);
 
@@ -653,7 +654,6 @@ int dp_platform_queue_set(int inst, u32 flag)
 		if (!f_cpu_q) {
 			f_cpu_q = 1;
 			/*Map all CPU port's lookup to its 1st queue only */
-			lookup.mode = CQE_LU_MODE0;
 			lookup.ep = PMAC_CPU_ID;
 			cbm_queue_map_set(dp_port_prop[inst].cbm_inst,
 					  q_port.qid,
@@ -823,6 +823,7 @@ static int port_platform_set(int inst, u8 ep, struct dp_port_data *data,
 			     u32 flags)
 {
 	int idx, i;
+	u32 mode;
 	cbm_queue_map_entry_t lookup = {0};
 	struct hal_priv *priv = (struct hal_priv *)dp_port_prop[inst].priv_hal;
 	struct gsw_itf *itf;
@@ -856,12 +857,14 @@ static int port_platform_set(int inst, u8 ep, struct dp_port_data *data,
 			port_info->tx_pkt_credit;
 		dp_deq_port_tbl[inst][i + idx].dp_port = ep;
 	}
-	lookup.mode = dp_port_info[inst][ep].cqe_lu_mode;
+	mode = dp_port_info[inst][ep].cqe_lu_mode;
 	lookup.ep = ep;
 	/*Set all mode based on MPE1/2 to same single mode as specified */
 	cqm_mode_table_set(dp_port_prop[inst].cbm_inst, &lookup,
+			   mode,
 			   CBM_QUEUE_MAP_F_MPE1_DONTCARE |
 			   CBM_QUEUE_MAP_F_MPE2_DONTCARE);
+
 	dp_node_reserve(inst, ep, data, flags);
 	dp_port_spl_cfg(inst, ep, data, flags);
 #if IS_ENABLED(CONFIG_LTQ_DATAPATH_DBG)
diff --git a/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_ppv4_api.c b/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_ppv4_api.c
index 79d1179aa3d2..d3e3033efb58 100644
--- a/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_ppv4_api.c
+++ b/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_ppv4_api.c
@@ -3946,42 +3946,14 @@ int dp_queue_map_get_31(struct dp_queue_map_get *cfg, int flag)
 	}
 
 	for (i = 0; i < num_entry; i++) {
-		if (cfg->qmap_entry[i].qm_mode == DP_Q_MAP_MODE0) {
-			cfg->qmap_entry[i].qmap.map0.flowid =
-							qmap_entry[i].flowid;
-			cfg->qmap_entry[i].qmap.map0.dec = qmap_entry[i].dec;
-			cfg->qmap_entry[i].qmap.map0.enc = qmap_entry[i].enc;
-			cfg->qmap_entry[i].qmap.map0.mpe1 = qmap_entry[i].mpe1;
-			cfg->qmap_entry[i].qmap.map0.mpe2 = qmap_entry[i].mpe2;
-			cfg->qmap_entry[i].qmap.map0.dp_port = qmap_entry[i].ep;
-			cfg->qmap_entry[i].qmap.map0.class = qmap_entry[i].tc;
-		} else if (cfg->qmap_entry[i].qm_mode == DP_Q_MAP_MODE1) {
-			cfg->qmap_entry[i].qm_mode = qmap_entry[i].mode;
-			cfg->qmap_entry[i].qmap.map1.subif =
-							qmap_entry[i].sub_if_id;
-			cfg->qmap_entry[i].qmap.map1.mpe1 = qmap_entry[i].mpe1;
-			cfg->qmap_entry[i].qmap.map1.mpe2 = qmap_entry[i].mpe2;
-			cfg->qmap_entry[i].qmap.map1.dp_port = qmap_entry[i].ep;
-		} else if (cfg->qmap_entry[i].qm_mode == DP_Q_MAP_MODE2) {
-			cfg->qmap_entry[i].qm_mode = qmap_entry[i].mode;
-			cfg->qmap_entry[i].qmap.map2.subif =
-							qmap_entry[i].sub_if_id;
-			cfg->qmap_entry[i].qmap.map2.mpe1 = qmap_entry[i].mpe1;
-			cfg->qmap_entry[i].qmap.map2.mpe2 = qmap_entry[i].mpe2;
-			cfg->qmap_entry[i].qmap.map2.dp_port = qmap_entry[i].ep;
-			cfg->qmap_entry[i].qmap.map2.class = qmap_entry[i].tc;
-		} else if (cfg->qmap_entry[i].qm_mode == DP_Q_MAP_MODE3) {
-			cfg->qmap_entry[i].qm_mode = qmap_entry[i].mode;
-			cfg->qmap_entry[i].qmap.map3.subif =
-							qmap_entry[i].sub_if_id;
-			cfg->qmap_entry[i].qmap.map3.mpe1 = qmap_entry[i].mpe1;
-			cfg->qmap_entry[i].qmap.map3.mpe2 = qmap_entry[i].mpe2;
-			cfg->qmap_entry[i].qmap.map3.dp_port = qmap_entry[i].ep;
-			cfg->qmap_entry[i].qmap.map3.class = qmap_entry[i].tc;
-		} else {
-			PR_ERR("queue map not found for q:%d\n", cfg->q_id);
-			res = DP_FAILURE;
-		}
+		cfg->qmap_entry[i].qmap.flowid = qmap_entry[i].flowid;
+		cfg->qmap_entry[i].qmap.dec = qmap_entry[i].dec;
+		cfg->qmap_entry[i].qmap.enc = qmap_entry[i].enc;
+		cfg->qmap_entry[i].qmap.mpe1 = qmap_entry[i].mpe1;
+		cfg->qmap_entry[i].qmap.mpe2 = qmap_entry[i].mpe2;
+		cfg->qmap_entry[i].qmap.dp_port = qmap_entry[i].ep;
+		cfg->qmap_entry[i].qmap.class = qmap_entry[i].tc;
+		cfg->qmap_entry[i].qmap.subif = qmap_entry[i].sub_if_id;
 	}
 
 EXIT:
@@ -4017,82 +3989,37 @@ int dp_queue_map_set_31(struct dp_queue_map_set *cfg, int flag)
 		return DP_FAILURE;
 	}
 
-	if (cfg->qm_mode == DP_Q_MAP_MODE0) {
-		qmap_cfg.mode = cfg->qm_mode;
-		qmap_cfg.mpe1 = cfg->map.map0.mpe1;
-		qmap_cfg.mpe2 = cfg->map.map0.mpe2;
-		qmap_cfg.ep = cfg->map.map0.dp_port;
-		qmap_cfg.flowid = cfg->map.map0.flowid;
-		qmap_cfg.dec = cfg->map.map0.dec;
-		qmap_cfg.enc = cfg->map.map0.enc;
-		qmap_cfg.tc = cfg->map.map0.class;
-		if (cfg->mask.mask0.mpe1)
-			cqm_flags |= CBM_QUEUE_MAP_F_MPE1_DONTCARE;
-		if (cfg->mask.mask0.mpe2)
-			cqm_flags |= CBM_QUEUE_MAP_F_MPE2_DONTCARE;
-		if (cfg->mask.mask0.dp_port)
-			cqm_flags |= CBM_QUEUE_MAP_F_EP_DONTCARE;
-		if (cfg->mask.mask0.flowid) {
-			cqm_flags |= CBM_QUEUE_MAP_F_FLOWID_L_DONTCARE;
-			cqm_flags |= CBM_QUEUE_MAP_F_FLOWID_H_DONTCARE;
-		}
-		if (cfg->mask.mask0.dec)
-			cqm_flags |= CBM_QUEUE_MAP_F_DE_DONTCARE;
-		if (cfg->mask.mask0.enc)
-			cqm_flags |= CBM_QUEUE_MAP_F_EN_DONTCARE;
-		if (cfg->mask.mask0.class)
-			cqm_flags |= CBM_QUEUE_MAP_F_TC_DONTCARE;
-	} else if (cfg->qm_mode == DP_Q_MAP_MODE1) {
-		qmap_cfg.mode = cfg->qm_mode;
-		qmap_cfg.mpe1 = cfg->map.map1.mpe1;
-		qmap_cfg.mpe2 = cfg->map.map1.mpe2;
-		qmap_cfg.ep = cfg->map.map1.dp_port;
-		qmap_cfg.sub_if_id = cfg->map.map1.subif;
-		if (cfg->mask.mask1.mpe1)
-			cqm_flags |= CBM_QUEUE_MAP_F_MPE1_DONTCARE;
-		if (cfg->mask.mask1.mpe2)
-			cqm_flags |= CBM_QUEUE_MAP_F_MPE2_DONTCARE;
-		if (cfg->mask.mask1.dp_port)
-			cqm_flags |= CBM_QUEUE_MAP_F_EP_DONTCARE;
-		if (cfg->mask.mask1.subif)
-			cqm_flags |= CBM_QUEUE_MAP_F_SUBIF_DONTCARE;
-	} else if (cfg->qm_mode == DP_Q_MAP_MODE2) {
-		qmap_cfg.mode = cfg->qm_mode;
-		qmap_cfg.mpe1 = cfg->map.map2.mpe1;
-		qmap_cfg.mpe2 = cfg->map.map2.mpe2;
-		qmap_cfg.ep = cfg->map.map2.dp_port;
-		qmap_cfg.sub_if_id = cfg->map.map2.subif;
-		qmap_cfg.tc = cfg->map.map2.class;
-		if (cfg->mask.mask2.mpe1)
-			cqm_flags |= CBM_QUEUE_MAP_F_MPE1_DONTCARE;
-		if (cfg->mask.mask2.mpe2)
-			cqm_flags |= CBM_QUEUE_MAP_F_MPE2_DONTCARE;
-		if (cfg->mask.mask2.dp_port)
-			cqm_flags |= CBM_QUEUE_MAP_F_EP_DONTCARE;
-		if (cfg->mask.mask2.subif)
-			cqm_flags |= CBM_QUEUE_MAP_F_SUBIF_DONTCARE;
-		if (cfg->mask.mask2.class)
-			cqm_flags |= CBM_QUEUE_MAP_F_TC_DONTCARE;
-	} else if (cfg->qm_mode == DP_Q_MAP_MODE3) {
-		qmap_cfg.mode = cfg->qm_mode;
-		qmap_cfg.mpe1 = cfg->map.map3.mpe1;
-		qmap_cfg.mpe2 = cfg->map.map3.mpe2;
-		qmap_cfg.ep = cfg->map.map3.dp_port;
-		qmap_cfg.sub_if_id = cfg->map.map3.subif;
-		qmap_cfg.tc = cfg->map.map3.class;
-		if (cfg->mask.mask3.mpe1)
-			cqm_flags |= CBM_QUEUE_MAP_F_MPE1_DONTCARE;
-		if (cfg->mask.mask3.mpe2)
-			cqm_flags |= CBM_QUEUE_MAP_F_MPE2_DONTCARE;
-		if (cfg->mask.mask3.dp_port)
-			cqm_flags |= CBM_QUEUE_MAP_F_EP_DONTCARE;
-		if (cfg->mask.mask3.subif)
-			cqm_flags |= CBM_QUEUE_MAP_F_SUBIF_DONTCARE;
-		if (cfg->mask.mask3.class)
-			cqm_flags |= CBM_QUEUE_MAP_F_TC_DONTCARE;
-	} else {
-		PR_ERR("Incorrect qm_mode provided:%d\n", cfg->qm_mode);
-		return DP_FAILURE;
+	qmap_cfg.mpe1 = cfg->map.mpe1;
+	qmap_cfg.mpe2 = cfg->map.mpe2;
+	qmap_cfg.ep = cfg->map.dp_port;
+	qmap_cfg.flowid = cfg->map.flowid;
+	qmap_cfg.dec = cfg->map.dec;
+	qmap_cfg.enc = cfg->map.enc;
+	qmap_cfg.tc = cfg->map.class;
+	qmap_cfg.sub_if_id = cfg->map.subif;
+	if (cfg->mask.mpe1)
+		cqm_flags |= CBM_QUEUE_MAP_F_MPE1_DONTCARE;
+	if (cfg->mask.mpe2)
+		cqm_flags |= CBM_QUEUE_MAP_F_MPE2_DONTCARE;
+	if (cfg->mask.dp_port)
+		cqm_flags |= CBM_QUEUE_MAP_F_EP_DONTCARE;
+	if (cfg->mask.flowid) {
+		cqm_flags |= CBM_QUEUE_MAP_F_FLOWID_L_DONTCARE;
+		cqm_flags |= CBM_QUEUE_MAP_F_FLOWID_H_DONTCARE;
+	}
+	if (cfg->mask.dec)
+		cqm_flags |= CBM_QUEUE_MAP_F_DE_DONTCARE;
+	if (cfg->mask.enc)
+		cqm_flags |= CBM_QUEUE_MAP_F_EN_DONTCARE;
+	if (cfg->mask.class)
+		cqm_flags |= CBM_QUEUE_MAP_F_TC_DONTCARE;
+	if (cfg->mask.dp_port)
+		cqm_flags |= CBM_QUEUE_MAP_F_EP_DONTCARE;
+	if (cfg->mask.subif) {
+		cqm_flags |= CBM_QUEUE_MAP_F_SUBIF_DONTCARE;
+		if (dp_port_info[cfg->inst][cfg->map.dp_port].gsw_mode ==
+				GSW_LOGICAL_PORT_9BIT_WLAN)
+			cqm_flags |= CBM_QUEUE_MAP_F_SUBIF_LSB_DONTCARE;
 	}
 
 	if (cbm_queue_map_set(cfg->inst, cfg->q_id, &qmap_cfg, cqm_flags)) {
diff --git a/include/net/datapath_api_qos.h b/include/net/datapath_api_qos.h
index 2b57a3ae7c15..339da0ee98fe 100644
--- a/include/net/datapath_api_qos.h
+++ b/include/net/datapath_api_qos.h
@@ -970,119 +970,43 @@ int dp_counter_mode_set(struct dp_counter_conf *cfg, int flag);
  */
 int dp_counter_mode_get(struct dp_counter_conf *cfg, int flag);
 
-/*! @brief dp_q_map_mode */
-enum dp_q_map_mode {
-	DP_Q_MAP_MODE0 = 0, /*!< flowid[7-6] dec/enc mpe2/1 dp_port class[3-0]*/
-	DP_Q_MAP_MODE1, /*!< subif[7-4] mpe2/1 dp_port subif[3-0] */
-	DP_Q_MAP_MODE2, /*!< subif_hi[11-8] mpe2/1 dp_port class[3-0] */
-	DP_Q_MAP_MODE3 /*!< subif_hi[4-0] mpe2/1 dp_port class[2-0] */
-};
-
-/*! @brief dp_q_map_mode0 */
-struct dp_q_map_mode0 {
+/*! @brief dp_q_map*/
+struct dp_q_map {
 	u32	mpe1; /*!< MPE1 Flag: 1 bit*/
 	u32	mpe2; /*!< MPE2 Flag:1 bit */
 	u32	dp_port; /*!< logical port id: 4 bits*/
 	u32	flowid; /*!< FlowId (Bits 7:6): 2 bit */
+	u32	subif; /*!< subif*/
 	u32	dec; /*!< VPN Decrypt flag: 1 bit*/
 	u32	enc; /*!< VPN Encrypt flag: 1 bit*/
 	u32	class; /*!< Traffic Class: 4 bits*/
 };
 
-/*! @brief dp_q_map_mode0_mask dont' care bit per field */
-struct dp_q_map_mode0_mask {
+/*! @brief dp_q_map_mask*/
+struct dp_q_map_mask {
 	u32	flowid:1; /*!< FlowId don't care */
 	u32	dec:1; /*!< DEC Decrypt flag don't care */
 	u32	enc:1; /*!< ENC Encrypt flag don't care */
 	u32	mpe1:1; /*!< MPE1 Flag don't care */
 	u32	mpe2:1; /*!< MPE2 Flag don't care */
-	u32	dp_port:4; /*!< logical port don't care */
-	u32	class:4; /*!< Traffic Class don't care */
-};
-
-/*! @brief dp_q_map_mode1*/
-struct dp_q_map_mode1 {
-	u32	mpe1; /*!< MPE1 Flag */
-	u32	mpe2; /*!< MPE2 Flag */
-	u32	dp_port; /*!< logical port */
-	u32	subif; /*!< subif_hi[7-0]*/
-};
-
-/*! @brief dp_q_map_mode1_mask dont' care bit per field */
-struct dp_q_map_mode1_mask {
-	u32	subif:1; /*!< subif_hi[7-4] don't care */
-	u32	mpe1:1; /*!< MPE1 Flag don't care */
-	u32	mpe2:1; /*!< MPE2 Flag don't care */
-	u32	dp_port:4; /*!< logical port don't care */
-};
-
-/*! @brief dp_q_map_mode2*/
-struct dp_q_map_mode2 {
-	u32	mpe1; /*!< MPE1 Flag: 1 bit */
-	u32	mpe2; /*!< MPE2 Flag: 1 bit */
-	u32	dp_port; /*!< logical port: 4 bits*/
-	u32	subif; /*!< subif_hi[7-4]*/
-	u32	class; /*!< class[3-0]*/
-};
-
-/*! @brief dp_q_map_mode2_mask dont' care bit per field */
-struct dp_q_map_mode2_mask {
-	u32	subif:1; /*!< subif_hi[7-4] don't care */
-	u32	mpe1:1; /*!< MPE1 Flag don't care */
-	u32	mpe2:1; /*!< MPE2 Flag don't care */
-	u32	dp_port:4; /*!< logical port don't care */
-	u32	class:1; /*!< subif_hi[3-0] don't care */
-};
-
-/*! @brief dp_q_map_mode3*/
-struct dp_q_map_mode3 {
-	u32	mpe1; /*!< MPE1 Flag: 1 bits */
-	u32	mpe2; /*!< MPE2 Flag: 1 bits */
-	u32	dp_port; /*!< logical port: 4 bits */
-	u32	subif; /*!< subif_hi[4-0]: 5 bits*/
-	u32	class; /*!< class[2-0]: 3 bits */
-};
-
-/*! @brief dp_q_map_mode3_mask dont' care bit per field */
-struct dp_q_map_mode3_mask {
-	u32	subif:1; /*!< subif_hi[7-4] don't care */
-	u32	mpe1:1; /*!< MPE1 Flag don't care */
-	u32	mpe2:1; /*!< MPE2 Flag don't care */
-	u32	dp_port:4; /*!< logical port don't care */
-	u32	class:1; /*!< subif_hi[3-0] don't care */
-};
-
-/*! @brief dp_q_map*/
-union dp_q_map {
-	struct dp_q_map_mode0 map0; /*!< dp_q_map_f_mode0 setting */
-	struct dp_q_map_mode1 map1; /*!< dp_q_map_f_mode1 setting */
-	struct dp_q_map_mode2 map2; /*!< dp_q_map_f_mode2 setting */
-	struct dp_q_map_mode3 map3; /*!< dp_q_map_f_mode3 setting */
-};
-
-/*! @brief dp_q_map_mask*/
-union dp_q_map_mask {
-	struct dp_q_map_mode0_mask mask0; /*!< don't care mask for this mode*/
-	struct dp_q_map_mode1_mask mask1; /*!< don't care mask for this mode*/
-	struct dp_q_map_mode2_mask mask2; /*!< don't care mask for this mode*/
-	struct dp_q_map_mode3_mask mask3; /*!< don't care mask for this mode*/
+	u32	subif:1; /*!< subif don't care */
+	u32	dp_port:1; /*!< logical port don't care */
+	u32	class:1; /*!< Traffic Class don't care */
 };
 
 /*! @brief queue_map_set*/
 struct dp_queue_map_set {
 	int inst; /*!< input: dp instance. For SOC side, it is always zero */
 	int q_id; /*!< queue id */
-	enum dp_q_map_mode qm_mode; /*!< map mode */
-	union dp_q_map map;  /*!< lookup map value */
-	union dp_q_map_mask mask; /*!< lookup map don't care flag setting:
-				   *  1 - means don't care this bit setting
-				   */
+	struct dp_q_map map;  /*!< lookup map value */
+	struct dp_q_map_mask mask; /*!< lookup map don't care flag setting:
+				    *  1 - means don't care this bit setting
+				    */
 };
 
 /*! @brief queue_map_entry*/
 struct dp_queue_map_entry {
-	enum dp_q_map_mode qm_mode; /*!< map mode */
-	union dp_q_map qmap;    /*!< map setting */
+	struct dp_q_map qmap;    /*!< map setting */
 };
 
 /*! @brief queue_map_get*/
