From 4c3b533cbab907d536ea9fefd2c8b14cc15faf6a Mon Sep 17 00:00:00 2001
From: Mallikarjuna reddy A <mallikarjuna.reddyx.amireddy@intel.com>
Date: Fri, 10 Aug 2018 11:50:03 +0800
Subject: [PATCH] DRVLIB_SW-896: datapath: Add API support for ppv4 port
 assignment

Add API's support for PPV4 port allocate and ring assignments and
free the allocated port and ring.

ppv4_alloc_port()
ppv4_port_free()
ppv4_alloc_ring()
ppv4_ring_free()

Signed-off-by: Mallikarjuna reddy A <mallikarjuna.reddyx.amireddy@intel.com>
---
 .../lantiq/datapath/gswip31/datapath_misc.h        |   7 ++
 .../lantiq/datapath/gswip31/datapath_ppv4.c        | 100 +++++++++++++++++++++
 .../lantiq/datapath/gswip31/datapath_ppv4.h        |   4 +
 3 files changed, 111 insertions(+)

diff --git a/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_misc.h b/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_misc.h
index 5cf02ad6598c..d59d80a167ee 100644
--- a/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_misc.h
+++ b/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_misc.h
@@ -23,6 +23,8 @@
 #define VAP_DSL_OFFSET 3
 #define NEW_CBM_API 1
 #define PMAPPER_DISC_CTP 255
+#define MAX_PPV4_PORTS 38
+#define PPV4_PORT_BASE 90
 
 #define GSWIP_O_DEV_NAME 1
 #define GSWIP_L GSWIP_O_DEV_NAME
@@ -78,6 +80,10 @@ struct resv_info {
 	struct resv_sch *resv_sched; /*!< reserved schedulers info */
 };
 
+struct ppv4_port_map_table {
+	int flags[MAX_PPV4_PORTS];
+};
+
 struct pp_qos_dev;
 struct hal_priv {
 	struct cqm_deq_stat deq_port_stat[MAX_CQM_DEQ];
@@ -95,6 +101,7 @@ struct hal_priv {
 	u32 ppv4_tmp_p; /* workaround for ppv4 queue allocate to
 			 * to get physical queue id
 			 */
+	struct ppv4_port_map_table ppv4_port_map;/* PPV4 Ports table map */
 };
 
 struct datapath_ctrl {
diff --git a/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_ppv4.c b/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_ppv4.c
index cb7e56612c67..c4a6393bad65 100644
--- a/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_ppv4.c
+++ b/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_ppv4.c
@@ -821,3 +821,103 @@ int init_ppv4_qos(int inst, int flag)
 	t = NULL;
 	return res;
 }
+
+/**
+ * __mark_ppv4_port - Mark the allocated ppv4 ports.
+ * @inst:	DP instance ID.
+ * @*priv:	hal private structure info.
+ * @base:	base of the continuous allocated ports.
+ * @mark:	no of ports allocated to be marked as 1.
+ **/
+static void __mark_ppv4_port(int inst, int base, int mark)
+{
+	int tmp;
+	struct hal_priv *priv = HAL(inst);
+
+	for (tmp = base; (tmp < mark) && (tmp < MAX_PPV4_PORTS); tmp++)
+		priv->ppv4_port_map.flags[tmp] = 1;
+}
+
+/**
+ * ppv4_alloc_port_31 -	Allocate continuous requested deq_ports.
+ * @inst:			DP instance ID
+ * @deq_port_num:	no'of continuous PPV4 ports to be allocated.
+ *
+ * Returns the base of the continuous allocated ports.
+ * else -ERROR.
+ **/
+int ppv4_alloc_port_31(int inst, int deq_port_num)
+{
+	u32 base, match;
+	struct hal_priv *priv = HAL(inst);
+
+	for (base = 0; base < MAX_PPV4_PORTS; base++) {
+		for (match = 0; (match < deq_port_num) && ((base + match)
+		     < MAX_PPV4_PORTS); match++) {
+			if (priv->ppv4_port_map.flags[base + match])
+				break;
+		}
+		if (match == deq_port_num) {
+			__mark_ppv4_port(inst, base, (base + match));
+			return (base + PPV4_PORT_BASE);
+		}
+	}
+	return DP_FAILURE; /* port not found */
+}
+
+/**
+ * ppv4_port_free_31 - Unmark the ppv4 ports for inst.
+ * @inst:			DP instance ID.
+ * @base:			base of continuous allocated PPV4 ports.
+ * @deq_port_num:	no'of continuous PPV4 ports allocated.
+ *
+ * Free the ports allocated by ppv4_alloc_port_31() by marking zero.
+ **/
+int ppv4_port_free_31(int inst, int base, int deq_port_num)
+{
+	u32 tmp;
+	struct hal_priv *priv = HAL(inst);
+
+	/* Expecting base always greater than PPV4_PORT_BASE */
+	if (base < PPV4_PORT_BASE)
+		return DP_FAILURE;
+
+	base = base - PPV4_PORT_BASE;
+	for (tmp = base; (tmp < MAX_PPV4_PORTS) && deq_port_num; tmp++) {
+		priv->ppv4_port_map.flags[tmp] = 0;
+		deq_port_num--;
+	}
+
+	return DP_SUCCESS;
+}
+
+/**
+ * ppv4_alloc_ring_31 - Allocate ring buffer for port
+ * @size:	size of the descriptor.
+ * @phy:	Phy addr of ring.
+ * @virt:	Virt addr of the ring.
+ *
+ * Allocate the ring buffer of @size(*DP_TXIN_RING_SIZE_DEF) requested by
+ * caller.
+ **/
+int ppv4_alloc_ring_31(int size, void **phy, void **virt)
+{
+	*virt = kmalloc(DP_TXIN_RING_SIZE_DEF * size, GFP_KERNEL);
+	if (!virt)
+		return -DP_FAILURE;
+
+	*phy = virt_to_phys(virt);
+
+	return DP_SUCCESS;
+}
+
+/**
+ * ppv4_ring_free_31 - Free ring buffer.
+ * @ptr:	virt addr of the ring.
+ *
+ * Free the ring buffer allocated by ppv4_alloc_ring_31().
+ **/
+void ppv4_ring_free_31(void *ptr)
+{
+	kfree(ptr);
+}
diff --git a/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_ppv4.h b/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_ppv4.h
index f78dac48cd83..1f473db9ebd5 100644
--- a/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_ppv4.h
+++ b/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_ppv4.h
@@ -203,5 +203,9 @@ int alloc_q_to_port(struct ppv4_q_sch_port *info, u32 flag);
 extern struct cqm_deq_stat deq_port_stat[MAX_CQM_DEQ];
 extern struct pp_queue_stat qos_queue_stat[MAX_QUEUE];
 int init_ppv4_qos(int inst, int flag);
+int ppv4_alloc_port_31(int inst, int deq_port_num);
+int ppv4_port_free_31(int inst, int base, int deq_port_num);
+int ppv4_alloc_ring_31(int size, void **phy, void **virt);
+void ppv4_ring_free_31(void *ptr);
 #endif /* DATAPATH_PPV4_H */
 
