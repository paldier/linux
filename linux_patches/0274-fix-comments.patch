From 230c578a6495a4c083970661097309f3dcd4541b Mon Sep 17 00:00:00 2001
From: Wu Zhixian <zhixianx.wu@intel.com>
Date: Sun, 16 Sep 2018 11:49:45 +0800
Subject: [PATCH] fix comments

---
 drivers/watchdog/grx500_wdt.c | 82 +++++++++++++++++++++----------------------
 1 file changed, 41 insertions(+), 41 deletions(-)

diff --git a/drivers/watchdog/grx500_wdt.c b/drivers/watchdog/grx500_wdt.c
index 79ebfd48e72c..536333e5a06c 100644
--- a/drivers/watchdog/grx500_wdt.c
+++ b/drivers/watchdog/grx500_wdt.c
@@ -117,7 +117,7 @@ static unsigned long cpu_clk;
 
 static inline void Enable_WDT_intr(void *wdtirq)
 {
-	pr_info("[%s]:[%d] irq= %d cpu = %d\n", __func__, __LINE__,
+	pr_debug("[%s]:[%d] irq= %d cpu = %d\n", __func__, __LINE__,
 		(*(u32 *)wdtirq), smp_processor_id());
 
 	enable_percpu_irq((*(u32 *)wdtirq), 0);
@@ -127,22 +127,22 @@ static int grx500wdt_start(struct watchdog_device *wdt_dev)
 {
 	uint32_t config0;
 
-//	pr_info("[%s]:[%d] wdt_dev=0x%x id=%d cpu = %d\n", __func__, __LINE__,
-//		wdt_dev, wdt_dev->id, smp_processor_id());
+	pr_debug("[%s]:[%d] wdt_dev=0x%x id=%d cpu = %d\n", __func__, __LINE__,
+		wdt_dev, wdt_dev->id, smp_processor_id());
 	if (wdt_dev->id == smp_processor_id()) {
 		config0 = gic_read_reg(GIC_REG(VPE_LOCAL, GIC_VPE_WD_CONFIG0));
-		rmb(); /* */
+		rmb();
 		gic_write_reg(GIC_REG(VPE_LOCAL, GIC_VPE_WD_CONFIG0),
 			(config0 | WD_START));
-		wmb(); /* */
+		wmb();
 	} else {
 		gic_write_reg(GIC_REG(VPE_LOCAL, GIC_VPE_OTHER_ADDR), wdt_dev->id);
-		wmb(); /* */
+		wmb();
 		config0 = gic_read_reg(GIC_REG(VPE_OTHER, GIC_VPE_WD_CONFIG0));
-		rmb(); /* */
+		rmb();
 		gic_write_reg(GIC_REG(VPE_OTHER, GIC_VPE_WD_CONFIG0),
 			(config0 | WD_START));
-		wmb(); /* */
+		wmb();
 	}
 
 	return 0;
@@ -152,22 +152,22 @@ static int grx500wdt_stop(struct watchdog_device *wdt_dev)
 {
 	uint32_t config0;
 
-	pr_info("[%s]:[%d] wdt_dev=0x%x id=%d cpu = %d\n", __func__, __LINE__,
+	pr_debug("[%s]:[%d] wdt_dev=0x%x id=%d cpu = %d\n", __func__, __LINE__,
 		wdt_dev, wdt_dev->id, smp_processor_id());
 	if (wdt_dev->id == smp_processor_id()) {
 		config0 = gic_read_reg(GIC_REG(VPE_LOCAL, GIC_VPE_WD_CONFIG0));
-		rmb(); /* */
+		rmb();
 		gic_write_reg(GIC_REG(VPE_LOCAL, GIC_VPE_WD_CONFIG0),
 			(config0 & ~WD_START));
-		wmb(); /* */
+		wmb();
 	} else {
 		gic_write_reg(GIC_REG(VPE_LOCAL, GIC_VPE_OTHER_ADDR), wdt_dev->id);
-		wmb(); /* */
+		wmb();
 		config0 = gic_read_reg(GIC_REG(VPE_OTHER, GIC_VPE_WD_CONFIG0));
-		rmb(); /* */
+		rmb();
 		gic_write_reg(GIC_REG(VPE_OTHER, GIC_VPE_WD_CONFIG0),
 			(config0 & ~WD_START));
-		wmb(); /* */
+		wmb();
 	}
 
 	return 0;
@@ -182,7 +182,7 @@ static int grx500wdt_set_timeout(struct watchdog_device *wdt_dev,
 	grx500_wdt = wdt_dev;
 
 	grx500_wdt->timeout = new_timeout;
-	pr_info("%s: timeout = %d, cpu = %d, id = %d wdt_dev=0x%x\n", __func__,
+	pr_debug("%s: timeout = %d, cpu = %d, id = %d wdt_dev=0x%x\n", __func__,
 		new_timeout, smp_processor_id(), wdt_dev->id, wdt_dev);
 
 	grx500wdt_stop(grx500_wdt);
@@ -195,10 +195,10 @@ static int grx500wdt_set_timeout(struct watchdog_device *wdt_dev,
 			gic_write_reg(GIC_REG(VPE_LOCAL, GIC_VPE_WD_INITIAL0),
 				(U32_MAX));
 		}
-		wmb(); /* */
+		wmb();
 	} else {
 		gic_write_reg(GIC_REG(VPE_LOCAL, GIC_VPE_OTHER_ADDR), wdt_dev->id);
-		wmb(); /* */
+		wmb();
 		if (((u64)cpu_clk * (u64)(grx500_wdt->timeout)) <= (u64)U32_MAX) {
 			gic_write_reg(GIC_REG(VPE_OTHER, GIC_VPE_WD_INITIAL0),
 				(cpu_clk * grx500_wdt->timeout));
@@ -206,7 +206,7 @@ static int grx500wdt_set_timeout(struct watchdog_device *wdt_dev,
 			gic_write_reg(GIC_REG(VPE_OTHER, GIC_VPE_WD_INITIAL0),
 				(U32_MAX));
 		}
-		wmb(); /* */
+		wmb();
 	}
 
 	grx500wdt_start(grx500_wdt);
@@ -220,24 +220,24 @@ static uint32_t grx500wdt_get_timeleft(struct watchdog_device *wdt_dev)
 
 	if (wdt_dev->id == smp_processor_id()) {
 		initial0 = gic_read_reg(GIC_REG(VPE_LOCAL, GIC_VPE_WD_INITIAL0));
-		rmb(); /* */
+		rmb();
 		config0 = gic_read_reg(GIC_REG(VPE_LOCAL, GIC_VPE_WD_CONFIG0));
-		rmb(); /* */
+		rmb();
 		count0 = gic_read_reg(GIC_REG(VPE_LOCAL, GIC_VPE_WD_COUNT0));
-		rmb(); /* */
+		rmb();
 		map0 = gic_read_reg(GIC_REG(VPE_LOCAL, GIC_VPE_WD_MAP));
-		rmb(); /* */
+		rmb();
 	} else {
 		gic_write_reg(GIC_REG(VPE_LOCAL, GIC_VPE_OTHER_ADDR), wdt_dev->id);
-		wmb(); /* */
+		wmb();
 		initial0 = gic_read_reg(GIC_REG(VPE_OTHER, GIC_VPE_WD_INITIAL0));
-		rmb(); /* */
+		rmb();
 		config0 = gic_read_reg(GIC_REG(VPE_OTHER, GIC_VPE_WD_CONFIG0));
-		rmb(); /* */
+		rmb();
 		count0 = gic_read_reg(GIC_REG(VPE_OTHER, GIC_VPE_WD_COUNT0));
-		rmb(); /* */
+		rmb();
 		map0 = gic_read_reg(GIC_REG(VPE_OTHER, GIC_VPE_WD_MAP));
-		rmb(); /* */
+		rmb();
 	}
 
 	regmap_read(ltq_rcu_base, RCU_IAP_WDT_RST_EN, &rst_en);
@@ -253,8 +253,8 @@ static int grx500wdt_ping(struct watchdog_device *wdt_dev)
 {
 	struct watchdog_device *grx500_wdt;
 
-//	pr_info("[%s]:[%d] wdt_dev->id=%d cpu = %d wdt_dev=0x%x\n", __func__, __LINE__,
-//		wdt_dev->id, smp_processor_id(), wdt_dev);
+	pr_debug("[%s]:[%d] wdt_dev->id=%d cpu = %d wdt_dev=0x%x\n", __func__, __LINE__,
+		wdt_dev->id, smp_processor_id(), wdt_dev);
 
 	/* grx500_wdt = &per_cpu(grx500wdt, smp_processor_id()); */
 	grx500_wdt = wdt_dev;
@@ -373,28 +373,28 @@ static int grx500wdt_probe(struct platform_device *pdev)
 
 		if (cpu == smp_processor_id()) {
 			gic_write_reg(GIC_REG(VPE_LOCAL, GIC_VPE_WD_CONFIG0), 0x0);
-			wmb(); /* */
+			wmb();
 			config0 = gic_read_reg(GIC_REG(VPE_LOCAL, GIC_VPE_WD_CONFIG0));
 			rmb(); /* Reset CONFIG0 to 0x0 */
 			gic_write_reg(GIC_REG(VPE_LOCAL, GIC_VPE_WD_CONFIG0),
 				(config0 | WD_TYPE_SCD | WD_NWAIT));
-			wmb(); /* */
+			wmb();
 			gic_write_reg(GIC_REG(VPE_LOCAL, GIC_VPE_WD_INITIAL0),
 				(U32_MAX));
-			wmb(); /* */
+			wmb();
 		} else {
 			gic_write_reg(GIC_REG(VPE_LOCAL, GIC_VPE_OTHER_ADDR), cpu);
-			wmb(); /* */
+			wmb();
 			gic_write_reg(GIC_REG(VPE_OTHER, GIC_VPE_WD_CONFIG0), 0x0);
-			wmb(); /* */
+			wmb();
 			config0 = gic_read_reg(GIC_REG(VPE_OTHER, GIC_VPE_WD_CONFIG0));
 			rmb(); /* Reset CONFIG0 to 0x0 */
 			gic_write_reg(GIC_REG(VPE_OTHER, GIC_VPE_WD_CONFIG0),
 				(config0 | WD_TYPE_SCD | WD_NWAIT));
-			wmb(); /* */
+			wmb();
 			gic_write_reg(GIC_REG(VPE_OTHER, GIC_VPE_WD_INITIAL0),
 				(U32_MAX));
-			wmb(); /* */
+			wmb();
 		}
 
 		/* Map to PIN is configured by GIC */
@@ -402,13 +402,13 @@ static int grx500wdt_probe(struct platform_device *pdev)
 		/* Use enable_percpu_irq() for each Online CPU. */
 
 		preempt_disable();
-		if (cpu != smp_processor_id()) {
+        if (cpu != smp_processor_id())
 			smp_call_function_single(cpu,
 				(smp_call_func_t)Enable_WDT_intr,
 				(void *)&irq, 1);
-        } else {
-			Enable_WDT_intr((void *)&irq);
-        }
+        else
+            Enable_WDT_intr((void *)&irq);
+
 		preempt_enable();
 
 		dev_info(&pdev->dev, "[%s]:[%d] grx500_wdt = %p\n",
@@ -425,7 +425,7 @@ static int grx500wdt_probe(struct platform_device *pdev)
 
 	/* Enable WDT reset to RCU for VPEx */
 	regmap_write(ltq_rcu_base, RCU_IAP_WDT_RST_EN, RCU_WDTx_RESET);
-	wmb(); /* */
+	wmb();
 
 	dev_info(&pdev->dev, "H/w Watchdog Timer: (max %ld) (nowayout= %d)\n",
 		(U32_MAX / cpu_clk), nowayout);
