From 83aa0e38cd5e46ce060d49f71c32a977e63204ee Mon Sep 17 00:00:00 2001
From: Rekha Eswaran <rekha.eswaran@intel.com>
Date: Tue, 12 Mar 2019 16:11:13 +0800
Subject: [PATCH] PONRTSYS-3728: To support mac learning enable/disable

---
 drivers/net/ethernet/lantiq/datapath/datapath.h    |  5 +++-
 .../net/ethernet/lantiq/datapath/datapath_proc.c   |  4 +++
 .../lantiq/datapath/gswip31/datapath_gswip.c       |  6 +++-
 .../lantiq/datapath/gswip31/datapath_misc.c        |  4 +++
 .../lantiq/datapath/gswip31/datapath_switchdev.c   | 34 ----------------------
 include/net/datapath_api.h                         |  4 +++
 6 files changed, 21 insertions(+), 36 deletions(-)

diff --git a/drivers/net/ethernet/lantiq/datapath/datapath.h b/drivers/net/ethernet/lantiq/datapath/datapath.h
index 02f51e583a72..4ca343193962 100644
--- a/drivers/net/ethernet/lantiq/datapath/datapath.h
+++ b/drivers/net/ethernet/lantiq/datapath/datapath.h
@@ -419,6 +419,9 @@ struct dp_subif_info {
 			 * dp_register_subif
 			 */
 	atomic_t rx_flag; /* To enable/disable DP rx */
+	u16 mac_learn_dis; /* To store mac learning capability of subif from
+			    * caller during dp_register_subif
+			    */
 };
 
 struct vlan_info {
@@ -478,7 +481,7 @@ struct pmac_port_info {
 	u32 f_ptp:1; /* PTP1588 support enablement */
 #endif
 #if IS_ENABLED(CONFIG_LTQ_DATAPATH_SWITCHDEV)
-	u32 swdev_en; /* swdev enable/disable flag for port */
+	u32 swdev_en; /* switchdev enable/disable flag for port */
 #endif
 };
 
diff --git a/drivers/net/ethernet/lantiq/datapath/datapath_proc.c b/drivers/net/ethernet/lantiq/datapath/datapath_proc.c
index 16d0953f5144..7674c332b085 100644
--- a/drivers/net/ethernet/lantiq/datapath/datapath_proc.c
+++ b/drivers/net/ethernet/lantiq/datapath/datapath_proc.c
@@ -130,7 +130,9 @@ int proc_port_dump(struct seq_file *s, int pos)
 	seq_puts(s, "\n");
 	seq_printf(s, "    mode:              %d\n", port->cqe_lu_mode);
 	seq_printf(s, "    LCT:               %d\n", port->lct_idx);
+#if IS_ENABLED(CONFIG_LTQ_DATAPATH_SWITCHDEV)
 	seq_printf(s, "    Swdev:             %d\n", port->swdev_en);
+#endif
 	seq_printf(s, "    cb->rx_fn:         0x%0x\n", (u32)port->cb.rx_fn);
 	seq_printf(s, "    cb->restart_fn:    0x%0x\n",
 		   (u32)port->cb.restart_fn);
@@ -203,6 +205,8 @@ int proc_port_dump(struct seq_file *s, int pos)
 			   cqm_p,
 			   port->subif_info[i].qos_deq_port,
 			   dp_deq_port_tbl[tmp_inst][cqm_p].ref_cnt);
+		seq_printf(s, "          : mac_learn_dis:    %d\n",
+			   port->subif_info[i].mac_learn_dis);
 		cid = _DMA_CONTROLLER(dp_deq_port_tbl[tmp_inst][cqm_p].dma_chan);
 		pid = _DMA_PORT(dp_deq_port_tbl[tmp_inst][cqm_p].dma_chan);
 		nid = _DMA_CHANNEL(dp_deq_port_tbl[tmp_inst][cqm_p].dma_chan);
diff --git a/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_gswip.c b/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_gswip.c
index 2af185f16d54..a93371f40e0a 100644
--- a/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_gswip.c
+++ b/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_gswip.c
@@ -695,7 +695,11 @@ int alloc_bridge_port(int inst, int port_id, int subif_ix,
 	/* By default Disable src mac learning for registered
 	 * non CPU bridge port with DP
 	 */
-	bp_cfg.bSrcMacLearningDisable = 1;
+	if (dp_port_info[inst][port_id].subif_info[subif_ix].mac_learn_dis ==
+							DP_MAC_LEARNING_DIS)
+		bp_cfg.bSrcMacLearningDisable = 1;
+	else
+		bp_cfg.bSrcMacLearningDisable = 0;
 	bp_cfg.eMask = GSW_BRIDGE_PORT_CONFIG_MASK_BRIDGE_ID |
 		GSW_BRIDGE_PORT_CONFIG_MASK_BRIDGE_PORT_MAP |
 		GSW_BRIDGE_PORT_CONFIG_MASK_MC_SRC_MAC_LEARNING |
diff --git a/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_misc.c b/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_misc.c
index 228a3cea7b2f..a33b44146941 100644
--- a/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_misc.c
+++ b/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_misc.c
@@ -1231,6 +1231,8 @@ static int dp_platform_set(int inst, u32 flag)
 		init_qos_fn();
 		/*just for debugging purpose */
 		dp_port_info[inst][0].subif_info[0].bp = CPU_BP;
+		dp_port_info[inst][0].subif_info[0].mac_learn_dis = 
+							DP_MAC_LEARNING_DIS;
 		INIT_LIST_HEAD(&dp_port_info[inst][0].subif_info[0].logic_dev);
 
 		priv->bp_def = alloc_bridge_port(inst, CPU_PORT, CPU_SUBIF,
@@ -1524,6 +1526,8 @@ static int subif_hw_set(int inst, int portid, int subif_ix,
 			 data->dev ? data->dev->name : "NULL",
 			 data->subif_data->ctp_dev ?
 				data->subif_data->ctp_dev->name : "NULL");
+		port_info->subif_info[subif_ix].mac_learn_dis =
+				data->subif_data->mac_learn_disable;
 		bp = alloc_bridge_port(inst, portid,
 				       subif_ix, CPU_FID, CPU_BP);
 		if (bp < 0) {
diff --git a/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_switchdev.c b/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_switchdev.c
index 24531dd457ff..0166b32ed685 100644
--- a/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_switchdev.c
+++ b/drivers/net/ethernet/lantiq/datapath/gswip31/datapath_switchdev.c
@@ -33,35 +33,6 @@ int dp_swdev_alloc_bridge_id(int inst)
 	return br.nBridgeId;
 }
 
-int dp_set_gswip_mac_learning(GSW_BRIDGE_portConfig_t *bport)
-{
-	int i, cnt = 0;
-	/*check if there is atleast one non-cpu bridge port as member to
-	 *enable MAC learning.Ignore if CPU port is a member
-	 */
-	for (i = 0; i < MAX_BP_NUM; i++) {
-		if (i == CPU_BP)
-			continue;
-		if (GET_BP_MAP(bport->nBridgePortMap, i))
-			cnt++;
-	}
-	if (cnt < 1) {
-		bport->eMask |= GSW_BRIDGE_PORT_CONFIG_MASK_MC_SRC_MAC_LEARNING;
-		bport->bSrcMacLearningDisable = 1;
-	} else {
-		/*Enable src mac learning*/
-		bport->eMask |= GSW_BRIDGE_PORT_CONFIG_MASK_MC_SRC_MAC_LEARNING;
-		bport->bSrcMacLearningDisable = 0;
-	}
-	if (bport->bSrcMacLearningDisable)
-		DP_DEBUG(DP_DBG_FLAG_SWDEV,
-			 "MAC learning disable cnt:%d\n", cnt);
-	else
-		DP_DEBUG(DP_DBG_FLAG_SWDEV,
-			 "MAC learning enable cnt:%d\n", cnt);
-	return 0;
-}
-
 int dp_swdev_bridge_port_cfg_set(struct br_info *br_item,
 				 int inst, int bport)
 {
@@ -93,7 +64,6 @@ int dp_swdev_bridge_port_cfg_set(struct br_info *br_item,
 	brportcfg.nBridgePortId = bport;
 	brportcfg.eMask = GSW_BRIDGE_PORT_CONFIG_MASK_BRIDGE_ID |
 		GSW_BRIDGE_PORT_CONFIG_MASK_BRIDGE_PORT_MAP;
-	dp_set_gswip_mac_learning(&brportcfg);
 	ret = gsw_core_api((dp_gsw_cb)gsw_handle->gsw_brdgport_ops.
 			   BridgePort_ConfigSet, gsw_handle, &brportcfg);
 	if (ret != GSW_statusOk) {
@@ -126,7 +96,6 @@ int dp_swdev_bridge_port_cfg_set(struct br_info *br_item,
 			brportcfg.eMask =
 				GSW_BRIDGE_PORT_CONFIG_MASK_BRIDGE_ID |
 				GSW_BRIDGE_PORT_CONFIG_MASK_BRIDGE_PORT_MAP;
-			dp_set_gswip_mac_learning(&brportcfg);
 			ret = gsw_core_api((dp_gsw_cb)gsw_handle
 					->gsw_brdgport_ops
 					.BridgePort_ConfigSet,
@@ -193,7 +162,6 @@ int dp_swdev_bridge_port_cfg_reset(struct br_info *br_item,
 	brportcfg.nBridgePortId = bport;
 	brportcfg.eMask = GSW_BRIDGE_PORT_CONFIG_MASK_BRIDGE_ID |
 			  GSW_BRIDGE_PORT_CONFIG_MASK_BRIDGE_PORT_MAP;
-	dp_set_gswip_mac_learning(&brportcfg);
 	ret = gsw_core_api((dp_gsw_cb)gsw_handle->gsw_brdgport_ops
 			   .BridgePort_ConfigSet, gsw_handle, &brportcfg);
 	if (ret != GSW_statusOk) {
@@ -222,12 +190,10 @@ int dp_swdev_bridge_port_cfg_reset(struct br_info *br_item,
 				return -1;
 			}
 			UNSET_BP_MAP(brportcfg.nBridgePortMap, bport);
-			//brportcfg.nBridgeId = br_item->fid;
 			brportcfg.nBridgePortId = bport_list->portid;
 			brportcfg.eMask =
 				 GSW_BRIDGE_PORT_CONFIG_MASK_BRIDGE_ID |
 				 GSW_BRIDGE_PORT_CONFIG_MASK_BRIDGE_PORT_MAP;
-			dp_set_gswip_mac_learning(&brportcfg);
 			ret = gsw_core_api((dp_gsw_cb)gsw_handle
 					 ->gsw_brdgport_ops
 					 .BridgePort_ConfigSet,
diff --git a/include/net/datapath_api.h b/include/net/datapath_api.h
index 2db8ff8d1931..778d23a72e1c 100644
--- a/include/net/datapath_api.h
+++ b/include/net/datapath_api.h
@@ -692,6 +692,10 @@ struct dp_subif_data {
 				     *   DP_F_NON_ACA_PORT is set during
 				     *   dp_alloc_port_ext
 				     */
+	#define DP_MAC_LEARNING_EN 0
+	#define DP_MAC_LEARNING_DIS 1
+	u16 mac_learn_disable; /*!< [in] To enable or disable mac learning for subif
+				*/
 };
 
 /*! @brief enum DP_F_DATA_RESV_CQM_PORT */
