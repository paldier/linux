From e5d3b2d0f3b93f12e99c18434992e23aff7d3aca Mon Sep 17 00:00:00 2001
From: Zahari Doychev <zahari.doychev@intel.com>
Date: Fri, 20 Jul 2018 11:00:24 +0000
Subject: [PATCH] include: datapath: meter and TC force APIs

This is the first version of the DP APIs for meter, color marking and CTP to
traffic class forcing APIs.

Signed-off-by: Zahari Doychev <zahari.doychev@intel.com>
---
 include/net/datapath_api_qos.h | 160 +++++++++++++++++++++++++++++++++++++++++
 1 file changed, 160 insertions(+)

diff --git a/include/net/datapath_api_qos.h b/include/net/datapath_api_qos.h
index 339da0ee98fe..65ffa2767c3d 100644
--- a/include/net/datapath_api_qos.h
+++ b/include/net/datapath_api_qos.h
@@ -1082,6 +1082,166 @@ struct dp_qos_level {
  */
 int dp_qos_level_get(struct dp_qos_level *dp, int flag);
 
+/*! Enumeration for color marking mode for drop precedence selection */
+enum dp_col_marking {
+	/*!< Do not color mark */
+	DP_NO_MARKING,
+	/*!< Internal marking derives the color of the packet from internal
+	     data flow instead of using VLAN tag or DSCP */
+	DP_INTERNAL,
+	/*!< Drop eligible bit color marking */
+	DP_DEI,
+	/*!< No drop precedence in the PCP */
+	DP_PCP_8P0D,
+	/*!< PCP = 4 drop eligible */
+	DP_PCP_7P1D,
+	/*!< PCP = 4, 2 drop eligible */
+	DP_PCP_6P2D,
+	/*!< PCP = 4, 2, 0 drop eligible */
+	DP_PCP_5P3D,
+	/*!< Drop precedence according to RFC 2597 */
+	DP_DSCP_AF,
+};
+
+/*! Enumeration for selection of single or dual rate color marker */
+enum dp_meter_type {
+	/*!< RFC2697 color marker */
+	srTCM,
+	/*!< RFC4115 color marker */
+	trTCM,
+};
+
+/*! Enumeration for traffic types needed for flow and bridge meters config */
+enum dp_meter_traffic_type {
+	/*!< Unicast traffic with no destination address */
+	DP_UKNOWN_UNICAST,
+	/*!< Upstream multicast traffic */
+	DP_MULTICAST,
+	/*!< Upstream broadcast traffic */
+	DP_BROADCAST,
+};
+
+/*!
+* @struct dp_meter_cfg
+*
+* @brief This structure defines the exact meter configuration
+*
+*/
+struct dp_meter_cfg {
+	/*!< meter for ingressing traffic */
+#define DP_DIR_INGRESS 0
+	/*!< meter for egressing traffic */
+#define DP_DIR_EGRESS  1
+	/*!< Configure color marking only, no meter setup */
+#define DP_METER_COL_MARKING_ONLY	BIT(0)
+	/*!< Attach meter to PCE rule e.g., CPU traffic limiting */
+#define DP_METER_ATTACH_PCE		BIT(1)
+	/*!< Attach meter to CTP port */
+#define DP_METER_ATTACH_CTP		BIT(2)
+	/*!< Attach meter to bridge port */
+#define DP_METER_ATTACH_BRPORT		BIT(3)
+	/*!< Attach meter to bridge */
+#define DP_METER_ATTACH_BRIDGE		BIT(4)
+	/*!< meter ID */
+	int meter_id;
+	/*!< meter type single/dual rate */
+	enum dp_meter_type type;
+	/*!< Committed information rate in kbit/s */
+	u32 cir;
+	/*!< Peak information rate in kbit/s */
+	u32 pir;
+	/*!< committed burst size in kbit */
+	u32 cbs;
+	/*!< peak burst size in kbit */
+	u32 pbs;
+	/*!< color blind/aware */
+	bool col_mode;
+	/*!< DP_DIR_INGRESS(0) and DP_DIR_EGRESS(1) */
+	int dir;
+	 /*!< color marking mode */
+	enum dp_col_marking mode;
+	 /*!< traffic flow type for bridge/PCE rule mode only */
+	union {
+		enum dp_meter_traffic_type flow;
+		/*!< PCE table rule index */
+		u32 pce_idx;
+	};
+};
+
+/*!< API dp_meter_alloc: allocate a meter resource
+ *
+ * @param: [out] meter ID
+ * @param: [in]  flag:
+ *	   DP_F_DEREGISTER - free an already allocated meter
+ *
+ */
+int dp_meter_alloc(int *meterid, int flag);
+
+/*!< API dp_meter_add: setup meter/color marking and apply it to CTP/BP/Bridge
+ * accordingly
+ * This API is used to configure meters and color marking on flows, bridges,
+ * CTP and bridge port at ingress/egress direction. The meter configuration
+ * requires four traffic parameters CIR/PIR/CBS/PBS. For single rate metering
+ * only CIR and CBS are required.
+ *
+ * @param: [in] dev pointer to netdevice CTP/BP/Bridge. In case of PCE rule
+ *		meter this netdevice is used to get the correct device and
+ *		PCE table instance.
+ * @param: [in] meter meter parameters: rates, color marking
+ * @param: [in] flag:
+ *	   DP_METER_COL_MARKING_ONLY	- setup only color marking
+ *	   DP_METER_ATTACH_PCE		- setup PCE rule meter e.g., CPU traffic
+ *	   DP_METER_ATTACH_CTP		- setup CTP port metering
+ *	   DP_METER_ATTACH_BPORT	- setup bridge port metering
+ *	   DP_METER_ATTACH_BRIDGE	- setup bridge metering
+ *
+ */
+
+int dp_meter_add(struct net_device *dev, struct dp_meter_cfg *meter, int flag);
+
+/*!< API dp_meter_del: delete meter
+ * This API deletes meter attached to CTP/BP/Bridge.
+ * The meter id in the struct dp_meter_cfg has to be a valid one.
+ *
+ * @param: [in] dev pointer to netdevice CTP/BP/Bridge
+ * @param: [in] meter meter parameters: rates, color marking
+ * @param: [in] flag:
+ *	   DP_METER_COL_MARKING_ONLY	- setup only color marking
+ *	   DP_METER_ATTACH_PCE		- setup PCE rule meter e.g., CPU traffic
+ *	   DP_METER_ATTACH_CTP		- setup CTP port metering
+ *	   DP_METER_ATTACH_BPORT	- setup bridge port metering
+ *	   DP_METER_ATTACH_BRIDGE	- setup bridge metering
+ *
+ */
+int dp_meter_del(struct net_device *dev, struct dp_meter_cfg *meter, int flag);
+
+/*!
+ * @struct dp_tc_cfg
+ *
+ * Structure defining the mapping of traffic class to CTP.
+ *
+ */
+struct dp_tc_cfg {
+	/*!< CTP port netdev */
+	struct net_device *dev;
+	/*!< Traffic class */
+	u8 tc;
+	/*!< Force CTP to traffic class */
+	bool force;
+};
+
+/*!< API dp_ingress_ctp_tc_map_set: force to one traffic class if received
+ *  packet from one specified setup CTP.
+ *  This used e.g., when CTP port ingress traffic has to be assigned to a
+ *  downstream queue.
+ *
+ * @param [in] mapping of CTP to traffic class
+ * @param [in] flag: reserved
+ *
+ */
+int dp_ingress_ctp_tc_map_set(struct dp_tc_cfg *tc, int flag);
+
+
 #ifdef ENABLE_QOS_EXAMPLE
 /*! \ingroup APIs_dp_qos_example
  * @brief example1: use basic node_link API to create complex QOS structure
