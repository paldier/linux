From 718c795bdb520870166e50f4fdcc000300abc1c8 Mon Sep 17 00:00:00 2001
From: zhu yixin <yixin.zhu@intel.com>
Date: Thu, 12 Jul 2018 16:03:31 +0800
Subject: [PATCH] DRVLIB_SW-833: fix combo phy create for aggregation issue

- Unify phy_create logic.
- remove lgm related code.
- update parameter name in dts.
---
 drivers/phy/intel/phy-intel-combo.c | 82 ++++++-------------------------------
 1 file changed, 12 insertions(+), 70 deletions(-)

diff --git a/drivers/phy/intel/phy-intel-combo.c b/drivers/phy/intel/phy-intel-combo.c
old mode 100755
new mode 100644
index 684a7de79bf2..648e03fc1822
--- a/drivers/phy/intel/phy-intel-combo.c
+++ b/drivers/phy/intel/phy-intel-combo.c
@@ -4,6 +4,7 @@
  *
  * Copyright (C) 2017 Intel Corporation.
  */
+
 #include <linux/kernel.h>
 #include <linux/module.h>
 #include <linux/init.h>
@@ -633,7 +634,6 @@ static int intel_combo_phy_get_clks(struct phy_ctx *iphy)
 	}
 
 	iphy->phy_gate_clk = devm_clk_get(dev, "phy");
-
 	if (IS_ERR(iphy->phy_gate_clk))
 		iphy->phy_gate_clk = NULL;
 	else
@@ -714,7 +714,7 @@ static int intel_phy_dt_parse(struct intel_combo_phy *priv,
 	iphy->dev = dev;
 	platform_set_drvdata(pdev, iphy);
 
-	if (!device_property_read_u32(dev, "mode", &prop)) {
+	if (!device_property_read_u32(dev, "intel,mode", &prop)) {
 		iphy->phy_mode = prop;
 		if (iphy->phy_mode >= PHY_MAX_MODE) {
 			dev_err(dev, "PHY mode: %u is invalid\n",
@@ -733,7 +733,7 @@ static int intel_phy_dt_parse(struct intel_combo_phy *priv,
 
 	if (iphy->id == 0) {
 		/* Dual lane configuration only required on PHY 0 */
-		if (!device_property_read_u32(dev, "aggregation", &prop))
+		if (!device_property_read_u32(dev, "intel,aggregation", &prop))
 			aggregated = !!prop;
 		else
 			aggregated = false;
@@ -919,6 +919,10 @@ static int intel_phy_create(struct phy_ctx *iphy)
 		return -ENODEV;
 	}
 
+	/* No phy instance need for slave */
+	if (iphy->phy_role == PHY_SLAVE)
+		return 0;
+
 	iphy->phy = devm_phy_create(dev, iphy->np, &intel_cbphy_ops);
 	if (IS_ERR(iphy->phy)) {
 		dev_err(dev,
@@ -943,12 +947,6 @@ static int intel_combo_phy_create(struct intel_combo_phy *priv)
 	int i;
 	struct phy_ctx *iphy;
 
-	if (priv->aggr_mode == PHY_DL_MODE) {/* Only PHY0 is visible */
-		iphy = &priv->phy[PHY_0];
-		if (intel_phy_create(iphy))
-			return -ENODEV;
-	}
-
 	for (i = 0; i < PHY_MAX_NUM; i++) {
 		if (priv->enable[i]) {
 			iphy = &priv->phy[i];
@@ -1054,7 +1052,7 @@ static u32 twh_get_phy_cap(unsigned int id)
 
 static int twh_phy_cr_cfg(struct phy_ctx *iphy, enum intel_phy_mode mode)
 {
-#define PCIE_PHY_VR_CNT		5000
+#define PCIE_PHY_CR_CNT		5000
 	int i;
 	u32 val;
 	void __iomem *base;
@@ -1062,30 +1060,11 @@ static int twh_phy_cr_cfg(struct phy_ctx *iphy, enum intel_phy_mode mode)
 	if (mode != PHY_PCIE_MODE)
 		return 0;
 
-	base = iphy->pcie_base;
-	WARN_ON(!base);
-
-	for (i = 0; i < PCIE_PHY_VR_CNT; i++) {
-		if ((combo_phy_r32(base, PCIE_PHY_MPLLA_CTRL) == 0xC0000000) &&
-		    (combo_phy_r32(base, PCIE_PHY_MPLLB_CTRL) == 0xC0000000))
-			break;
-		usleep_range(10, 20);
-	}
-
-	if (i >= PCIE_PHY_VR_CNT) {
-		dev_err(iphy->dev, "%s PHY%d MPLL locked failed\n",
-			__func__, iphy->id);
-		return -ETIMEDOUT;
-	}
-
-	dev_dbg(iphy->dev, "%s PHY%d MPLL locked succeed\n",
-		__func__, iphy->id);
-
 	/* PHY CR setting */
 	base = iphy->cr_base;
 	WARN_ON(!base);
 
-	for (i = 0; i < PCIE_PHY_VR_CNT; i++) {
+	for (i = 0; i < PCIE_PHY_CR_CNT; i++) {
 		combo_phy_w32_mask(base, BIT(2), BIT(3) | BIT(4), (0x0a << 2));
 		val = combo_phy_r32(base, (0x0a << 2));
 		if (((val & 0x18) == 0x18) &&
@@ -1094,7 +1073,7 @@ static int twh_phy_cr_cfg(struct phy_ctx *iphy, enum intel_phy_mode mode)
 		usleep_range(10, 20);
 	}
 
-	if (i >= PCIE_PHY_VR_CNT) {
+	if (i >= PCIE_PHY_CR_CNT) {
 		dev_err(iphy->dev, "SUP_DIG_SUP_OVRD_IN 0x%08x\n",
 			combo_phy_r32(base, (0x0a << 2)));
 		dev_err(iphy->dev,
@@ -1102,13 +1081,13 @@ static int twh_phy_cr_cfg(struct phy_ctx *iphy, enum intel_phy_mode mode)
 			!!((combo_phy_r32(base, (0x3059 << 2))) & BIT(0)));
 	}
 
-	for (i = 0; i < PCIE_PHY_VR_CNT; i++) {
+	for (i = 0; i < PCIE_PHY_CR_CNT; i++) {
 		if (!!(combo_phy_r32(base, (0x3032 << 2)) & BIT(1)))
 			break;
 		usleep_range(10, 20);
 	}
 
-	if (i >= PCIE_PHY_VR_CNT)
+	if (i >= PCIE_PHY_CR_CNT)
 		dev_err(iphy->dev, "PCIe PHY[%u:%u] calibration failed\n",
 			COMBO_PHY_ID(iphy), PHY_ID(iphy));
 	else
@@ -1172,36 +1151,6 @@ static void falconmx_combo_phy_mode_set(struct intel_combo_phy *priv)
 	}
 }
 
-/* Lighting Mountain platform data */
-static unsigned long lgm_get_clk_rate(enum intel_phy_mode mode)
-{
-	switch (mode) {
-	case PHY_PCIE_MODE:
-	case PHY_SATA_MODE:
-		return CLK_100MHZ;
-	case PHY_XPCS_MODE:
-		return CLK_78MHZ; /* 78.125Mhz */
-	case PHY_MAX_MODE:
-	default:
-		return 0;
-	}
-
-	return 0;
-}
-
-static u32 lgm_get_phy_cap(unsigned int id)
-{
-	const unsigned int phy_num = 4;
-	const unsigned int mtf_phy_num = 2;
-
-	if (id < mtf_phy_num)
-		return PHY_PCIE_CAP | PHY_XPCS_CAP | PHY_SATA_CAP;
-	else if (id < phy_num)
-		return PHY_PCIE_CAP;
-	else
-		return 0;
-}
-
 static const struct intel_cbphy_soc_data twh_phy_data = {
 	.name = "TwinHill",
 	.get_clk_rate = twh_get_clk_rate,
@@ -1217,16 +1166,9 @@ static const struct intel_cbphy_soc_data falconmx_phy_data = {
 	.combo_phy_mode_set = falconmx_combo_phy_mode_set,
 };
 
-static const struct intel_cbphy_soc_data lgm_phy_data = {
-	.name = "Lighting Mountain",
-	.get_clk_rate = lgm_get_clk_rate,
-	.get_phy_cap = lgm_get_phy_cap,
-};
-
 static const struct of_device_id of_intel_combo_phy_match[] = {
 	{ .compatible = "intel,combophy-twh", .data = &twh_phy_data },
 	{ .compatible = "intel,combophy-falconmx", .data = &falconmx_phy_data },
-	{ .compatible = "intel,combophy-lgm", .data = &lgm_phy_data },
 	{}
 };
 MODULE_DEVICE_TABLE(of, of_intel_combo_phy_match);
