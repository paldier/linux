From 74e0c6e43c7d29fcc85109fdb9f69f0d6fe25054 Mon Sep 17 00:00:00 2001
From: Peter Harliman Liem <peter.harliman.liem@intel.com>
Date: Thu, 6 Sep 2018 10:18:09 +0800
Subject: [PATCH] DRVLIB_SW-894 - Add private data in gphy fw driver

- Create private data structure
  This will be used to store required data that previously
  is not stored anywhere.
- Move reset controls into private data
- Move memory address into private data
- Rework functions to use private data instead of arguments.
---
 drivers/net/ethernet/lantiq/xrx500_phy_fw.c | 147 +++++++++++++++-------------
 1 file changed, 80 insertions(+), 67 deletions(-)

diff --git a/drivers/net/ethernet/lantiq/xrx500_phy_fw.c b/drivers/net/ethernet/lantiq/xrx500_phy_fw.c
index 65927c362f00..56b716bede51 100644
--- a/drivers/net/ethernet/lantiq/xrx500_phy_fw.c
+++ b/drivers/net/ethernet/lantiq/xrx500_phy_fw.c
@@ -16,6 +16,15 @@
 #include <lantiq_soc.h>
 
 #define XRX200_GPHY_FW_ALIGN	(16 * 1024)
+
+struct xway_gphy_data {
+	struct device *dev;
+	struct reset_control *phy_rst[3];
+
+	dma_addr_t dma_addr; /* DMA address */
+	void *virt_addr; /* virtual address */
+};
+
 /* GPHY related */
 static int g_xway_gphy_fw_loaded;
 
@@ -74,57 +83,55 @@ static void gsw_reg_w32_mask(u32 base, u32 clear, u32 val, u32 reg_off)
 }
 
 /* xrx500 specific boot sequence */
-static int xrx500_gphy_boot(struct device *dev, struct reset_control **phy_rst,
-			    unsigned int id, dma_addr_t dev_addr)
+static int xrx500_gphy_boot(struct xway_gphy_data *priv, unsigned int id)
 {
 	if (id > 4) {
-		dev_info(dev, "%u is an invalid gphy id\n", id);
+		dev_info(priv->dev, "%u is an invalid gphy id\n", id);
 		return -EINVAL;
 	}
-	reset_control_assert(phy_rst[0]);
-	gsw_reg_w32(GSW_L_TOP_BASE, (dev_addr & 0xFFFF),
+	reset_control_assert(priv->phy_rst[0]);
+	gsw_reg_w32(GSW_L_TOP_BASE, (priv->dma_addr & 0xFFFF),
 		    xrx500_gphy[id]);
-	gsw_reg_w32(GSW_L_TOP_BASE, ((dev_addr >> 16) & 0xFFFF),
+	gsw_reg_w32(GSW_L_TOP_BASE, ((priv->dma_addr >> 16) & 0xFFFF),
 		    (xrx500_gphy[id] + 4));
-	reset_control_deassert(phy_rst[0]);
-	dev_info(dev, "booting GPHY%u firmware at %X for GRX500\n",
-		 id, dev_addr);
+	reset_control_deassert(priv->phy_rst[0]);
+	dev_info(priv->dev, "booting GPHY%u firmware at %X for GRX500\n",
+		 id, priv->dma_addr);
 
 	return 0;
 }
 
 /* prx300 specific boot sequence */
-static int prx300_gphy_boot(struct device *dev, struct reset_control **phy_rst,
-			    unsigned int id, dma_addr_t dev_addr, void *addr)
+static int prx300_gphy_boot(struct xway_gphy_data *priv, unsigned int id)
 {
 	/* set LAN interface to GPHY */
 	gsw_reg_w32_mask(PRX300_CHIP_TOP, 0x2, 0x0, PRX300_IFMUX_CFG);
 
 	/* GPHY reset */
-	reset_control_assert(phy_rst[0]);
+	reset_control_assert(priv->phy_rst[0]);
 	udelay(500);
 
 	/* CDB and Power Down */
-	reset_control_assert(phy_rst[1]);
-	reset_control_assert(phy_rst[2]);
+	reset_control_assert(priv->phy_rst[1]);
+	reset_control_assert(priv->phy_rst[2]);
 	udelay(400);
 
 	/* release CDB reset */
-	reset_control_deassert(phy_rst[1]);
+	reset_control_deassert(priv->phy_rst[1]);
 
 	/* GPHY FW address and pin strapping */
-	gsw_reg_w32(PRX300_GPHY_CGU_BASE, dev_addr, PRX300_GPHY_FCR);
+	gsw_reg_w32(PRX300_GPHY_CGU_BASE, priv->dma_addr, PRX300_GPHY_FCR);
 	gsw_reg_w32(PRX300_GPHY_CGU_BASE, PRX300_GPHY0_GPS0_LO,
 		    PRX300_GPHY0_GPS0);
 	gsw_reg_w32(PRX300_GPHY_CGU_BASE, PRX300_GPHY0_GPS0_HI,
 		    PRX300_GPHY0_GPS1);
 
 	/* release GPHY reset */
-	reset_control_deassert(phy_rst[0]);
+	reset_control_deassert(priv->phy_rst[0]);
 	udelay(500);
 
 	/* GPHY Power on */
-	reset_control_deassert(phy_rst[2]);
+	reset_control_deassert(priv->phy_rst[2]);
 
 	/* Set divider and misc config */
 	gsw_reg_w32_mask(PRX300_GPHY_CDB_PDI_BASE, 0xFFF0,
@@ -141,30 +148,28 @@ static int prx300_gphy_boot(struct device *dev, struct reset_control **phy_rst,
 	/* delay to wait until firmware boots up */
 	msleep(100);
 
-	dev_info(dev, "booting GPHY%u firmware at %X for PRX300\n",
-		 id, dev_addr);
+	dev_info(priv->dev, "booting GPHY%u firmware at %X for PRX300\n",
+		 id, priv->dma_addr);
 
-	devm_iounmap(dev, addr);
+	devm_iounmap(priv->dev, priv->virt_addr);
 	return 0;
 }
 
-static dma_addr_t xway_gphy_load(struct platform_device *pdev, void **addr)
+static int xway_gphy_load(struct xway_gphy_data *priv)
 {
 	const struct firmware *fw;
-	dma_addr_t dev_addr = 0;
 	const char *fw_name;
-	void *fw_addr;
 	size_t size;
 
-	if (of_property_read_string(pdev->dev.of_node, "firmware", &fw_name)) {
-		dev_err(&pdev->dev, "failed to load firmware filename\n");
-		return 0;
+	if (of_property_read_string(priv->dev->of_node, "firmware", &fw_name)) {
+		dev_err(priv->dev, "failed to load firmware filename\n");
+		return -EINVAL;
 	}
 
-	dev_info(&pdev->dev, "requesting %s\n", fw_name);
-	if (request_firmware(&fw, fw_name, &pdev->dev)) {
-		dev_err(&pdev->dev, "failed to load firmware: %s\n", fw_name);
-		return 0;
+	dev_info(priv->dev, "requesting %s\n", fw_name);
+	if (request_firmware(&fw, fw_name, priv->dev)) {
+		dev_err(priv->dev, "failed to load firmware: %s\n", fw_name);
+		return -EIO;
 	}
 
 	/**
@@ -173,48 +178,58 @@ static dma_addr_t xway_gphy_load(struct platform_device *pdev, void **addr)
 	 */
 	size = fw->size + XRX200_GPHY_FW_ALIGN;
 
-	if (of_device_is_compatible(pdev->dev.of_node, "intel,phy-prx300")) {
+	if (of_device_is_compatible(priv->dev->of_node, "intel,phy-prx300")) {
 		/* Temporary workaround for PRX300 GPHY issue.
 		 * Firmware loading in PRX300 GPHY does not work if address
 		 * is in DDR. For this reason we hardcode the address to SRAM
 		 * location (which is assumed to be free at the beginning of
 		 * boot).
 		 */
-		dev_addr = (dma_addr_t)PRX300_FW_LOAD_ADDR;
-		fw_addr = devm_ioremap_nocache(&pdev->dev, PRX300_FW_LOAD_ADDR,
-					       size);
-		dev_info(&pdev->dev, "Temporary use SRAM for firmware %p:%x\n",
-			 fw_addr, dev_addr);
+		priv->dma_addr = (dma_addr_t)PRX300_FW_LOAD_ADDR;
+		priv->virt_addr = devm_ioremap_nocache(priv->dev,
+						       PRX300_FW_LOAD_ADDR,
+						       size);
+		dev_info(priv->dev, "Temporary use SRAM for firmware %p:%x\n",
+			 priv->virt_addr, priv->dma_addr);
 	} else {
-		fw_addr = dma_alloc_coherent(&pdev->dev, size, &dev_addr,
-					     GFP_KERNEL);
+		priv->virt_addr = dma_alloc_coherent(priv->dev, size,
+						     &priv->dma_addr,
+						     GFP_KERNEL);
 	}
 
-	if (fw_addr) {
-		fw_addr = PTR_ALIGN(fw_addr, XRX200_GPHY_FW_ALIGN);
-		dev_addr = ALIGN(dev_addr, XRX200_GPHY_FW_ALIGN);
-		memcpy(fw_addr, fw->data, fw->size);
-	} else {
-		dev_err(&pdev->dev, "failed to alloc firmware memory\n");
+	if (!priv->virt_addr) {
+		dev_err(priv->dev, "failed to alloc firmware memory\n");
+		release_firmware(fw);
+		return -ENOMEM;
 	}
 
+	priv->virt_addr = PTR_ALIGN(priv->virt_addr, XRX200_GPHY_FW_ALIGN);
+	priv->dma_addr = ALIGN(priv->dma_addr, XRX200_GPHY_FW_ALIGN);
+	memcpy(priv->virt_addr, fw->data, fw->size);
+
 	release_firmware(fw);
-	*addr = fw_addr;
-	return dev_addr;
+	return 0;
 }
 
 static int xway_phy_fw_probe(struct platform_device *pdev)
 {
-	dma_addr_t fw_addr;
 	struct property *pp;
 	unsigned char *phyids;
 	int i, ret = 0;
 	char phy_str[16];
-	struct reset_control *phy_rst[3];
-	void *addr;
+	struct xway_gphy_data *priv;
+
+	priv = devm_kzalloc(&pdev->dev, sizeof(*priv), GFP_KERNEL);
+	if (!priv) {
+		dev_err(&pdev->dev, "can't allocate private data\n");
+		return -ENOMEM;
+	}
+
+	priv->dev = &pdev->dev;
+	platform_set_drvdata(pdev, priv);
 
-	fw_addr = xway_gphy_load(pdev, &addr);
-	if (!fw_addr)
+	ret = xway_gphy_load(priv);
+	if (ret)
 		return -EPROBE_DEFER;
 
 	pp = of_find_property(pdev->dev.of_node, "phy_id", NULL);
@@ -224,40 +239,38 @@ static int xway_phy_fw_probe(struct platform_device *pdev)
 	phyids = pp->value;
 	for (i = 0; i < pp->length && !ret; i++) {
 		sprintf(phy_str, "phy%d", phyids[i]);
-		phy_rst[0] = devm_reset_control_get(&pdev->dev, phy_str);
-		if (IS_ERR(phy_rst[0])) {
+		priv->phy_rst[0] = devm_reset_control_get(&pdev->dev, phy_str);
+		if (IS_ERR(priv->phy_rst[0])) {
 			dev_err(&pdev->dev, "fail to get %s prop\n", phy_str);
-			return PTR_ERR(phy_rst[0]);
+			return PTR_ERR(priv->phy_rst[0]);
 		}
 
 		if (of_device_is_compatible(pdev->dev.of_node,
 					    "lantiq,phy-xrx500")) {
-			ret = xrx500_gphy_boot(&pdev->dev, phy_rst, phyids[i],
-					       fw_addr);
+			ret = xrx500_gphy_boot(priv, phyids[i]);
 		} else if (of_device_is_compatible(pdev->dev.of_node,
 						   "intel,phy-prx300")) {
 			/* phy cdb reset */
 			sprintf(phy_str, "phy_cdb%d", phyids[i]);
-			phy_rst[1] = devm_reset_control_get(&pdev->dev,
-							    phy_str);
-			if (IS_ERR(phy_rst[1])) {
+			priv->phy_rst[1] = devm_reset_control_get(&pdev->dev,
+								  phy_str);
+			if (IS_ERR(priv->phy_rst[1])) {
 				dev_err(&pdev->dev, "fail to get %s prop\n",
 					phy_str);
-				return PTR_ERR(phy_rst[1]);
+				return PTR_ERR(priv->phy_rst[1]);
 			}
 
 			/* phy power down */
 			sprintf(phy_str, "phy_pwr_down%d", phyids[i]);
-			phy_rst[2] = devm_reset_control_get(&pdev->dev,
-							    phy_str);
-			if (IS_ERR(phy_rst[2])) {
+			priv->phy_rst[2] = devm_reset_control_get(&pdev->dev,
+								  phy_str);
+			if (IS_ERR(priv->phy_rst[2])) {
 				dev_err(&pdev->dev, "fail to get %s prop\n",
 					phy_str);
-				return PTR_ERR(phy_rst[2]);
+				return PTR_ERR(priv->phy_rst[2]);
 			}
 
-			ret = prx300_gphy_boot(&pdev->dev, phy_rst, phyids[i],
-					       fw_addr, addr);
+			ret = prx300_gphy_boot(priv, phyids[i]);
 		}
 	}
 	if (!ret)
